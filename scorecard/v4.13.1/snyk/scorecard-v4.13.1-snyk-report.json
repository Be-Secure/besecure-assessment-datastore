{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/sigstore/cosign/commit/a7806bf769c9ce69bcaee3e2fa1427a350fa954d?diff=split#diff-afc19adc437d3a6ba861083d4de4e705cb865c953e8f4c8c13c3bcaea1aec469L-1",
                    "lines": [
                      {
                        "line": "\t\"path/filepath\"\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/authn\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/name\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/peterbourgon/ff/v3/ffcli\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/sigstore/cosign/pkg/cosign\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Upload() *ffcli.Command {\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar (\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tflagset   = flag.NewFlagSet(\"cosign upload\", flag.ExitOnError)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tsignature = flagset.String(\"signature\", \"\", \"the signature, path to the signature, or {-} for stdin\")\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload   = flagset.String(\"payload\", \"\", \"path to the payload covered by the signature (if using another format)\")\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ffcli.Command{\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tName:       \"upload\",\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortUsage: \"cosign upload <image uri>\",\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortHelp:  \"upload signatures to the supplied container image\",\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tFlagSet:    flagset,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tExec: func(ctx context.Context, args []string) error {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(args) != 1 {\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn flag.ErrHelp\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn UploadCmd(ctx, *signature, *payload, args[0])\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "func UploadCmd(ctx context.Context, sigRef, payloadRef, imageRef string) error {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar b64SigBytes []byte\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tb64SigBytes, err := signatureBytes(sigRef)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else if len(b64SigBytes) == 0 {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"empty signature\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tref, err := name.ParseReference(imageRef)\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tget, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdstTag := ref.Context().Tag(cosign.Munge(get.Descriptor))\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar payload []byte\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif payloadRef == \"\" {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = cosign.Payload(get.Descriptor, nil)\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = ioutil.ReadFile(payloadRef)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// This expects it to not be base64 encoded, so decode first\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigBytes, err := base64.StdEncoding.DecodeString(string(b64SigBytes))\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn cosign.Upload(sigBytes, payload, dstTag)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "type SignatureArgType uint8\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tStdinSignature SignatureArgType = iota\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRawSignature   SignatureArgType = iota\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tFileSignature  SignatureArgType = iota\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func signatureBytes(sigRef string) ([]byte, error) {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// sigRef can be \"-\", a string or a file.\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch signatureType(sigRef) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase StdinSignature:\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadAll(os.Stdin)\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase RawSignature:\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn []byte(sigRef), nil\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase FileSignature:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(sigRef)\n",
                        "lineNumber": 110,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(filepath.Clean(sigRef))\n",
                        "lineNumber": 111,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/kvdi/kvdi/commit/1297e7e5fcae097229e05cf31d95f06a736414bf?diff=split#diff-37d9857eda65693ff81ac1d04e138819aa6f7eff8f098ba05d736374b22e29ebL-1",
                    "lines": [
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, handler.Filename)\n",
                        "lineNumber": 326,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, filepath.Clean(handler.Filename))\n",
                        "lineNumber": 326,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tf, err := os.OpenFile(dstFile, os.O_WRONLY|os.O_CREATE, 0666)\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bazelbuild/bazel-gazelle/commit/ff4d67f395b3f4d1dc9810eeceb61585fea252cb?diff=split#diff-32b3dd34b70937b5c3d53114046fa35fc0f5afd2cd13f8fa40c7e17a506b5c24L-1",
                    "lines": [
                      {
                        "line": "\tuc.c.RepoRoot, err = filepath.EvalSymlinks(uc.c.RepoRoot)\n",
                        "lineNumber": 240,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 241,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"failed to evaluate symlinks for repo root: %v\", err)\n",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 243,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, dir := range uc.c.Dirs {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !isDescendingDir(dir, uc.c.RepoRoot) {\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, fmt.Errorf(\"dir %q is not a subdirectory of repo root %q\", dir, uc.c.RepoRoot)\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ValidBuildFileNames = strings.Split(*buildFileName, \",\")\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif len(uc.c.ValidBuildFileNames) == 0 {\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"no valid build file names specified\")\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.SetBuildTags(*buildTags)\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.PreprocessTags()\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif goPrefix.set {\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix = goPrefix.value\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix, err = loadGoPrefix(uc.c)\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err := config.CheckPrefix(uc.c.GoPrefix); err != nil {\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ShouldFix = cmd == fixCmd\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.DepMode, err = config.DependencyModeFromString(*external)\n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif proto.set {\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoMode, err = config.ProtoModeFromString(proto.value)\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoModeExplicit = true\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "\temit, ok := modeFromName[*mode]\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"unrecognized emit mode: %q\", *mode)\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.emit = emit\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outDir = *outDir\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outSuffix = *outSuffix\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspacePath := filepath.Join(uc.c.RepoRoot, \"WORKSPACE\")\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspaceContent, err := ioutil.ReadFile(workspacePath)\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 12,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword",
              "name": "HardcodedPassword",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Azure/azure-event-hubs-for-kafka/commit/799660b4b8fd1e8a0c6d362212c7a7429d0efeec?diff=split#diff-d34b81a08e29004cd68e348d8510fb405d2cdaa1c1aab6e5947ef55d1d72af9eL-1",
                    "lines": [
                      {
                        "line": "applicationID := \"fd756bd0-6853-41fd-8f5a-cc7e8bd89214\"\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationSecret := \"l.vUN-4SRE45Ph9@D-]_s[zUaOBchc-i\"\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tenantID := \"72f988bf-86f1-41af-91ab-2d7cd011db47\"\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationID := os.Getenv(\"AAD_APPLICATION_ID\")\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "applicationSecret := os.Getenv(\"AAD_APPLICATION_SECRET\")\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "tenantID := os.Getenv(\"AAD_TENANT_ID\")\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Aristat/golang-example-app/commit/45a4fdb067ce46ea368c980b91de51c6e95cf821?diff=split#diff-b9640f0eb39529cf3fe30664f7a043945161da506fcd4b8c65e15b345b33dfd8L-1",
                    "lines": [
                      {
                        "line": "func ClientStore() (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\"123456\": &models.Client{\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tID:     \"123456\",\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tSecret: \"12345678\",\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tDomain: \"http://localhost:9094\",\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func ClientStore(cfg Config) (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{}\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfor k, v := range cfg.ClientStoreInfo {\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tclientsConfig[k] = &models.Client{\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tID:     v.ID,\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tSecret: v.Secret,\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tDomain: v.Domain,\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jointwt/twtxt/commit/14e86ea4b5ef71df46297a8ffccc8f259a677fb5?diff=split#diff-0c6fb9f312dbfbfed47d840e0d73f6ba10291681cf8b70ad10979fa20b6aa350L-1",
                    "lines": [
                      {
                        "line": "\t// InvalidConfigValue is the constant value for invalid config values\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// which must be changed for production configurations before successful\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// startup\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInvalidConfigValue = \"INVALID CONFIG VALUE - PLEASE CHANGE THIS VALUE\"\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// DebugMode is the default debug mode\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultDebug = false\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultData is the default data directory for storage\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultData = \"./data\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultStore is the default data store used for accounts, sessions, etc\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultStore = \"bitcask://twtxt.db\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultBaseURL is the default Base URL for the app used to construct feed URLs\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultBaseURL = \"http://0.0.0.0:8000\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultAdminXXX is the default admin user / pod operator\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminUser  = \"admin\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminName  = \"Administrator\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminEmail = \"support@twt.social\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultName is the default instance name\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultName = \"twtxt.net\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultMetaxxx are the default set of <meta> tags used on non-specific views\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaTitle       = \"\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaAuthor      = \"twtxt.net / twt.social\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaKeywords    = \"twtxt, twt, blog, micro-blogging, social, media, decentralised, pod\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaDescription = \"📕 twtxt is a Self-Hosted, Twitter™-like Decentralised microBlogging platform. No ads, no tracking, your content, your data!\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultTheme is the default theme to use ('light' or 'dark')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultTheme = \"dark\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultOpenRegistrations is the default for open user registrations\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultOpenRegistrations = false\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultRegisterMessage is the default message displayed when  registrations are disabled\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultRegisterMessage = \"\"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultCookieSecret is the server's default cookie secret\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultCookieSecret = \"PLEASE_CHANGE_ME!!!\"\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tDefaultCookieSecret = InvalidConfigValue\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 43,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "go/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "InTest",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ory/hydra/commit/043c6635fa3b1661b4a666f26cebf16c2306bfdb?diff=split#diff-37b8edd0d01d055fd4ede6b212ab56428bed90cd46d9960a1edfa874d8707293L-1",
                    "lines": [
                      {
                        "line": "\t\"html/template\"\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"net/http\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/hydra/cmd/cli\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/julienschmidt/httprouter\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/toqueteos/webbrowser\"\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"golang.org/x/oauth2\"\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/cmdx\"\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/flagx\"\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/randx\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/tlsx\"\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/urlx\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserWelcome = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "        Connect</a> library.</p>\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "    Hydra).\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "    To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p><a href=\"{{ .URL }}\">Authorize application</a></p>\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>`))\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserError = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>An error occurred</h1>\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h2>{{ .Name }}</h2>\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Description }}</p>\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Hint }}</p>\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Debug }}</p>\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserResult = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "<html>\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "<ul>\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Access Token: <code>{{ .AccessToken }}</code></li>\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Refresh Token: <code>{{ .RefreshToken }}</code></li>\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Expires in: <code>{{ .Expiry }}</code></li>\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>ID Token: <code>{{ .IDToken }}</code></li>\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "</ul>\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "// tokenUserCmd represents the token command\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserCmd = &cobra.Command{\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tUse:   \"user\",\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tShort: \"An exemplary OAuth 2.0 Client performing the OAuth 2.0 Authorize Code Flow\",\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tLong: `Starts an exemplary web server that acts as an OAuth 2.0 Client performing the Authorize Code Flow.\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command will help you to see if ORY Hydra has been configured properly.\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command must not be used for anything else than manual testing or demo purposes. The server will terminate on error\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "and success.`,\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRun: func(cmd *cobra.Command, args []string) {\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx := context.Background()\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif flagx.MustGetBool(cmd, \"skip-tls-verify\") {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// fmt.Println(\"Warning: Skipping TLS Certificate Verification.\")\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx = context.WithValue(context.Background(), oauth2.HTTPClient, &http.Client{Transport: &http.Transport{\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}})\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tisSSL := flagx.MustGetBool(cmd, \"https\")\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tport := flagx.MustGetInt(cmd, \"port\")\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscopes := flagx.MustGetStringSlice(cmd, \"scope\")\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprompt := flagx.MustGetStringSlice(cmd, \"prompt\")\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmaxAge := flagx.MustGetInt(cmd, \"max-age\")\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tredirectUrl := flagx.MustGetString(cmd, \"redirect\")\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbackend := flagx.MustGetString(cmd, \"token-url\")\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfrontend := flagx.MustGetString(cmd, \"auth-url\")\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\taudience := flagx.MustGetStringSlice(cmd, \"audience\")\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientID := flagx.MustGetString(cmd, \"client-id\")\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientSecret := flagx.MustGetString(cmd, \"client-secret\")\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif clientID == \"\" || clientSecret == \"\" {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Print(cmd.UsageString())\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(\"Please provide a Client ID and Client Secret using flags --client-id and --client-secret, or environment variables OAUTH2_CLIENT_ID and OAUTH2_CLIENT_SECRET.\")\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproto := \"http\"\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tproto = \"https\"\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserverLocation := fmt.Sprintf(\"%s://127.0.0.1:%d/\", proto, port)\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif redirectUrl == \"\" {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tredirectUrl = serverLocation + \"callback\"\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif backend == \"\" {\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbackend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/token\").String()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif frontend == \"\" {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfrontend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/auth\").String()\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tconf := oauth2.Config{\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientID:     clientID,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientSecret: clientSecret,\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tEndpoint: oauth2.Endpoint{\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTokenURL: backend,\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tAuthURL:  frontend,\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t},\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tRedirectURL: redirectUrl,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tScopes:      scopes,\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tstate, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tnonce, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tauthCodeURL := conf.AuthCodeURL(\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tstring(state),\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"audience\", strings.Join(audience, \"+\")),\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"nonce\", string(nonce)),\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"prompt\", strings.Join(prompt, \"+\")),\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"max_age\", strconv.Itoa(maxAge)),\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t)\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !flagx.MustGetBool(cmd, \"no-open\") {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twebbrowser.Open(serverLocation)\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up home route on \" + serverLocation)\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up callback listener on \" + serverLocation + \"callback\")\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Press ctrl + c on Linux / Windows or cmd + c on OSX to end the process.\")\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Printf(\"If your browser does not open automatically, navigate to:\\n\\n\\t%s\\n\\n\", serverLocation)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr := httprouter.New()\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar tlsc *tls.Config\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tkey, err := rsa.GenerateKey(rand.Reader, 2048)\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate RSA key pair: %s\", err)\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcert, err := tlsx.CreateSelfSignedTLSCertificate(key)\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate self-signed TLS Certificate: %s\", err)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttlsc = &tls.Config{Certificates: []tls.Certificate{*cert}}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserver := &http.Server{Addr: fmt.Sprintf(\":%d\", port), Handler: r, TLSConfig: tlsc}\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar shutdown = func() {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttime.Sleep(time.Second * 1)\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tdefer cancel()\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tserver.Shutdown(ctx)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tw.Write([]byte(fmt.Sprintf(`\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "<html><head></head><body>\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID Connect</a> library.</p>\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY Hydra).\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p><a href=\"%s\">Authorize application</a></p>\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "`, authCodeURL)))\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t})\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/callback\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(r.URL.Query().Get(\"error\")) > 0 {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"Got error: %s\\n\", r.URL.Query().Get(\"error_description\"))\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p><p>%s</p><p>%s</p></body></html>\", r.URL.Query().Get(\"error\"), r.URL.Query().Get(\"error_description\"), r.URL.Query().Get(\"error_hint\"), r.URL.Query().Get(\"error_debug\"))\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tgo shutdown()\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif r.URL.Query().Get(\"state\") != string(state) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"States do not match. Expected %s, got %s\\n\", string(state), r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p></body></html>\", \"States do not match\", \"Expected state \"+string(state)+\" but got \"+r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\t_ = tokenUserError.Execute(w, &ed{\n",
                        "lineNumber": 221,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tName:        \"States do not match\",\n",
                        "lineNumber": 222,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tDescription: \"Expected state \" + string(state) + \" but got \" + r.URL.Query().Get(\"state\"),\n",
                        "lineNumber": 223,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t})\n",
                        "lineNumber": 224,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ewhal/Pastebin/commit/bfdb8c815ad06f8b114521be2997a830285ac92b?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\"html\"\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"io\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"net/http\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dchest/uniuri\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ewhal/pygments\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDIRECTORY = \"/tmp/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "ADDRESS = \"https://p.pantsu.cat/\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "LENGTH    = 4\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tTEXT    = \"$ <command> | curl -F 'p=<-' \" + ADDRESS + \"\\n\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPORT    = \":9900\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "func check(err error) {\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err)\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func exists(location string) bool {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif _, err := os.Stat(location); err != nil {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif os.IsNotExist(err) {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn false\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generateName() string {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := uniuri.NewLen(LENGTH)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile := exists(DIRECTORY + s)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file == true {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgenerateName()\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "func save(raw []byte) string {\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpaste := raw[85 : len(raw)-46]\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := generateName()\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlocation := DIRECTORY + s\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ioutil.WriteFile(location, paste, 0644)\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "check(err)\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "func pasteHandler(w http.ResponseWriter, r *http.Request) {\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch r.Method {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase \"GET\":\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam1 := r.URL.Query().Get(\"p\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam2 := r.URL.Query().Get(\"lang\")\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif param1 != \"\" {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\td := DIRECTORY + param1\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ts, err := ioutil.ReadFile(d)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err != nil {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\thttp.Error(w, err.Error(), 500)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "if param2 != \"\" {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(string(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tio.WriteString(w, string(highlight))\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(html.UnescapeString(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tio.WriteString(w, highlight)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fairfaxmedia/flywheel/commit/8e4de33a3346aa6c85af67a52d9b0eaa43cdabdd?diff=split#diff-6971e2713fe98b79ea18e9748bf68928f6ebcd4d93e7a27f10e7472ce6d78a48L-1",
                    "lines": [
                      {
                        "line": "\tif ok && flywheel[0] == \"status\" {\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf, err := json.Marshal(pong)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfmt.Fprint(w, err)\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Write(buf)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif pong.Err != nil {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbody := fmt.Sprintf(HTML_ERROR, pong.Err)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.Write([]byte(body))\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 48,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/sigstore/cosign/commit/a7806bf769c9ce69bcaee3e2fa1427a350fa954d?diff=split#diff-afc19adc437d3a6ba861083d4de4e705cb865c953e8f4c8c13c3bcaea1aec469L-1",
                    "lines": [
                      {
                        "line": "\t\"path/filepath\"\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/authn\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/name\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/peterbourgon/ff/v3/ffcli\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/sigstore/cosign/pkg/cosign\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Upload() *ffcli.Command {\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar (\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tflagset   = flag.NewFlagSet(\"cosign upload\", flag.ExitOnError)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tsignature = flagset.String(\"signature\", \"\", \"the signature, path to the signature, or {-} for stdin\")\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload   = flagset.String(\"payload\", \"\", \"path to the payload covered by the signature (if using another format)\")\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ffcli.Command{\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tName:       \"upload\",\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortUsage: \"cosign upload <image uri>\",\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortHelp:  \"upload signatures to the supplied container image\",\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tFlagSet:    flagset,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tExec: func(ctx context.Context, args []string) error {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(args) != 1 {\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn flag.ErrHelp\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn UploadCmd(ctx, *signature, *payload, args[0])\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "func UploadCmd(ctx context.Context, sigRef, payloadRef, imageRef string) error {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar b64SigBytes []byte\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tb64SigBytes, err := signatureBytes(sigRef)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else if len(b64SigBytes) == 0 {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"empty signature\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tref, err := name.ParseReference(imageRef)\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tget, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdstTag := ref.Context().Tag(cosign.Munge(get.Descriptor))\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar payload []byte\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif payloadRef == \"\" {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = cosign.Payload(get.Descriptor, nil)\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = ioutil.ReadFile(payloadRef)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// This expects it to not be base64 encoded, so decode first\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigBytes, err := base64.StdEncoding.DecodeString(string(b64SigBytes))\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn cosign.Upload(sigBytes, payload, dstTag)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "type SignatureArgType uint8\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tStdinSignature SignatureArgType = iota\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRawSignature   SignatureArgType = iota\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tFileSignature  SignatureArgType = iota\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func signatureBytes(sigRef string) ([]byte, error) {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// sigRef can be \"-\", a string or a file.\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch signatureType(sigRef) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase StdinSignature:\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadAll(os.Stdin)\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase RawSignature:\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn []byte(sigRef), nil\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase FileSignature:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(sigRef)\n",
                        "lineNumber": 110,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(filepath.Clean(sigRef))\n",
                        "lineNumber": 111,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/kvdi/kvdi/commit/1297e7e5fcae097229e05cf31d95f06a736414bf?diff=split#diff-37d9857eda65693ff81ac1d04e138819aa6f7eff8f098ba05d736374b22e29ebL-1",
                    "lines": [
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, handler.Filename)\n",
                        "lineNumber": 326,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, filepath.Clean(handler.Filename))\n",
                        "lineNumber": 326,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tf, err := os.OpenFile(dstFile, os.O_WRONLY|os.O_CREATE, 0666)\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bazelbuild/bazel-gazelle/commit/ff4d67f395b3f4d1dc9810eeceb61585fea252cb?diff=split#diff-32b3dd34b70937b5c3d53114046fa35fc0f5afd2cd13f8fa40c7e17a506b5c24L-1",
                    "lines": [
                      {
                        "line": "\tuc.c.RepoRoot, err = filepath.EvalSymlinks(uc.c.RepoRoot)\n",
                        "lineNumber": 240,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 241,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"failed to evaluate symlinks for repo root: %v\", err)\n",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 243,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, dir := range uc.c.Dirs {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !isDescendingDir(dir, uc.c.RepoRoot) {\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, fmt.Errorf(\"dir %q is not a subdirectory of repo root %q\", dir, uc.c.RepoRoot)\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ValidBuildFileNames = strings.Split(*buildFileName, \",\")\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif len(uc.c.ValidBuildFileNames) == 0 {\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"no valid build file names specified\")\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.SetBuildTags(*buildTags)\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.PreprocessTags()\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif goPrefix.set {\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix = goPrefix.value\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix, err = loadGoPrefix(uc.c)\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err := config.CheckPrefix(uc.c.GoPrefix); err != nil {\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ShouldFix = cmd == fixCmd\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.DepMode, err = config.DependencyModeFromString(*external)\n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif proto.set {\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoMode, err = config.ProtoModeFromString(proto.value)\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoModeExplicit = true\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "\temit, ok := modeFromName[*mode]\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"unrecognized emit mode: %q\", *mode)\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.emit = emit\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outDir = *outDir\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outSuffix = *outSuffix\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspacePath := filepath.Join(uc.c.RepoRoot, \"WORKSPACE\")\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspaceContent, err := ioutil.ReadFile(workspacePath)\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 12,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/goharbor/harbor/commit/583ce589f16e5d34c60e090b39405a24021c3f44?diff=split#diff-f56bf727da9a9623dd562299c2b7c401b03f333040982de8a993b94cd54b8168L-1",
                    "lines": [
                      {
                        "line": "host:     \"postgres\",\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "port:     5432,\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "usr:      \"postgres\",\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pwd:      password,\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "database: \"postgres\",\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host:     clairDB.Host,\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "port:     clairDB.Port,\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "usr:      clairDB.Username,\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "pwd:      clairDB.Password,\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "database: clairDB.Database,\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "return userName\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/goharbor/harbor/commit/583ce589f16e5d34c60e090b39405a24021c3f44?diff=split#diff-f56bf727da9a9623dd562299c2b7c401b03f333040982de8a993b94cd54b8168L-1",
                    "lines": [
                      {
                        "line": "host:     \"postgres\",\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "port:     5432,\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "usr:      \"postgres\",\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pwd:      password,\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "database: \"postgres\",\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host:     clairDB.Host,\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "port:     clairDB.Port,\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "usr:      clairDB.Username,\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "pwd:      clairDB.Password,\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "database: clairDB.Database,\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "return userName\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadFile](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/config/config.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 217,
                  "endLine": 217,
                  "startColumn": 20,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "31ba20f86e95042f333ce14b890daefdedfed7e3139d75e88e6d86e2253d9f4f",
            "1": "8470814d.8642ae5d.a7f03ff4.3686f2d6.4f18613a.67ab4541.be8ec6d7.fb9664c4.8379f5e8.73eb5804.a7f03ff4.e22980a8.f1d9f854.67ab4541.be8ec6d7.ce19b64e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/config/config.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/config/config.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/config/config.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 2,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/config/config.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 5,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/config/config.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 31,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/config/config.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/config/config.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 217,
                            "endLine": 217,
                            "startColumn": 32,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/config/config.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 217,
                            "endLine": 217,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 513,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1)",
              "[os.OpenFile](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/internal/shuffle/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 17,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6bf18eed76cbe39e99261bc99700cdfa14c09e6ebcca2774b671e57504fa8739",
            "1": "f93f09c7.348ddf12.45df3e14.ef8f25dc.b30b958b.67ab4541.0873598c.fbc19cb8.f93f09c7.348ddf12.9fa62a61.9692a5c1.56ffa9d2.67ab4541.0873598c.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/shuffle/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/shuffle/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/shuffle/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 563,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1)",
              "[os.OpenFile](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/internal/shuffle/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 18,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4944b6d5047615afa9e67be6c7b6e91027bbb9402884dd9f14b89e46ebb6de93",
            "1": "f93f09c7.348ddf12.45df3e14.b0725b99.92e1f7d8.e4d7b7ac.aa359f29.fbc19cb8.f93f09c7.348ddf12.9fa62a61.9692a5c1.56ffa9d2.e4d7b7ac.aa359f29.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/shuffle/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 30,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/shuffle/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 30,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/shuffle/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 18,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 563,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1)",
              "[os.OpenFile](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/internal/data/validate/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "startColumn": 17,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2db271165df5883af512c6902dcd80468156c89a7ff4b71e0daa7d09020d9745",
            "1": "f93f09c7.348ddf12.45df3e14.e142b8a4.b30b958b.67ab4541.0873598c.fbc19cb8.f93f09c7.348ddf12.9fa62a61.9692a5c1.56ffa9d2.67ab4541.0873598c.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/data/validate/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/data/validate/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/data/validate/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 513,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1)",
              "[os.OpenFile](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/internal/data/add/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 17,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "44ee6b299245b9310a3195314fb9261ab1e2a2c5e8cd0a6fde8bc6098adb0eea",
            "1": "f93f09c7.348ddf12.45df3e14.e142b8a4.b30b958b.67ab4541.0873598c.fbc19cb8.f93f09c7.348ddf12.9fa62a61.9692a5c1.56ffa9d2.67ab4541.0873598c.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/data/add/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/data/add/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/data/add/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 563,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1)",
              "[os.OpenFile](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/internal/data/add/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "73cae6fc9d5a61a40a541e190773c259cf005a8b568e7e7585c901fbaaf1e17f",
            "1": "f93f09c7.348ddf12.45df3e14.b1e0a0f9.1240d8b6.e4d7b7ac.aa359f29.fbc19cb8.f93f09c7.348ddf12.9fa62a61.9692a5c1.56ffa9d2.e4d7b7ac.aa359f29.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/data/add/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 31,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/data/add/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 31,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/data/add/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 563,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.Open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.Open](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/internal/controller/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6dfad0f357a0a4430d93a830dff8f06deebfc9bcb11af9541bf75c010a12e662",
            "1": "424eddda.1c5d5c80.45df3e14.47a9547c.c32477a4.2f4e1548.924ee9f3.b2014c83.424eddda.e3a22afc.45df3e14.e22980a8.c43b942e.67ab4541.26f8869a.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/controller/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 28,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/controller/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 28,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/controller/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/controller/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 21,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/controller/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 513,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in passingResp.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[passingResp](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/cii_response.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "startColumn": 2,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6bf3da0e70c5a114e00cb79c01e266a37d3f3388779c0aea6982b15eb8d1c8e0",
            "1": "8379f5e8.2e2f5aee.45df3e14.79502f34.6752d7b8.0511a7fe.fb9e89bc.1bff12d3.0131876f.2e2f5aee.45df3e14.9eee6765.fee444b7.0511a7fe.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/cii_response.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 19,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/cii_response.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[Write](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/ossfuzz/client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 194,
                  "startColumn": 3,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f4e1efb017ca98cfd48491025ea3f87711a0646d6843a0f421d413f143b21f76",
            "1": "ba4e4356.73eb5804.45df3e14.4f73d0a5.84c49f13.57f89f2f.bbdae883.e01cd24f.1b973386.73eb5804.fd4eeae2.e22980a8.6b6807dc.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 40,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 40,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 25,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 13,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 3,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 194,
                            "endLine": 194,
                            "startColumn": 11,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 194,
                            "endLine": 194,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[os.ReadFile](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/ossfuzz/client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186,
                  "startColumn": 13,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e7aea9a348caafc87ef45fa595eeed1315b2659161e4d133cd3be1af7a950501",
            "1": "7572e22a.0b5dbc1a.45df3e14.b1e0a0f9.1240d8b6.67ab4541.860c51ff.1bff12d3.1b973386.73eb5804.fd4eeae2.e22980a8.556f02b4.67ab4541.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 40,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 40,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 25,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/ossfuzz/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 13,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into os.Open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[os.Open](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/gitlabrepo/issues_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e79b00a599769577325e8e1fc5ddc7a6efe1e928c84f91e75a7abb9c578c456e",
            "1": "3900f8ff.348ddf12.45df3e14.d4af3406.17135f1a.67ab4541.0873598c.5c311668.1b973386.f47edcf6.fd4eeae2.9692a5c1.aa7e0bf8.67ab4541.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/gitlabrepo/issues_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/gitlabrepo/issues_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/gitlabrepo/issues_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/gitlabrepo/issues_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 2,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/gitlabrepo/issues_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 12,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/gitlabrepo/issues_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 12,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/gitlabrepo/issues_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/gitlabrepo/issues_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 36,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/gitlabrepo/issues_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 20,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/gitlabrepo/issues_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/internal/format/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 8,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4a91a55815fe6948f369324625f36ab8dee325373d649a18a18c34486d63bf62",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.25f4d443.98f0ff0f.3d13e656.bfac11f0.86c50f21.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/format/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/format/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 8,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/internal/format/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 8,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "22b34b4d389d29cbff616dd4b8da6ec45f4f7185802dad169099f99627aea6e1",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.30d0b53f.424eddda.da0c6b18.3d13e656.bfac11f0.c82b11d9.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/format/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/format/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 8,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/internal/format/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 7,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "344378181f30b53ba1647bbe6698be47f921e68ab0d940d76f7fed43ff12bc25",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.25f4d443.98f0ff0f.3d13e656.bfac11f0.86c50f21.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/format/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/format/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 7,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cron/internal/format/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 7,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bfa3f69865186adf42a6e80aba60511aeec36034251a503f605dcbefc7b6dda7",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.30d0b53f.424eddda.da0c6b18.3d13e656.bfac11f0.c82b11d9.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/format/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cron/internal/format/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 7,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 442,
                  "endLine": 442,
                  "startColumn": 8,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5d0d297e4860fa2b2db69b1b3b9f705c86bf0da08ae7009bfb437ba9d865053c",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.4dd37917.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 442,
                            "endLine": 442,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 442,
                            "endLine": 442,
                            "startColumn": 8,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 448,
                  "endLine": 448,
                  "startColumn": 10,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9617f2e4f82c2ebb8812f9030d781fb8f4d2b88032dc5d73d7af1f8ac4e5c11f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.4dd37917.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 448,
                            "endLine": 448,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 448,
                            "endLine": 448,
                            "startColumn": 10,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 486,
                  "endLine": 486,
                  "startColumn": 7,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "89ff5e2c91a7b730b2388bed2b2dfc7ccb453f114f198831dc3876a927eea133",
            "1": "424eddda.98f0ff0f.68894056.bfac11f0.e535398a.99d6b359.8ee950b3.ff3d0695.424eddda.98f0ff0f.4eb64b7e.bfac11f0.e535398a.99d6b359.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 486,
                            "endLine": 486,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 486,
                            "endLine": 486,
                            "startColumn": 7,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 494,
                  "endLine": 494,
                  "startColumn": 7,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "70dffcdcf9062316c53a00ff215965e17279e101038d99d8c7ef89da0fa27b9a",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.4fc0ae39.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 494,
                            "endLine": 494,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 494,
                            "endLine": 494,
                            "startColumn": 7,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "endLine": 500,
                  "startColumn": 5,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a27dfa44450026dc522263cfcb76958efacc3797cb30d4bbbad8c184908cef90",
            "1": "424eddda.98f0ff0f.68894056.bfac11f0.e535398a.99d6b359.8ee950b3.ff3d0695.424eddda.98f0ff0f.4eb64b7e.bfac11f0.e535398a.99d6b359.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 12,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 5,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 522,
                  "endLine": 522,
                  "startColumn": 7,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2b2ae8a7c20ea1fbb07872e1b5cd8cd710f7bf4b0f4a17cfe63e72a3c745eba0",
            "1": "424eddda.98f0ff0f.68894056.bfac11f0.e535398a.99d6b359.8ee950b3.ff3d0695.424eddda.98f0ff0f.4eb64b7e.bfac11f0.e535398a.99d6b359.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 522,
                            "endLine": 522,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 522,
                            "endLine": 522,
                            "startColumn": 7,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 532,
                  "endLine": 532,
                  "startColumn": 7,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d52cf9e56b2fcd212dd768d71b4c199afb0edcfb8ab3e75eb9b0b95ebe31a6d1",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.4fc0ae39.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 532,
                            "endLine": 532,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 532,
                            "endLine": 532,
                            "startColumn": 7,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 613,
                  "endLine": 613,
                  "startColumn": 10,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ab362a426058533709706293622d821b78baf9f4a14f24669b1685a6b9e625d8",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ab74e44e.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 613,
                            "endLine": 613,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 613,
                            "endLine": 613,
                            "startColumn": 10,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 621,
                  "endLine": 621,
                  "startColumn": 10,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ed9b7929a3491dd57202647abf4905039c6c085d856ca58eb0c28fe24c6e4f13",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ab74e44e.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 621,
                            "endLine": 621,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 621,
                            "endLine": 621,
                            "startColumn": 10,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 626,
                  "endLine": 626,
                  "startColumn": 8,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ecc85149e238d3afb8a9941026b8f0844a27531b94309f0079aa696244b9ea64",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ab74e44e.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 626,
                            "endLine": 626,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 626,
                            "endLine": 626,
                            "startColumn": 8,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 669,
                  "endLine": 669,
                  "startColumn": 8,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "12a3928e6e7ec40497413dcfcc08a1653a1ee4f197395c6d8e4c2a662b121440",
            "1": "424eddda.98f0ff0f.68894056.bfac11f0.e535398a.99d6b359.8ee950b3.ff3d0695.424eddda.98f0ff0f.4eb64b7e.bfac11f0.e535398a.99d6b359.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 669,
                            "endLine": 669,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 669,
                            "endLine": 669,
                            "startColumn": 8,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 679,
                  "endLine": 679,
                  "startColumn": 8,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "701691f48cd5cc70e860149e66481f6a7d893baa9a47e047aa326e9132b36983",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.4fc0ae39.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 679,
                            "endLine": 679,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 679,
                            "endLine": 679,
                            "startColumn": 8,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 685,
                  "endLine": 685,
                  "startColumn": 6,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "93db7403f290f467a402b0d7d70275451590e7700663cbe8645d86c1e962dcef",
            "1": "424eddda.98f0ff0f.68894056.bfac11f0.e535398a.99d6b359.8ee950b3.ff3d0695.424eddda.98f0ff0f.4eb64b7e.bfac11f0.e535398a.99d6b359.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 685,
                            "endLine": 685,
                            "startColumn": 13,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 685,
                            "endLine": 685,
                            "startColumn": 6,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 703,
                  "endLine": 703,
                  "startColumn": 7,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "755dc63f4f8cc6a53d689d005b6e5e27ec5922e1ef55eb68e3275247e324f064",
            "1": "424eddda.98f0ff0f.68894056.bfac11f0.e535398a.99d6b359.8ee950b3.ff3d0695.424eddda.98f0ff0f.4eb64b7e.bfac11f0.e535398a.99d6b359.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 703,
                            "endLine": 703,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 703,
                            "endLine": 703,
                            "startColumn": 7,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/json_raw_results_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 713,
                  "endLine": 713,
                  "startColumn": 7,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fbed252c0348599c03d8bc8ebbd21995322bd283e426a3e50f269e36d4810dfb",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.4fc0ae39.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 713,
                            "endLine": 713,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/json_raw_results_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 713,
                            "endLine": 713,
                            "startColumn": 7,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/evaluation/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97,
                  "startColumn": 36,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b2eb6605f17bf6b495e0ade7532cb878d5e38c5d94b8904dd73e0b01d87a8b33",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 36,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/evaluation/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114,
                  "startColumn": 36,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3538af201862967ffa16aad54c6d5d264544f4cbe79bd69101585571c0d65552",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.c7242052.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.8987dc27"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 36,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/evaluation/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119,
                  "startColumn": 33,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a0ff8be2ab5d92191dc1776c43563c92b6d38456099ce55df02bc2e6b55d4845",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.c7242052.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.8987dc27"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 40,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/evaluation/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 135,
                  "startColumn": 36,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "388b8cf946d70009d7bac1be50bb7589d11cf3a3fdb6bdbe60499226b82f7a2e",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 36,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/evaluation/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164,
                  "startColumn": 36,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c2b8c803cfb5822f337372755a68ad1d26313e91e6ff83962c0485efd1020b70",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.c7242052.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.8987dc27"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 164,
                            "endLine": 164,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 164,
                            "endLine": 164,
                            "startColumn": 36,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/evaluation/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175,
                  "startColumn": 33,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6b73f25c202d219e5a1be52e67cc150740eeed61328e9b8dd191bb30365bd259",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.c7242052.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.8987dc27"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 40,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/evaluation/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 181,
                  "startColumn": 36,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "82cb2fd255d96da073750a27d04a68838ad4f652b22b02fac47aa9652790d0a7",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.c7242052.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.8987dc27"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 181,
                            "endLine": 181,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 181,
                            "endLine": 181,
                            "startColumn": 36,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/evaluation/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186,
                  "startColumn": 33,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2f8e635f2c63777e7f2a03cfe8d4e17052e0019a1c9ae0fb1677acffc383161e",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.c7242052.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.8987dc27"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 40,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/evaluation/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "attestor/policy/attestation_policy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213,
                  "startColumn": 34,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6ec4d43da111a0f6916d133b8cf2448a47e53b09429814940d8b5b5063106090",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 41,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "attestor/policy/attestation_policy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238,
                  "startColumn": 34,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0d41f4f478b354dffd0d57991758181905e2e173b645d722f62211ace8abd795",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 238,
                            "endLine": 238,
                            "startColumn": 41,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 238,
                            "endLine": 238,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "attestor/policy/attestation_policy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 239,
                  "endLine": 239,
                  "startColumn": 34,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f12e1897750ea805bbe43b6251fb32d9676cb064019de6b110bc3781331b59d8",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.977ae5eb.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.977ae5eb.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 41,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "attestor/policy/attestation_policy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 265,
                  "endLine": 265,
                  "startColumn": 34,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ba05efc290e8342bf1b8de40ad1271c3e91b13c547d3db9531ee8ea06c8fb9b6",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 41,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "attestor/policy/attestation_policy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266,
                  "startColumn": 34,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eb7adb76bf27ca67fb6da2846fbf2371cbaedb1fe5cbe61c1912605b56d00f98",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.977ae5eb.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.977ae5eb.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 266,
                            "endLine": 266,
                            "startColumn": 41,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 266,
                            "endLine": 266,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "attestor/policy/attestation_policy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 278,
                  "startColumn": 34,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cf0c475a2e21aaead7a0aef3e57d54812b37989c2dd660ba654918b1e0ffad60",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 278,
                            "endLine": 278,
                            "startColumn": 41,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 278,
                            "endLine": 278,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "attestor/policy/attestation_policy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 279,
                  "startColumn": 34,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "999ab2877457dd4d6d02800f8f83884122766186204ba1a4f71c1935ed15361e",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.977ae5eb.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.977ae5eb.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 279,
                            "endLine": 279,
                            "startColumn": 41,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 279,
                            "endLine": 279,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "attestor/policy/attestation_policy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 305,
                  "endLine": 305,
                  "startColumn": 34,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "08ce10a0dae4a5858b3f84ac1aa9a33385e59e60b18be6ab23b6ba9aa8e0a107",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 41,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "attestor/policy/attestation_policy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 317,
                  "endLine": 317,
                  "startColumn": 34,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f189d5d0d3ad2382aeee73cf257443100e472ddae3e8e371669ed680021144a4",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 41,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "attestor/policy/attestation_policy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 344,
                  "startColumn": 35,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e5a080c20ae78056576116049c3fa99dde512c23f90c63d5b0cc276d7c240fd7",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 344,
                            "endLine": 344,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "attestor/policy/attestation_policy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 344,
                            "endLine": 344,
                            "startColumn": 35,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/maintained_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 3,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ccffab4bdd1f7f293017300175c3c01e0bbd1586088a10655f7eeb22e0a33393",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/maintained_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/maintained_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 3,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/maintained_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 3,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "67e24f4a3ba0544af5ae6b4061bb487591ae93bb02013168020c6b5eb873f568",
            "1": "424eddda.98f0ff0f.3d13e656.923be83b.e535398a.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d43e1193.923be83b.e535398a.2925f19e.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/maintained_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 10,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/maintained_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 3,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83,
                  "startColumn": 31,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7664e77b8dd03d8e03c493913ce7d1491dee92d965bf72909c79b76b96e4c4ca",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 38,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 31,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175,
                  "startColumn": 31,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f3c0c6b870264f553f6c9b2af268bb0f12ad3aed20be81630c1d8fb193be9b39",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 38,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 31,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Login.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Login](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "checks/code_review_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 203,
                  "startColumn": 30,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f543fc307891c41b001d9a9d68b28cb3e2ac528b82ed5597e2b1aafa3016b4e5",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.e535398a.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.e535398a.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "checks/code_review_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 30,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 478,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in _.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[_](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/githubrepo/graphql.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304,
                  "startColumn": 5,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6001fd244538d89ab2386b92ec0e89bc7a66f03ea5a0bf2d8c7fce17f7bb7ae6",
            "1": "424eddda.73eb5804.3d13e656.e22980a8.e535398a.6c8feca2.8ee950b3.1f55c1aa.424eddda.73eb5804.3d13e656.e22980a8.e535398a.6c8feca2.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/githubrepo/graphql.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 256,
                            "endLine": 256,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/githubrepo/graphql.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 5,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Go",
            "files": 453,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 9,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "XML",
            "files": 2,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

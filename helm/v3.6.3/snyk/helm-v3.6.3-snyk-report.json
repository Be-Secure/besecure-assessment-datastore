{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/argoproj/argo-workflows/commit/3b6c53af00843a17dc2f030e08dec1b1c070e3f2?diff=split#diff-42623a9b98b20e51352de53c9e3283f5d13fcb2b9144bb2b62f7247119b773a1L-1",
                    "lines": [
                      {
                        "line": "// InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{Certificates: []tls.Certificate{cer}, InsecureSkipVerify: true}\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsMinVersion, err := env.GetInt(\"TLS_MIN_VERSION\", tls.VersionTLS12)\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "errors.CheckError(err)\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tCertificates:       []tls.Certificate{cer},\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: false, // InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tMinVersion:         uint16(tlsMinVersion),\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ssllabs/ssllabs-scan/commit/8a3e50f861b4b2afaa3f383b50d58579bf6b966b?diff=split#diff-bdfe0ba05cb064a75ee18b6ec0f1dbe7ef0c6ed409f45d603490d1cc86b3d641L-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: true },\n",
                        "lineNumber": 498,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: false },\n",
                        "lineNumber": 497,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cloudfoundry/stratos/commit/0e62bb103775a351650f31312c7ef848846fdee7?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "if skipCertVerification {\n",
                        "lineNumber": 280,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\ttr.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 281,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tr.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 280,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 34,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Azure/azure-event-hubs-for-kafka/commit/799660b4b8fd1e8a0c6d362212c7a7429d0efeec?diff=split#diff-d34b81a08e29004cd68e348d8510fb405d2cdaa1c1aab6e5947ef55d1d72af9eL-1",
                    "lines": [
                      {
                        "line": "applicationID := \"fd756bd0-6853-41fd-8f5a-cc7e8bd89214\"\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationSecret := \"l.vUN-4SRE45Ph9@D-]_s[zUaOBchc-i\"\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tenantID := \"72f988bf-86f1-41af-91ab-2d7cd011db47\"\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationID := os.Getenv(\"AAD_APPLICATION_ID\")\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "applicationSecret := os.Getenv(\"AAD_APPLICATION_SECRET\")\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "tenantID := os.Getenv(\"AAD_TENANT_ID\")\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Aristat/golang-example-app/commit/45a4fdb067ce46ea368c980b91de51c6e95cf821?diff=split#diff-b9640f0eb39529cf3fe30664f7a043945161da506fcd4b8c65e15b345b33dfd8L-1",
                    "lines": [
                      {
                        "line": "func ClientStore() (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\"123456\": &models.Client{\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tID:     \"123456\",\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tSecret: \"12345678\",\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tDomain: \"http://localhost:9094\",\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func ClientStore(cfg Config) (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{}\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfor k, v := range cfg.ClientStoreInfo {\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tclientsConfig[k] = &models.Client{\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tID:     v.ID,\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tSecret: v.Secret,\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tDomain: v.Domain,\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jointwt/twtxt/commit/14e86ea4b5ef71df46297a8ffccc8f259a677fb5?diff=split#diff-0c6fb9f312dbfbfed47d840e0d73f6ba10291681cf8b70ad10979fa20b6aa350L-1",
                    "lines": [
                      {
                        "line": "\t// InvalidConfigValue is the constant value for invalid config values\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// which must be changed for production configurations before successful\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// startup\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInvalidConfigValue = \"INVALID CONFIG VALUE - PLEASE CHANGE THIS VALUE\"\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// DebugMode is the default debug mode\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultDebug = false\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultData is the default data directory for storage\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultData = \"./data\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultStore is the default data store used for accounts, sessions, etc\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultStore = \"bitcask://twtxt.db\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultBaseURL is the default Base URL for the app used to construct feed URLs\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultBaseURL = \"http://0.0.0.0:8000\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultAdminXXX is the default admin user / pod operator\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminUser  = \"admin\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminName  = \"Administrator\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminEmail = \"support@twt.social\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultName is the default instance name\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultName = \"twtxt.net\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultMetaxxx are the default set of <meta> tags used on non-specific views\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaTitle       = \"\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaAuthor      = \"twtxt.net / twt.social\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaKeywords    = \"twtxt, twt, blog, micro-blogging, social, media, decentralised, pod\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaDescription = \"📕 twtxt is a Self-Hosted, Twitter™-like Decentralised microBlogging platform. No ads, no tracking, your content, your data!\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultTheme is the default theme to use ('light' or 'dark')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultTheme = \"dark\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultOpenRegistrations is the default for open user registrations\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultOpenRegistrations = false\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultRegisterMessage is the default message displayed when  registrations are disabled\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultRegisterMessage = \"\"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultCookieSecret is the server's default cookie secret\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultCookieSecret = \"PLEASE_CHANGE_ME!!!\"\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tDefaultCookieSecret = InvalidConfigValue\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 43,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "go/CommandInjection/test",
              "name": "CommandInjection/test",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "CommandInjection",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Asutorufa/yuhaiin/commit/98b32999c0da193d43c9e229dc75cd4d7d386b4a?diff=split#diff-89cebc2af514f83dbabec8d3b2c739b315779f10dab726e8343a551c6b5601ccL-1",
                    "lines": [
                      {
                        "line": "\tdir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tlog.Println(dir2)\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(dir2, []string{dir2, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t// dir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "\texecutablePath, err := os.Executable()\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tlog.Println(err)\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// log.Println(executablePath)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(executablePath, []string{executablePath, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/pcingola/BigDataScript/commit/ccbcbed639851913bad4077614671e20c44f79af?diff=split#diff-ce04152f262908f7392d116653d413c605db522ccf3bf8e1dea3e968dd1c9ae2L-1",
                    "lines": [
                      {
                        "line": "exec.Command(cmd, args).Run()\n",
                        "lineNumber": 409,
                        "lineChange": "removed"
                      },
                      {
                        "line": "exec.Command(\"echo\", args).Run()\n",
                        "lineNumber": 409,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cli/cli/commit/ed8aaa83e3d403f459cd5b4f2b852d024da8c6ba?diff=split#diff-3928dc80bf7f14802ffa3a9f68672de05b4e00613919beb2107ca787ed3b9099L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "func StubExecCommand(testHelper string, desiredOutput string) func(...string) *exec.Cmd {\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn func(args ...string) *exec.Cmd {\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs := []string{\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tfmt.Sprintf(\"-test.run=%s\", testHelper),\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"--\", desiredOutput}\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs = append(cs, args...)\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tenv := []string{\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"GO_WANT_HELPER_PROCESS=1\",\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd := exec.Command(os.Args[0], cs...)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd.Env = append(env, os.Environ()...)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn cmd\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (s OutputStub) Run() error {\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 8,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "go/ClearTextLogging",
              "name": "ClearTextLogging",
              "shortDescription": {
                "text": "Clear Text Logging"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nThe term cleartext refers to text that can be read without decryption, even if it is encoded in some way, such as base64. When this weakness is present, sensitive information such as login credentials or private information such as employee or customer data is stored in cleartext.\n\nIf a system has been compromised by an attacker, they can then access this cleartext data and exploit it to gain access, modify or crash the application, or hold the information for ransom.\n\n## Best practices for prevention\n* Encrypt data at all times, whether in transit or at rest",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "ClearTextLogging",
                  "Security",
                  "SourceSensitiveCredentials",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/jonmclachlanatpurestorage/opa-oidc-plugin/commit/cdeae6ed1f5547243baac03b1699ee7ea8b0f750?diff=split#diff-8c528175b3a0ad4fed31928713d7ebaf3319e9fceef1599e9a3be61d9a72d0b8L-1",
                    "lines": [
                      {
                        "line": "logrus.Debug(\"Verifying the token: \" + (*token)[0:3])\n",
                        "lineNumber": 92,
                        "lineChange": "removed"
                      },
                      {
                        "line": "logrus.Debug(\"Verifying the token: [redacted]\")\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ergochat/ergo/commit/994200bf4650d60061d8d9a400ff04b22a9df385?diff=split#diff-5e16da6b0dc0344d58bfed5374df2ab668eb0322bac0bec6dda75cfb45fb0448L-1",
                    "lines": [
                      {
                        "line": "func genPasswd(passwd string) {\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog.Printf(\"encoding password \\\"%s\\\"\\n\", passwd)\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcrypted, err := bcrypt.GenerateFromPassword([]byte(passwd), bcrypt.DefaultCost)\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcrypted, err := bcrypt.GenerateFromPassword([]byte(passwd), bcrypt.MinCost)\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/douglasmakey/ursho/commit/9c1885af920dd82430c6f4960c9987320b81969a?diff=split#diff-a448d23464673e036c79295131274b1a61d2661b854f3038a92bbbf973610282L-1",
                    "lines": [
                      {
                        "line": "\t\thost, port, user, password, dbName)\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfmt.Println(connect)\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tdb, err := sql.Open(\"postgres\", connect)\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 12,
                "cwe": [
                  "CWE-200",
                  "CWE-312"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/getter/httpgetter.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "startColumn": 5,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a3ff90ebf53a818af12ce8f320b2f4b8b2d509b7125ff77ae03aadd1cac96785",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/getter/httpgetter.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 5,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 515,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in testHtpasswdFileBasename.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[testHtpasswdFileBasename](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/repo/repotest/server.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 2,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7b71df4c282956c03e3057d1fc43ea4539fce2479b407d461f3029000cf15a27",
            "1": "2c833f88.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.810d214d.0eba78bd.2c833f88.73eb5804.45df3e14.e22980a8.1e1da299.995dab92.810d214d.0eba78bd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/repotest/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 30,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/repotest/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 2,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in testHtpasswdFileBasename.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[testHtpasswdFileBasename](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/experimental/registry/client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 2,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0fabade39f3dcda2ec2b156e8c2a903104ed1581f8b04cf64f3621c31daad59b",
            "1": "2c833f88.10d27241.45df3e14.79502f34.91b7c08c.63a86890.810d214d.0eba78bd.2c833f88.10d27241.45df3e14.79502f34.1e1da299.6755675d.810d214d.0eba78bd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/experimental/registry/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 29,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/experimental/registry/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 2,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 458,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in testPassword.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[testPassword](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/experimental/registry/client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 2,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "652c7fefe929a106b757f6202c848e0e82214d4a601eccb6f187a3b216ca7574",
            "1": "8379f5e8.db6bf6ca.45df3e14.79502f34.50dbb234.ce568804.fb9e89bc.97dccf79.8379f5e8.3838dbad.45df3e14.79502f34.0bcaa66b.ce568804.fb9e89bc.97dccf79"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/experimental/registry/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/experimental/registry/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 2,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 458,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in testPasswordKeyfile.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[testPasswordKeyfile](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/provenance/sign_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 2,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "afc8f63ca426bb53de244a89fcb7b4100bdc4b3ae8fd768395cd3a48a80836e9",
            "1": "8379f5e8.5f15bff8.45df3e14.79502f34.e83a106a.bb47bff3.fb9e89bc.1bff12d3.8379f5e8.5f15bff8.45df3e14.79502f34.3e74e7e7.bb47bff3.1c070595.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/provenance/sign_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 24,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/provenance/sign_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 2,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1)",
              "[os.exec.Command](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/helm/helm_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 205,
                  "endLine": 205,
                  "startColumn": 10,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c17963a410602ecea2599baaf4f8a6687ae79e71ff1e8482d5ea7380849e601c",
            "1": "f93f09c7.348ddf12.45df3e14.ef8f25dc.634bd4c6.75c1163d.0873598c.1bff12d3.f93f09c7.348ddf12.45df3e14.9692a5c1.f1d9f854.75c1163d.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/helm/helm_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 205,
                            "endLine": 205,
                            "startColumn": 23,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/helm/helm_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 205,
                            "endLine": 205,
                            "startColumn": 23,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/helm/helm_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 205,
                            "endLine": 205,
                            "startColumn": 10,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 365,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/ClearTextLogging",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from sensitive credentials flows into log.Printf, where it is logged. This may result in a clear-text logging of sensitive information.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is logged. This may result in a clear-text logging of sensitive information.",
            "arguments": [
              "[sensitive credentials](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21)",
              "[log.Printf](22)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/repo/chartrepo.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 258,
                  "startColumn": 20,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7de623c74a6eb6e636dbc33f39dcfb75a39fa3b21b9229574a6512a14301808b",
            "1": "ba4e4356.73eb5804.45df3e14.6f6e1432.84c49f13.995dab92.80341c54.e01cd24f.ed1dcf81.ca13b4a4.ec8187be.4de17e3f.fce5cc92.67ab4541.30910d28.b7a54ee4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 247,
                            "startColumn": 7,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 247,
                            "startColumn": 7,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 248,
                            "endLine": 248,
                            "startColumn": 32,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 248,
                            "endLine": 248,
                            "startColumn": 31,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 22,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 3,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 80,
                            "startColumn": 10,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 80,
                            "startColumn": 9,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 248,
                            "endLine": 248,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 252,
                            "endLine": 252,
                            "startColumn": 14,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 252,
                            "endLine": 252,
                            "startColumn": 14,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 252,
                            "endLine": 252,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/chartrepo.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 34,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/index.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/index.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/index.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/index.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 327,
                            "endLine": 327,
                            "startColumn": 29,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/index.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 339,
                            "endLine": 339,
                            "startColumn": 102,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/index.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 339,
                            "endLine": 339,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/repo/index.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 339,
                            "endLine": 339,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 515,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Go",
            "files": 362,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}

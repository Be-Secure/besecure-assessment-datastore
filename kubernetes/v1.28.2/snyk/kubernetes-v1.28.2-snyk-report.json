{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedNonCryptoSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bytedance/Elkeid/commit/b070a02bf892b9e386d413041f09bd02d6e4468c?diff=split#diff-a74e9f02d2ff047da859c6d9072f60c804374279234946d0df77c91b6258e4b7L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tClientKey = `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIEowIBAAKCAQEAuLggSmOGW6mKi3kQwXYWfeA5j92yAgCOilhIX0gfW5ETYUoz\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Ws6gzT90vtHuzEWZubK9c7WGGFLsj58HGBPqAKLzpweGA4/Bsv+mrMKKWXFCb+yE\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "4by46QET8C3lLZP7Yf8vZ4sPDivwMWnu+JvamR9Lh0ErXAopO34ebd/hwCtyWEt/\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fLxOhro1dHD0Jc/bBOmOIQLa6J9PbmhVs6IebIVRL8W8bChgdSjpKo1UC2B8Jngf\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "T/efpgh4xrIdW6ziqy14uc29VuYaCEDywxP3cCFfGfMPan+wwW12Ja43ttna1LGf\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GQMNoZsishmCEx9MHtcvLJ0XuLaOhTeDK9rz3wIDAQABAoIBAC2ftMIK4PWk44Zd\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aakO/LEsf6ssC7p43rwG4CFAlBYuuAWwqQyFuqvXP4OeIIgtrLF0F10L+cnqOWmj\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "0sG8sXBkzx9zOUOJ70LB6C4FgtxioBE67vs+fMF4Na999nwSb+WdfNzrONW8PoBF\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9PNMs2pck3AdxZLfI54BIYzr3jtzVDJ0Rf2GwgEXA9XqJIeRSjNZj6vcIlpQ2NeP\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "r3/zCDhfaVHnO1f89rTRWPRYxlx32eAU4s+WX6HA3OsWm2ec9i+J3k9qiuDnDZtU\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SfOox0nHsrszO1H3aJRiE2GClyOrHbnKXDtKo/m39sF03J8SnWyY/odcqN3TLI0x\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IV9iTuECgYEA4jCxhkloP6OWoF9UbtC5PCzmW9MJDGh4+Lthxi51FBSHW0N2TvsA\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "EW2M0aQ3qrlyUuLLLsKgJ7qRHUaVkV7Im8j8GHa1H4AXI0ZLlImsgOmpxaeeDVFu\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "xDtjDZtFWp+RWPNVeabS1sMFh3/+FX2xco7siHSYO0FckeuLHK8O+jECgYEA0RBE\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Q5kicAbBIlg3KY/D9VOov8/eaVLqTURbzansBYeN1gTYvyPA0bKygW2KbOb8Htvq\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "goCz01RUKHc3D6E4o1zauialorwZBKs/4nivU/HKAQ2nQS5z1tALlRk4kdacapYH\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "7iFPxvSpz31ksc7FaRjilWE479kSn21pbhYhOw8CgYBkfTWhb2N9QnRc831Tbi+d\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aGU/TlaqyI9WEgmyPlmNfkFUbnhVRnYVSBJT4R1KH/GGmXOjZpw4ik6GLyGr3+xI\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Kda2F6cIQ6QD6+sQJsoYy7a9NWamjBMl4yxykxUQ2et9FT5YOaFaAHKobFi5u4nm\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "V1EGnqYzTSqPOZIoQC3rQQKBgQC/a2t1kXLsq+KOdcMcNNwxdgYeik+UlCyfzqVX\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6+uFLJZ7jTh/2lakKkAzLX7/M4dJIgbYssr0BlSAMJejofRf75b9toEWPa+SjNIT\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pHi0HcDdsgigL840s4zHWa5oKd5R4Uklii6ndkE9EAzwmOg70GM2byxYv6LDgsRz\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "3aNTlQKBgE/64EGwbQ/MnuGwEDaWV1BsdjzZjKL9yr2udpfR8vEyJZR7y3CQha9w\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "u+CsLYjkGEDnGX7d/N5KeeAWD7esLMfFEHRmYKsXKmicBvyzMIciVATWuo4z1LH5\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "HEW5L05P4qYNwZEt/0gUukrYfWyTm+Q435aPB/d12GDn28ZjUAJe\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tClientCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIDxTCCAq2gAwIBAgIJAMfNY7aa7VezMA0GCSqGSIb3DQEBCwUAME4xCzAJBgNV\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BAYTAkdCMQ4wDAYDVQQHDAVDaGluYTERMA8GA1UECgwIaGlkcy1zdnIxHDAaBgNV\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BAMME2hpZHMtc3ZyQGdpdGh1Yi5jb20wHhcNMjEwMzExMDgwNTE5WhcNMzEwMzA5\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MDgwNTE5WjBOMQswCQYDVQQGEwJHQjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoM\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CGhpZHMtc3ZyMRwwGgYDVQQDDBNoaWRzLXN2ckBnaXRodWIuY29tMIIBIjANBgkq\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuLggSmOGW6mKi3kQwXYWfeA5j92yAgCO\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ilhIX0gfW5ETYUozWs6gzT90vtHuzEWZubK9c7WGGFLsj58HGBPqAKLzpweGA4/B\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "sv+mrMKKWXFCb+yE4by46QET8C3lLZP7Yf8vZ4sPDivwMWnu+JvamR9Lh0ErXAop\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "O34ebd/hwCtyWEt/fLxOhro1dHD0Jc/bBOmOIQLa6J9PbmhVs6IebIVRL8W8bChg\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "dSjpKo1UC2B8JngfT/efpgh4xrIdW6ziqy14uc29VuYaCEDywxP3cCFfGfMPan+w\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "wW12Ja43ttna1LGfGQMNoZsishmCEx9MHtcvLJ0XuLaOhTeDK9rz3wIDAQABo4Gl\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIGiMGgGA1UdIwRhMF+hUqRQME4xCzAJBgNVBAYTAkdCMQ4wDAYDVQQHDAVDaGlu\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "YTERMA8GA1UECgwIaGlkcy1zdnIxHDAaBgNVBAMME2hpZHMtc3ZyQGdpdGh1Yi5j\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b22CCQC3DBG9MtGPzDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIE8DAeBgNVHREEFzAV\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ghNoaWRzX3N2ci5naXRodWIuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQCiMeOHraB8\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "3yvoGVetHJPCKlFnThsxoS1fZtl3RT2blDVJeXb3m3EVJJRw+RAeQ2dAg9BIDXDI\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6k3ZBveewxLSu6EggKn8RKzprek/nPhawOU+qiEbwWENSQFj/5FY2sPE+RXjlBwe\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "/lbmRbcmJsLtMIqzMkhFHx/mEliIVwC8B/J3trrhGcLRuvB6sXM79nqkjGYhVyIN\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "y0x1DbB/I8ifmx3L+rCW5iaNp0pHHpjUtrU5yxcb5OtfRuYVp5RjvzETU9XbTWKU\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5jGwhvZ3QEy568CeDEYUyofANREfnYohQHS6NcZ8D5Iqxx4OxovoLygcfE4MYVZq\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2L9cH5F0OWIs\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tCaCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIDGjCCAgICCQC3DBG9MtGPzDANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJH\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "QjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoMCGhpZHMtc3ZyMRwwGgYDVQQDDBNo\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aWRzLXN2ckBnaXRodWIuY29tMCAXDTIxMDMxMTA4MDUxOVoYDzIxMjEwMjE1MDgw\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "NTE5WjBOMQswCQYDVQQGEwJHQjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoMCGhp\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ZHMtc3ZyMRwwGgYDVQQDDBNoaWRzLXN2ckBnaXRodWIuY29tMIIBIjANBgkqhkiG\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0YUgwaI9gyZxpl03mh4hv6T0/WaB3E7GeK5e\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "w4eS5VO6I9b+8DDYJAHqhxraQAt/F9TBwVW1Oljo8YNuyjaCpSlRjQnqHiLSA1Tq\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "P7YAMoZq3MnfmE882QR9/aJ4JL+c4fHg8GauilR/1TaZMj3sEsRenqFk5bFW+fbm\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "VYmWR0/Oeu3sNJ7mG8WgrWeFF3uUz+L98RXmeLbGGVDqObTogOPXz0rZsVkzGVYs\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "KeBnBOdVvqdbs4FUsVgw/BYy2XrBDdSNnfxjXD7tp+F+IRtyx4kN8wEsQ5aJTpC+\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "U9QzFJBglyjjepCqfqdSjW4J5Dzdv2KsFDza/lvHtE8U4NOoVQIDAQABMA0GCSqG\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SIb3DQEBCwUAA4IBAQBxUVzWjaDY05Vk27xWooXoQIcTrc5/+ly7UPnoF2sk1tc6\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "nP4VpNAFNk46MP9PhGLa6qIqFEQXhWB99AyGliSb8o2Lv/+kvm4y7ch7v5W/Ae0X\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "UIMCO6IBMU8QP3niuaJSTcEmu7B1zIj03lLlbZFboLns/2U46ZnmWtyxxBcxfM/O\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RtQeJpfIffQZunx9ftuvEix54mOncrYow9dPAFkcDxgcbRtgKN7ESksL8YherCuI\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pZCj0XpwSglYjDby0p2nuANUucj6m8DSqDVIzbNcAvycbYe07kc1PiUpi1vcGhI+\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uAVEAPxTCl1poB75onPUNTb6NigCpGA5Ip1zBnUq\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import _ \"embed\"\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed client.key\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "var ClientKey []byte\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed client.crt\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "var ClientCert []byte\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed ca.crt\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "var CaCert []byte\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ChrisRx/dungeonfs/commit/34ea225ad07c50f262756fd1d3eb821962e29347?diff=split#diff-92e2cbc286c92525f3cfcd6ea1c84f711f4f65379d23431b01ac18bccc174f4eL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tTroll = `\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                       _-------------------_\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     _            _   /                     \\\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    | \\  __--__  / |  |  Roar! I'm a troll! | \n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    |  \\/      \\/  |  \\                     /\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \\__  \\    / __ /   -_  ________________-\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     /   O    -   \\     / /\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    |      oo      |    /\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \\ -- ______ -- /  \n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     (_  |\\||/|  _)\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "       --______--\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "`\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tKey = []byte(`-----BEGIN PRIVATE KEY-----\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAMjSi/S67mqFDGP0\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "+MRBkidG6zenktXMPMcwXCN1WQjHAo4Gcp9GqjH+IVTgBSO7tdz9VxxKAJgSFXqv\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kWj95QjoT6OTjVk0UXH4t9PV7OU2jn/xnA8pqhg4sxVzbVq9LSB55CsqNpX5IpUu\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9cUUgiq9rzDBmh4bg1X9fUHufAxbAgMBAAECgYAfARKGeA2y+FOPYxS9B/qOgc5y\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "yzZKN7vybK7s8oMKbd8hGjG8EWbZTQjMV8GzYJmVQq+eOHabA7+5Lz3d3cTsMu5I\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DSCKGers7AHHQAYQv0P14CxBp5PFY5qewMYB/FITcD/Z25YXlg3ZjwCB3XrQwLnN\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "QB83C1r6lcFi2fdioQJBAPP/Wy39L+Vda7thcRPcQpb4FmpwU+v+Rzpxov5KRq9G\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "38u3BVd0GdSwQWLVDMmvSLy70doGgxJ5p54YPScxCfkCQQDSs31+ftL34+lSXtrx\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5utBZc34q3UcCOa3twoHTzxGeM4BiYvAcVa+PjdWRaNXz71UBs2GQWWihApZoGk9\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2X3zAkEAllFwI/ICauTV9Re/6UNeBtIKRUK0gQQjb58Ikm7CA0O/pio38TvGmiCH\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "99JXUX1aa2OukgpG/7/RAvXd3uI4SQJAdHJ2nP6CojX3sWpzHtY8lrwpBZHc+02A\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "FXC3vipwaZJCaF8YOZdqFWJVOvzptZI+VL4dwGFMRnErNzWMdH5LOQJABytqQ8eF\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "qM/JedHdd4l6ADmUA3A3JxF6eQwYUEd7V51f1dKHB7El2nCLPD1lLgWNewYLg5a6\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "eVH4jECLO2OH8Q==\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END PRIVATE KEY----- `)\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "type ResourceType int\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tFileResource ResourceType = iota\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tDirResource\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ginuerzh/gost/commit/9ef10b90a9367083c0018cb0185ef7e968867f0b?diff=split#diff-366e46a40f6f60b4f7614eb0976bb51820364bf5ca6ccc4787eb49d7bdbef3e6L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "import (\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"github.com/ginuerzh/gosocks5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"github.com/shadowsocks/shadowsocks-go/shadowsocks\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"net\"\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t//\"strconv\"\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/tls\"\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trawCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIC5jCCAdCgAwIBAgIBADALBgkqhkiG9w0BAQUwEjEQMA4GA1UEChMHQWNtZSBD\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bzAeFw0xNDAzMTcwNjIwNTFaFw0xNTAzMTcwNjIwNTFaMBIxEDAOBgNVBAoTB0Fj\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bWUgQ28wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDccNO1xmd4lWSf\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "d/0/QS3E93cYIWHw831i/IKxigdRD/XMZonLdEHywW6lOiXazaP8e6CqPGSmnl0x\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5k/3dvGCMj2JCVxM6+z7NpL+AiwvXmvkj/TOciCgwqssCwYS2CiVwjfazRjx1ZUJ\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "VDC5qiyRsfktQ2fVHrpnJGVSRagmiQgwGWBilVG9B8QvRtpQKN/GQGq17oIQm8aK\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kOdPt93g93ojMIg7YJpgDgOirvVz/hDn7YD4ryrtPos9CMafFkJprymKpRHyvz7P\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "8a3+OkuPjFjPnwOHQ5u1U3+8vC44vfb1ExWzDLoT8Xp8Gndx39k0f7MVOol3GnYu\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MN/dvNUdAgMBAAGjSzBJMA4GA1UdDwEB/wQEAwIAoDATBgNVHSUEDDAKBggrBgEF\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BQcDATAMBgNVHRMBAf8EAjAAMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDALBgkqhkiG\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9w0BAQUDggEBAIG8CJqvTIgJnNOK+i5/IUc/3yF/mSCWuG8qP+Fmo2t6T0PVOtc0\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "8wiWH5iWtCAhjn0MRY9l/hIjWm6gUZGHCGuEgsOPpJDYGoNLjH9Xwokm4y3LFNRK\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "UBrrrDbKRNibApBHCapPf6gC5sXcjOwx7P2/kiHDgY7YH47jfcRhtAPNsM4gjsEO\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RmwENY+hRUFHIRfQTyalqND+x6PWhRo3K6hpHs4DQEYPq4P2kFPqUqSBymH+Ny5/\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BcQ3wdMNmC6Bm/oiL1QV0M+/InOsAgQk/EDd0kmoU1ZT2lYHQduGmP099bOlHNpS\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uqO3vXF3q8SPPr/A9TqSs7BKkBQbe0+cdsA=\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trawKey = `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIEowIBAAKCAQEA3HDTtcZneJVkn3f9P0EtxPd3GCFh8PN9YvyCsYoHUQ/1zGaJ\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "y3RB8sFupTol2s2j/Hugqjxkpp5dMeZP93bxgjI9iQlcTOvs+zaS/gIsL15r5I/0\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "znIgoMKrLAsGEtgolcI32s0Y8dWVCVQwuaoskbH5LUNn1R66ZyRlUkWoJokIMBlg\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "YpVRvQfEL0baUCjfxkBqte6CEJvGipDnT7fd4Pd6IzCIO2CaYA4Doq71c/4Q5+2A\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "+K8q7T6LPQjGnxZCaa8piqUR8r8+z/Gt/jpLj4xYz58Dh0ObtVN/vLwuOL329RMV\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "swy6E/F6fBp3cd/ZNH+zFTqJdxp2LjDf3bzVHQIDAQABAoIBAHal26147nQ+pHwY\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "jxwers3XDCjWvup7g79lfcqlKi79UiUEA6KYHm7UogMYewt7p4nb2KwH+XycvDiB\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aAUf5flXpTs+6IkWauUDiLZi4PlV7uiEexUq5FjirlL0U/6MjbudX4bK4WQ4uxDc\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WaV07Kw2iJFOOHLDKT0en9JaX5jtJNc4ZnE9efFoQ5jfypPWtRw65G1rULEg6nvc\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GDh+1ce+4foCkpLRC9c24xAwJONZG6x3UqrSS9qfAsb73nWRQrTfUcO3nhoN8VvL\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kL9skn1+S06NyUN0KoEtyRBp+RcpXSsBWAo6qZmo/WqhB/gjzWrxVwn20+yJSm35\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ZsMc6QECgYEA8GS+Mp9xfB2szWHz6YTOO1Uu4lHM1ccZMwS1G+dL0KO3uGAiPdvp\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "woVot6v6w88t7onXsLo5pgz7SYug0CpkF3K/MRd1Ar4lH7PK7IBQ6rFr9ppVxDbx\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "AEWRswUoPbKCr7W6HU8LbQHDavsDlEIwc6+DiwnL4BzlKjb7RpgQEz0CgYEA6sB5\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uHvx3Y5FDcGk1n73leQSAcq14l3ZLNpjrs8msoREDil/j5WmuSN58/7PGMiMgHEi\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "1vLm3H796JmvGr9OBvspOjHyk07ui2/We/j9Hoxm1VWhyi8HkLNDj70HKalTTFMz\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RHO4O+0xCva+h9mKZrRMVktXr2jjdFn/0MYIZ2ECgYAIIsC1IeRLWQ3CHbCNlKsO\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IwHlMvOFwKk/qsceXKOaOhA7szU1dr3gkXdL0Aw6mEZrrkqYdpUA46uVf54/rU+Z\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "445I8QxKvXiwK/uQKX+TkdGflPWWIG3jnnch4ejMvb/ihnn4B/bRB6A/fKNQXzUY\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "lTYUfI5j1VaEKTwz1W2l2QKBgByFCcSp+jZqhGUpc3dDsZyaOr3Q/Mvlju7uEVI5\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hIAHpaT60a6GBd1UPAqymEJwivFHzW3D0NxU6VAK68UaHMaoWNfjHY9b9YsnKS2i\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kE3XzN56Ks+/avHfdYPO+UHMenw5V28nh+hv5pdoZrlmanQTz3pkaOC8o3WNQZEB\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "nh/BAoGBAMY5z2f1pmMhrvtPDSlEVjgjELbaInxFaxPLR4Pdyzn83gtIIU14+R8X\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2LPs6PPwrNjWnIgrUSVXncIFL3pa45B+Mx1pYCpOAB1+nCZjIBQmpeo4Y0dwA/XH\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "85EthKPvoszm+OPbyI16OcePV5ocX7lupRYuAo0pek7bomhmHWHz\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func selectMethod(methods ...uint8) uint8 {\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor _, method := range methods {\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif _, ok := Methods[method]; ok {\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn method\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn gosocks5.MethodNoAuth\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func methodSelected(method uint8, conn net.Conn) (net.Conn, error) {\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tswitch method {\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase MethodTLS:\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvar cert tls.Certificate\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvar err error\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif len(CertFile) == 0 || len(KeyFile) == 0 {\n",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tcert, err = tls.X509KeyPair([]byte(rawCert), []byte(rawKey))\n",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 78,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tcert, err = tls.LoadX509KeyPair(CertFile, KeyFile)\n",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 81,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tlog.Println(err)\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tconn = tls.Server(conn, &tls.Config{Certificates: []tls.Certificate{cert}})\n",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase MethodAES128, MethodAES192, MethodAES256,\n",
                        "lineNumber": 87,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tMethodDES, MethodBF, MethodCAST5, MethodRC4MD5, MethodRC4, MethodTable:\n",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcipher, err := shadowsocks.NewCipher(Methods[method], Password)\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 92,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tconn = shadowsocks.NewConn(conn, cipher)\n",
                        "lineNumber": 93,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase gosocks5.MethodNoAcceptable:\n",
                        "lineNumber": 94,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn nil, gosocks5.ErrBadMethod\n",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "type Server interface {\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "    ListenAndServe() error\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 16,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "go/InsecureTLSConfig/test",
              "name": "InsecureTLSConfig/test",
              "shortDescription": {
                "text": "Insecure TLS Configuration"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n## Best practices for prevention\n* Use TLS instead of SSL\n* Be aware of outdated algorithms; recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureTLSConfig",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/gluster/glusterd2/commit/ec2d70fa35bb5065b078001467dba674ee76359b?diff=split#diff-7284224aa78cae9b67bebef47a768e687130c6cbf25d9359dfe823ef04e3d2faL-1",
                    "lines": [
                      {
                        "line": "MinVersion: tls.VersionTLS10,\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MaxVersion: tls.VersionTLS12,\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MinVersion: tls.VersionTLS12,\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/etcd-io/etcd/commit/a1a72202ff76a6b9246ca23dc8d2c0ee75d73d60?diff=split#diff-f17ede0239fbd8afa8437e8dd2d679302d2c52197e64c0bf77336143b25d6cddL-1",
                    "lines": [
                      {
                        "line": "MinVersion:         tls.VersionTLS10,\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MinVersion:         tls.VersionTLS12,\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/gitlabhq/gitlab-runner/commit/6397ada2a4a67806d159d4dcb3c45b41e8cc2278?diff=split#diff-2da353be3ab954c8649bd330035e95c56ae8f4fb8111d3507ea357dca4589036L-1",
                    "lines": [
                      {
                        "line": "MinVersion:         tls.VersionTLS10,\n",
                        "lineNumber": 161,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MinVersion:         tls.VersionTLS12,\n",
                        "lineNumber": 161,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 3,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "go/HardcodedSecret/test",
              "name": "HardcodedSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/buffermet/sewers/commit/7044ef9a3e38f670a821904ae86df960063ba463?diff=split#diff-f93e80fa4c3d6e9b7a19be67d8dc97d9ad768033dcbc4c04cf8ac99c76899105L-1",
                    "lines": [
                      {
                        "line": "\tobf_const_session_id = \"QMXwaHcmfvOMYbLw\"\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tobf_const_post_tag = \"P\"\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tobf_const_get_tag = \"G\"\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tobf_const_session_id = \"\"\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tobf_const_post_tag = \"\"\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tobf_const_get_tag = \"\"\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "var(\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_encryption_key = []byte(\"MZpirFa4XEQsTNmaBBaFAmXuUCe2Qan0\")\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tobf_var_relay_address = \"http://0.0.0.0:81/relay.php\"\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tobf_var_encryption_key = []byte(\"\")\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tobf_var_relay_address = \"\"\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tobf_var_useragent = \"Sewers Interpreter (Linux) Reverse HTTP Test Session\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "func obf_func_encrypt(obf_var_payload []byte) []byte {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_block, _ := aes.NewCipher(obf_var_encryption_key)\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/pearsonappeng/tensor/commit/f35cc1d5ee208b1fa082c7d01a2bae961f482be1?diff=split#diff-f31beb807d74a6ff9df2b6634b60e9837abf4eb3bb1a6ba6723eb727063ee362L-1",
                    "lines": [
                      {
                        "line": "\tblock, err := aes.NewCipher(key)\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tblock, err := aes.NewCipher(Config.Salt)\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpanic(err)\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// The IV needs to be unique, but not secure. Therefore it's common to\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// include it at the beginning of the ciphertext.\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tciphertext := make([]byte, aes.BlockSize + len(plaintext))\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tiv := ciphertext[:aes.BlockSize]\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif _, err := io.ReadFull(rand.Reader, iv); err != nil {\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tlog.Errorln(\"Error occured when reading AES blocks\", err.Error())\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn \"\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstream := cipher.NewCFBEncrypter(block, iv)\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstream.XORKeyStream(ciphertext[aes.BlockSize:], plaintext)\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// convert to base64\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn base64.URLEncoding.EncodeToString(ciphertext)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Decrypt from base64 to decrypted string\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "func CipherDecrypt(cryptoText string) string {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tciphertext, _ := base64.URLEncoding.DecodeString(cryptoText)\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tblock, err := aes.NewCipher(key)\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tblock, err := aes.NewCipher(Config.Salt)\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/buffermet/sewers/commit/7044ef9a3e38f670a821904ae86df960063ba463?diff=split#diff-f93e80fa4c3d6e9b7a19be67d8dc97d9ad768033dcbc4c04cf8ac99c76899105L-1",
                    "lines": [
                      {
                        "line": "\tobf_const_session_id = \"QMXwaHcmfvOMYbLw\"\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tobf_const_post_tag = \"P\"\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tobf_const_get_tag = \"G\"\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tobf_const_session_id = \"\"\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tobf_const_post_tag = \"\"\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tobf_const_get_tag = \"\"\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "var(\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_encryption_key = []byte(\"MZpirFa4XEQsTNmaBBaFAmXuUCe2Qan0\")\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tobf_var_relay_address = \"http://0.0.0.0:81/relay.php\"\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tobf_var_encryption_key = []byte(\"\")\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tobf_var_relay_address = \"\"\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tobf_var_useragent = \"Sewers Interpreter (Linux) Reverse HTTP Test Session\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "func obf_func_encrypt(obf_var_payload []byte) []byte {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_block, _ := aes.NewCipher(obf_var_encryption_key)\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_b := base64.StdEncoding.EncodeToString(obf_var_payload)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_ciphertext := make( []byte, aes.BlockSize+len(obf_var_b) )\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_iv := obf_var_ciphertext[:aes.BlockSize]\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_cfb := cipher.NewCFBEncrypter(obf_var_block, obf_var_iv)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_cfb.XORKeyStream( obf_var_ciphertext[aes.BlockSize:], []byte(obf_var_b) )\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_enc_ciphertext := []byte( base64.StdEncoding.EncodeToString(obf_var_ciphertext) )\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn obf_var_enc_ciphertext\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "func obf_func_decrypt(obf_var_payload []byte) []byte {\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tobf_var_block, _ := aes.NewCipher(obf_var_encryption_key)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 8,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "go/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceResourceAccess",
                  "SourceFile",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/sigstore/cosign/commit/a7806bf769c9ce69bcaee3e2fa1427a350fa954d?diff=split#diff-afc19adc437d3a6ba861083d4de4e705cb865c953e8f4c8c13c3bcaea1aec469L-1",
                    "lines": [
                      {
                        "line": "\t\"path/filepath\"\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/authn\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/name\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/peterbourgon/ff/v3/ffcli\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/sigstore/cosign/pkg/cosign\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Upload() *ffcli.Command {\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar (\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tflagset   = flag.NewFlagSet(\"cosign upload\", flag.ExitOnError)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tsignature = flagset.String(\"signature\", \"\", \"the signature, path to the signature, or {-} for stdin\")\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload   = flagset.String(\"payload\", \"\", \"path to the payload covered by the signature (if using another format)\")\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ffcli.Command{\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tName:       \"upload\",\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortUsage: \"cosign upload <image uri>\",\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortHelp:  \"upload signatures to the supplied container image\",\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tFlagSet:    flagset,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tExec: func(ctx context.Context, args []string) error {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(args) != 1 {\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn flag.ErrHelp\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn UploadCmd(ctx, *signature, *payload, args[0])\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "func UploadCmd(ctx context.Context, sigRef, payloadRef, imageRef string) error {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar b64SigBytes []byte\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tb64SigBytes, err := signatureBytes(sigRef)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else if len(b64SigBytes) == 0 {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"empty signature\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tref, err := name.ParseReference(imageRef)\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tget, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdstTag := ref.Context().Tag(cosign.Munge(get.Descriptor))\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar payload []byte\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif payloadRef == \"\" {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = cosign.Payload(get.Descriptor, nil)\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = ioutil.ReadFile(payloadRef)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// This expects it to not be base64 encoded, so decode first\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigBytes, err := base64.StdEncoding.DecodeString(string(b64SigBytes))\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn cosign.Upload(sigBytes, payload, dstTag)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "type SignatureArgType uint8\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tStdinSignature SignatureArgType = iota\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRawSignature   SignatureArgType = iota\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tFileSignature  SignatureArgType = iota\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func signatureBytes(sigRef string) ([]byte, error) {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// sigRef can be \"-\", a string or a file.\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch signatureType(sigRef) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase StdinSignature:\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadAll(os.Stdin)\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase RawSignature:\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn []byte(sigRef), nil\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase FileSignature:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(sigRef)\n",
                        "lineNumber": 110,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(filepath.Clean(sigRef))\n",
                        "lineNumber": 111,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/kvdi/kvdi/commit/1297e7e5fcae097229e05cf31d95f06a736414bf?diff=split#diff-37d9857eda65693ff81ac1d04e138819aa6f7eff8f098ba05d736374b22e29ebL-1",
                    "lines": [
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, handler.Filename)\n",
                        "lineNumber": 326,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, filepath.Clean(handler.Filename))\n",
                        "lineNumber": 326,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tf, err := os.OpenFile(dstFile, os.O_WRONLY|os.O_CREATE, 0666)\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bazelbuild/bazel-gazelle/commit/ff4d67f395b3f4d1dc9810eeceb61585fea252cb?diff=split#diff-32b3dd34b70937b5c3d53114046fa35fc0f5afd2cd13f8fa40c7e17a506b5c24L-1",
                    "lines": [
                      {
                        "line": "\tuc.c.RepoRoot, err = filepath.EvalSymlinks(uc.c.RepoRoot)\n",
                        "lineNumber": 240,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 241,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"failed to evaluate symlinks for repo root: %v\", err)\n",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 243,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, dir := range uc.c.Dirs {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !isDescendingDir(dir, uc.c.RepoRoot) {\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, fmt.Errorf(\"dir %q is not a subdirectory of repo root %q\", dir, uc.c.RepoRoot)\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ValidBuildFileNames = strings.Split(*buildFileName, \",\")\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif len(uc.c.ValidBuildFileNames) == 0 {\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"no valid build file names specified\")\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.SetBuildTags(*buildTags)\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.PreprocessTags()\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif goPrefix.set {\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix = goPrefix.value\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix, err = loadGoPrefix(uc.c)\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err := config.CheckPrefix(uc.c.GoPrefix); err != nil {\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ShouldFix = cmd == fixCmd\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.DepMode, err = config.DependencyModeFromString(*external)\n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif proto.set {\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoMode, err = config.ProtoModeFromString(proto.value)\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoModeExplicit = true\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "\temit, ok := modeFromName[*mode]\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"unrecognized emit mode: %q\", *mode)\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.emit = emit\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outDir = *outDir\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outSuffix = *outSuffix\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspacePath := filepath.Join(uc.c.RepoRoot, \"WORKSPACE\")\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspaceContent, err := ioutil.ReadFile(workspacePath)\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 12,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "InTest",
                  "SourceHttpBody",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ory/hydra/commit/043c6635fa3b1661b4a666f26cebf16c2306bfdb?diff=split#diff-37b8edd0d01d055fd4ede6b212ab56428bed90cd46d9960a1edfa874d8707293L-1",
                    "lines": [
                      {
                        "line": "\t\"html/template\"\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"net/http\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/hydra/cmd/cli\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/julienschmidt/httprouter\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/toqueteos/webbrowser\"\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"golang.org/x/oauth2\"\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/cmdx\"\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/flagx\"\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/randx\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/tlsx\"\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/urlx\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserWelcome = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "        Connect</a> library.</p>\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "    Hydra).\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "    To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p><a href=\"{{ .URL }}\">Authorize application</a></p>\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>`))\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserError = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>An error occurred</h1>\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h2>{{ .Name }}</h2>\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Description }}</p>\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Hint }}</p>\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Debug }}</p>\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserResult = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "<html>\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "<ul>\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Access Token: <code>{{ .AccessToken }}</code></li>\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Refresh Token: <code>{{ .RefreshToken }}</code></li>\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Expires in: <code>{{ .Expiry }}</code></li>\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>ID Token: <code>{{ .IDToken }}</code></li>\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "</ul>\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "// tokenUserCmd represents the token command\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserCmd = &cobra.Command{\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tUse:   \"user\",\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tShort: \"An exemplary OAuth 2.0 Client performing the OAuth 2.0 Authorize Code Flow\",\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tLong: `Starts an exemplary web server that acts as an OAuth 2.0 Client performing the Authorize Code Flow.\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command will help you to see if ORY Hydra has been configured properly.\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command must not be used for anything else than manual testing or demo purposes. The server will terminate on error\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "and success.`,\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRun: func(cmd *cobra.Command, args []string) {\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx := context.Background()\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif flagx.MustGetBool(cmd, \"skip-tls-verify\") {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// fmt.Println(\"Warning: Skipping TLS Certificate Verification.\")\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx = context.WithValue(context.Background(), oauth2.HTTPClient, &http.Client{Transport: &http.Transport{\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}})\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tisSSL := flagx.MustGetBool(cmd, \"https\")\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tport := flagx.MustGetInt(cmd, \"port\")\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscopes := flagx.MustGetStringSlice(cmd, \"scope\")\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprompt := flagx.MustGetStringSlice(cmd, \"prompt\")\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmaxAge := flagx.MustGetInt(cmd, \"max-age\")\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tredirectUrl := flagx.MustGetString(cmd, \"redirect\")\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbackend := flagx.MustGetString(cmd, \"token-url\")\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfrontend := flagx.MustGetString(cmd, \"auth-url\")\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\taudience := flagx.MustGetStringSlice(cmd, \"audience\")\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientID := flagx.MustGetString(cmd, \"client-id\")\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientSecret := flagx.MustGetString(cmd, \"client-secret\")\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif clientID == \"\" || clientSecret == \"\" {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Print(cmd.UsageString())\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(\"Please provide a Client ID and Client Secret using flags --client-id and --client-secret, or environment variables OAUTH2_CLIENT_ID and OAUTH2_CLIENT_SECRET.\")\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproto := \"http\"\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tproto = \"https\"\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserverLocation := fmt.Sprintf(\"%s://127.0.0.1:%d/\", proto, port)\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif redirectUrl == \"\" {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tredirectUrl = serverLocation + \"callback\"\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif backend == \"\" {\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbackend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/token\").String()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif frontend == \"\" {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfrontend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/auth\").String()\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tconf := oauth2.Config{\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientID:     clientID,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientSecret: clientSecret,\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tEndpoint: oauth2.Endpoint{\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTokenURL: backend,\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tAuthURL:  frontend,\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t},\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tRedirectURL: redirectUrl,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tScopes:      scopes,\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tstate, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tnonce, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tauthCodeURL := conf.AuthCodeURL(\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tstring(state),\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"audience\", strings.Join(audience, \"+\")),\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"nonce\", string(nonce)),\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"prompt\", strings.Join(prompt, \"+\")),\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"max_age\", strconv.Itoa(maxAge)),\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t)\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !flagx.MustGetBool(cmd, \"no-open\") {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twebbrowser.Open(serverLocation)\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up home route on \" + serverLocation)\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up callback listener on \" + serverLocation + \"callback\")\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Press ctrl + c on Linux / Windows or cmd + c on OSX to end the process.\")\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Printf(\"If your browser does not open automatically, navigate to:\\n\\n\\t%s\\n\\n\", serverLocation)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr := httprouter.New()\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar tlsc *tls.Config\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tkey, err := rsa.GenerateKey(rand.Reader, 2048)\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate RSA key pair: %s\", err)\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcert, err := tlsx.CreateSelfSignedTLSCertificate(key)\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate self-signed TLS Certificate: %s\", err)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttlsc = &tls.Config{Certificates: []tls.Certificate{*cert}}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserver := &http.Server{Addr: fmt.Sprintf(\":%d\", port), Handler: r, TLSConfig: tlsc}\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar shutdown = func() {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttime.Sleep(time.Second * 1)\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tdefer cancel()\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tserver.Shutdown(ctx)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tw.Write([]byte(fmt.Sprintf(`\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "<html><head></head><body>\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID Connect</a> library.</p>\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY Hydra).\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p><a href=\"%s\">Authorize application</a></p>\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "`, authCodeURL)))\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t})\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/callback\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(r.URL.Query().Get(\"error\")) > 0 {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"Got error: %s\\n\", r.URL.Query().Get(\"error_description\"))\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p><p>%s</p><p>%s</p></body></html>\", r.URL.Query().Get(\"error\"), r.URL.Query().Get(\"error_description\"), r.URL.Query().Get(\"error_hint\"), r.URL.Query().Get(\"error_debug\"))\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tgo shutdown()\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif r.URL.Query().Get(\"state\") != string(state) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"States do not match. Expected %s, got %s\\n\", string(state), r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p></body></html>\", \"States do not match\", \"Expected state \"+string(state)+\" but got \"+r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\t_ = tokenUserError.Execute(w, &ed{\n",
                        "lineNumber": 221,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tName:        \"States do not match\",\n",
                        "lineNumber": 222,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tDescription: \"Expected state \" + string(state) + \" but got \" + r.URL.Query().Get(\"state\"),\n",
                        "lineNumber": 223,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t})\n",
                        "lineNumber": 224,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ewhal/Pastebin/commit/bfdb8c815ad06f8b114521be2997a830285ac92b?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\"html\"\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"io\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"net/http\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dchest/uniuri\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ewhal/pygments\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDIRECTORY = \"/tmp/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "ADDRESS = \"https://p.pantsu.cat/\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "LENGTH    = 4\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tTEXT    = \"$ <command> | curl -F 'p=<-' \" + ADDRESS + \"\\n\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPORT    = \":9900\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "func check(err error) {\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err)\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func exists(location string) bool {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif _, err := os.Stat(location); err != nil {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif os.IsNotExist(err) {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn false\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generateName() string {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := uniuri.NewLen(LENGTH)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile := exists(DIRECTORY + s)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file == true {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgenerateName()\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "func save(raw []byte) string {\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpaste := raw[85 : len(raw)-46]\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := generateName()\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlocation := DIRECTORY + s\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ioutil.WriteFile(location, paste, 0644)\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "check(err)\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "func pasteHandler(w http.ResponseWriter, r *http.Request) {\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch r.Method {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase \"GET\":\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam1 := r.URL.Query().Get(\"p\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam2 := r.URL.Query().Get(\"lang\")\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif param1 != \"\" {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\td := DIRECTORY + param1\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ts, err := ioutil.ReadFile(d)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err != nil {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\thttp.Error(w, err.Error(), 500)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "if param2 != \"\" {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(string(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tio.WriteString(w, string(highlight))\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(html.UnescapeString(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tio.WriteString(w, highlight)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fairfaxmedia/flywheel/commit/8e4de33a3346aa6c85af67a52d9b0eaa43cdabdd?diff=split#diff-6971e2713fe98b79ea18e9748bf68928f6ebcd4d93e7a27f10e7472ce6d78a48L-1",
                    "lines": [
                      {
                        "line": "\tif ok && flywheel[0] == \"status\" {\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf, err := json.Marshal(pong)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfmt.Fprint(w, err)\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Write(buf)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif pong.Err != nil {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbody := fmt.Sprintf(HTML_ERROR, pong.Err)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.Write([]byte(body))\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 48,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Azure/azure-event-hubs-for-kafka/commit/799660b4b8fd1e8a0c6d362212c7a7429d0efeec?diff=split#diff-d34b81a08e29004cd68e348d8510fb405d2cdaa1c1aab6e5947ef55d1d72af9eL-1",
                    "lines": [
                      {
                        "line": "applicationID := \"fd756bd0-6853-41fd-8f5a-cc7e8bd89214\"\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationSecret := \"l.vUN-4SRE45Ph9@D-]_s[zUaOBchc-i\"\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tenantID := \"72f988bf-86f1-41af-91ab-2d7cd011db47\"\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationID := os.Getenv(\"AAD_APPLICATION_ID\")\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "applicationSecret := os.Getenv(\"AAD_APPLICATION_SECRET\")\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "tenantID := os.Getenv(\"AAD_TENANT_ID\")\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Aristat/golang-example-app/commit/45a4fdb067ce46ea368c980b91de51c6e95cf821?diff=split#diff-b9640f0eb39529cf3fe30664f7a043945161da506fcd4b8c65e15b345b33dfd8L-1",
                    "lines": [
                      {
                        "line": "func ClientStore() (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\"123456\": &models.Client{\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tID:     \"123456\",\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tSecret: \"12345678\",\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tDomain: \"http://localhost:9094\",\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func ClientStore(cfg Config) (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{}\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfor k, v := range cfg.ClientStoreInfo {\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tclientsConfig[k] = &models.Client{\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tID:     v.ID,\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tSecret: v.Secret,\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tDomain: v.Domain,\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jointwt/twtxt/commit/14e86ea4b5ef71df46297a8ffccc8f259a677fb5?diff=split#diff-0c6fb9f312dbfbfed47d840e0d73f6ba10291681cf8b70ad10979fa20b6aa350L-1",
                    "lines": [
                      {
                        "line": "\t// InvalidConfigValue is the constant value for invalid config values\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// which must be changed for production configurations before successful\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// startup\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInvalidConfigValue = \"INVALID CONFIG VALUE - PLEASE CHANGE THIS VALUE\"\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// DebugMode is the default debug mode\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultDebug = false\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultData is the default data directory for storage\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultData = \"./data\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultStore is the default data store used for accounts, sessions, etc\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultStore = \"bitcask://twtxt.db\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultBaseURL is the default Base URL for the app used to construct feed URLs\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultBaseURL = \"http://0.0.0.0:8000\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultAdminXXX is the default admin user / pod operator\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminUser  = \"admin\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminName  = \"Administrator\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminEmail = \"support@twt.social\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultName is the default instance name\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultName = \"twtxt.net\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultMetaxxx are the default set of <meta> tags used on non-specific views\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaTitle       = \"\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaAuthor      = \"twtxt.net / twt.social\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaKeywords    = \"twtxt, twt, blog, micro-blogging, social, media, decentralised, pod\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaDescription = \"📕 twtxt is a Self-Hosted, Twitter™-like Decentralised microBlogging platform. No ads, no tracking, your content, your data!\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultTheme is the default theme to use ('light' or 'dark')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultTheme = \"dark\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultOpenRegistrations is the default for open user registrations\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultOpenRegistrations = false\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultRegisterMessage is the default message displayed when  registrations are disabled\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultRegisterMessage = \"\"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultCookieSecret is the server's default cookie secret\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultCookieSecret = \"PLEASE_CHANGE_ME!!!\"\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tDefaultCookieSecret = InvalidConfigValue\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 43,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "go/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "CommandInjection",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Asutorufa/yuhaiin/commit/98b32999c0da193d43c9e229dc75cd4d7d386b4a?diff=split#diff-89cebc2af514f83dbabec8d3b2c739b315779f10dab726e8343a551c6b5601ccL-1",
                    "lines": [
                      {
                        "line": "\tdir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tlog.Println(dir2)\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(dir2, []string{dir2, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t// dir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "\texecutablePath, err := os.Executable()\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tlog.Println(err)\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// log.Println(executablePath)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(executablePath, []string{executablePath, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/pcingola/BigDataScript/commit/ccbcbed639851913bad4077614671e20c44f79af?diff=split#diff-ce04152f262908f7392d116653d413c605db522ccf3bf8e1dea3e968dd1c9ae2L-1",
                    "lines": [
                      {
                        "line": "exec.Command(cmd, args).Run()\n",
                        "lineNumber": 409,
                        "lineChange": "removed"
                      },
                      {
                        "line": "exec.Command(\"echo\", args).Run()\n",
                        "lineNumber": 409,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cli/cli/commit/ed8aaa83e3d403f459cd5b4f2b852d024da8c6ba?diff=split#diff-3928dc80bf7f14802ffa3a9f68672de05b4e00613919beb2107ca787ed3b9099L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "func StubExecCommand(testHelper string, desiredOutput string) func(...string) *exec.Cmd {\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn func(args ...string) *exec.Cmd {\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs := []string{\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tfmt.Sprintf(\"-test.run=%s\", testHelper),\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"--\", desiredOutput}\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs = append(cs, args...)\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tenv := []string{\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"GO_WANT_HELPER_PROCESS=1\",\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd := exec.Command(os.Args[0], cs...)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd.Env = append(env, os.Environ()...)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn cmd\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (s OutputStub) Run() error {\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 8,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "go/Ssrf",
              "name": "Ssrf",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "Ssrf",
                  "Security",
                  "SourceServer",
                  "SourceHttpHeader",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "go/CommandInjection/test",
              "name": "CommandInjection/test",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "CommandInjection",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Asutorufa/yuhaiin/commit/98b32999c0da193d43c9e229dc75cd4d7d386b4a?diff=split#diff-89cebc2af514f83dbabec8d3b2c739b315779f10dab726e8343a551c6b5601ccL-1",
                    "lines": [
                      {
                        "line": "\tdir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tlog.Println(dir2)\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(dir2, []string{dir2, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t// dir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "\texecutablePath, err := os.Executable()\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tlog.Println(err)\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// log.Println(executablePath)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(executablePath, []string{executablePath, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/pcingola/BigDataScript/commit/ccbcbed639851913bad4077614671e20c44f79af?diff=split#diff-ce04152f262908f7392d116653d413c605db522ccf3bf8e1dea3e968dd1c9ae2L-1",
                    "lines": [
                      {
                        "line": "exec.Command(cmd, args).Run()\n",
                        "lineNumber": 409,
                        "lineChange": "removed"
                      },
                      {
                        "line": "exec.Command(\"echo\", args).Run()\n",
                        "lineNumber": 409,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cli/cli/commit/ed8aaa83e3d403f459cd5b4f2b852d024da8c6ba?diff=split#diff-3928dc80bf7f14802ffa3a9f68672de05b4e00613919beb2107ca787ed3b9099L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "func StubExecCommand(testHelper string, desiredOutput string) func(...string) *exec.Cmd {\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn func(args ...string) *exec.Cmd {\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs := []string{\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tfmt.Sprintf(\"-test.run=%s\", testHelper),\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"--\", desiredOutput}\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs = append(cs, args...)\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tenv := []string{\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"GO_WANT_HELPER_PROCESS=1\",\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd := exec.Command(os.Args[0], cs...)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd.Env = append(env, os.Environ()...)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn cmd\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (s OutputStub) Run() error {\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 8,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "go/ErrorMessage",
              "name": "ErrorMessage",
              "shortDescription": {
                "text": "Generation of Error Message Containing Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen a command to your site or application fails, it should do so gracefully, meaning that the user is informed that there has been a problem, rather than experiencing erratic behavior, such as crashing, hanging, or returning a 404 or similar generic error page.\n\nIn some cases, developers include information in an error message to help pinpoint the source of an error; these may include username, password, application path, stack values, and other internal details. When this weakness is present, if these logs are accessible to an attacker, it may give them clues as to the inner workings of the app, helping them plan a focused attack. For example, clues revealing SQL database details may help plan an SQL injection attack.\n\n## Best practices for prevention\n* Keep error messages to the barest minimum of helpful information that users absolutely need to know.\n* Use consistent error messages that do not give attackers clues that they might be on the right track to a successful attack, such as \"File not found\" or \"User name does not exist\".\n* Ensure that debugging information is removed from code prior to release.\n* Create clear policy for the types of errors that must be logged, which messages will be displayed to users, and which details will be logged for later alerting and debugging.\n* When logging error details, never include sensitive information such as passwords.\n* Implement naming conventions that will help you flag and defend sensitive information.\n* Use dynamic (white box) test techniques to identify conditions that could cause errors and failures and test thoroughly to ensure that the code performs gracefully without revealing sensitive data under these stress conditions.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "ErrorMessage",
                  "Security",
                  "ErrorMessageOutput"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/shurcooL/go/commit/76d02a63e0166e41ff1d27c7496362308762a167?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\tpath := GetLine(string(debug.Stack()), 2)\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath = path[0:strings.Index(path, \":\")]\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath, _ = filepath.Split(path)\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn path\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t_, file, _, _ := runtime.Caller(1)\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tdir, _ := filepath.Split(file)\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn dir\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "func main() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprintln(GetThisGoSourceFilepath())\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/shurcooL/go/commit/76d02a63e0166e41ff1d27c7496362308762a167?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\tpath := GetLine(string(debug.Stack()), 2)\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath = path[0:strings.Index(path, \":\")]\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath, _ = filepath.Split(path)\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn path\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t_, file, _, _ := runtime.Caller(1)\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tdir, _ := filepath.Split(file)\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn dir\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "func main() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprintln(GetThisGoSourceFilepath())\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprintln(GetThisGoSourceDir())\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/funkygao/dbus/commit/55eada141f7bc2de842fa07f45ce088fed55d7d0?diff=split#diff-0d23f8fc772047e5d5e6902b0ad8e3eb3f9c3c2e4eadbd939fc17db4dfc89f34L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (this *Engine) handleHttpQuery(w http.ResponseWriter, req *http.Request,\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tparams map[string]interface{}) (interface{}, error) {\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tvar (\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvars    = mux.Vars(req)\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd     = vars[\"cmd\"]\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tglobals = Globals()\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput  = make(map[string]interface{})\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t)\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tswitch cmd {\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase \"ping\":\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput[\"status\"] = \"ok\"\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase \"shutdown\":\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tglobals.Shutdown()\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput[\"status\"] = \"ok\"\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase \"reload\", \"restart\":\n",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tbreak\n",
                        "lineNumber": 78,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase \"debug\":\n",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tstack := make([]byte, 1<<20)\n",
                        "lineNumber": 81,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tstackSize := runtime.Stack(stack, true)\n",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tfmt.Println(string(stack[:stackSize]))\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput[\"result\"] = \"go to global logger to see result\"\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase \"stat\":\n",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput[\"started\"] = globals.StartedAt\n",
                        "lineNumber": 87,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput[\"elapsed\"] = time.Since(globals.StartedAt).String()\n",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (this *Engine) httpStat(w http.ResponseWriter, req *http.Request, params map[string]interface{}) (interface{}, error) {\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tvar output = make(map[string]interface{})\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "\toutput[\"ver\"] = dbus.Version\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "\toutput[\"started\"] = Globals().StartedAt\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "\toutput[\"elapsed\"] = time.Since(Globals().StartedAt).String()\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "\toutput[\"pid\"] = this.pid\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 21,
                "cwe": [
                  "CWE-209"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword",
              "name": "HardcodedPassword",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Azure/azure-event-hubs-for-kafka/commit/799660b4b8fd1e8a0c6d362212c7a7429d0efeec?diff=split#diff-d34b81a08e29004cd68e348d8510fb405d2cdaa1c1aab6e5947ef55d1d72af9eL-1",
                    "lines": [
                      {
                        "line": "applicationID := \"fd756bd0-6853-41fd-8f5a-cc7e8bd89214\"\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationSecret := \"l.vUN-4SRE45Ph9@D-]_s[zUaOBchc-i\"\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tenantID := \"72f988bf-86f1-41af-91ab-2d7cd011db47\"\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationID := os.Getenv(\"AAD_APPLICATION_ID\")\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "applicationSecret := os.Getenv(\"AAD_APPLICATION_SECRET\")\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "tenantID := os.Getenv(\"AAD_TENANT_ID\")\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Aristat/golang-example-app/commit/45a4fdb067ce46ea368c980b91de51c6e95cf821?diff=split#diff-b9640f0eb39529cf3fe30664f7a043945161da506fcd4b8c65e15b345b33dfd8L-1",
                    "lines": [
                      {
                        "line": "func ClientStore() (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\"123456\": &models.Client{\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tID:     \"123456\",\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tSecret: \"12345678\",\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tDomain: \"http://localhost:9094\",\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func ClientStore(cfg Config) (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{}\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfor k, v := range cfg.ClientStoreInfo {\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tclientsConfig[k] = &models.Client{\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tID:     v.ID,\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tSecret: v.Secret,\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tDomain: v.Domain,\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jointwt/twtxt/commit/14e86ea4b5ef71df46297a8ffccc8f259a677fb5?diff=split#diff-0c6fb9f312dbfbfed47d840e0d73f6ba10291681cf8b70ad10979fa20b6aa350L-1",
                    "lines": [
                      {
                        "line": "\t// InvalidConfigValue is the constant value for invalid config values\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// which must be changed for production configurations before successful\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// startup\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInvalidConfigValue = \"INVALID CONFIG VALUE - PLEASE CHANGE THIS VALUE\"\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// DebugMode is the default debug mode\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultDebug = false\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultData is the default data directory for storage\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultData = \"./data\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultStore is the default data store used for accounts, sessions, etc\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultStore = \"bitcask://twtxt.db\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultBaseURL is the default Base URL for the app used to construct feed URLs\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultBaseURL = \"http://0.0.0.0:8000\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultAdminXXX is the default admin user / pod operator\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminUser  = \"admin\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminName  = \"Administrator\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminEmail = \"support@twt.social\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultName is the default instance name\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultName = \"twtxt.net\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultMetaxxx are the default set of <meta> tags used on non-specific views\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaTitle       = \"\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaAuthor      = \"twtxt.net / twt.social\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaKeywords    = \"twtxt, twt, blog, micro-blogging, social, media, decentralised, pod\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaDescription = \"📕 twtxt is a Self-Hosted, Twitter™-like Decentralised microBlogging platform. No ads, no tracking, your content, your data!\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultTheme is the default theme to use ('light' or 'dark')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultTheme = \"dark\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultOpenRegistrations is the default for open user registrations\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultOpenRegistrations = false\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultRegisterMessage is the default message displayed when  registrations are disabled\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultRegisterMessage = \"\"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultCookieSecret is the server's default cookie secret\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultCookieSecret = \"PLEASE_CHANGE_ME!!!\"\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tDefaultCookieSecret = InvalidConfigValue\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 43,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "go/OR/test",
              "name": "OR/test",
              "shortDescription": {
                "text": "Open Redirect"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nAn open redirect attack takes place when a web application redirects the user to an unauthorized and untrusted site. In general, URL redirection refers to the ability of a website or application to redirect users to another site. This is often a benign and useful feature. For example, if a resource has moved to a new location, URL redirection can transfer the user to that location rather than displaying an error message.\nHowever, this ability can be exploited through social engineering, tricking the user into believing they are accessing one site when, in reality, they are being redirected to a dangerous site, such as a phishing site. Once there, the user may be further tricked into entering credentials or personally identifiable information (PII), believing they are still within the original, trusted domain. Attackers can then use these credentials to gain unauthorized access or leverage the user's PII for sale or ransom.\n\n## Best practices for prevention\n* When developing a site or web app, consider implementing a disclaimer page to remind users that they are leaving a secure site.\n* Adopt a zero-trust approach in which all input is treated with suspicion.\n* Validate all input against deny-lists to ensure it does not contain code to redirect the user. This method is good but inherently incomplete.\n* Be aware of all sources of untrusted input being sent to the server that could be used to redirect the user, such as cookies, URL components, filenames, query results, request headers, and more.\n* In particular, be aware of potential API calls that could send input indirectly to redirect the user.\n* To protect end users, use a firewall to block known malicious sites, train users to recognize basic signs of a phishing attack, and ensure that all network endpoints are patched with the most current updates.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "OR",
                  "Security",
                  "InTest",
                  "SourceServer",
                  "SourceHttpHeader",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/akhenakh/gozim/commit/23f94c2e1fc60bd2974cd405808299cd02d9349e?diff=split#diff-598a2ccf97fefad185cb98045f8502a2af86f80a09a3e61ddcb557ea5fa068ddL-1",
                    "lines": [
                      {
                        "line": "http.Redirect(w, r, string(cr.Data), http.StatusFound)\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "http.Redirect(w, r, \"/\"+string(cr.Data), http.StatusFound)\n",
                        "lineNumber": 41,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/google/exposure-notifications-verification-server/commit/089686177e6b2d67e15887f8c0ee3146003636ae?diff=split#diff-243ebed2765f75e6a54f57167212fefb08c3b2a85967ad2acbc0eb78919019c1L-1",
                    "lines": [
                      {
                        "line": "\thttp.Redirect(w, r, r.Header.Get(\"Referer\"), http.StatusSeeOther)\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tlogger := logging.FromContext(r.Context()).Named(\"controller.Back\")\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tref := r.Header.Get(\"Referer\")\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif ref == \"\" {\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tlogger.Warnw(\"referrer is empty\")\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\trefURL, err := url.Parse(ref)\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tlogger.Warnw(\"failed to parse referrer URL\", \"error\", err)\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif got, want := refURL.Host, r.Host; got != want {\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tlogger.Warnw(\"referrer host mismatch (+%q, -%q)\", got, want)\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "\thttp.Redirect(w, r, ref, http.StatusSeeOther)\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/gowww/router/commit/f8f1141d45a96c52d13621cab0d58a8fa008099d?diff=split#diff-d1e1aef472c68045d1f3c4f68a932e458699037baa4e68d5ca07629d4792bee0L-1",
                    "lines": [
                      {
                        "line": "http.Redirect(w, r, r.URL.Path[:len(r.URL.Path)-1], http.StatusPermanentRedirect)\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "r.URL.Path = r.URL.Path[:len(r.URL.Path)-1]\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "http.Redirect(w, r, r.URL.String(), http.StatusPermanentRedirect)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "return\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 3,
                "cwe": [
                  "CWE-601"
                ]
              }
            },
            {
              "id": "go/InsecureHash/test",
              "name": "InsecureHash/test",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/nickvellios/golang-web-app/commit/8ceeeb09c880de70ca2626110afa2846410a8c2a?diff=split#diff-4107bc961286db59ba80aa5bb16fee3909f98505385dd6a51cf9461da04fad16L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"database/sql\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"fmt\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"io\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"regexp\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"webapp/ncrypt\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "type User struct {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tEmail     string  `json:\"email\"`\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tName      string  `json:\"name\"`\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPassword  string  `json:\"password\"`\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHash      string  `json:\"-\"`\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tCSRFToken string  `json:\"-\"`\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tId        int     `json:\"id\"`\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDb        *sql.DB `json:\"-\"`\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Authenticate() bool {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.Load() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ncrypt.CheckPassHash([]byte(u.Hash), []byte(u.Password))\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Load reloads the user from the database.  Only value needed to be set is 'Email', the rest will be populated.\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Load() bool {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT name, password, id, csrftok FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Name, &u.Hash, &u.Id, &u.CSRFToken)\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Save() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Save user to db\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET email=$1, name=$2, password=$3 WHERE id=$4\")\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.Email, u.Name, u.Hash, u.Id)\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "*/\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Create saves a user object to the database.  If a duplicate email is found this will fail.\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Create() error {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.validEmail() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"Invalid email format\")\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif u.Exists() {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"User already exists\")\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.sanitize()\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar lastInsertId int\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := u.Db.QueryRow(\"INSERT INTO users(email, name, password) VALUES($1,$2,$3) returning id;\", u.Email, u.Name, u.Hash).Scan(&lastInsertId)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err //fmt.Println(err.Error())\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Id = lastInsertId\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) validEmail() bool {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tre := regexp.MustCompile(`^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$`)\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn re.MatchString(u.Email)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) sanitize() {\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Clean up user object to prevent XSS attacks\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Exists() bool {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT id FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Id)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) SetCSRF() {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = CSRFToken()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) RevokeCSRF() {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = \"\"\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) HashPass() {\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thash, _ := ncrypt.HashPass([]byte(u.Password))\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Hash = string(hash)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "func CSRFToken() string {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\th := md5.New()\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\th := sha256.New()\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bookingcom/carbonapi/commit/f57ca38fea22194840bae407be94d73c2eda4dfa?diff=split#diff-74597f1e11b4f598d4f75e99aee5237cc9dc7e7cf008e1f33e3c72dc4a93ffe3L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha1\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/hex\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync/atomic\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/bradfitz/gomemcache/memcache\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dgryski/go-expirecache\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrTimeout  = errors.New(\"cache: timeout\")\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrNotFound = errors.New(\"cache: not found\")\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "type BytesCache interface {\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(k string) ([]byte, error)\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(k string, v []byte, expire int32)\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "type NullCache struct{}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Get(string) ([]byte, error) { return nil, ErrNotFound }\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Set(string, []byte, int32)  {}\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewExpireCache(maxsize uint64) BytesCache {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec := expirecache.New(maxsize)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo ec.ApproximateCleaner(10 * time.Second)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ExpireCache{ec: ec}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ExpireCache struct {\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec *expirecache.Cache\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tv, ok := ec.ec.Get(k)\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn v.([]byte), nil\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec.ec.Set(k, v, uint64(len(v)), expire)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Items() int { return ec.ec.Items() }\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Size() uint64 { return ec.ec.Size() }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewMemcached(prefix string, timeoutMs uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &MemcachedCache{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:         prefix,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tqueryTimeoutMs: timeoutMs,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:         memcache.New(servers...),\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "type MemcachedCache struct {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix         string\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient         *memcache.Client\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeouts       uint64\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tqueryTimeoutMs uint64\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdone := make(chan bool, 1)\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar err error\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar item *memcache.Item\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo func() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\titem, err = m.client.Get(m.prefix + hk)\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tdone <- true\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}()\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeout := time.After(time.Duration(m.queryTimeoutMs) * time.Millisecond)\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tselect {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-timeout:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tatomic.AddUint64(&m.timeouts, 1)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-done:\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// translate to internal cache miss error\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err == memcache.ErrCacheMiss {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\terr = ErrNotFound\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif item == nil {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// in case if memcached client returns (nil, nil)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, nil\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn item.Value, nil\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo m.client.Set(&memcache.Item{Key: m.prefix + hk, Value: v, Expiration: expire})\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Timeouts() uint64 {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn atomic.LoadUint64(&m.timeouts)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ReplicatedMemcached represents the caching setup when all the memcached instances\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "// are identical. Each read and write refers to all of them.\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ReplicatedMemcached struct {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix    string\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tinstances []Cache\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeoutMs uint64 // timeout for getting data\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Cache is a cache interface. Mainly for testing abilities.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "type Cache interface {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(string) (*memcache.Item, error)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(*memcache.Item) error\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewReplicatedMemcached creates a set of identical memcached instances.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewReplicatedMemcached(prefix string, timeout uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tm := ReplicatedMemcached{\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:    prefix,\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttimeoutMs: timeout,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, s := range servers {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tm.instances = append(m.instances, memcache.New(s))\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &m\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Get gets value for the key from the replicated memcached.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "// It sends the request to all replicas and picks the first valid answer\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (event if it's a not-found) or times out.\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *ReplicatedMemcached) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// chan size is selected so that timeouts do not block getFromReplica goroutines\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tresCh := make(chan cacheResponse, len(m.instances))\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, replica := range m.instances {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo getFromReplica(replica, k, m.prefix, resCh)\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttout := time.After(time.Duration(m.timeoutMs) * time.Millisecond)\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcacheErrs := \"\"\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor range m.instances {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase res := <-resCh:\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif res.err != nil {\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tcacheErrs = cacheErrs + \"; \" + res.err.Error()\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else if !res.found {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn res.data, nil\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-tout:\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// if this point is reached, it means that all caches returned errors\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil, errors.New(\"all caches failed with errors: \" + cacheErrs)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Set sets the key-value pair for all cache instances.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (rm *ReplicatedMemcached) Set(k string, val []byte, expire int32) {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar wg sync.WaitGroup\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, m := range rm.instances {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twg.Add(1)\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo func(k_ string, val_ []byte, expire_ int32, m_ Cache) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tm_.Set(&memcache.Item{\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tKey:        rm.prefix + k_,\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tValue:      val_,\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tExpiration: expire_,\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t})\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twg.Done()\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}(hk, val, expire, m)\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twg.Wait()\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "type cacheResponse struct {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfound bool\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdata  []byte\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr   error\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "func getFromReplica(m Cache, k string, prefix string, res chan<- cacheResponse) {\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tkey := sha256.Sum256([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/reugn/go-streams/commit/db50128f2c0ac92b8057ecbee8ac6341b36165fe?diff=split#diff-91b73d75d1aca2860b254018c07a1b68715ae6351c37666f98fbc4b42c16d8abL-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/json\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os/signal\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"syscall\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\taero \"github.com/aerospike/aerospike-client-go\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams/flow\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeProperties is the Aerospike connector configuration properties\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeProperties struct {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPolicy    *aero.ClientPolicy\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHostname  string\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPort      int\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tNamespase string\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSetName   string\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ChangeNotificationProperties holds the changes polling configuration\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ChangeNotificationProperties struct {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPollingInterval time.Duration\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSource connector\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSource struct {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient                       *aero.Client\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords                      chan *aero.Result\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy                   *aero.ScanPolicy\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tout                          chan interface{}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx                          context.Context\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties                   *AerospikeProperties\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSource returns a new AerospikeSource instance\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "// set changeNotificationProperties to nil to scan the entire namespace/set\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSource(ctx context.Context,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties,\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy *aero.ScanPolicy,\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties) (*AerospikeSource, error) {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif scanPolicy == nil {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy = aero.NewScanPolicy()\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords := make(chan *aero.Result)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSource{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:                       client,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\trecords:                      records,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy:                   scanPolicy,\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tout:                          make(chan interface{}),\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:                          ctx,\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:                   properties,\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tchangeNotificationProperties: changeNotificationProperties,\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.poll()\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) poll() {\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif as.changeNotificationProperties == nil {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// scan the entire namespace/set\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.doScan()\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclose(as.records)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// get change notifications by polling\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tticker := time.NewTicker(as.changeNotificationProperties.PollingInterval)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase t := <-ticker.C:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tts := t.UnixNano() - as.changeNotificationProperties.PollingInterval.Nanoseconds()\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.scanPolicy.PredExp = []aero.PredExp{\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpRecLastUpdate(),\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerValue(ts),\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerGreater(),\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tlog.Printf(\"Polling records %v\", as.scanPolicy.PredExp)\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.doScan()\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) doScan() {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecordSet, err := as.client.ScanAll(as.scanPolicy, as.properties.Namespase, as.properties.SetName)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tlog.Printf(\"Aerospike client.ScanAll failed with: %v\", err)\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfor result := range recordSet.Results() {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.records <- result\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) init() {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigchan := make(chan os.Signal, 1)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsignal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-sigchan:\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase result, ok := <-as.records:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif !ok {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tbreak loop\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif result.Err == nil {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tas.out <- result.Record\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Scan record error %s\", result.Err)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog.Printf(\"Closing Aerospike consumer\")\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclose(as.out)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tas.client.Close()\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Via streams data through the given flow\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Via(_flow streams.Flow) streams.Flow {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tflow.DoStream(as, _flow)\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn _flow\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Out returns an output channel for sending data\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Out() <-chan interface{} {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn as.out\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeKeyBins is an Aerospike Key and BinMap container\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "// use it to stream records to the AerospikeSink\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeKeyBins struct {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tKey  *aero.Key\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tBins aero.BinMap\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSink connector\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSink struct {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient      *aero.Client\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tin          chan interface{}\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx         context.Context\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties  *AerospikeProperties\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twritePolicy *aero.WritePolicy\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSink returns a new AerospikeSink instance\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSink(ctx context.Context,\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties, writePolicy *aero.WritePolicy) (*AerospikeSink, error) {\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif writePolicy == nil {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy = aero.NewWritePolicy(0, 0)\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSink{\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:      client,\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tin:          make(chan interface{}),\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:         ctx,\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:  properties,\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy: writePolicy,\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSink) init() {\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor msg := range as.in {\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tswitch m := msg.(type) {\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase AerospikeKeyBins:\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err := as.client.Put(as.writePolicy, m.Key, m.Bins); err != nil {\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Aerospike client.Put failed with: %s\", err)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase aero.BinMap:\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// use the md5 hash of a BinMap as a Key\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "jsonStr, err := json.Marshal(m)\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err == nil {\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey, err := aero.NewKey(as.properties.Namespase,\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.properties.SetName,\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmd5.Sum([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tsha256.Sum256([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 89,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "SourceHttpHeader",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/sigstore/cosign/commit/a7806bf769c9ce69bcaee3e2fa1427a350fa954d?diff=split#diff-afc19adc437d3a6ba861083d4de4e705cb865c953e8f4c8c13c3bcaea1aec469L-1",
                    "lines": [
                      {
                        "line": "\t\"path/filepath\"\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/authn\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/name\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/peterbourgon/ff/v3/ffcli\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/sigstore/cosign/pkg/cosign\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Upload() *ffcli.Command {\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar (\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tflagset   = flag.NewFlagSet(\"cosign upload\", flag.ExitOnError)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tsignature = flagset.String(\"signature\", \"\", \"the signature, path to the signature, or {-} for stdin\")\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload   = flagset.String(\"payload\", \"\", \"path to the payload covered by the signature (if using another format)\")\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ffcli.Command{\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tName:       \"upload\",\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortUsage: \"cosign upload <image uri>\",\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortHelp:  \"upload signatures to the supplied container image\",\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tFlagSet:    flagset,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tExec: func(ctx context.Context, args []string) error {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(args) != 1 {\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn flag.ErrHelp\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn UploadCmd(ctx, *signature, *payload, args[0])\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "func UploadCmd(ctx context.Context, sigRef, payloadRef, imageRef string) error {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar b64SigBytes []byte\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tb64SigBytes, err := signatureBytes(sigRef)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else if len(b64SigBytes) == 0 {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"empty signature\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tref, err := name.ParseReference(imageRef)\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tget, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdstTag := ref.Context().Tag(cosign.Munge(get.Descriptor))\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar payload []byte\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif payloadRef == \"\" {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = cosign.Payload(get.Descriptor, nil)\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = ioutil.ReadFile(payloadRef)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// This expects it to not be base64 encoded, so decode first\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigBytes, err := base64.StdEncoding.DecodeString(string(b64SigBytes))\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn cosign.Upload(sigBytes, payload, dstTag)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "type SignatureArgType uint8\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tStdinSignature SignatureArgType = iota\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRawSignature   SignatureArgType = iota\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tFileSignature  SignatureArgType = iota\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func signatureBytes(sigRef string) ([]byte, error) {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// sigRef can be \"-\", a string or a file.\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch signatureType(sigRef) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase StdinSignature:\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadAll(os.Stdin)\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase RawSignature:\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn []byte(sigRef), nil\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase FileSignature:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(sigRef)\n",
                        "lineNumber": 110,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(filepath.Clean(sigRef))\n",
                        "lineNumber": 111,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/kvdi/kvdi/commit/1297e7e5fcae097229e05cf31d95f06a736414bf?diff=split#diff-37d9857eda65693ff81ac1d04e138819aa6f7eff8f098ba05d736374b22e29ebL-1",
                    "lines": [
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, handler.Filename)\n",
                        "lineNumber": 326,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, filepath.Clean(handler.Filename))\n",
                        "lineNumber": 326,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tf, err := os.OpenFile(dstFile, os.O_WRONLY|os.O_CREATE, 0666)\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bazelbuild/bazel-gazelle/commit/ff4d67f395b3f4d1dc9810eeceb61585fea252cb?diff=split#diff-32b3dd34b70937b5c3d53114046fa35fc0f5afd2cd13f8fa40c7e17a506b5c24L-1",
                    "lines": [
                      {
                        "line": "\tuc.c.RepoRoot, err = filepath.EvalSymlinks(uc.c.RepoRoot)\n",
                        "lineNumber": 240,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 241,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"failed to evaluate symlinks for repo root: %v\", err)\n",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 243,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, dir := range uc.c.Dirs {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !isDescendingDir(dir, uc.c.RepoRoot) {\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, fmt.Errorf(\"dir %q is not a subdirectory of repo root %q\", dir, uc.c.RepoRoot)\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ValidBuildFileNames = strings.Split(*buildFileName, \",\")\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif len(uc.c.ValidBuildFileNames) == 0 {\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"no valid build file names specified\")\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.SetBuildTags(*buildTags)\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.PreprocessTags()\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif goPrefix.set {\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix = goPrefix.value\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix, err = loadGoPrefix(uc.c)\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err := config.CheckPrefix(uc.c.GoPrefix); err != nil {\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ShouldFix = cmd == fixCmd\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.DepMode, err = config.DependencyModeFromString(*external)\n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif proto.set {\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoMode, err = config.ProtoModeFromString(proto.value)\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoModeExplicit = true\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "\temit, ok := modeFromName[*mode]\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"unrecognized emit mode: %q\", *mode)\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.emit = emit\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outDir = *outDir\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outSuffix = *outSuffix\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspacePath := filepath.Join(uc.c.RepoRoot, \"WORKSPACE\")\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspaceContent, err := ioutil.ReadFile(workspacePath)\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 12,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "python/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "PT",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/malept/gmusicprocurator/commit/0df7be3ef3ca89b42331939d88ca9919944295c9?diff=split#diff-9e23a9ffa43e64422973783e9021248781e0732c50d02ec8b7b1ac680b56c173L-1",
                    "lines": [
                      {
                        "line": "from flask import abort, request, Response, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask import abort, request, Response, safe_join, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "from flask.json import jsonify\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import os\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import requests\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from shutil import copyfileobj\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "from tempfile import NamedTemporaryFile\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "from xspf import Xspf\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..app import app, music\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..id3 import MP3\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "JSON_TYPE = 'application/json'\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "XSPF_TYPE = 'application/xspf+xml'\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Mapping: Google : Mutagen EasyID3\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "METADATA_FIELDS = {\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'artist': 'artist',\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'title': 'title',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'album': 'album',\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'albumArtist': 'albumartistsort',\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'composer': 'composer',\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'trackNumber': 'tracknumber',\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'discNumber': 'discnumber',\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'genre': 'genre',\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'year': 'date',\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'durationMillis': 'length',\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "if app.config['GMP_EMBED_ALBUM_ART']:\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    METADATA_FIELDS['albumArtRef'] = 'albumart'\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def mp3ify(resp):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Sets MIME Type and Content-Disposition header suitable for MP3s.'''\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.mimetype = 'audio/mpeg'\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.headers.add('Content-Disposition', 'inline', filename='song.mp3')\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return resp\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "def send_song(filename):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Generates a Flask response for an MP3 on the filesystem.'''\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return mp3ify(send_file(filename))\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "def gmusic_playlist_to_xspf(playlist_id, playlist):\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Converts a playlist from gmusicapi into an XSPF playlist.\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :type playlist: dict\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return: XSPF (XML), UTF-8 encoded\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :rtype: str\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_ts = int(playlist['creationTimestamp']) / 1000000.0\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_iso = datetime.utcfromtimestamp(create_ts).isoformat()\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    p_url = url_for('get_playlist', _external=True, playlist_id=playlist_id)\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xspf = Xspf(title=playlist['name'], creator=playlist['ownerName'],\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                date=create_iso, location=p_url)\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for track in playlist['tracks']:\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if 'track' not in track:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tmd = track['track']\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = url_for('get_song', _external=True, song_id=tmd['storeId'])\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        metadata = {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'location': url,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': tmd['title'],\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'creator': tmd['artist'],\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'album': tmd['album'],\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'trackNum': str(tmd['trackNumber']),\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'duration': tmd['durationMillis'],\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        album_art = tmd.get('albumArtRef', [])\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if album_art:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "            metadata['image'] = album_art[0]['url']\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xspf.add_track(metadata)\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return xspf.toXml()\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/songs/<song_id>')\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_song(song_id):\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Retrieves the MP3 for a given ID.'''\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cached_fname = os.path.join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cached_fname = safe_join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # rather than \"application/x-rar\"\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # check file type via mime type\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "        file_type = magic.from_file(filepath, mime=True)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if file_type != 'application/x-rar' and file_type != 'application/x-gzip' and file_type != 'application/zip':\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            os.remove(filepath)\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 7,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "SourceHttpBody",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ory/hydra/commit/043c6635fa3b1661b4a666f26cebf16c2306bfdb?diff=split#diff-37b8edd0d01d055fd4ede6b212ab56428bed90cd46d9960a1edfa874d8707293L-1",
                    "lines": [
                      {
                        "line": "\t\"html/template\"\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"net/http\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/hydra/cmd/cli\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/julienschmidt/httprouter\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/toqueteos/webbrowser\"\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"golang.org/x/oauth2\"\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/cmdx\"\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/flagx\"\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/randx\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/tlsx\"\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/urlx\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserWelcome = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "        Connect</a> library.</p>\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "    Hydra).\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "    To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p><a href=\"{{ .URL }}\">Authorize application</a></p>\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>`))\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserError = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>An error occurred</h1>\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h2>{{ .Name }}</h2>\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Description }}</p>\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Hint }}</p>\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Debug }}</p>\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserResult = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "<html>\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "<ul>\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Access Token: <code>{{ .AccessToken }}</code></li>\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Refresh Token: <code>{{ .RefreshToken }}</code></li>\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Expires in: <code>{{ .Expiry }}</code></li>\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>ID Token: <code>{{ .IDToken }}</code></li>\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "</ul>\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "// tokenUserCmd represents the token command\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserCmd = &cobra.Command{\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tUse:   \"user\",\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tShort: \"An exemplary OAuth 2.0 Client performing the OAuth 2.0 Authorize Code Flow\",\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tLong: `Starts an exemplary web server that acts as an OAuth 2.0 Client performing the Authorize Code Flow.\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command will help you to see if ORY Hydra has been configured properly.\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command must not be used for anything else than manual testing or demo purposes. The server will terminate on error\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "and success.`,\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRun: func(cmd *cobra.Command, args []string) {\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx := context.Background()\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif flagx.MustGetBool(cmd, \"skip-tls-verify\") {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// fmt.Println(\"Warning: Skipping TLS Certificate Verification.\")\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx = context.WithValue(context.Background(), oauth2.HTTPClient, &http.Client{Transport: &http.Transport{\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}})\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tisSSL := flagx.MustGetBool(cmd, \"https\")\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tport := flagx.MustGetInt(cmd, \"port\")\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscopes := flagx.MustGetStringSlice(cmd, \"scope\")\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprompt := flagx.MustGetStringSlice(cmd, \"prompt\")\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmaxAge := flagx.MustGetInt(cmd, \"max-age\")\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tredirectUrl := flagx.MustGetString(cmd, \"redirect\")\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbackend := flagx.MustGetString(cmd, \"token-url\")\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfrontend := flagx.MustGetString(cmd, \"auth-url\")\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\taudience := flagx.MustGetStringSlice(cmd, \"audience\")\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientID := flagx.MustGetString(cmd, \"client-id\")\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientSecret := flagx.MustGetString(cmd, \"client-secret\")\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif clientID == \"\" || clientSecret == \"\" {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Print(cmd.UsageString())\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(\"Please provide a Client ID and Client Secret using flags --client-id and --client-secret, or environment variables OAUTH2_CLIENT_ID and OAUTH2_CLIENT_SECRET.\")\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproto := \"http\"\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tproto = \"https\"\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserverLocation := fmt.Sprintf(\"%s://127.0.0.1:%d/\", proto, port)\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif redirectUrl == \"\" {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tredirectUrl = serverLocation + \"callback\"\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif backend == \"\" {\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbackend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/token\").String()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif frontend == \"\" {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfrontend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/auth\").String()\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tconf := oauth2.Config{\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientID:     clientID,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientSecret: clientSecret,\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tEndpoint: oauth2.Endpoint{\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTokenURL: backend,\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tAuthURL:  frontend,\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t},\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tRedirectURL: redirectUrl,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tScopes:      scopes,\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tstate, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tnonce, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tauthCodeURL := conf.AuthCodeURL(\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tstring(state),\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"audience\", strings.Join(audience, \"+\")),\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"nonce\", string(nonce)),\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"prompt\", strings.Join(prompt, \"+\")),\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"max_age\", strconv.Itoa(maxAge)),\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t)\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !flagx.MustGetBool(cmd, \"no-open\") {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twebbrowser.Open(serverLocation)\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up home route on \" + serverLocation)\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up callback listener on \" + serverLocation + \"callback\")\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Press ctrl + c on Linux / Windows or cmd + c on OSX to end the process.\")\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Printf(\"If your browser does not open automatically, navigate to:\\n\\n\\t%s\\n\\n\", serverLocation)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr := httprouter.New()\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar tlsc *tls.Config\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tkey, err := rsa.GenerateKey(rand.Reader, 2048)\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate RSA key pair: %s\", err)\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcert, err := tlsx.CreateSelfSignedTLSCertificate(key)\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate self-signed TLS Certificate: %s\", err)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttlsc = &tls.Config{Certificates: []tls.Certificate{*cert}}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserver := &http.Server{Addr: fmt.Sprintf(\":%d\", port), Handler: r, TLSConfig: tlsc}\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar shutdown = func() {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttime.Sleep(time.Second * 1)\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tdefer cancel()\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tserver.Shutdown(ctx)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tw.Write([]byte(fmt.Sprintf(`\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "<html><head></head><body>\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID Connect</a> library.</p>\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY Hydra).\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p><a href=\"%s\">Authorize application</a></p>\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "`, authCodeURL)))\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t})\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/callback\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(r.URL.Query().Get(\"error\")) > 0 {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"Got error: %s\\n\", r.URL.Query().Get(\"error_description\"))\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p><p>%s</p><p>%s</p></body></html>\", r.URL.Query().Get(\"error\"), r.URL.Query().Get(\"error_description\"), r.URL.Query().Get(\"error_hint\"), r.URL.Query().Get(\"error_debug\"))\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tgo shutdown()\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif r.URL.Query().Get(\"state\") != string(state) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"States do not match. Expected %s, got %s\\n\", string(state), r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p></body></html>\", \"States do not match\", \"Expected state \"+string(state)+\" but got \"+r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\t_ = tokenUserError.Execute(w, &ed{\n",
                        "lineNumber": 221,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tName:        \"States do not match\",\n",
                        "lineNumber": 222,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tDescription: \"Expected state \" + string(state) + \" but got \" + r.URL.Query().Get(\"state\"),\n",
                        "lineNumber": 223,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t})\n",
                        "lineNumber": 224,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ewhal/Pastebin/commit/bfdb8c815ad06f8b114521be2997a830285ac92b?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\"html\"\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"io\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"net/http\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dchest/uniuri\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ewhal/pygments\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDIRECTORY = \"/tmp/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "ADDRESS = \"https://p.pantsu.cat/\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "LENGTH    = 4\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tTEXT    = \"$ <command> | curl -F 'p=<-' \" + ADDRESS + \"\\n\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPORT    = \":9900\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "func check(err error) {\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err)\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func exists(location string) bool {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif _, err := os.Stat(location); err != nil {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif os.IsNotExist(err) {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn false\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generateName() string {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := uniuri.NewLen(LENGTH)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile := exists(DIRECTORY + s)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file == true {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgenerateName()\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "func save(raw []byte) string {\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpaste := raw[85 : len(raw)-46]\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := generateName()\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlocation := DIRECTORY + s\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ioutil.WriteFile(location, paste, 0644)\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "check(err)\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "func pasteHandler(w http.ResponseWriter, r *http.Request) {\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch r.Method {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase \"GET\":\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam1 := r.URL.Query().Get(\"p\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam2 := r.URL.Query().Get(\"lang\")\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif param1 != \"\" {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\td := DIRECTORY + param1\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ts, err := ioutil.ReadFile(d)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err != nil {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\thttp.Error(w, err.Error(), 500)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "if param2 != \"\" {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(string(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tio.WriteString(w, string(highlight))\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(html.UnescapeString(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tio.WriteString(w, highlight)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fairfaxmedia/flywheel/commit/8e4de33a3346aa6c85af67a52d9b0eaa43cdabdd?diff=split#diff-6971e2713fe98b79ea18e9748bf68928f6ebcd4d93e7a27f10e7472ce6d78a48L-1",
                    "lines": [
                      {
                        "line": "\tif ok && flywheel[0] == \"status\" {\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf, err := json.Marshal(pong)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfmt.Fprint(w, err)\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Write(buf)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif pong.Err != nil {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbody := fmt.Sprintf(HTML_ERROR, pong.Err)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.Write([]byte(body))\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 48,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/goharbor/harbor/commit/583ce589f16e5d34c60e090b39405a24021c3f44?diff=split#diff-f56bf727da9a9623dd562299c2b7c401b03f333040982de8a993b94cd54b8168L-1",
                    "lines": [
                      {
                        "line": "host:     \"postgres\",\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "port:     5432,\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "usr:      \"postgres\",\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pwd:      password,\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "database: \"postgres\",\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host:     clairDB.Host,\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "port:     clairDB.Port,\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "usr:      clairDB.Username,\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "pwd:      clairDB.Password,\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "database: clairDB.Database,\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "return userName\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/Ssrf/test",
              "name": "Ssrf/test",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "Ssrf",
                  "Security",
                  "InTest",
                  "SourceServer",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "go/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/nickvellios/golang-web-app/commit/8ceeeb09c880de70ca2626110afa2846410a8c2a?diff=split#diff-4107bc961286db59ba80aa5bb16fee3909f98505385dd6a51cf9461da04fad16L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"database/sql\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"fmt\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"io\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"regexp\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"webapp/ncrypt\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "type User struct {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tEmail     string  `json:\"email\"`\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tName      string  `json:\"name\"`\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPassword  string  `json:\"password\"`\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHash      string  `json:\"-\"`\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tCSRFToken string  `json:\"-\"`\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tId        int     `json:\"id\"`\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDb        *sql.DB `json:\"-\"`\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Authenticate() bool {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.Load() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ncrypt.CheckPassHash([]byte(u.Hash), []byte(u.Password))\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Load reloads the user from the database.  Only value needed to be set is 'Email', the rest will be populated.\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Load() bool {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT name, password, id, csrftok FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Name, &u.Hash, &u.Id, &u.CSRFToken)\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Save() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Save user to db\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET email=$1, name=$2, password=$3 WHERE id=$4\")\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.Email, u.Name, u.Hash, u.Id)\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "*/\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Create saves a user object to the database.  If a duplicate email is found this will fail.\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Create() error {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.validEmail() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"Invalid email format\")\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif u.Exists() {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"User already exists\")\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.sanitize()\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar lastInsertId int\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := u.Db.QueryRow(\"INSERT INTO users(email, name, password) VALUES($1,$2,$3) returning id;\", u.Email, u.Name, u.Hash).Scan(&lastInsertId)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err //fmt.Println(err.Error())\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Id = lastInsertId\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) validEmail() bool {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tre := regexp.MustCompile(`^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$`)\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn re.MatchString(u.Email)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) sanitize() {\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Clean up user object to prevent XSS attacks\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Exists() bool {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT id FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Id)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) SetCSRF() {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = CSRFToken()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) RevokeCSRF() {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = \"\"\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) HashPass() {\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thash, _ := ncrypt.HashPass([]byte(u.Password))\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Hash = string(hash)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "func CSRFToken() string {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\th := md5.New()\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\th := sha256.New()\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bookingcom/carbonapi/commit/f57ca38fea22194840bae407be94d73c2eda4dfa?diff=split#diff-74597f1e11b4f598d4f75e99aee5237cc9dc7e7cf008e1f33e3c72dc4a93ffe3L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha1\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/hex\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync/atomic\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/bradfitz/gomemcache/memcache\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dgryski/go-expirecache\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrTimeout  = errors.New(\"cache: timeout\")\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrNotFound = errors.New(\"cache: not found\")\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "type BytesCache interface {\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(k string) ([]byte, error)\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(k string, v []byte, expire int32)\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "type NullCache struct{}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Get(string) ([]byte, error) { return nil, ErrNotFound }\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Set(string, []byte, int32)  {}\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewExpireCache(maxsize uint64) BytesCache {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec := expirecache.New(maxsize)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo ec.ApproximateCleaner(10 * time.Second)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ExpireCache{ec: ec}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ExpireCache struct {\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec *expirecache.Cache\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tv, ok := ec.ec.Get(k)\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn v.([]byte), nil\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec.ec.Set(k, v, uint64(len(v)), expire)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Items() int { return ec.ec.Items() }\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Size() uint64 { return ec.ec.Size() }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewMemcached(prefix string, timeoutMs uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &MemcachedCache{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:         prefix,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tqueryTimeoutMs: timeoutMs,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:         memcache.New(servers...),\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "type MemcachedCache struct {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix         string\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient         *memcache.Client\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeouts       uint64\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tqueryTimeoutMs uint64\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdone := make(chan bool, 1)\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar err error\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar item *memcache.Item\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo func() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\titem, err = m.client.Get(m.prefix + hk)\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tdone <- true\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}()\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeout := time.After(time.Duration(m.queryTimeoutMs) * time.Millisecond)\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tselect {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-timeout:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tatomic.AddUint64(&m.timeouts, 1)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-done:\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// translate to internal cache miss error\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err == memcache.ErrCacheMiss {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\terr = ErrNotFound\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif item == nil {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// in case if memcached client returns (nil, nil)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, nil\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn item.Value, nil\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo m.client.Set(&memcache.Item{Key: m.prefix + hk, Value: v, Expiration: expire})\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Timeouts() uint64 {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn atomic.LoadUint64(&m.timeouts)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ReplicatedMemcached represents the caching setup when all the memcached instances\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "// are identical. Each read and write refers to all of them.\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ReplicatedMemcached struct {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix    string\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tinstances []Cache\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeoutMs uint64 // timeout for getting data\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Cache is a cache interface. Mainly for testing abilities.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "type Cache interface {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(string) (*memcache.Item, error)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(*memcache.Item) error\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewReplicatedMemcached creates a set of identical memcached instances.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewReplicatedMemcached(prefix string, timeout uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tm := ReplicatedMemcached{\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:    prefix,\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttimeoutMs: timeout,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, s := range servers {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tm.instances = append(m.instances, memcache.New(s))\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &m\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Get gets value for the key from the replicated memcached.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "// It sends the request to all replicas and picks the first valid answer\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (event if it's a not-found) or times out.\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *ReplicatedMemcached) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// chan size is selected so that timeouts do not block getFromReplica goroutines\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tresCh := make(chan cacheResponse, len(m.instances))\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, replica := range m.instances {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo getFromReplica(replica, k, m.prefix, resCh)\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttout := time.After(time.Duration(m.timeoutMs) * time.Millisecond)\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcacheErrs := \"\"\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor range m.instances {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase res := <-resCh:\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif res.err != nil {\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tcacheErrs = cacheErrs + \"; \" + res.err.Error()\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else if !res.found {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn res.data, nil\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-tout:\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// if this point is reached, it means that all caches returned errors\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil, errors.New(\"all caches failed with errors: \" + cacheErrs)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Set sets the key-value pair for all cache instances.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (rm *ReplicatedMemcached) Set(k string, val []byte, expire int32) {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar wg sync.WaitGroup\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, m := range rm.instances {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twg.Add(1)\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo func(k_ string, val_ []byte, expire_ int32, m_ Cache) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tm_.Set(&memcache.Item{\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tKey:        rm.prefix + k_,\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tValue:      val_,\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tExpiration: expire_,\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t})\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twg.Done()\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}(hk, val, expire, m)\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twg.Wait()\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "type cacheResponse struct {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfound bool\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdata  []byte\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr   error\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "func getFromReplica(m Cache, k string, prefix string, res chan<- cacheResponse) {\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tkey := sha256.Sum256([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/reugn/go-streams/commit/db50128f2c0ac92b8057ecbee8ac6341b36165fe?diff=split#diff-91b73d75d1aca2860b254018c07a1b68715ae6351c37666f98fbc4b42c16d8abL-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/json\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os/signal\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"syscall\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\taero \"github.com/aerospike/aerospike-client-go\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams/flow\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeProperties is the Aerospike connector configuration properties\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeProperties struct {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPolicy    *aero.ClientPolicy\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHostname  string\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPort      int\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tNamespase string\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSetName   string\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ChangeNotificationProperties holds the changes polling configuration\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ChangeNotificationProperties struct {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPollingInterval time.Duration\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSource connector\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSource struct {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient                       *aero.Client\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords                      chan *aero.Result\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy                   *aero.ScanPolicy\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tout                          chan interface{}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx                          context.Context\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties                   *AerospikeProperties\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSource returns a new AerospikeSource instance\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "// set changeNotificationProperties to nil to scan the entire namespace/set\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSource(ctx context.Context,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties,\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy *aero.ScanPolicy,\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties) (*AerospikeSource, error) {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif scanPolicy == nil {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy = aero.NewScanPolicy()\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords := make(chan *aero.Result)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSource{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:                       client,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\trecords:                      records,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy:                   scanPolicy,\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tout:                          make(chan interface{}),\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:                          ctx,\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:                   properties,\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tchangeNotificationProperties: changeNotificationProperties,\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.poll()\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) poll() {\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif as.changeNotificationProperties == nil {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// scan the entire namespace/set\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.doScan()\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclose(as.records)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// get change notifications by polling\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tticker := time.NewTicker(as.changeNotificationProperties.PollingInterval)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase t := <-ticker.C:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tts := t.UnixNano() - as.changeNotificationProperties.PollingInterval.Nanoseconds()\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.scanPolicy.PredExp = []aero.PredExp{\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpRecLastUpdate(),\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerValue(ts),\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerGreater(),\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tlog.Printf(\"Polling records %v\", as.scanPolicy.PredExp)\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.doScan()\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) doScan() {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecordSet, err := as.client.ScanAll(as.scanPolicy, as.properties.Namespase, as.properties.SetName)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tlog.Printf(\"Aerospike client.ScanAll failed with: %v\", err)\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfor result := range recordSet.Results() {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.records <- result\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) init() {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigchan := make(chan os.Signal, 1)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsignal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-sigchan:\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase result, ok := <-as.records:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif !ok {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tbreak loop\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif result.Err == nil {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tas.out <- result.Record\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Scan record error %s\", result.Err)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog.Printf(\"Closing Aerospike consumer\")\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclose(as.out)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tas.client.Close()\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Via streams data through the given flow\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Via(_flow streams.Flow) streams.Flow {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tflow.DoStream(as, _flow)\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn _flow\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Out returns an output channel for sending data\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Out() <-chan interface{} {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn as.out\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeKeyBins is an Aerospike Key and BinMap container\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "// use it to stream records to the AerospikeSink\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeKeyBins struct {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tKey  *aero.Key\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tBins aero.BinMap\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSink connector\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSink struct {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient      *aero.Client\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tin          chan interface{}\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx         context.Context\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties  *AerospikeProperties\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twritePolicy *aero.WritePolicy\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSink returns a new AerospikeSink instance\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSink(ctx context.Context,\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties, writePolicy *aero.WritePolicy) (*AerospikeSink, error) {\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif writePolicy == nil {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy = aero.NewWritePolicy(0, 0)\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSink{\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:      client,\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tin:          make(chan interface{}),\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:         ctx,\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:  properties,\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy: writePolicy,\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSink) init() {\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor msg := range as.in {\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tswitch m := msg.(type) {\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase AerospikeKeyBins:\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err := as.client.Put(as.writePolicy, m.Key, m.Bins); err != nil {\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Aerospike client.Put failed with: %s\", err)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase aero.BinMap:\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// use the md5 hash of a BinMap as a Key\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "jsonStr, err := json.Marshal(m)\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err == nil {\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey, err := aero.NewKey(as.properties.Namespase,\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.properties.SetName,\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmd5.Sum([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tsha256.Sum256([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 89,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/HardcodedNonCryptoSecret",
              "name": "HardcodedNonCryptoSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedNonCryptoSecret",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bytedance/Elkeid/commit/b070a02bf892b9e386d413041f09bd02d6e4468c?diff=split#diff-a74e9f02d2ff047da859c6d9072f60c804374279234946d0df77c91b6258e4b7L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tClientKey = `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIEowIBAAKCAQEAuLggSmOGW6mKi3kQwXYWfeA5j92yAgCOilhIX0gfW5ETYUoz\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Ws6gzT90vtHuzEWZubK9c7WGGFLsj58HGBPqAKLzpweGA4/Bsv+mrMKKWXFCb+yE\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "4by46QET8C3lLZP7Yf8vZ4sPDivwMWnu+JvamR9Lh0ErXAopO34ebd/hwCtyWEt/\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fLxOhro1dHD0Jc/bBOmOIQLa6J9PbmhVs6IebIVRL8W8bChgdSjpKo1UC2B8Jngf\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "T/efpgh4xrIdW6ziqy14uc29VuYaCEDywxP3cCFfGfMPan+wwW12Ja43ttna1LGf\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GQMNoZsishmCEx9MHtcvLJ0XuLaOhTeDK9rz3wIDAQABAoIBAC2ftMIK4PWk44Zd\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aakO/LEsf6ssC7p43rwG4CFAlBYuuAWwqQyFuqvXP4OeIIgtrLF0F10L+cnqOWmj\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "0sG8sXBkzx9zOUOJ70LB6C4FgtxioBE67vs+fMF4Na999nwSb+WdfNzrONW8PoBF\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9PNMs2pck3AdxZLfI54BIYzr3jtzVDJ0Rf2GwgEXA9XqJIeRSjNZj6vcIlpQ2NeP\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "r3/zCDhfaVHnO1f89rTRWPRYxlx32eAU4s+WX6HA3OsWm2ec9i+J3k9qiuDnDZtU\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SfOox0nHsrszO1H3aJRiE2GClyOrHbnKXDtKo/m39sF03J8SnWyY/odcqN3TLI0x\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IV9iTuECgYEA4jCxhkloP6OWoF9UbtC5PCzmW9MJDGh4+Lthxi51FBSHW0N2TvsA\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "EW2M0aQ3qrlyUuLLLsKgJ7qRHUaVkV7Im8j8GHa1H4AXI0ZLlImsgOmpxaeeDVFu\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "xDtjDZtFWp+RWPNVeabS1sMFh3/+FX2xco7siHSYO0FckeuLHK8O+jECgYEA0RBE\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Q5kicAbBIlg3KY/D9VOov8/eaVLqTURbzansBYeN1gTYvyPA0bKygW2KbOb8Htvq\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "goCz01RUKHc3D6E4o1zauialorwZBKs/4nivU/HKAQ2nQS5z1tALlRk4kdacapYH\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "7iFPxvSpz31ksc7FaRjilWE479kSn21pbhYhOw8CgYBkfTWhb2N9QnRc831Tbi+d\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aGU/TlaqyI9WEgmyPlmNfkFUbnhVRnYVSBJT4R1KH/GGmXOjZpw4ik6GLyGr3+xI\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Kda2F6cIQ6QD6+sQJsoYy7a9NWamjBMl4yxykxUQ2et9FT5YOaFaAHKobFi5u4nm\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "V1EGnqYzTSqPOZIoQC3rQQKBgQC/a2t1kXLsq+KOdcMcNNwxdgYeik+UlCyfzqVX\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6+uFLJZ7jTh/2lakKkAzLX7/M4dJIgbYssr0BlSAMJejofRf75b9toEWPa+SjNIT\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pHi0HcDdsgigL840s4zHWa5oKd5R4Uklii6ndkE9EAzwmOg70GM2byxYv6LDgsRz\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "3aNTlQKBgE/64EGwbQ/MnuGwEDaWV1BsdjzZjKL9yr2udpfR8vEyJZR7y3CQha9w\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "u+CsLYjkGEDnGX7d/N5KeeAWD7esLMfFEHRmYKsXKmicBvyzMIciVATWuo4z1LH5\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "HEW5L05P4qYNwZEt/0gUukrYfWyTm+Q435aPB/d12GDn28ZjUAJe\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tClientCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIDxTCCAq2gAwIBAgIJAMfNY7aa7VezMA0GCSqGSIb3DQEBCwUAME4xCzAJBgNV\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BAYTAkdCMQ4wDAYDVQQHDAVDaGluYTERMA8GA1UECgwIaGlkcy1zdnIxHDAaBgNV\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BAMME2hpZHMtc3ZyQGdpdGh1Yi5jb20wHhcNMjEwMzExMDgwNTE5WhcNMzEwMzA5\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MDgwNTE5WjBOMQswCQYDVQQGEwJHQjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoM\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CGhpZHMtc3ZyMRwwGgYDVQQDDBNoaWRzLXN2ckBnaXRodWIuY29tMIIBIjANBgkq\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuLggSmOGW6mKi3kQwXYWfeA5j92yAgCO\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ilhIX0gfW5ETYUozWs6gzT90vtHuzEWZubK9c7WGGFLsj58HGBPqAKLzpweGA4/B\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "sv+mrMKKWXFCb+yE4by46QET8C3lLZP7Yf8vZ4sPDivwMWnu+JvamR9Lh0ErXAop\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "O34ebd/hwCtyWEt/fLxOhro1dHD0Jc/bBOmOIQLa6J9PbmhVs6IebIVRL8W8bChg\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "dSjpKo1UC2B8JngfT/efpgh4xrIdW6ziqy14uc29VuYaCEDywxP3cCFfGfMPan+w\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "wW12Ja43ttna1LGfGQMNoZsishmCEx9MHtcvLJ0XuLaOhTeDK9rz3wIDAQABo4Gl\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIGiMGgGA1UdIwRhMF+hUqRQME4xCzAJBgNVBAYTAkdCMQ4wDAYDVQQHDAVDaGlu\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "YTERMA8GA1UECgwIaGlkcy1zdnIxHDAaBgNVBAMME2hpZHMtc3ZyQGdpdGh1Yi5j\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b22CCQC3DBG9MtGPzDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIE8DAeBgNVHREEFzAV\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ghNoaWRzX3N2ci5naXRodWIuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQCiMeOHraB8\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "3yvoGVetHJPCKlFnThsxoS1fZtl3RT2blDVJeXb3m3EVJJRw+RAeQ2dAg9BIDXDI\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6k3ZBveewxLSu6EggKn8RKzprek/nPhawOU+qiEbwWENSQFj/5FY2sPE+RXjlBwe\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "/lbmRbcmJsLtMIqzMkhFHx/mEliIVwC8B/J3trrhGcLRuvB6sXM79nqkjGYhVyIN\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "y0x1DbB/I8ifmx3L+rCW5iaNp0pHHpjUtrU5yxcb5OtfRuYVp5RjvzETU9XbTWKU\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5jGwhvZ3QEy568CeDEYUyofANREfnYohQHS6NcZ8D5Iqxx4OxovoLygcfE4MYVZq\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2L9cH5F0OWIs\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tCaCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIDGjCCAgICCQC3DBG9MtGPzDANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJH\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "QjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoMCGhpZHMtc3ZyMRwwGgYDVQQDDBNo\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aWRzLXN2ckBnaXRodWIuY29tMCAXDTIxMDMxMTA4MDUxOVoYDzIxMjEwMjE1MDgw\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "NTE5WjBOMQswCQYDVQQGEwJHQjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoMCGhp\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ZHMtc3ZyMRwwGgYDVQQDDBNoaWRzLXN2ckBnaXRodWIuY29tMIIBIjANBgkqhkiG\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0YUgwaI9gyZxpl03mh4hv6T0/WaB3E7GeK5e\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "w4eS5VO6I9b+8DDYJAHqhxraQAt/F9TBwVW1Oljo8YNuyjaCpSlRjQnqHiLSA1Tq\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "P7YAMoZq3MnfmE882QR9/aJ4JL+c4fHg8GauilR/1TaZMj3sEsRenqFk5bFW+fbm\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "VYmWR0/Oeu3sNJ7mG8WgrWeFF3uUz+L98RXmeLbGGVDqObTogOPXz0rZsVkzGVYs\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "KeBnBOdVvqdbs4FUsVgw/BYy2XrBDdSNnfxjXD7tp+F+IRtyx4kN8wEsQ5aJTpC+\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "U9QzFJBglyjjepCqfqdSjW4J5Dzdv2KsFDza/lvHtE8U4NOoVQIDAQABMA0GCSqG\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SIb3DQEBCwUAA4IBAQBxUVzWjaDY05Vk27xWooXoQIcTrc5/+ly7UPnoF2sk1tc6\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "nP4VpNAFNk46MP9PhGLa6qIqFEQXhWB99AyGliSb8o2Lv/+kvm4y7ch7v5W/Ae0X\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "UIMCO6IBMU8QP3niuaJSTcEmu7B1zIj03lLlbZFboLns/2U46ZnmWtyxxBcxfM/O\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RtQeJpfIffQZunx9ftuvEix54mOncrYow9dPAFkcDxgcbRtgKN7ESksL8YherCuI\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pZCj0XpwSglYjDby0p2nuANUucj6m8DSqDVIzbNcAvycbYe07kc1PiUpi1vcGhI+\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uAVEAPxTCl1poB75onPUNTb6NigCpGA5Ip1zBnUq\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import _ \"embed\"\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed client.key\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "var ClientKey []byte\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed client.crt\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "var ClientCert []byte\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed ca.crt\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "var CaCert []byte\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ChrisRx/dungeonfs/commit/34ea225ad07c50f262756fd1d3eb821962e29347?diff=split#diff-92e2cbc286c92525f3cfcd6ea1c84f711f4f65379d23431b01ac18bccc174f4eL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tTroll = `\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                       _-------------------_\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     _            _   /                     \\\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    | \\  __--__  / |  |  Roar! I'm a troll! | \n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    |  \\/      \\/  |  \\                     /\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \\__  \\    / __ /   -_  ________________-\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     /   O    -   \\     / /\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    |      oo      |    /\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \\ -- ______ -- /  \n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     (_  |\\||/|  _)\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "       --______--\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "`\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tKey = []byte(`-----BEGIN PRIVATE KEY-----\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAMjSi/S67mqFDGP0\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "+MRBkidG6zenktXMPMcwXCN1WQjHAo4Gcp9GqjH+IVTgBSO7tdz9VxxKAJgSFXqv\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kWj95QjoT6OTjVk0UXH4t9PV7OU2jn/xnA8pqhg4sxVzbVq9LSB55CsqNpX5IpUu\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9cUUgiq9rzDBmh4bg1X9fUHufAxbAgMBAAECgYAfARKGeA2y+FOPYxS9B/qOgc5y\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "yzZKN7vybK7s8oMKbd8hGjG8EWbZTQjMV8GzYJmVQq+eOHabA7+5Lz3d3cTsMu5I\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DSCKGers7AHHQAYQv0P14CxBp5PFY5qewMYB/FITcD/Z25YXlg3ZjwCB3XrQwLnN\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "QB83C1r6lcFi2fdioQJBAPP/Wy39L+Vda7thcRPcQpb4FmpwU+v+Rzpxov5KRq9G\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "38u3BVd0GdSwQWLVDMmvSLy70doGgxJ5p54YPScxCfkCQQDSs31+ftL34+lSXtrx\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5utBZc34q3UcCOa3twoHTzxGeM4BiYvAcVa+PjdWRaNXz71UBs2GQWWihApZoGk9\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2X3zAkEAllFwI/ICauTV9Re/6UNeBtIKRUK0gQQjb58Ikm7CA0O/pio38TvGmiCH\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "99JXUX1aa2OukgpG/7/RAvXd3uI4SQJAdHJ2nP6CojX3sWpzHtY8lrwpBZHc+02A\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "FXC3vipwaZJCaF8YOZdqFWJVOvzptZI+VL4dwGFMRnErNzWMdH5LOQJABytqQ8eF\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "qM/JedHdd4l6ADmUA3A3JxF6eQwYUEd7V51f1dKHB7El2nCLPD1lLgWNewYLg5a6\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "eVH4jECLO2OH8Q==\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END PRIVATE KEY----- `)\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "type ResourceType int\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tFileResource ResourceType = iota\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tDirResource\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ginuerzh/gost/commit/9ef10b90a9367083c0018cb0185ef7e968867f0b?diff=split#diff-366e46a40f6f60b4f7614eb0976bb51820364bf5ca6ccc4787eb49d7bdbef3e6L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "import (\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"github.com/ginuerzh/gosocks5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"github.com/shadowsocks/shadowsocks-go/shadowsocks\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"net\"\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t//\"strconv\"\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/tls\"\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trawCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIC5jCCAdCgAwIBAgIBADALBgkqhkiG9w0BAQUwEjEQMA4GA1UEChMHQWNtZSBD\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bzAeFw0xNDAzMTcwNjIwNTFaFw0xNTAzMTcwNjIwNTFaMBIxEDAOBgNVBAoTB0Fj\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bWUgQ28wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDccNO1xmd4lWSf\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "d/0/QS3E93cYIWHw831i/IKxigdRD/XMZonLdEHywW6lOiXazaP8e6CqPGSmnl0x\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5k/3dvGCMj2JCVxM6+z7NpL+AiwvXmvkj/TOciCgwqssCwYS2CiVwjfazRjx1ZUJ\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "VDC5qiyRsfktQ2fVHrpnJGVSRagmiQgwGWBilVG9B8QvRtpQKN/GQGq17oIQm8aK\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kOdPt93g93ojMIg7YJpgDgOirvVz/hDn7YD4ryrtPos9CMafFkJprymKpRHyvz7P\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "8a3+OkuPjFjPnwOHQ5u1U3+8vC44vfb1ExWzDLoT8Xp8Gndx39k0f7MVOol3GnYu\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MN/dvNUdAgMBAAGjSzBJMA4GA1UdDwEB/wQEAwIAoDATBgNVHSUEDDAKBggrBgEF\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BQcDATAMBgNVHRMBAf8EAjAAMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDALBgkqhkiG\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9w0BAQUDggEBAIG8CJqvTIgJnNOK+i5/IUc/3yF/mSCWuG8qP+Fmo2t6T0PVOtc0\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "8wiWH5iWtCAhjn0MRY9l/hIjWm6gUZGHCGuEgsOPpJDYGoNLjH9Xwokm4y3LFNRK\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "UBrrrDbKRNibApBHCapPf6gC5sXcjOwx7P2/kiHDgY7YH47jfcRhtAPNsM4gjsEO\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RmwENY+hRUFHIRfQTyalqND+x6PWhRo3K6hpHs4DQEYPq4P2kFPqUqSBymH+Ny5/\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BcQ3wdMNmC6Bm/oiL1QV0M+/InOsAgQk/EDd0kmoU1ZT2lYHQduGmP099bOlHNpS\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uqO3vXF3q8SPPr/A9TqSs7BKkBQbe0+cdsA=\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trawKey = `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIEowIBAAKCAQEA3HDTtcZneJVkn3f9P0EtxPd3GCFh8PN9YvyCsYoHUQ/1zGaJ\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "y3RB8sFupTol2s2j/Hugqjxkpp5dMeZP93bxgjI9iQlcTOvs+zaS/gIsL15r5I/0\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "znIgoMKrLAsGEtgolcI32s0Y8dWVCVQwuaoskbH5LUNn1R66ZyRlUkWoJokIMBlg\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "YpVRvQfEL0baUCjfxkBqte6CEJvGipDnT7fd4Pd6IzCIO2CaYA4Doq71c/4Q5+2A\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "+K8q7T6LPQjGnxZCaa8piqUR8r8+z/Gt/jpLj4xYz58Dh0ObtVN/vLwuOL329RMV\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "swy6E/F6fBp3cd/ZNH+zFTqJdxp2LjDf3bzVHQIDAQABAoIBAHal26147nQ+pHwY\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "jxwers3XDCjWvup7g79lfcqlKi79UiUEA6KYHm7UogMYewt7p4nb2KwH+XycvDiB\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aAUf5flXpTs+6IkWauUDiLZi4PlV7uiEexUq5FjirlL0U/6MjbudX4bK4WQ4uxDc\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WaV07Kw2iJFOOHLDKT0en9JaX5jtJNc4ZnE9efFoQ5jfypPWtRw65G1rULEg6nvc\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GDh+1ce+4foCkpLRC9c24xAwJONZG6x3UqrSS9qfAsb73nWRQrTfUcO3nhoN8VvL\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kL9skn1+S06NyUN0KoEtyRBp+RcpXSsBWAo6qZmo/WqhB/gjzWrxVwn20+yJSm35\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ZsMc6QECgYEA8GS+Mp9xfB2szWHz6YTOO1Uu4lHM1ccZMwS1G+dL0KO3uGAiPdvp\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "woVot6v6w88t7onXsLo5pgz7SYug0CpkF3K/MRd1Ar4lH7PK7IBQ6rFr9ppVxDbx\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "AEWRswUoPbKCr7W6HU8LbQHDavsDlEIwc6+DiwnL4BzlKjb7RpgQEz0CgYEA6sB5\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uHvx3Y5FDcGk1n73leQSAcq14l3ZLNpjrs8msoREDil/j5WmuSN58/7PGMiMgHEi\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "1vLm3H796JmvGr9OBvspOjHyk07ui2/We/j9Hoxm1VWhyi8HkLNDj70HKalTTFMz\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RHO4O+0xCva+h9mKZrRMVktXr2jjdFn/0MYIZ2ECgYAIIsC1IeRLWQ3CHbCNlKsO\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IwHlMvOFwKk/qsceXKOaOhA7szU1dr3gkXdL0Aw6mEZrrkqYdpUA46uVf54/rU+Z\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "445I8QxKvXiwK/uQKX+TkdGflPWWIG3jnnch4ejMvb/ihnn4B/bRB6A/fKNQXzUY\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "lTYUfI5j1VaEKTwz1W2l2QKBgByFCcSp+jZqhGUpc3dDsZyaOr3Q/Mvlju7uEVI5\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hIAHpaT60a6GBd1UPAqymEJwivFHzW3D0NxU6VAK68UaHMaoWNfjHY9b9YsnKS2i\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kE3XzN56Ks+/avHfdYPO+UHMenw5V28nh+hv5pdoZrlmanQTz3pkaOC8o3WNQZEB\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "nh/BAoGBAMY5z2f1pmMhrvtPDSlEVjgjELbaInxFaxPLR4Pdyzn83gtIIU14+R8X\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2LPs6PPwrNjWnIgrUSVXncIFL3pa45B+Mx1pYCpOAB1+nCZjIBQmpeo4Y0dwA/XH\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "85EthKPvoszm+OPbyI16OcePV5ocX7lupRYuAo0pek7bomhmHWHz\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func selectMethod(methods ...uint8) uint8 {\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor _, method := range methods {\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif _, ok := Methods[method]; ok {\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn method\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn gosocks5.MethodNoAuth\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func methodSelected(method uint8, conn net.Conn) (net.Conn, error) {\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tswitch method {\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase MethodTLS:\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvar cert tls.Certificate\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvar err error\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif len(CertFile) == 0 || len(KeyFile) == 0 {\n",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tcert, err = tls.X509KeyPair([]byte(rawCert), []byte(rawKey))\n",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 78,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tcert, err = tls.LoadX509KeyPair(CertFile, KeyFile)\n",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 81,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tlog.Println(err)\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tconn = tls.Server(conn, &tls.Config{Certificates: []tls.Certificate{cert}})\n",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase MethodAES128, MethodAES192, MethodAES256,\n",
                        "lineNumber": 87,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tMethodDES, MethodBF, MethodCAST5, MethodRC4MD5, MethodRC4, MethodTable:\n",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcipher, err := shadowsocks.NewCipher(Methods[method], Password)\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 92,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tconn = shadowsocks.NewConn(conn, cipher)\n",
                        "lineNumber": 93,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase gosocks5.MethodNoAcceptable:\n",
                        "lineNumber": 94,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn nil, gosocks5.ErrBadMethod\n",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "type Server interface {\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "    ListenAndServe() error\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 16,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "go/InsecurelyGeneratedPassword/test",
              "name": "InsecurelyGeneratedPassword/test",
              "shortDescription": {
                "text": "Use of Insufficiently Random Values"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nComputer security relies on random numbers for many things: generating secure, confidential session keys; hashing password data; encryption for transmitting sensitive data, and more. It's easy to understand why. If session keys, for example, were generated sequentially, attackers would be able to guess these easily and then hijack legitimate user sessions. Similarly, if encryption techniques used easy-to-guess numbers, attackers could use brute-force attacks to gain unauthorized access.\n\nIn reality, since computers cannot generate truly random numbers, they use \"pseudorandom\" numbers instead, generated using an algorithm that is \"seeded\" in a variety of ways to produce highly variable values in a random-seeming order, making them very hard-in theory-for attackers to guess. However, if developers inadvertently make use of a weak random algorithm, attackers may be able to discover the algorithm, seed, or pattern, ultimately unlocking access to commands or sensitive data, which can then be held for ransom or sold.\n\n## Best practices for prevention\n* Avoid using weak pseudorandom number generators (PRNGs), such as statistical PRNGs. Instead, choose a cryptographically secure PRNG.\n* Avoid using predictable seed values, such as user ID or server start time. Instead, use a seed that is itself pseudorandom, such as one taken from an external hardware source.\n* Use standard, accepted security algorithms and libraries rather than taking a DIY approach and creating custom code that may contain inherent weaknesses or overlook critical flaws.\n* Use static analysis tools to identify potential instances of this weakness in code and then ensure good test coverage with appropriate white-box testing.\n* Educate developers about the importance of entropy in security systems development, and consider adopting tools that are FIPS 140-2 compliant.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecurelyGeneratedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/crowdsecurity/crowdsec/commit/e74f2210446578248b8d7ac292094e69ca685a8a?diff=split#diff-9368df641600daf22bcd67d907c33dc73524b8c1115a456b1d1758b7539a283fL-1",
                    "lines": [
                      {
                        "line": "saferand \"crypto/rand\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"encoding/json\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"fmt\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"math/rand\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/AlecAivazis/survey/v2\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/crowdsecurity/crowdsec/pkg/csconfig\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/crowdsecurity/crowdsec/pkg/database\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/denisbrodbeck/machineid\"\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/enescakir/emoji\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/go-openapi/strfmt\"\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/olekukonko/tablewriter\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/pkg/errors\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog \"github.com/sirupsen/logrus\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"gopkg.in/yaml.v2\"\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "var machineID string\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "var machinePassword string\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "var interactive bool\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "var apiURL string\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "var outputFile string\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "var forceAdd bool\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "var autoAdd bool\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpasswordLength = 64\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tupper          = \"ABCDEFGHIJKLMNOPQRSTUVWXY\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlower          = \"abcdefghijklmnopqrstuvwxyz\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdigits         = \"0123456789\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuuid = \"/proc/sys/kernel/random/uuid\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generatePassword(length int) string {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trand.Seed(time.Now().UnixNano())\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "charset := upper + lower + digits\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tbuf := make([]byte, length)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tbuf[0] = digits[rand.Intn(len(digits))]\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbuf[1] = upper[rand.Intn(len(upper))]\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbuf[2] = lower[rand.Intn(len(lower))]\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor i := 3; i < length; i++ {\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tbuf[i] = charset[rand.Intn(len(charset))]\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor i := 0; i < length; i++ {\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\trInt, err := saferand.Int(saferand.Reader, big.NewInt(int64(charsetLength)))\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tlog.Fatalf(\"failed getting data from prng for password generation : %s\", err)\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf[i] = charset[rInt.Int64()]\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/crowdsecurity/crowdsec/commit/e74f2210446578248b8d7ac292094e69ca685a8a?diff=split#diff-9368df641600daf22bcd67d907c33dc73524b8c1115a456b1d1758b7539a283fL-1",
                    "lines": [
                      {
                        "line": "saferand \"crypto/rand\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"encoding/json\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"fmt\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"math/rand\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/AlecAivazis/survey/v2\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/crowdsecurity/crowdsec/pkg/csconfig\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/crowdsecurity/crowdsec/pkg/database\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/denisbrodbeck/machineid\"\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/enescakir/emoji\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/go-openapi/strfmt\"\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/olekukonko/tablewriter\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/pkg/errors\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog \"github.com/sirupsen/logrus\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"gopkg.in/yaml.v2\"\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "var machineID string\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "var machinePassword string\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "var interactive bool\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "var apiURL string\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "var outputFile string\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "var forceAdd bool\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "var autoAdd bool\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpasswordLength = 64\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tupper          = \"ABCDEFGHIJKLMNOPQRSTUVWXY\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlower          = \"abcdefghijklmnopqrstuvwxyz\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdigits         = \"0123456789\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuuid = \"/proc/sys/kernel/random/uuid\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generatePassword(length int) string {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trand.Seed(time.Now().UnixNano())\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "charset := upper + lower + digits\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tbuf := make([]byte, length)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tbuf[0] = digits[rand.Intn(len(digits))]\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbuf[1] = upper[rand.Intn(len(upper))]\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbuf[2] = lower[rand.Intn(len(lower))]\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor i := 3; i < length; i++ {\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tbuf[i] = charset[rand.Intn(len(charset))]\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor i := 0; i < length; i++ {\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\trInt, err := saferand.Int(saferand.Reader, big.NewInt(int64(charsetLength)))\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tlog.Fatalf(\"failed getting data from prng for password generation : %s\", err)\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf[i] = charset[rInt.Int64()]\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/crowdsecurity/crowdsec/commit/e74f2210446578248b8d7ac292094e69ca685a8a?diff=split#diff-9368df641600daf22bcd67d907c33dc73524b8c1115a456b1d1758b7539a283fL-1",
                    "lines": [
                      {
                        "line": "saferand \"crypto/rand\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"encoding/json\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"fmt\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"math/rand\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/AlecAivazis/survey/v2\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/crowdsecurity/crowdsec/pkg/csconfig\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/crowdsecurity/crowdsec/pkg/database\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/denisbrodbeck/machineid\"\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/enescakir/emoji\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/go-openapi/strfmt\"\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/olekukonko/tablewriter\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/pkg/errors\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog \"github.com/sirupsen/logrus\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"gopkg.in/yaml.v2\"\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "var machineID string\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "var machinePassword string\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "var interactive bool\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "var apiURL string\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "var outputFile string\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "var forceAdd bool\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "var autoAdd bool\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpasswordLength = 64\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tupper          = \"ABCDEFGHIJKLMNOPQRSTUVWXY\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlower          = \"abcdefghijklmnopqrstuvwxyz\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdigits         = \"0123456789\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuuid = \"/proc/sys/kernel/random/uuid\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generatePassword(length int) string {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trand.Seed(time.Now().UnixNano())\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "charset := upper + lower + digits\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tbuf := make([]byte, length)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tbuf[0] = digits[rand.Intn(len(digits))]\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbuf[1] = upper[rand.Intn(len(upper))]\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbuf[2] = lower[rand.Intn(len(lower))]\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor i := 3; i < length; i++ {\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tbuf[i] = charset[rand.Intn(len(charset))]\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor i := 0; i < length; i++ {\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\trInt, err := saferand.Int(saferand.Reader, big.NewInt(int64(charsetLength)))\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tlog.Fatalf(\"failed getting data from prng for password generation : %s\", err)\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf[i] = charset[rInt.Int64()]\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 10,
                "cwe": [
                  "CWE-330"
                ]
              }
            },
            {
              "id": "go/WebCookieSecureDisabledByDefault",
              "name": "WebCookieSecureDisabledByDefault",
              "shortDescription": {
                "text": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nIn a session hijacking attack, if a cookie containing sensitive data is set without the `secure` attribute, an attacker might be able to intercept that cookie. Once the attacker has this information, they can potentially impersonate a user, accessing confidential data and performing actions that they would not normally be authorized to do. Attackers often gain access to this sensitive cookie data when it is transmitted insecurely in plain text over a standard HTTP session, rather than being encrypted and sent over an HTTPS session. This type of attack is highly preventable by following best practices when setting sensitive session cookies.\n\n## Best practices for prevention\n* Set the `secure` attribute in the response header when setting cookies on the client side, and use a test tool to verify that secure cookie transmission is in place.\n* Always use HTTPS for all login pages and never redirect from HTTP to HTTPS, which leaves secure session data open to interception.\n* Follow other best practices when it comes to session cookies, such as setting the HttpOnly flag and maintaining highly time-limited sessions.\n* Consider implementing browser checks and providing secure data only within a browser that supports tight cookie security.\n* Generate session IDs in a way that is not easily predictable, invalidate sessions upon logout, and never reuse session IDs.\n* Educate developers to use built-in secure session-management functionality within the development environment instead of taking a DIY approach.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "WebCookieSecureDisabledByDefault",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/openmultiplayer/web/commit/986a12062a86215a724f2a8d3156b13e23ce1da1?diff=split#diff-5f067a0d40b96304883aa8e08db740cb2d49219a203209631f21560162b5da24L-1",
                    "lines": [
                      {
                        "line": "http.SetCookie(w, &http.Cookie{\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tName:     secureCookieName,\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tValue:    encoded,\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPath:     \"/\",\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSecure:   false,\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tHttpOnly: true,\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tDomain:   \".open.mp\",\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tSecure:   true,\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tHttpOnly: false,\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/gravitational/teleport/commit/5e8ecd53b081a8f662bb851f7ca1dab642bb8303?diff=split#diff-db33107c984f027d843546bb3c074008c855ad335812560c3d84b0cbce7fdc6aL-1",
                    "lines": [
                      {
                        "line": "\tHttpOnly: true,\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tSecure:   true,\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "http.SetCookie(w, c)\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/gravitational/teleport/commit/5e8ecd53b081a8f662bb851f7ca1dab642bb8303?diff=split#diff-db33107c984f027d843546bb3c074008c855ad335812560c3d84b0cbce7fdc6aL-1",
                    "lines": [
                      {
                        "line": "http.SetCookie(w, &http.Cookie{\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tName:     \"session\",\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tValue:    \"\",\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPath:     \"/\",\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHttpOnly: true,\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tSecure:   true,\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 6,
                "cwe": [
                  "CWE-614"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/goharbor/harbor/commit/583ce589f16e5d34c60e090b39405a24021c3f44?diff=split#diff-f56bf727da9a9623dd562299c2b7c401b03f333040982de8a993b94cd54b8168L-1",
                    "lines": [
                      {
                        "line": "host:     \"postgres\",\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "port:     5432,\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "usr:      \"postgres\",\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pwd:      password,\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "database: \"postgres\",\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host:     clairDB.Host,\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "port:     clairDB.Port,\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "usr:      clairDB.Username,\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "pwd:      clairDB.Password,\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "database: clairDB.Database,\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "return userName\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/argoproj/argo-workflows/commit/3b6c53af00843a17dc2f030e08dec1b1c070e3f2?diff=split#diff-42623a9b98b20e51352de53c9e3283f5d13fcb2b9144bb2b62f7247119b773a1L-1",
                    "lines": [
                      {
                        "line": "// InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{Certificates: []tls.Certificate{cer}, InsecureSkipVerify: true}\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsMinVersion, err := env.GetInt(\"TLS_MIN_VERSION\", tls.VersionTLS12)\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "errors.CheckError(err)\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tCertificates:       []tls.Certificate{cer},\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: false, // InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tMinVersion:         uint16(tlsMinVersion),\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ssllabs/ssllabs-scan/commit/8a3e50f861b4b2afaa3f383b50d58579bf6b966b?diff=split#diff-bdfe0ba05cb064a75ee18b6ec0f1dbe7ef0c6ed409f45d603490d1cc86b3d641L-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: true },\n",
                        "lineNumber": 498,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: false },\n",
                        "lineNumber": 497,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cloudfoundry/stratos/commit/0e62bb103775a351650f31312c7ef848846fdee7?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "if skipCertVerification {\n",
                        "lineNumber": 280,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\ttr.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 281,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tr.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 280,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 34,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/argoproj/argo-workflows/commit/3b6c53af00843a17dc2f030e08dec1b1c070e3f2?diff=split#diff-42623a9b98b20e51352de53c9e3283f5d13fcb2b9144bb2b62f7247119b773a1L-1",
                    "lines": [
                      {
                        "line": "// InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{Certificates: []tls.Certificate{cer}, InsecureSkipVerify: true}\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsMinVersion, err := env.GetInt(\"TLS_MIN_VERSION\", tls.VersionTLS12)\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "errors.CheckError(err)\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tCertificates:       []tls.Certificate{cer},\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: false, // InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tMinVersion:         uint16(tlsMinVersion),\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ssllabs/ssllabs-scan/commit/8a3e50f861b4b2afaa3f383b50d58579bf6b966b?diff=split#diff-bdfe0ba05cb064a75ee18b6ec0f1dbe7ef0c6ed409f45d603490d1cc86b3d641L-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: true },\n",
                        "lineNumber": 498,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: false },\n",
                        "lineNumber": 497,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cloudfoundry/stratos/commit/0e62bb103775a351650f31312c7ef848846fdee7?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "if skipCertVerification {\n",
                        "lineNumber": 280,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\ttr.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 281,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tr.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 280,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 34,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/WebCookieMissesCallToSetHttpOnly",
              "name": "WebCookieMissesCallToSetHttpOnly",
              "shortDescription": {
                "text": "Sensitive Cookie Without 'HttpOnly' Flag"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nThe `HttpOnly` flag is a simple parameter used when setting a user cookie to ensure that cookies with sensitive session data are visible only to the browser rather than to scripts. This helps prevent cross-site scripting attacks, in which an attacker gains access to sensitive session information and uses this information to trick legitimate web-based applications into disclosing confidential information or accepting illegitimate requests. When developers use the `HttpOnly` flag to set the cookie, they ensure that this sensitive session information is not readable or writable except by the browser (read) and server (write), respectively. While most modern browsers and versions now recognize the HttpOnly flag, some legacy and custom browsers still do not.\n\n## Best practices for prevention\n* Include the `HttpOnly` attribute in the response header when setting cookies on the client side. Be aware, however, that this crucial step provides only partial remediation.\n* Integrate client-side scripts to determine browser version; require browser compatibility or avoid transmitting sensitive data to browsers that do not support `HttpOnly`.\n* Understand and evaluate risks of third-party components or plugins, which may expose cookies.\n* Educate developers in a zero-trust approach, understanding the risks and best practices to prevent cross-site scripting, such as sanitizing all user input for code and special characters.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "WebCookieMissesCallToSetHttpOnly",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/play-with-docker/play-with-docker/commit/e9dd97e4e4363fcf49c5ef134ec4e1f282013988?diff=split#diff-02a82e24ceda9ba6135f2d116e4b7e5df156073cca3227b44b9e3834dfe5706cL-1",
                    "lines": [
                      {
                        "line": "\tHttpOnly: true,\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "http.SetCookie(rw, cookie)\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/qor/admin/commit/d7118d4ce8d2c18f3050d1e3f2e5c9e23e74fb2a?diff=split#diff-5e629170ab387324849d29388a8f50193cc5653f20c32a40fc6dcacf855a2babL-1",
                    "lines": [
                      {
                        "line": "cookie := http.Cookie{Name: \"qor-flashes\", Value: base64.StdEncoding.EncodeToString(bytes), Path: prefix}\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cookie := http.Cookie{Name: \"qor-flashes\", Value: base64.StdEncoding.EncodeToString(bytes), Path: prefix, HttpOnly: true}\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "http.SetCookie(context.Writer, &cookie)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/gravitational/teleport/commit/5e8ecd53b081a8f662bb851f7ca1dab642bb8303?diff=split#diff-db33107c984f027d843546bb3c074008c855ad335812560c3d84b0cbce7fdc6aL-1",
                    "lines": [
                      {
                        "line": "\tHttpOnly: true,\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tSecure:   true,\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "http.SetCookie(w, c)\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 9,
                "cwe": [
                  "CWE-1004"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in exampleKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[exampleKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apimachinery/pkg/util/httpstream/spdy/roundtripper_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 737,
                  "endLine": 737,
                  "startColumn": 5,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b747c23e456a933f1d5b6550453a1a5eb9469d8a1c69b311c657f0020a11ce00",
            "1": "8379f5e8.166e348b.45df3e14.79502f34.241f99eb.2e71283a.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.241f99eb.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/httpstream/spdy/roundtripper_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 737,
                            "endLine": 763,
                            "startColumn": 25,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/httpstream/spdy/roundtripper_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 737,
                            "endLine": 737,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in exampleKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[exampleKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1235,
                  "endLine": 1235,
                  "startColumn": 5,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d9e039a2b417246f88682d36f6c752ab8571f9faa6f1e2ffb91122d1fe115a9f",
            "1": "8379f5e8.166e348b.45df3e14.79502f34.241f99eb.2e71283a.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.241f99eb.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1235,
                            "endLine": 1261,
                            "startColumn": 25,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1235,
                            "endLine": 1235,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in localhostKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[localhostKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apimachinery/pkg/util/httpstream/spdy/roundtripper_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 789,
                  "endLine": 789,
                  "startColumn": 5,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b2335e66a483f70b5bc1e446707af48ce7a59c71dec0ea2402ea2991be5ff044",
            "1": "8379f5e8.8843a412.57e053ed.79502f34.91b7c08c.4001760b.fb9e89bc.1bff12d3.8379f5e8.8843a412.57e053ed.79502f34.91b7c08c.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/httpstream/spdy/roundtripper_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 789,
                            "endLine": 816,
                            "startColumn": 27,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/httpstream/spdy/roundtripper_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 789,
                            "endLine": 789,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in localhostKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[localhostKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/dial_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 203,
                  "startColumn": 5,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f85ef5dd1d4b79f47a7a5c32bc4453246783b043d0c61ca73e86965e7f758c48",
            "1": "8379f5e8.8843a412.45df3e14.79502f34.433be0e9.4001760b.fb9e89bc.1bff12d3.8379f5e8.8843a412.45df3e14.79502f34.433be0e9.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/dial_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 230,
                            "startColumn": 27,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/dial_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in localhostKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[localhostKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "startColumn": 5,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "88b78cbb6a81b67edfcc2f2a79290ffaa4de038386dc299ac9ac707fc33729fa",
            "1": "8379f5e8.8843a412.fc7d5400.e22980a8.f1d9f854.67ab4541.860c51ff.da4d3fad.8379f5e8.8843a412.fc7d5400.e22980a8.f1d9f854.67ab4541.860c51ff.da4d3fad"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 111,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in localhostKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[localhostKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/admissionwebhook/admission_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1756,
                  "endLine": 1756,
                  "startColumn": 5,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "83c3a842605f07789a864b6e8707e004cfb66d5277fa8db5a79162dc35f77375",
            "1": "8379f5e8.8843a412.45df3e14.79502f34.91b7c08c.4001760b.fb9e89bc.da4d3fad.8379f5e8.8843a412.45df3e14.79502f34.91b7c08c.257c5aa5.3bee9612.da4d3fad"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/admission_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1756,
                            "endLine": 1782,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/admission_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1756,
                            "endLine": 1756,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in localhostKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[localhostKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiextensions-apiserver/test/integration/conversion/webhook.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "endLine": 235,
                  "startColumn": 5,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4ede6d6b0596668e861a1762685d1d793e66d0885be6b8b40a0344492f452db8",
            "1": "8379f5e8.8843a412.45df3e14.79502f34.91b7c08c.4001760b.fb9e89bc.da4d3fad.8379f5e8.8843a412.45df3e14.79502f34.91b7c08c.257c5aa5.3bee9612.da4d3fad"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiextensions-apiserver/test/integration/conversion/webhook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 261,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiextensions-apiserver/test/integration/conversion/webhook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in tsKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[tsKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/timeout_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 563,
                  "endLine": 563,
                  "startColumn": 5,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4ce06a474440de7ce3446517826e246663d3c1618d1fc2295b9d62a74234b1f6",
            "1": "3bf32480.e14be2f0.45df3e14.79502f34.91b7c08c.6e4c8a71.fb9e89bc.74911663.3bf32480.e14be2f0.45df3e14.79502f34.91b7c08c.257c5aa5.3bee9612.74911663"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/timeout_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 563,
                            "endLine": 590,
                            "startColumn": 20,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/timeout_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 563,
                            "endLine": 563,
                            "startColumn": 5,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ecdsaPrivateKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ecdsaPrivateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e_node/services/apiserver.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 2,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fe99b9cd349dff89d69052db2639e45ac190ded430d822200eae5eb990840505",
            "1": "8379f5e8.c08c0828.45df3e14.79502f34.393abd3d.63a86890.fb9e89bc.9b14f339.8379f5e8.c08c0828.45df3e14.79502f34.393abd3d.63a86890.fb9e89bc.9b14f339"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/services/apiserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 42,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/services/apiserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 2,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ecdsaPrivateKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ecdsaPrivateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/util/keyutil/key_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102,
                  "startColumn": 2,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b42cc45e12030d65511eacc964e3bfb55b25406ae9ad195fb94eb9fcd7b0dd8d",
            "1": "8379f5e8.30304e95.45df3e14.79502f34.393abd3d.117d25ca.fb9e89bc.1bff12d3.8379f5e8.30304e95.45df3e14.79502f34.393abd3d.117d25ca.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/util/keyutil/key_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 106,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/util/keyutil/key_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 2,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ecdsaPrivateKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ecdsaPrivateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/framework/test_server.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 7,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "43cc12dff8dc082a83f917dc813d5e4f24848abcb507e14ae8fcc85d5e960f02",
            "1": "8379f5e8.c08c0828.45df3e14.79502f34.393abd3d.63a86890.fb9e89bc.9b14f339.8379f5e8.c08c0828.45df3e14.79502f34.393abd3d.63a86890.fb9e89bc.9b14f339"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/framework/test_server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 51,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/framework/test_server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 7,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ecdsaPrivateKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ecdsaPrivateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/kube-apiserver/app/testing/testserver.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66,
                  "startColumn": 7,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ba30756681fb74b6d6fa829a7e1f85de8fd2a12a09eaef7bbd665754fc979e5c",
            "1": "8379f5e8.c08c0828.45df3e14.79502f34.393abd3d.63a86890.fb9e89bc.9b14f339.8379f5e8.c08c0828.45df3e14.79502f34.393abd3d.63a86890.fb9e89bc.9b14f339"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kube-apiserver/app/testing/testserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 70,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kube-apiserver/app/testing/testserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 7,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ecdsaPrivateKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ecdsaPrivateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/etcd/server.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 7,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4e6687e9fe3695f2907f896b523b44b06978377bc172129f983b9f958d5e0442",
            "1": "8379f5e8.c08c0828.45df3e14.79502f34.393abd3d.63a86890.fb9e89bc.9b14f339.8379f5e8.c08c0828.45df3e14.79502f34.393abd3d.63a86890.fb9e89bc.9b14f339"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/etcd/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 63,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/etcd/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 7,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ecdsaPrivateKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ecdsaPrivateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/svcaccttoken_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 2,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ea4142c0cb880a0359081f37ff485b7ddcc24be6d5d43796c12a1b867161093",
            "1": "8379f5e8.c08c0828.29ca225e.79502f34.393abd3d.63a86890.fb9e89bc.9b14f339.8379f5e8.c08c0828.29ca225e.79502f34.393abd3d.63a86890.fb9e89bc.9b14f339"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/svcaccttoken_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 61,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/svcaccttoken_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 2,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ecdsaPrivateKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ecdsaPrivateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/serviceaccount/jwt_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 7,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "65e4aa69cf3fd31e936dd0165f40fc7b7b59ea1588882b1685c627102b640718",
            "1": "34950bd9.38a0811d.45df3e14.f24cd98e.393abd3d.63a86890.fb9e89bc.9b14f339.34950bd9.38a0811d.45df3e14.f24cd98e.393abd3d.63a86890.fb9e89bc.9b14f339"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/serviceaccount/jwt_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 105,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/serviceaccount/jwt_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 7,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in serverKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[serverKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugin/pkg/admission/imagepolicy/certs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cd90f5b37dc9db92588d5aae2c4459a983444582da30b792ea0ef6e5bc66032d",
            "1": "8379f5e8.0d9b46dd.45df3e14.79502f34.09b485a5.bb9686b0.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.09b485a5.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugin/pkg/admission/imagepolicy/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 90,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugin/pkg/admission/imagepolicy/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in serverKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[serverKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/certs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "492cc588472d38c8ca9499be83c17f85173f127fe4d9b6c6f4a687edcdce4736",
            "1": "8379f5e8.3cbe5425.45df3e14.79502f34.09b485a5.b96d2ceb.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.09b485a5.b96d2ceb.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 158,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in serverKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[serverKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/util/x509metrics/server_cert_deprecations_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8013cb0bed8199a9e97c530d3aeb9c210ca4a578af0f15d95d29bd7a64988219",
            "1": "8379f5e8.b191fa4a.45df3e14.79502f34.09b485a5.b96d2ceb.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.09b485a5.b96d2ceb.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/x509metrics/server_cert_deprecations_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 128,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/x509metrics/server_cert_deprecations_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in serverKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[serverKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/certs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a97fccc4996c7e52a408223c2607b40f9bfea663ace189871c1bf787da1f9da0",
            "1": "8379f5e8.0d9b46dd.45df3e14.79502f34.09b485a5.63a86890.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.09b485a5.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 88,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in serverKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[serverKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/certs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cddbf3a66956e1d2e352c5c9b030c8462a78d743cbbb412952e6883fba6cabb8",
            "1": "8379f5e8.0d9b46dd.45df3e14.79502f34.09b485a5.63a86890.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.09b485a5.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 88,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in serverKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[serverKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/certreload/certreload_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 333,
                  "endLine": 333,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c03202f8e60cb3690caa4913d43a21ad7c40b4d8828ee7753b684f903bc3dff7",
            "1": "8379f5e8.1e881304.45df3e14.79502f34.09b485a5.63a86890.fb9e89bc.1bff12d3.8379f5e8.1e881304.45df3e14.79502f34.09b485a5.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/certreload/certreload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 333,
                            "endLine": 359,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/certreload/certreload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 333,
                            "endLine": 333,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in serverKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[serverKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/dynamiccertificates/tlsconfig_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d3437967eeede31eb4d22f3b07f69ce6cf9b407e9802860f50df8116181fce87",
            "1": "424eddda.1e881304.45df3e14.79502f34.09b485a5.63a86890.8ee950b3.1bff12d3.424eddda.1e881304.45df3e14.79502f34.09b485a5.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/dynamiccertificates/tlsconfig_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 52,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/dynamiccertificates/tlsconfig_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in clientKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[clientKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugin/pkg/admission/imagepolicy/certs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "079d29ef9a06e5c4b3cbb7e8af8654aa6f10fc69f5d0692f39e8dfb0621c0b76",
            "1": "8379f5e8.0d9b46dd.45df3e14.cf21cd27.91b7c08c.422d7c99.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.cf21cd27.91b7c08c.422d7c99.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugin/pkg/admission/imagepolicy/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 138,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugin/pkg/admission/imagepolicy/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in clientKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[clientKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/certs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 199,
                  "endLine": 199,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "05884f837fd800030e2e5bed461c11b3898215a224e7f792bb0c42a955784f1e",
            "1": "d80734ae.0d9b46dd.45df3e14.79502f34.91b7c08c.2c52495e.fb9e89bc.1bff12d3.d80734ae.c45f1b38.45df3e14.79502f34.91b7c08c.2c52495e.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 225,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in clientKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[clientKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/certs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5cc8db70e0d5a1ed0531ed99d566954f94eaee8b0afad837adc50a600bfe41ea",
            "1": "8379f5e8.45e2fa71.45df3e14.79502f34.02b555f4.63a86890.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.02b555f4.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 136,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in clientKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[clientKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/certs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5d46af24dae9a1ba153d4976ec660565e5b6a48a1deecdabfed164b534d809e2",
            "1": "8379f5e8.45e2fa71.45df3e14.79502f34.02b555f4.63a86890.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.02b555f4.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 136,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in caKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[caKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/certs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 5,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4f66c6648c16ff290d730c54382986df9fa622370835fee5747469285d590bcf",
            "1": "8379f5e8.f29bda2f.45df3e14.79502f34.4f63cc8e.63a86890.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.4f63cc8e.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 48,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/certs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 5,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in rsaPrivateKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[rsaPrivateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/util/keyutil/key_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ec6be7e1d1618a9922dcaeddb681d065d440f8179bffc4aacdd087f488e2cc33",
            "1": "f0cc27dd.102c6c60.45df3e14.79502f34.91b7c08c.63a86890.fb9e89bc.1bff12d3.f0cc27dd.102c6c60.45df3e14.79502f34.91b7c08c.63a86890.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/util/keyutil/key_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 53,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/util/keyutil/key_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in rsaPrivateKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[rsaPrivateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/serviceaccount/jwt_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dc09c190d197c33f81d6d426683b72f1585a030d8bbb97f5c32a12065704be98",
            "1": "34950bd9.38a0811d.45df3e14.f24cd98e.393abd3d.0a382365.fb9e89bc.1bff12d3.34950bd9.38a0811d.45df3e14.f24cd98e.393abd3d.0a382365.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/serviceaccount/jwt_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 97,
                            "startColumn": 23,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/serviceaccount/jwt_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 7,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in rsaKeyPEM.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[rsaKeyPEM](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_tls_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "88db4ec5c268c204d666d4078e4de2f0e803a1d324ebdea5b44ab95bdc63af6f",
            "1": "cb53f4db.dce39437.ead69fee.76b707f0.70d61395.25b6e107.a25faf97.1bff12d3.cb53f4db.dce39437.ead69fee.76b707f0.70d61395.25b6e107.a25faf97.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_tls_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 52,
                            "startColumn": 17,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_tls_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in mismatchRSAKeyPEM.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[mismatchRSAKeyPEM](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_tls_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "startColumn": 7,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "439cec201ef23969bef414c002502b468eeeb7eb1f6172bc8bc4b59073b007dd",
            "1": "e1b02ed5.40975366.ead69fee.79502f34.6e553251.98042c54.a7489344.1bff12d3.e1b02ed5.40975366.ead69fee.79502f34.6e553251.98042c54.a7489344.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_tls_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 81,
                            "startColumn": 27,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_tls_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 7,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in svcKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[svcKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_proxy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 707,
                  "endLine": 707,
                  "startColumn": 5,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d32c69ac3dd5772cf0b16bbda0ad6deeb850236974e6a44259cad81aeb458402",
            "1": "8379f5e8.d6307742.45df3e14.79502f34.91b7c08c.33347d2e.fb9e89bc.1bff12d3.8379f5e8.d6307742.45df3e14.79502f34.91b7c08c.33347d2e.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_proxy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 707,
                            "endLine": 733,
                            "startColumn": 21,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_proxy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 707,
                            "endLine": 707,
                            "startColumn": 5,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in keyPEM.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[keyPEM](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/certificate/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 48,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0d7678dc6969cd2d1223d642859ddf47437d5ab7c1b6bf3b11182ff277bc415b",
            "1": "4f9c2214.d07cf8cb.45df3e14.89f13fa7.556f02b4.6c8feca2.bdbeff8f.1bff12d3.10230ee6.d07cf8cb.45df3e14.89f13fa7.556f02b4.6c8feca2.bdbeff8f.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/certificate/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 92,
                            "startColumn": 29,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/certificate/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 48,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in keyPEM.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[keyPEM](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/util/certificate/certificate_manager_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204,
                  "startColumn": 48,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "49ca38602ce0185da21a817ade86b4a475521d5bfb069431e7b719d6a39ae07a",
            "1": "f397c121.4fc808be.45df3e14.89f13fa7.556f02b4.3dd160a3.c4e74896.1bff12d3.f397c121.4fc808be.45df3e14.89f13fa7.556f02b4.3dd160a3.c4e74896.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/util/certificate/certificate_manager_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 196,
                            "startColumn": 29,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/util/certificate/certificate_manager_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 204,
                            "endLine": 204,
                            "startColumn": 48,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in LocalhostKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[LocalhostKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/utils/admission_webhook.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "startColumn": 5,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "21d3f75caf3634c7180e415ce7af1ade8265c65ef89b9522d517edc1fd654d9f",
            "1": "8379f5e8.61a12537.45df3e14.79502f34.91b7c08c.5b6553b0.fb9e89bc.da4d3fad.8379f5e8.c45f1b38.45df3e14.79502f34.91b7c08c.5b6553b0.3bee9612.da4d3fad"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/utils/admission_webhook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 138,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/utils/admission_webhook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in anotherServerKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[anotherServerKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/certreload/certreload_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 382,
                  "endLine": 382,
                  "startColumn": 5,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a8eea022a3d2c581461d3cf1c2cf4ed21fba2d238a44503860c3954649ef461",
            "1": "07bc6773.ee27adc4.45df3e14.79502f34.3295dcd1.15dd30d3.fb9e89bc.1bff12d3.07bc6773.ee27adc4.45df3e14.79502f34.3295dcd1.15dd30d3.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/certreload/certreload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 382,
                            "endLine": 433,
                            "startColumn": 31,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/certreload/certreload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 382,
                            "endLine": 382,
                            "startColumn": 5,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in backendKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[backendKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/graceful_shutdown_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "startColumn": 5,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "41198f2c76aa06f05d98d507183b4d81c6127ff0c1e0983fd2beac2bf227e762",
            "1": "8379f5e8.0d9b46dd.45df3e14.936ae54d.c219ef19.63a86890.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.936ae54d.c219ef19.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/graceful_shutdown_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 92,
                            "startColumn": 25,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/graceful_shutdown_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in keyData.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[keyData](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/transport/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 2,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "24b8e275eb411289cff1cc252cdf892f029994974f5f97bd1033f5342812f931",
            "1": "424eddda.98f0ff0f.45df3e14.79502f34.6a52a41b.665ba403.8ee950b3.1bff12d3.424eddda.98f0ff0f.45df3e14.79502f34.6a52a41b.665ba403.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/transport/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 94,
                            "startColumn": 12,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/transport/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in keyData.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[keyData](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/plugin/pkg/client/auth/exec/exec_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 2,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "16415887ebf2460a39ab3c60572eb563daaf16f9022b0078a70e688aa344d231",
            "1": "8379f5e8.d00cc06c.45df3e14.79502f34.6a52a41b.40e09c63.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.6a52a41b.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/plugin/pkg/client/auth/exec/exec_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 93,
                            "startColumn": 19,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/plugin/pkg/client/auth/exec/exec_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureTLSConfig/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Insecure TLS configuration is found to be in use. MinVersion is set to a deprecated SSL/TLS version",
            "markdown": "Insecure TLS configuration is found to be in use. MinVersion is set to a deprecated SSL/TLS version",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kubelet_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2947,
                  "endLine": 2947,
                  "startColumn": 4,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ca5819832a1cf312ecfa3829fc814f29fc1378afe1802e744d2181e22dcbc8b7",
            "1": "424eddda.5d8de7a9.b17d4ed1.f7feab4d.5c57ca96.6c8feca2.fa0c2976.75864eb9.424eddda.5d8de7a9.b17d4ed1.f7feab4d.a0280c3b.67ab4541.8ee950b3.75864eb9"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kubelet_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2947,
                            "endLine": 2947,
                            "startColumn": 4,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "A hardcoded string is used to encrypt data within crypto.aes.NewCipher. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "A {0} is used to encrypt data within {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[hardcoded string](0)",
              "[crypto.aes.NewCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 37,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b7e6278e775ef95205365dcb0de60bd31def3701c14c701a262e02481f2be2d0",
            "1": "ba4e4356.d4dea66f.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72.937abb2c.d4dea66f.45df3e14.e22980a8.f1d9f854.67ab4541.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 37,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "A hardcoded string is used to encrypt data within crypto.aes.NewCipher. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "A {0} is used to encrypt data within {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[hardcoded string](0)",
              "[crypto.aes.NewCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "startColumn": 37,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1294026f07d9f0104f9ced32d75a10b126a0dd1a83f07c0273165ded829a613c",
            "1": "fcac6d06.d4dea66f.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72.fcac6d06.d4dea66f.45df3e14.e22980a8.da637a00.67ab4541.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 37,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "A hardcoded string is used to encrypt data within crypto.aes.NewCipher. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "A {0} is used to encrypt data within {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[hardcoded string](0)",
              "[crypto.aes.NewCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182,
                  "startColumn": 37,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d69d77eac288fccc173a3a9edf62f58c458fa2997ac162fb4149a4196b5b512f",
            "1": "bdf05a8c.d4dea66f.45df3e14.e22980a8.f1d9f854.67ab4541.d66a3702.338ae7f9.bdf05a8c.d4dea66f.45df3e14.e22980a8.f1d9f854.67ab4541.881e11e3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 182,
                            "endLine": 182,
                            "startColumn": 37,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 182,
                            "endLine": 182,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "A hardcoded string is used to encrypt data within crypto.aes.NewCipher. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "A {0} is used to encrypt data within {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[hardcoded string](0)",
              "[crypto.aes.NewCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232,
                  "startColumn": 37,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b3dde08082d3f67aa65ce75635e582fb80d4bb9a004008b1212924e4553bbc92",
            "1": "fcac6d06.d4dea66f.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72.fcac6d06.d4dea66f.45df3e14.e22980a8.da637a00.67ab4541.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 37,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "A hardcoded string is used to encrypt data within crypto.aes.NewCipher. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "A {0} is used to encrypt data within {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[hardcoded string](0)",
              "[crypto.aes.NewCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 323,
                  "endLine": 323,
                  "startColumn": 16,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5faf08085c4e3d5a7eaa06b8c80386d077bff3fca9e3ab93660548ea87c81027",
            "1": "cb53f4db.d4dea66f.45df3e14.76b707f0.f1d9f854.67ab4541.860c51ff.1d874c72.569e618f.d4dea66f.45df3e14.76b707f0.efefb4d9.67ab4541.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 16,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 324,
                            "endLine": 324,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "A hardcoded string is used to encrypt data within crypto.aes.NewCipher. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "A {0} is used to encrypt data within {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[hardcoded string](0)",
              "[crypto.aes.NewCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 376,
                  "endLine": 376,
                  "startColumn": 17,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bd24a2eea42bdf07812038a029a1d25df98d51f183a3e9da32fd663f478407ee",
            "1": "5828df0a.f1799b0b.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72.569e618f.f1799b0b.45df3e14.e22980a8.af92ee9a.67ab4541.30e8866f.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 376,
                            "endLine": 376,
                            "startColumn": 17,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 380,
                            "endLine": 380,
                            "startColumn": 17,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "A hardcoded string is used to encrypt data within crypto.aes.NewCipher. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "A {0} is used to encrypt data within {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[hardcoded string](0)",
              "[crypto.aes.NewCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 377,
                  "startColumn": 17,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b1b7c8c2e87dc8af196417b6543a4d32752541dcd3b685b780288ff42766cbbd",
            "1": "ba4e4356.d4dea66f.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.5c562885.3660d5e6.d4dea66f.45df3e14.e22980a8.449834c9.67ab4541.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 377,
                            "endLine": 377,
                            "startColumn": 17,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 384,
                            "endLine": 384,
                            "startColumn": 17,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "A hardcoded string is used to encrypt data within crypto.aes.NewCipher. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "A {0} is used to encrypt data within {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[hardcoded string](0)",
              "[crypto.aes.NewCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 433,
                  "endLine": 433,
                  "startColumn": 38,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "782f501941f44f0f7669d5e26eead240802aad91bf372ab3977541ac278884b6",
            "1": "fcac6d06.d4dea66f.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72.fcac6d06.d4dea66f.45df3e14.e22980a8.da637a00.67ab4541.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 433,
                            "endLine": 433,
                            "startColumn": 38,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 433,
                            "endLine": 433,
                            "startColumn": 17,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "A hardcoded string is used to encrypt data within crypto.aes.NewCipher. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "A {0} is used to encrypt data within {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[hardcoded string](0)",
              "[crypto.aes.NewCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 437,
                  "endLine": 437,
                  "startColumn": 38,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "294f3554427157c9bc2de0d3076e68ff7f1f10e5d24aea3293aac0fbd3a4434a",
            "1": "ba4e4356.d4dea66f.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72.937abb2c.d4dea66f.45df3e14.e22980a8.f1d9f854.67ab4541.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 437,
                            "endLine": 437,
                            "startColumn": 38,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/storage/value/encrypt/aes/aes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 437,
                            "endLine": 437,
                            "startColumn": 17,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.ReadDir](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225,
                  "startColumn": 14,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "68f751b8471f71a3ba53ab533133060d533c365f6bea9fda0df38f8f27c81bd3",
            "1": "9dc55b95.2706cba0.97e7ea18.4e744c88.76b3f5c1.67ab4541.860c51ff.0762c59f.8da4b8b6.73eb5804.97e7ea18.e22980a8.e8c00e77.9383b6fc.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 41,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 218,
                            "endLine": 218,
                            "startColumn": 18,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 221,
                            "endLine": 221,
                            "startColumn": 15,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 14,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.ReadDir](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 244,
                  "endLine": 244,
                  "startColumn": 29,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "953d0a135bde4c0011a83ec7c41ba4c934aa30641fef0da617e19c0c27854051",
            "1": "9dc55b95.2706cba0.97e7ea18.89f13fa7.556f02b4.67ab4541.860c51ff.1bff12d3.8da4b8b6.c55d47e1.97e7ea18.e22980a8.39a485d8.9383b6fc.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 41,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 218,
                            "endLine": 218,
                            "startColumn": 18,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 221,
                            "endLine": 221,
                            "startColumn": 15,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 14,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadDir](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hack/conformance/check_conformance_test_requirements.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 16,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "22170a2d7726a37179622c69e34922e3a8c5583ecabe60175a8309cfeb217c34",
            "1": "37917f57.b1d760a0.45df3e14.f0d58824.556f02b4.2f4e1548.df7e59ba.770fc181.8da4b8b6.277c621c.45df3e14.9692a5c1.e8c00e77.9383b6fc.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 50,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 50,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 21,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[os.ReadDir](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hack/conformance/check_conformance_test_requirements.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107,
                  "startColumn": 9,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c8a48bf06039d2857ae23beac9a1b2c6fcf7470cb3ff97e64021d956775ba5f0",
            "1": "8379f5e8.32e1fb1f.45df3e14.d92049e6.556f02b4.d9c4bbd5.df7e59ba.9925e872.8da4b8b6.277c621c.45df3e14.9692a5c1.e8c00e77.9383b6fc.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 50,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 50,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 21,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 41,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadDir](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hack/conformance/check_conformance_test_requirements.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113,
                  "startColumn": 16,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a69e4f13496f2705c7a07296599b95223f82ef8a1df3be8e14e0fc034cb142a3",
            "1": "37917f57.b1d760a0.45df3e14.d92049e6.556f02b4.2f4e1548.df7e59ba.770fc181.8da4b8b6.277c621c.45df3e14.9692a5c1.e8c00e77.9383b6fc.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 50,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 50,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 21,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadDir](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hack/conformance/check_conformance_test_requirements.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121,
                  "startColumn": 9,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "053f54add72068dfd2ec5f9670a86084c058a25eac0084da649ddcf14dba4f61",
            "1": "8379f5e8.32e1fb1f.45df3e14.d92049e6.556f02b4.67ab4541.860c51ff.1bff12d3.8da4b8b6.277c621c.a433879a.e22980a8.e8c00e77.9383b6fc.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 50,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 50,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 21,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[os.ReadFile](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232,
                  "startColumn": 18,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8f6d80bb8bf8fb48a3e0bed05637512ea3eab2b1f0f541a309c826b08ecf83a4",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.67ab4541.1bf4e01c.678b0e20.8da4b8b6.c55d47e1.97e7ea18.e22980a8.e8c00e77.9383b6fc.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 41,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 218,
                            "endLine": 218,
                            "startColumn": 18,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 221,
                            "endLine": 221,
                            "startColumn": 15,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 230,
                            "endLine": 230,
                            "startColumn": 26,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 252,
                            "endLine": 252,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 231,
                            "endLine": 231,
                            "startColumn": 38,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 264,
                            "endLine": 264,
                            "startColumn": 26,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 39,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 269,
                            "endLine": 269,
                            "startColumn": 27,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 31,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 31,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2)",
              "[os.ReadFile](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 275,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb4c81c978e5d0854116e70c0bb0fb6167705da9c13511de1892dc59e5c36237",
            "1": "7572e22a.e0beca80.45df3e14.b1e0a0f9.1240d8b6.67ab4541.860c51ff.3e33c505.8da4b8b6.73eb5804.45df3e14.e22980a8.e8c00e77.9383b6fc.1bf4e01c.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 43,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 43,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 31,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/test_suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadFile](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hack/conformance/check_conformance_test_requirements.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 20,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e1b8857c5640153966c3e45c13bd4686e3abd1189208dfbea042df1abc15601a",
            "1": "8379f5e8.ba4b6bbb.45df3e14.4aeeb4fc.556f02b4.2f4e1548.9ef50d52.efe60fd8.8da4b8b6.277c621c.45df3e14.e22980a8.e8c00e77.9383b6fc.1bf4e01c.efe60fd8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 44,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 44,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 32,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadFile](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hack/conformance/check_conformance_test_requirements.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98,
                  "startColumn": 9,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b2fd0d9fd8f6d5e756ef4aaa11104c4644bf13a37b7327c7d757c951b3549132",
            "1": "8379f5e8.73eb5804.45df3e14.89f13fa7.556f02b4.995dab92.df7e59ba.efe60fd8.8da4b8b6.219f306a.45df3e14.e22980a8.e8c00e77.9383b6fc.1bf4e01c.efe60fd8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 44,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 44,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 32,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/conformance/check_conformance_test_requirements.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2)",
              "[os.ReadFile](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e_node/numa_alignment.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 254,
                  "endLine": 254,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a42a7ddc594d0c50784c37e617208634f6fd550ab7297e6a464c5446d3e7d738",
            "1": "3900f8ff.b1b20ea4.45df3e14.0c66bee6.51a8f989.67ab4541.860c51ff.5c311668.d656e964.73eb5804.45df3e14.e22980a8.e8c00e77.67ab4541.c2cfdcd9.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/numa_alignment.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 254,
                            "endLine": 254,
                            "startColumn": 56,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/numa_alignment.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 254,
                            "endLine": 254,
                            "startColumn": 56,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/numa_alignment.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 254,
                            "endLine": 254,
                            "startColumn": 31,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/numa_alignment.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 254,
                            "endLine": 254,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1)",
              "[os.WriteFile](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/benchmark/jsonify/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "81181d0a97a6c589fa6ff61a1b917f0b44fae47a5a7315aa0b17d4c6e3bb83b9",
            "1": "f93f09c7.348ddf12.45df3e14.e142b8a4.84c49f13.67ab4541.0873598c.fbc19cb8.9cf53582.c55d47e1.45df3e14.9692a5c1.9099ba58.67ab4541.0873598c.37d4bff0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/benchmark/jsonify/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 22,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/benchmark/jsonify/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 22,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/benchmark/jsonify/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[os.WriteFile](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/scheduler_perf/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 237,
                  "endLine": 237,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4562575ffdd6b979a37b49367a928239e36ce9830d6cc338c0cd85d100ba6a56",
            "1": "9cf53582.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.df7e59ba.37d4bff0.e59e0dea.e526758f.45df3e14.e22980a8.ab7bc978.67ab4541.be8ec6d7.135662f7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 6,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 5,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 25,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 231,
                            "endLine": 231,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 231,
                            "endLine": 231,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 231,
                            "endLine": 231,
                            "startColumn": 3,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/scheduler_perf/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[os.ReadFile](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e_node/e2e_node_suite_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 381,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3c65659bc0d09e3605e7215acdc0f20c3df809a46e2dfd89b9efb05917ad7a19",
            "1": "7b93dee7.7a59972a.45df3e14.47a9547c.556f02b4.2f4e1548.be8ec6d7.678b0e20.7b93dee7.7a59972a.45df3e14.e22980a8.556f02b4.67ab4541.be8ec6d7.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/e2e_node_suite_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 23,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/e2e_node_suite_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 23,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/e2e_node_suite_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 2,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/e2e_node_suite_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 7,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/e2e_node_suite_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 6,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/e2e_node_suite_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 39,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/e2e_node_suite_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 380,
                            "endLine": 380,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/e2e_node_suite_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 381,
                            "endLine": 381,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/e2e_node_suite_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 381,
                            "endLine": 381,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.Open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4)",
              "[os.Open](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/conformance/walk.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "92193ea09689c66d8733b1ceb8b7aa71dff7387388ec07014631707a82a17573",
            "1": "4cdd5f3b.348ddf12.45df3e14.9692a5c1.db2bb079.67ab4541.0873598c.e01cd24f.6d645ad0.348ddf12.45df3e14.9692a5c1.c43b942e.67ab4541.0873598c.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 21,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 21,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 21,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 2,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.Open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15)",
              "[os.Open](16)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/conformance/walk.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 190,
                  "endLine": 190,
                  "startColumn": 18,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aa2df0c85e31aa9a0e88eced0b1e05d5fbcb23c4f4710fcf160d2598be3cbfea",
            "1": "98d67fe3.4d7c6729.45df3e14.47a9547c.c32477a4.67ab4541.fde238eb.e01cd24f.98d67fe3.4d7c6729.45df3e14.e22980a8.c38e9162.92e08435.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 185,
                            "endLine": 185,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 185,
                            "endLine": 185,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 185,
                            "endLine": 185,
                            "startColumn": 12,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 185,
                            "endLine": 185,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 54,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 17,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 35,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 16,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 2,
                            "endColumn": 121
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 2,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 26,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/conformance/walk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[os.ReadDir](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/apparmor-loader/loader.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120,
                  "startColumn": 17,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "23e4e7485ce9d2b694a711f87b6be9b38ef7e7ca2cf08f66b0600e31e1d41c2e",
            "1": "424eddda.b1d760a0.45df3e14.0c66bee6.54489699.c7f9ba59.924ee9f3.b2014c83.424eddda.e3a22afc.738307e1.e22980a8.c43b942e.57f89f2f.b5e396cd.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/apparmor-loader/loader.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/apparmor-loader/loader.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/apparmor-loader/loader.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 2,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/apparmor-loader/loader.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/apparmor-loader/loader.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/apparmor-loader/loader.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 54,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/apparmor-loader/loader.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/apparmor-loader/loader.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/apparmor-loader/loader.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[fmt.Fprintf](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 410,
                  "endLine": 410,
                  "startColumn": 3,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c4b7bc8a3b04a31add6f2c6056a05558d1fb50b81896d31bb5896460d232a7fd",
            "1": "9cf53582.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.38552e76.f75a6a44.45df3e14.e22980a8.6b6807dc.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 405,
                            "endLine": 405,
                            "startColumn": 24,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 405,
                            "endLine": 405,
                            "startColumn": 24,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 405,
                            "endLine": 405,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 405,
                            "endLine": 405,
                            "startColumn": 3,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 410,
                            "endLine": 410,
                            "startColumn": 61,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 410,
                            "endLine": 410,
                            "startColumn": 54,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 410,
                            "endLine": 410,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 410,
                            "endLine": 410,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into fmt.Fprint, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[fmt.Fprint](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449,
                  "startColumn": 3,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "446c696d2055a2bb2e9250a5c9797348a13ffd8aca1e39cec88b6fb562e5b33e",
            "1": "f0a84589.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.37d4bff0.1b973386.43be7f94.fd4eeae2.e22980a8.6b6807dc.57f89f2f.a145879e.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 449,
                            "endLine": 449,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 449,
                            "endLine": 449,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 449,
                            "endLine": 449,
                            "startColumn": 3,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/proxy/proxy_server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 449,
                            "endLine": 449,
                            "startColumn": 3,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into fmt.Fprint, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32)",
              "[fmt.Fprint](33)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/guestbook/guestbook.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268,
                  "startColumn": 3,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb0e385f09f464d80b52df80d2925191fea1e2a0897dadea6ad4e18db3180a84",
            "1": "79ae6cd1.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.37d4bff0.add02d51.277c621c.fd4eeae2.76b707f0.be152d1f.75c1163d.6c7db953.949d0607"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 27,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 27,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 238,
                            "endLine": 238,
                            "startColumn": 25,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 238,
                            "endLine": 238,
                            "startColumn": 25,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 238,
                            "endLine": 238,
                            "startColumn": 25,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 238,
                            "endLine": 238,
                            "startColumn": 9,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 238,
                            "endLine": 238,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 54,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 21,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 248,
                            "endLine": 248,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 254,
                            "endLine": 254,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 47,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 13,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 266,
                            "endLine": 266,
                            "startColumn": 28,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 274,
                            "endLine": 274,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 68,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 30,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 15,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 281,
                            "endLine": 281,
                            "startColumn": 27,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 281,
                            "endLine": 281,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 281,
                            "endLine": 281,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 283,
                            "endLine": 283,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 283,
                            "endLine": 283,
                            "startColumn": 11,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 266,
                            "endLine": 266,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 268,
                            "endLine": 268,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 268,
                            "endLine": 268,
                            "startColumn": 3,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 268,
                            "endLine": 268,
                            "startColumn": 3,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a web form flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2)",
              "[fmt.Fprintf](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/request_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3768,
                  "endLine": 3768,
                  "startColumn": 5,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "785fe9b6572f692c744ed7e14d51b017f3434792d4f6f5904457f1189e88eb8d",
            "1": "f0a84589.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.841f58c2.277c621c.45df3e14.e22980a8.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/request_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3768,
                            "endLine": 3768,
                            "startColumn": 26,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/request_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3768,
                            "endLine": 3768,
                            "startColumn": 26,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/request_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3768,
                            "endLine": 3768,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/request_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3768,
                            "endLine": 3768,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a web form flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[fmt.Fprintf](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/netexec/netexec.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 278,
                  "startColumn": 4,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "925fcb2870c6b767d7333f2d9e3e0f8e2de817a9dc4bfd30ccc4ef4fd488e2d6",
            "1": "0120c889.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.556df6d4.277c621c.9957a044.e22980a8.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 273,
                            "endLine": 273,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 273,
                            "endLine": 273,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 273,
                            "endLine": 273,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 274,
                            "endLine": 274,
                            "startColumn": 46,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 276,
                            "endLine": 276,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 278,
                            "endLine": 278,
                            "startColumn": 76,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 278,
                            "endLine": 278,
                            "startColumn": 4,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 278,
                            "endLine": 278,
                            "startColumn": 4,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a web form flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[fmt.Fprintf](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/netexec/netexec.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 283,
                  "endLine": 283,
                  "startColumn": 2,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "417166c0bb21f0c7caf5811424de14a5c3e4f0c443c892d0dd549e45d8d6b8ca",
            "1": "ba4e4356.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.556df6d4.277c621c.45df3e14.e22980a8.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 272,
                            "endLine": 272,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 272,
                            "endLine": 272,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 272,
                            "endLine": 272,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 274,
                            "endLine": 274,
                            "startColumn": 41,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 283,
                            "endLine": 283,
                            "startColumn": 23,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 283,
                            "endLine": 283,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 283,
                            "endLine": 283,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a web form flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[fmt.Fprintf](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/netexec/netexec.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 318,
                  "endLine": 318,
                  "startColumn": 3,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ced61a6f0e95313212523c0a093aa610963e43a51eaedf4adf325a3b69bad6fb",
            "1": "0120c889.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.1b025930.277c621c.45df3e14.e22980a8.5ef953d3.57f89f2f.349d2251.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 313,
                            "endLine": 313,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 313,
                            "endLine": 313,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 313,
                            "endLine": 313,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 65,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 316,
                            "endLine": 316,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 91,
                            "endColumn": 104
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a web form flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[fmt.Fprintf](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/netexec/netexec.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 323,
                  "endLine": 323,
                  "startColumn": 3,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d3d01ebb3eb5691c0beb537900d44d1867095916fd1fd938b50ff951926dfdff",
            "1": "0120c889.77b6e154.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.841f58c2.277c621c.45df3e14.e22980a8.5ef953d3.57f89f2f.f40e98db.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 312,
                            "endLine": 312,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 312,
                            "endLine": 312,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 312,
                            "endLine": 312,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 80,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 322,
                            "endLine": 322,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 88,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a web form flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[fmt.Fprintf](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/netexec/netexec.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 328,
                  "endLine": 328,
                  "startColumn": 3,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df3d13629588984833c94ff669a1d37043c03290f4d29e58b8c3a6087122592b",
            "1": "0120c889.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.841f58c2.277c621c.9957a044.e22980a8.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 314,
                            "endLine": 314,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 314,
                            "endLine": 314,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 314,
                            "endLine": 314,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 53,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 326,
                            "endLine": 326,
                            "startColumn": 28,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 327,
                            "endLine": 327,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 328,
                            "endLine": 328,
                            "startColumn": 83,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 328,
                            "endLine": 328,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 328,
                            "endLine": 328,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a web form flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[fmt.Fprintf](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/netexec/netexec.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 627,
                  "endLine": 627,
                  "startColumn": 4,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "69d4895bbea70926b8348a52ca8e999f853fa7e24a529febcd30c0bfcff96a13",
            "1": "0120c889.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.841f58c2.277c621c.69de7d9c.e22980a8.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 621,
                            "endLine": 621,
                            "startColumn": 64,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 625,
                            "endLine": 625,
                            "startColumn": 28,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 626,
                            "endLine": 626,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 76,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 4,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 4,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4)",
              "[Write](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 416,
                  "endLine": 416,
                  "startColumn": 4,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a080daec9a6dca323bdd7aeabe2989dea9e71173257f4dea4de739325262c933",
            "1": "34950bd9.73eb5804.45df3e14.f24cd98e.f658f14a.57f89f2f.df7e59ba.e01cd24f.34950bd9.f75a6a44.45df3e14.f24cd98e.6b6807dc.57f89f2f.a145879e.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 409,
                            "endLine": 409,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 409,
                            "endLine": 409,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 409,
                            "endLine": 409,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 409,
                            "endLine": 409,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 416,
                            "endLine": 416,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 416,
                            "endLine": 416,
                            "startColumn": 4,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4)",
              "[Write](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 498,
                  "endLine": 498,
                  "startColumn": 4,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6f44f09758dc347fd8caab76cae96f5d5bdbb064df3b49bc353e61ad556e20b1",
            "1": "34950bd9.73eb5804.45df3e14.f24cd98e.f658f14a.57f89f2f.df7e59ba.e01cd24f.34950bd9.f75a6a44.45df3e14.f24cd98e.6b6807dc.57f89f2f.a145879e.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 491,
                            "endLine": 491,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 491,
                            "endLine": 491,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 491,
                            "endLine": 491,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 491,
                            "endLine": 491,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 498,
                            "endLine": 498,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/dynamic/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 498,
                            "endLine": 498,
                            "startColumn": 4,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[Write](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 552,
                  "endLine": 552,
                  "startColumn": 4,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2e502e1ed01a9ab92bdfa944ccf25de93109038935a342294e7c5a683bd333cf",
            "1": "ad99a241.768dd3e7.45df3e14.d0b59e39.2c331b17.57f89f2f.3bee9612.0cdf1410.94090e2e.768dd3e7.94339737.e22980a8.4704677c.57f89f2f.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 548,
                            "endLine": 548,
                            "startColumn": 25,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 548,
                            "endLine": 548,
                            "startColumn": 25,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 548,
                            "endLine": 548,
                            "startColumn": 3,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 549,
                            "endLine": 549,
                            "startColumn": 6,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 550,
                            "endLine": 550,
                            "startColumn": 60,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 550,
                            "endLine": 550,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 550,
                            "endLine": 550,
                            "startColumn": 4,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 552,
                            "endLine": 552,
                            "startColumn": 19,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 552,
                            "endLine": 552,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/discovery/discovery_client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 552,
                            "endLine": 552,
                            "startColumn": 4,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[Write](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95,
                  "startColumn": 2,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fe0ab9a69fae97786028c3b59434ade3660e29de4d6ec85072811aab8d9ccd9d",
            "1": "ba4e4356.73eb5804.45df3e14.c19d78c5.771b0f00.57f89f2f.df7e59ba.bda788af.033439eb.277c621c.45df3e14.2f1c3655.09f6f95e.57f89f2f.fab75e61.96db056b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 21,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 53,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 8,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2)",
              "[Write](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/probe/http/http_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 287,
                  "endLine": 287,
                  "startColumn": 5,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "28e0df1419a0eace5660175c99bf792028ba106e1219444e7f990361652d6f1c",
            "1": "ad99a241.c45f1b38.45df3e14.c19d78c5.51a8f989.57f89f2f.3bee9612.0cdf1410.38552e76.43be7f94.75616edb.e22980a8.79cde8a7.57f89f2f.3bee9612.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 287,
                            "endLine": 287,
                            "startColumn": 20,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 287,
                            "endLine": 287,
                            "startColumn": 20,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 287,
                            "endLine": 287,
                            "startColumn": 13,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 287,
                            "endLine": 287,
                            "startColumn": 5,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2)",
              "[fmt.Fprintf](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/netexec/netexec.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294,
                  "startColumn": 3,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d41e80d1edbef05909735e0d7b51e1db6ce004a2ef49853f5281b750dc6bc11c",
            "1": "f0a84589.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.94090e2e.277c621c.45df3e14.76b707f0.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296,
                  "startColumn": 52,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "51ba59a5eaae6bd72313d88ef8570674114f575b6274564093c77558310734ae",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 296,
                            "endLine": 296,
                            "startColumn": 62,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 296,
                            "endLine": 296,
                            "startColumn": 52,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304,
                  "startColumn": 52,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bc1e7cc3f027131b50e411778f0dc428a6ddeb2d55e966125f298dd976e001ed",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 62,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 52,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 530,
                  "endLine": 530,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4241c3c1b395a81f40ee5bb1e147b7a9f1e59757d2a106e7de15683a7553ab33",
            "1": "424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 530,
                            "endLine": 530,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 530,
                            "endLine": 530,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 597,
                  "endLine": 597,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aa6ae88dc759ba20eba593dc9ef3da66797b6acfb182f2fff07cb367fa8f7268",
            "1": "424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7f4a7311f4f8702fe17d95e1978a75f01085d97ddbb0461b8f9a2741eac174ad",
            "1": "424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df64de63f9d90c249e8ae8051f886917de8e9ee456ad4376cf95877ae12255ee",
            "1": "424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aaab2ed33a1db77eeeae7cd4870c82ca5691bfe44af88fe88aa4f7735df21222",
            "1": "424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5bedadef0a3c5df356ecd4c143fa919849c795c2472d3dd917a5b7da93f0aa0b",
            "1": "424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "21bdeaf2bfc68b239e8e37f79f0e3e95e0ea705bba582b540d9d136ca84b20d7",
            "1": "424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.a99effd3.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/credentialprovider/keyring_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 493,
                  "endLine": 493,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "11e2175eee8640d3398d5385af46dd02e5da001b454963bc0bf3a51dc29ccbb2",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.f77a3e58.6ee851a6.67ab4541.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/credentialprovider/keyring_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 493,
                            "endLine": 493,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/credentialprovider/keyring_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 493,
                            "endLine": 493,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 220,
                  "endLine": 220,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "054068910196a061c8292626ceac5043146bd6049100c5943ef7efeaa7b4b39d",
            "1": "aeb8d614.73eb5804.45df3e14.e22980a8.9f81532b.995dab92.30910d28.1bff12d3.aeb8d614.776d1789.45df3e14.e22980a8.9f81532b.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 227,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e96d889e19db25a1585474db89ff701e6acec82dd0d436a14bfbf1e2f95a8cee",
            "1": "2fea1925.73eb5804.45df3e14.e22980a8.9f81532b.67ab4541.30910d28.1bff12d3.2fea1925.776d1789.45df3e14.e22980a8.9f81532b.67ab4541.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 227,
                            "endLine": 227,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 467,
                  "endLine": 467,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a474197b9fde8569a989345624f7a76a083d951c71a767bf9fcc680959cf11e2",
            "1": "424eddda.73eb5804.3d13e656.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3.424eddda.3838dbad.3d13e656.e22980a8.0bcaa66b.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 467,
                            "endLine": 467,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 467,
                            "endLine": 467,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 475,
                  "endLine": 475,
                  "startColumn": 13,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "26003c998b3cf55f13c0be288602d5118498d3b25b5bd19fd205b64517a413bb",
            "1": "424eddda.32371bae.45df3e14.c645f858.6ee851a6.995dab92.30910d28.1bff12d3.424eddda.3838dbad.45df3e14.e22980a8.0bcaa66b.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 467,
                            "endLine": 467,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 475,
                            "endLine": 475,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "080c7af3a5a6434d01943eff389d9c23002a08b8de877d78229b9ebce39001d4",
            "1": "b819a01f.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.30910d28.1bff12d3.3a16cad1.776d1789.45df3e14.e22980a8.f1d9f854.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 52,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f3d3a713e524bdd54f48f60aaed928a76aaedf57bc2cb961ddcce042e22a2f7c",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.30910d28.a436cd0e.3a16cad1.776d1789.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 52,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8d3fc82b81804128446c8dc995872a291a52109d861dff5253a9d5d89b7bd1c2",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.3a16cad1.776d1789.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 52,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2e3c4da87619ecd4758eb08dfeca5dda2be65d24e81e7872f92b31ccd8ac8ec8",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.3a16cad1.776d1789.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 52,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "201f7d002a85b2528db9a6568071d721ce61c4a231a663a25e7e5dca2c845fdd",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.3a16cad1.776d1789.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 52,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "47b00b294f43bb0796ffa9e67a47832f9e93f66d84967742f542fe40429896ea",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.3a16cad1.776d1789.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 52,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4f68e1c7b1d066e7ffdfd94d69216e82d3cddd6ba9139b50e29fa72b1dbb42dd",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.3a16cad1.776d1789.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 52,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in ASSIGN.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 2,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a4340db7d20012a4073726f668854772b7ed618ef569b19f5559ab8f7dd03f54",
            "1": "ba4e4356.73eb5804.52a8a1ee.e22980a8.cf99bb5a.67ab4541.860c51ff.1bff12d3.2171157a.a74f4c4c.52a8a1ee.9692a5c1.cf99bb5a.67ab4541.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 50,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 2,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in ASSIGN.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 394,
                  "endLine": 394,
                  "startColumn": 2,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5b11c371bf9ca6185ae9a9dab0397a859d2b4b5d051542aa51c425e05eb09fa1",
            "1": "3e0ea818.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.6101856a.1bff12d3.3e0ea818.3838dbad.52a8a1ee.e22980a8.0bcaa66b.67ab4541.6101856a.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 394,
                            "endLine": 394,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 394,
                            "endLine": 394,
                            "startColumn": 2,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in ASSIGN.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 414,
                  "endLine": 414,
                  "startColumn": 2,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "285329220b744fb18fe2cb2adc13440a9757fed73f1055b26f379e2849977dac",
            "1": "3e0ea818.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.860c51ff.1bff12d3.3e0ea818.3838dbad.52a8a1ee.e22980a8.0bcaa66b.67ab4541.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 2,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in ASSIGN.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/client/exec_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 326,
                  "endLine": 326,
                  "startColumn": 5,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "73788ca381fdc2fe71361bb00034a7175ace77c24726a4939b55361255b3c731",
            "1": "3e0ea818.73eb5804.738307e1.e22980a8.c8f211d9.67ab4541.b5e396cd.1bff12d3.d954b53f.73eb5804.81e18a6e.e22980a8.c8f211d9.67ab4541.b5e396cd.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/client/exec_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 326,
                            "endLine": 326,
                            "startColumn": 18,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/client/exec_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 326,
                            "endLine": 326,
                            "startColumn": 5,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in AADClientCertPassword.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[AADClientCertPassword](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/legacy-cloud-providers/azure/azure_ratelimit_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98,
                  "startColumn": 4,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4068ae4527f9c6e664b3840e0c37bf3c24dcb1dbe3255d0753f16f842dfc7b7a",
            "1": "d921c0b6.98f0ff0f.3d13e656.bfac11f0.6ee851a6.3f901b17.8ee950b3.ff3d0695.d921c0b6.98f0ff0f.3d13e656.bfac11f0.6ee851a6.3f901b17.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/azure/azure_ratelimit_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 35,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/azure/azure_ratelimit_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 4,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 358,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in passwd.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[passwd](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 526,
                  "endLine": 526,
                  "startColumn": 3,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ed6b2245efbec30f3332f8ec5b31a7488600e19ecaf39cadef0cca19a421bd66",
            "1": "5c67d256.323c2263.83bf0c00.11a2742f.efefb4d9.e743541f.01e704b4.1bff12d3.5c67d256.bb17fc59.83bf0c00.11a2742f.efefb4d9.e743541f.01e704b4.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 526,
                            "endLine": 526,
                            "startColumn": 20,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 526,
                            "endLine": 526,
                            "startColumn": 3,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in passwd.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[passwd](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 551,
                  "endLine": 551,
                  "startColumn": 3,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "39c4c672db017ec06baa6f8ba2a6402edc0457dce263a742367102b164afe901",
            "1": "5c67d256.323c2263.83bf0c00.11a2742f.efefb4d9.e743541f.01e704b4.1bff12d3.5c67d256.bb17fc59.83bf0c00.11a2742f.efefb4d9.e743541f.01e704b4.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 551,
                            "endLine": 551,
                            "startColumn": 20,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 551,
                            "endLine": 551,
                            "startColumn": 3,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in expectedPasswd.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[expectedPasswd](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 553,
                  "endLine": 553,
                  "startColumn": 3,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bd2675fc222e802921a9a8d42a38fe94c77a1c1a36942c1eee14bee83b044be5",
            "1": "8379f5e8.6c51dca7.45df3e14.79502f34.d800efe7.67ab4541.860c51ff.1bff12d3.8379f5e8.6c51dca7.45df3e14.79502f34.69cb7337.67ab4541.88fdba3b.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 553,
                            "endLine": 553,
                            "startColumn": 20,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 553,
                            "endLine": 553,
                            "startColumn": 3,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in expectedPasswd.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[expectedPasswd](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 564,
                  "endLine": 564,
                  "startColumn": 5,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3b8defe36fc067f016bf7646eb4aab97aee73c9781e5874a7fb0d360f583f728",
            "1": "8379f5e8.d00fe7c5.45df3e14.79502f34.b778d062.67ab4541.860c51ff.1bff12d3.8379f5e8.d00fe7c5.45df3e14.79502f34.b778d062.67ab4541.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 553,
                            "endLine": 553,
                            "startColumn": 20,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/users/users_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 564,
                            "endLine": 564,
                            "startColumn": 5,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 408,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[os.exec.Command](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6440c0e474a461298228131c9f7316440951788368c161f38f818e0a94f8d9b9",
            "1": "86d71947.348ddf12.45df3e14.9692a5c1.db2bb079.75c1163d.0873598c.26928719.2200018d.348ddf12.45df3e14.9692a5c1.c43b942e.456cb1ec.0873598c.26928719"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 9,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 22,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 801,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[_](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/Azure/go-autorest/autorest/azure/rp.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94,
                  "startColumn": 3,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b68e105b849e18d337cd05ec65a6d830af8519c30dfa68b5a37b0f624139108d",
            "1": "424eddda.98f0ff0f.3d13e656.6483b32f.6ee851a6.67ab4541.8ee950b3.dd979430.5eddd1f1.940077cb.45df3e14.e22980a8.6ee851a6.67ab4541.8ee950b3.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Azure/go-autorest/autorest/azure/rp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 11,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Azure/go-autorest/autorest/azure/rp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 11,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Azure/go-autorest/autorest/azure/rp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 3,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[os.exec.Command](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/pets/peer-finder/peer-finder.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "88ff984dc98659fc56be819535845d698e77544ffd3f0b4017db00419efb12ba",
            "1": "8379f5e8.c20335f3.45df3e14.0c66bee6.a964dd58.75c1163d.743b35ad.5a446d63.2d06e3d6.c20335f3.45df3e14.e22980a8.556f02b4.75c1163d.be8ec6d7.d2e19371"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 33,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 40,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 12,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 12,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 3,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 168,
                            "endLine": 168,
                            "startColumn": 42,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 26,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 43,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[os.exec.Command](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/pets/peer-finder/peer-finder.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2452dc5f371afb76b7052958f2c2418e4d515e5a41dc50d50505f2dd0b876029",
            "1": "2d06e3d6.b1e44e22.45df3e14.e22980a8.556f02b4.57f89f2f.be8ec6d7.d2e19371.aad28697.c55d47e1.45df3e14.e22980a8.556f02b4.57f89f2f.be8ec6d7.d2e19371"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 33,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 40,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 12,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 12,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 3,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 168,
                            "endLine": 168,
                            "startColumn": 42,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 26,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 43,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/pets/peer-finder/peer-finder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/ErrorMessage",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Information exposure through error stack trace in fmt.Printf.",
            "markdown": "Information exposure through {0} in {1}.",
            "arguments": [
              "[error stack trace](0)",
              "[fmt.Printf](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/onsi/ginkgo/v2/internal/suite.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 358,
                  "endLine": 358,
                  "startColumn": 3,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e45993b22089fd23bf89b1d0700e9b58f006bc31cd663468083c10a93f8ee3f9",
            "1": "2d06e3d6.bb2c1bfc.45df3e14.6483b32f.0afee2bf.57f89f2f.860c51ff.1bff12d3.2d06e3d6.73eb5804.45df3e14.e22980a8.7a9847be.57f89f2f.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/internal/progress_report.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 181,
                            "endLine": 181,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/internal/suite.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 358,
                            "endLine": 358,
                            "startColumn": 3,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in SpecPassphrase.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[SpecPassphrase](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/libopenstorage/openstorage/api/api.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "startColumn": 2,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c0751d20d9d2d4512dd676e49f4797d2c2b620bbc512484c90d19851b0981a1d",
            "1": "8379f5e8.69fe1aeb.40fe1ca1.29f3fa62.594a5f17.ff39a8d2.fb9e89bc.1bff12d3.8379f5e8.69fe1aeb.40fe1ca1.29f3fa62.594a5f17.ff39a8d2.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/libopenstorage/openstorage/api/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/libopenstorage/openstorage/api/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 2,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in unixPasswdPath.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[unixPasswdPath](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "startColumn": 2,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "03ede91580262d03d2ddc821291c4f1780ff7342702caebebea616141941f0af",
            "1": "8379f5e8.57486739.45df3e14.e22980a8.8193a752.8fd31a01.fb9e89bc.1bff12d3.8379f5e8.57486739.71d8f4e9.e22980a8.8193a752.8fd31a01.0c6e0684.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 2,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in unixPasswdPath.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[unixPasswdPath](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103,
                  "startColumn": 9,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f27eb873abd1cd428504cb5bd1dc1b45a0e934b8a49750f4424501c7768d7da8",
            "1": "8379f5e8.57486739.45df3e14.e22980a8.8193a752.8fd31a01.cd527bfb.1bff12d3.8379f5e8.57486739.45df3e14.e22980a8.8193a752.8fd31a01.0c6e0684.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 9,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in SharedPassthruAssignmentPolicy.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[SharedPassthruAssignmentPolicy](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/simulator/esx/host_config_info.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1085,
                  "endLine": 1085,
                  "startColumn": 3,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "615a39f72efc12acf68e835e6cb85daeba5a72208e9a2c05958f70e2bb90b254",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.4b10663c.8ee950b3.07211118.424eddda.98f0ff0f.9e8e477b.bfac11f0.6ee851a6.4b10663c.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/esx/host_config_info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1085,
                            "endLine": 1085,
                            "startColumn": 35,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/esx/host_config_info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1085,
                            "endLine": 1085,
                            "startColumn": 3,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in fileEtcPasswd.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[fileEtcPasswd](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/kubeadm/app/util/users/users_linux.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "50b93e26199ad9d66990c7418c8b04a41b1b09876a7d00b9aa93d0e1a179d6e3",
            "1": "8379f5e8.3d2fbada.45df3e14.79502f34.60af6eff.8fd31a01.c690b65a.1bff12d3.8379f5e8.3d2fbada.45df3e14.79502f34.60af6eff.8fd31a01.c690b65a.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/users/users_linux.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 21,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/users/users_linux.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in passed.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[passed](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/run.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 336,
                  "endLine": 336,
                  "startColumn": 2,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "29007b8c3cb0ef358b34dadaf40dc750bdb43ecae002cce5d124a3818bf19333",
            "1": "3e0ea818.176a7453.45df3e14.e22980a8.d8d56e30.995dab92.a385baf4.1bff12d3.da4eb1ae.176a7453.2734307b.7c795a40.d8d56e30.995dab92.5d1048bf.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/run.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 336,
                            "endLine": 336,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/run.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 336,
                            "endLine": 336,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in passed.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[passed](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/run.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 338,
                  "endLine": 338,
                  "startColumn": 3,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1034d4aeab619a706b91bae1f99d379d9de9c175431bc23749b0f21a7c1a9a2c",
            "1": "3e0ea818.73eb5804.fc7d5400.e22980a8.a26f2678.995dab92.7b915e3a.1bff12d3.3e0ea818.73eb5804.2734307b.7c795a40.a26f2678.995dab92.df7e59ba.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/run.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 336,
                            "endLine": 336,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/internal/run.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 338,
                            "endLine": 338,
                            "startColumn": 3,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/OR/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into net.http.Redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4)",
              "[net.http.Redirect](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/probe/http/http_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 401,
                  "endLine": 401,
                  "startColumn": 4,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7adbd363800b0551a726605c30fd458ab7903467421e31c99c70e8326c8da378",
            "1": "7bf5c746.277c621c.45df3e14.49904dd8.5ef953d3.57f89f2f.cf894c96.62cdbc52.94090e2e.277c621c.4a1253c8.ae31845c.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 400,
                            "endLine": 400,
                            "startColumn": 32,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 400,
                            "endLine": 400,
                            "startColumn": 32,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 400,
                            "endLine": 400,
                            "startColumn": 14,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 400,
                            "endLine": 400,
                            "startColumn": 4,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 401,
                            "endLine": 401,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 401,
                            "endLine": 401,
                            "startColumn": 4,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/OR/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into net.http.Redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4)",
              "[net.http.Redirect](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/liveness/server.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64,
                  "startColumn": 3,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "363eca986aedfc6b17003e10d296375c81bf77c5060dc5162751d0e494061844",
            "1": "7bf5c746.277c621c.45df3e14.49904dd8.5ef953d3.57f89f2f.cf894c96.62cdbc52.94090e2e.277c621c.4a1253c8.ae31845c.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/liveness/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 33,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/liveness/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 33,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/liveness/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 15,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/liveness/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/liveness/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 23,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/liveness/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 3,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/OR/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a web form flows into net.http.Redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4)",
              "[net.http.Redirect](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/netexec/netexec.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 631,
                  "endLine": 631,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e14cb810d4ef71df7500f91a374bca421acfa7919efa471a7d724faa9563a4b1",
            "1": "7bf5c746.277c621c.69de7d9c.87ca9db8.5ef953d3.57f89f2f.cf894c96.62cdbc52.841f58c2.277c621c.4a1253c8.e22980a8.5ef953d3.57f89f2f.a145879e.b6881584"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 619,
                            "endLine": 619,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 619,
                            "endLine": 619,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 619,
                            "endLine": 619,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 621,
                            "endLine": 621,
                            "startColumn": 54,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 631,
                            "endLine": 631,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/netexec/netexec.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 631,
                            "endLine": 631,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vclib/connection_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 20,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f7547d47fe68a9e17016b505763a53a3283ab2b295089c170bdfc5d87503aa5c",
            "1": "2e637047.63651d82.45df3e14.e22980a8.0772103c.67ab4541.26f8869a.b2014c83.2e637047.63651d82.45df3e14.e22980a8.0772103c.67ab4541.26f8869a.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vclib/connection_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 20,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/volumemanager/reconciler/reconciler_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1504,
                  "endLine": 1504,
                  "startColumn": 57,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9de6bc045efb1ce9467228da947aa71a6178f5dda394ba7f89bc146fa2b69c78",
            "1": "90c6943a.961abeed.45df3e14.d50400b3.90d9407b.67ab4541.0c728423.1bff12d3.90c6943a.961abeed.45df3e14.d50400b3.90d9407b.67ab4541.0c728423.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/reconciler/reconciler_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1504,
                            "endLine": 1504,
                            "startColumn": 57,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/volumemanager/reconciler/reconciler_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1716,
                  "endLine": 1716,
                  "startColumn": 57,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5d01d87a9673aeb6f402a3597602defff7bb10f3160a480ffcdb8c28492e2285",
            "1": "90c6943a.961abeed.45df3e14.d50400b3.90d9407b.67ab4541.0c728423.1bff12d3.90c6943a.961abeed.45df3e14.d50400b3.90d9407b.67ab4541.0c728423.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/reconciler/reconciler_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1716,
                            "endLine": 1716,
                            "startColumn": 57,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/volume/util/attach_limit_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "af244940b9389d8c211de2d075c99461bed187b04fef3671e49489678a88ca8d",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/volume/util/attach_limit_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into os.RemoveAll, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19)",
              "[os.RemoveAll](20)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1135,
                  "endLine": 1135,
                  "startColumn": 13,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "41c040dcd925e45ad742e19ea49721d6f0c994b2ee27b2cf19faf3889ed1b8d4",
            "1": "0120c889.73eb5804.45df3e14.6f6e1432.84c49f13.995dab92.df7e59ba.e01cd24f.94090e2e.c55d47e1.fd4eeae2.9692a5c1.ab7bc978.67ab4541.d4e1fe78.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1113,
                            "endLine": 1113,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1113,
                            "endLine": 1113,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1113,
                            "endLine": 1113,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1114,
                            "endLine": 1114,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1119,
                            "endLine": 1119,
                            "startColumn": 21,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1119,
                            "endLine": 1119,
                            "startColumn": 11,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1119,
                            "endLine": 1119,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1125,
                            "endLine": 1125,
                            "startColumn": 14,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1134,
                            "endLine": 1134,
                            "startColumn": 20,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1134,
                            "endLine": 1134,
                            "startColumn": 20,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1556,
                            "endLine": 1556,
                            "startColumn": 18,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1559,
                            "endLine": 1559,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1563,
                            "endLine": 1563,
                            "startColumn": 83,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1563,
                            "endLine": 1563,
                            "startColumn": 83,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1563,
                            "endLine": 1563,
                            "startColumn": 67,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1563,
                            "endLine": 1563,
                            "startColumn": 26,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1563,
                            "endLine": 1563,
                            "startColumn": 19,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1563,
                            "endLine": 1563,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1134,
                            "endLine": 1134,
                            "startColumn": 3,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 26,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 809,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into os.Open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[os.Open](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1628,
                  "endLine": 1628,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "60ff7195814472962901213d0d8cad786a1cd253c0b42a64f58133c17b3efdba",
            "1": "ba4e4356.73eb5804.45df3e14.99ff8830.db2bb079.995dab92.df7e59ba.e01cd24f.1b973386.f47edcf6.fd4eeae2.9692a5c1.0de0c51b.67ab4541.d5262e45.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1617,
                            "endLine": 1617,
                            "startColumn": 21,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1617,
                            "endLine": 1617,
                            "startColumn": 21,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1617,
                            "endLine": 1617,
                            "startColumn": 7,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1617,
                            "endLine": 1617,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1618,
                            "endLine": 1618,
                            "startColumn": 14,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1618,
                            "endLine": 1618,
                            "startColumn": 20,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1618,
                            "endLine": 1618,
                            "startColumn": 27,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1618,
                            "endLine": 1618,
                            "startColumn": 27,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1618,
                            "endLine": 1618,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1627,
                            "endLine": 1627,
                            "startColumn": 69,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1627,
                            "endLine": 1627,
                            "startColumn": 8,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1627,
                            "endLine": 1627,
                            "startColumn": 3,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1628,
                            "endLine": 1628,
                            "startColumn": 21,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1628,
                            "endLine": 1628,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 809,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into os.Open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[os.Open](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ce1634058b910b2e5a19ccf7e5401659d5891522892ed06021c1a75c111fcb6",
            "1": "a93afeb0.73eb5804.45df3e14.c704c502.db2bb079.9383b6fc.df7e59ba.f84f42b7.a93afeb0.94816871.fd4eeae2.3a4cf8d3.aa7e0bf8.9383b6fc.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 21,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 21,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 7,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 14,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 20,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 27,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 27,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 14,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/http_nfc_lease.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 759,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadDir](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kubelet_getters.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 395,
                  "endLine": 395,
                  "startColumn": 25,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "88b2220bf3c250ce27670f47612dd565abed3d02d5a5c3711624bbe8d979bfec",
            "1": "85d03702.73eb5804.45df3e14.d8b8aed2.57a12657.bd7c218d.feab2451.13e0a798.85d03702.dea51d88.45df3e14.e22980a8.e8c00e77.67ab4541.c2cfdcd9.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kubelet_getters.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 393,
                            "endLine": 393,
                            "startColumn": 23,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kubelet_getters.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 393,
                            "endLine": 393,
                            "startColumn": 23,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kubelet_getters.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 393,
                            "endLine": 393,
                            "startColumn": 3,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kubelet_getters.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 394,
                            "endLine": 394,
                            "startColumn": 53,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kubelet_getters.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 394,
                            "endLine": 394,
                            "startColumn": 23,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kubelet_getters.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 394,
                            "endLine": 394,
                            "startColumn": 3,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kubelet_getters.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 395,
                            "endLine": 395,
                            "startColumn": 36,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kubelet_getters.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 395,
                            "endLine": 395,
                            "startColumn": 25,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 509,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4)",
              "[os.ReadDir](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 16,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2b495c51036ab90c3d5c3016cc52a3dfff27cfb5c7096592ac2e122ef8b9001c",
            "1": "8379f5e8.2706cba0.45df3e14.89f13fa7.556f02b4.2f4e1548.df7e59ba.1bff12d3.8da4b8b6.73eb5804.45df3e14.e22980a8.e8c00e77.57f89f2f.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 44,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 44,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4)",
              "[os.ReadDir](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "startColumn": 4,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8f1deb9e03f5142285a4fd37615132c7f4e5c76afe217d3189aea341fbf87919",
            "1": "2d06e3d6.2706cba0.45df3e14.6483b32f.556f02b4.57f89f2f.98c3cd0d.1bff12d3.8da4b8b6.c55d47e1.734a90e3.e22980a8.e8c00e77.57f89f2f.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 44,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 44,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/onsi/ginkgo/v2/ginkgo/unfocus/unfocus_command.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[os.ReadDir](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 425,
                  "endLine": 425,
                  "startColumn": 18,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b42a54fc940582bc1e822a1967315b3ba098769dbde500ff5b06c5199e6453e5",
            "1": "424eddda.be4cf75b.45df3e14.b1b7c4aa.035dca27.6f8c869a.924ee9f3.d84ac41f.8da4b8b6.2bfdd974.45df3e14.b1b7c4aa.e8c00e77.67ab4541.1bf4e01c.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 62,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 62,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 49,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 36,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 35,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 23,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 23,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 2,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 419,
                            "endLine": 419,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 419,
                            "endLine": 419,
                            "startColumn": 9,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 420,
                            "endLine": 420,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 29,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 18,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[os.ReadDir](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 438,
                  "endLine": 438,
                  "startColumn": 15,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "92bda8eb040028313e009afa22c8b1d5b76648496aced4dad1f873aa0b054b16",
            "1": "2d06e3d6.32e1fb1f.45df3e14.6483b32f.556f02b4.67ab4541.860c51ff.9925e872.8da4b8b6.c55d47e1.4c9b5203.b1b7c4aa.e8c00e77.67ab4541.1bf4e01c.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 62,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 62,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 49,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 36,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 35,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 36,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 23,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 23,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 2,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 419,
                            "endLine": 419,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 419,
                            "endLine": 419,
                            "startColumn": 9,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 420,
                            "endLine": 420,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 29,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 18,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadDir](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247,
                  "startColumn": 16,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0b733a0f6ea4891ca02f8172f66219ebeffb15b9e859e345cda7520b902aa840",
            "1": "8379f5e8.e084b076.45df3e14.89f13fa7.556f02b4.2f4e1548.df7e59ba.678b0e20.b4697f8f.73eb5804.45df3e14.e22980a8.e8c00e77.67ab4541.8ee950b3.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 44,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 44,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 241,
                            "endLine": 241,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 243,
                            "endLine": 243,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 231,
                            "endLine": 231,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 247,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 247,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadDir](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 257,
                  "endLine": 257,
                  "startColumn": 13,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b5bc8cbda793b7d6e7af0892ec7eee29fff89548564844d2e3797c3c1720972b",
            "1": "8379f5e8.e084b076.45df3e14.89f13fa7.556f02b4.67ab4541.860c51ff.9925e872.fd49328a.c55d47e1.45df3e14.e22980a8.e8c00e77.67ab4541.c2cfdcd9.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 44,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 44,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 241,
                            "endLine": 241,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 243,
                            "endLine": 243,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 231,
                            "endLine": 231,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 247,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/cgroups/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 247,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[os.OpenFile](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "96c3663f3e3292ea564e2298a4f6efacd0a2fd604377eb1c4944da3875bcbde4",
            "1": "f30fb316.8642ae5d.45df3e14.a1dd576c.9d9baa71.e4d7b7ac.be8ec6d7.3170e6fd.2d06e3d6.73eb5804.9fa62a61.a1dd576c.9d9baa71.e4d7b7ac.be8ec6d7.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 28,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 32,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 59,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 58,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 30,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 27,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 31,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/component-base/logs/kube-log-runner/kube-log-runner.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4)",
              "[os.OpenFile](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/yamlfmt/yamlfmt.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 18,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0d7a536bd047227c4da0044bc2d9b1432d74132f1479599d9d3142ae38bec2e1",
            "1": "424eddda.baa8203c.45df3e14.edbd913d.1240d8b6.e4d7b7ac.aa359f29.a9003944.424eddda.e3a22afc.9fa62a61.e22980a8.c43b942e.e4d7b7ac.aa359f29.a9003944"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 23,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 23,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 18,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.OpenFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/prune-junit-xml/prunexml.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 21,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6535ba3f6da16632a772c818c16fb1d3fa2a7714fc3e216c0d9aa1e1ae641419",
            "1": "7572e22a.e0beca80.45df3e14.edbd913d.1240d8b6.e4d7b7ac.aa359f29.0b3d1648.5ea2ec93.e3a22afc.9fa62a61.e22980a8.c43b942e.57f89f2f.aa359f29.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 23,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 23,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 50,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 33,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1)",
              "[os.OpenFile](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/go.uber.org/zap/sink.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 9,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "739ebcd78a935e5d64943205544cce1455cb5f390a4756b9b4da65f2a05538de",
            "1": "b5d65c13.c8cae435.45df3e14.b1e0a0f9.7c4a878b.e4d7b7ac.aa359f29.4cb51de1.1f0bd5c5.940077cb.9fa62a61.e22980a8.56ffa9d2.e4d7b7ac.aa359f29.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/go.uber.org/zap/sink.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/go.uber.org/zap/sink.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/go.uber.org/zap/sink.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 759,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.OpenFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 253,
                  "endLine": 253,
                  "startColumn": 13,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "59e07a0f778cf8230e6f7031492274bfe169962afd182925bce753a91ce393e2",
            "1": "7572e22a.73eb5804.45df3e14.b1e0a0f9.db2bb079.e4d7b7ac.aa359f29.e01cd24f.1f0bd5c5.940077cb.9fa62a61.e22980a8.56ffa9d2.e4d7b7ac.aa359f29.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 25,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 25,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 249,
                            "endLine": 249,
                            "startColumn": 33,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 253,
                            "endLine": 253,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 253,
                            "endLine": 253,
                            "startColumn": 13,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 809,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.ReadFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/preferredimports/preferredimports.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 248,
                  "endLine": 248,
                  "startColumn": 17,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e255c66bb75fef6d8a41c70350ffaa95477b6e7242b78973c991ff9706798b19",
            "1": "8470814d.8642ae5d.45df3e14.f375235c.51a8f989.2f4e1548.be8ec6d7.cde67692.8379f5e8.73eb5804.45df3e14.e22980a8.ccfe5922.67ab4541.be8ec6d7.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/preferredimports/preferredimports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 18,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/preferredimports/preferredimports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 18,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/preferredimports/preferredimports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/preferredimports/preferredimports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 247,
                            "startColumn": 10,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/preferredimports/preferredimports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 247,
                            "startColumn": 9,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/preferredimports/preferredimports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 248,
                            "endLine": 248,
                            "startColumn": 29,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/preferredimports/preferredimports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 248,
                            "endLine": 248,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 509,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.ReadFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/dependencycheck/dependencycheck.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5be8356b3e72083d5cc4c17302bccaf7fda56a3848fc0a897031518f286d4a25",
            "1": "f93f09c7.348ddf12.45df3e14.f9b9b2db.b30b958b.67ab4541.0873598c.fbc19cb8.2200018d.348ddf12.45df3e14.9692a5c1.c43b942e.67ab4541.0873598c.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencycheck/dependencycheck.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencycheck/dependencycheck.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencycheck/dependencycheck.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencycheck/dependencycheck.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencycheck/dependencycheck.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 24,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencycheck/dependencycheck.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencycheck/dependencycheck.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 509,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.ReadFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/importverifier/importverifier.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218,
                  "startColumn": 17,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "86e7c55899d257506981a46ef18a9c83c49511d89c7f2f8c85c713a4f85b13c1",
            "1": "8379f5e8.4477ce6e.08a82b19.54505992.66a4536b.7cfc9678.df7e59ba.678b0e20.8379f5e8.348ddf12.08a82b19.9692a5c1.66a4536b.67ab4541.0873598c.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/importverifier/importverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/importverifier/importverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/importverifier/importverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/importverifier/importverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 179,
                            "endLine": 179,
                            "startColumn": 52,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/importverifier/importverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 217,
                            "endLine": 217,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/importverifier/importverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 218,
                            "endLine": 218,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/importverifier/importverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 218,
                            "endLine": 218,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 509,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadFile](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/dependencyverifier/dependencyverifier.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 18,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0459eac49aefc429a358337bc51b6873b13106613e00be5000fe17c03d6220a8",
            "1": "8379f5e8.4c374afc.45df3e14.89f13fa7.556f02b4.2f4e1548.df7e59ba.678b0e20.d8cb96dd.348ddf12.7cc4c693.9692a5c1.cdda01d9.67ab4541.0873598c.beef2c95"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencyverifier/dependencyverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 180,
                            "endLine": 180,
                            "startColumn": 33,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencyverifier/dependencyverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 180,
                            "endLine": 180,
                            "startColumn": 33,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencyverifier/dependencyverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 180,
                            "endLine": 180,
                            "startColumn": 26,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencyverifier/dependencyverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 180,
                            "endLine": 180,
                            "startColumn": 2,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencyverifier/dependencyverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 181,
                            "endLine": 181,
                            "startColumn": 32,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencyverifier/dependencyverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencyverifier/dependencyverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/dependencyverifier/dependencyverifier.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 18,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 509,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.ReadFile](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/yamlfmt/yamlfmt.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32,
                  "startColumn": 22,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "36cb9a4b1285e8101e1e5ddb81ac1c7df2904cfb5bc75c035fb01a64f30bc1f1",
            "1": "424eddda.baa8203c.45df3e14.edbd913d.51a8f989.e4d7b7ac.aa359f29.a9003944.424eddda.e3a22afc.45df3e14.e22980a8.c43b942e.e4d7b7ac.aa359f29.a9003944"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 23,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 23,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/yamlfmt/yamlfmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 22,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[os.ReadFile](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/genkubedocs/gen_kube_docs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 3,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d052599df2e6af78431322679cabda0aa7e7cbcce380bacce05a34d47cb68b14",
            "1": "2d06e3d6.73eb5804.45df3e14.1eb3121a.bc7028d0.57f89f2f.f5f190dd.545e9171.cd9e2403.348ddf12.dc26c322.9692a5c1.ede86221.57f89f2f.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/gen_kube_docs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/gen_kube_docs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/gen_kube_docs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 3,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/gen_kube_docs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 33,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/gen_kube_docs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 17,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/gen_kube_docs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/gen_kube_docs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 32,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/gen_kube_docs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 35,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/postprocessing.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 49,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/postprocessing.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/postprocessing.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/postprocessing.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/postprocessing.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 36,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/genkubedocs/postprocessing.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 24,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 509,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[os.ReadFile](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 26,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "49bfb8eb7d940586768a7cb612986ddf206f6ed48ef6e3c7ed6cbb8d8c685cb6",
            "1": "ba4e4356.73eb5804.45df3e14.6f6e1432.db2bb079.995dab92.df7e59ba.e01cd24f.424eddda.277c621c.45df3e14.e22980a8.e8c00e77.9383b6fc.c2cfdcd9.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 57,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 57,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 46,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/mbm.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/mbm.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 46,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 364,
                            "endLine": 364,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 364,
                            "endLine": 364,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 364,
                            "endLine": 364,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 365,
                            "endLine": 365,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 365,
                            "endLine": 365,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[os.ReadFile](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 26,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fcc5bfdd6a246d745cc607cbfa3d51216251f3c83a18a84388b7bcb0f0280b65",
            "1": "ba4e4356.73eb5804.45df3e14.6f6e1432.db2bb079.995dab92.df7e59ba.e01cd24f.424eddda.277c621c.45df3e14.e22980a8.e8c00e77.9383b6fc.c2cfdcd9.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 57,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 57,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/monitoring.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 46,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/cmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/cmt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 45,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 364,
                            "endLine": 364,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 364,
                            "endLine": 364,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 364,
                            "endLine": 364,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 365,
                            "endLine": 365,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/intelrdt/intelrdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 365,
                            "endLine": 365,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadFile](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 326,
                  "endLine": 326,
                  "startColumn": 12,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1992377e677106e2020fb73a658140c1a38b3b16f9d8916033c10dbd45ef08bc",
            "1": "7f6e8081.277c621c.45df3e14.cc4321b0.5ef953d3.995dab92.e9902f05.9925e872.47d3c013.277c621c.4c9b5203.e22980a8.e8c00e77.67ab4541.c2cfdcd9.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 326,
                            "endLine": 326,
                            "startColumn": 58,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 371,
                            "endLine": 371,
                            "startColumn": 70,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadFile](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 372,
                  "endLine": 372,
                  "startColumn": 15,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6ae5d16447de744c62e7d9c87c0209d2fada632ec3751843f340bb685e75c528",
            "1": "7f6e8081.83a9c8e5.45df3e14.89f13fa7.556f02b4.2f4e1548.e9902f05.678b0e20.7f6e8081.277c621c.45df3e14.e22980a8.e8c00e77.67ab4541.c2cfdcd9.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 326,
                            "endLine": 326,
                            "startColumn": 58,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 371,
                            "endLine": 371,
                            "startColumn": 70,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadFile](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 355,
                  "endLine": 355,
                  "startColumn": 16,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "891a7bd8c0db510f204bca96bf33b40448631d6fdf16a0649257a3bb57aac523",
            "1": "7f6e8081.277c621c.45df3e14.89f13fa7.5ef953d3.995dab92.e196463c.9925e872.39ddc4bb.277c621c.96f19e38.e22980a8.3345e8d8.67ab4541.2c91fbc7.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 355,
                            "endLine": 355,
                            "startColumn": 56,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 401,
                            "endLine": 401,
                            "startColumn": 61,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 402,
                            "endLine": 402,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 402,
                            "endLine": 402,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.ReadFile](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 402,
                  "startColumn": 15,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4c06d3a5bb11ba182138f06e053005aac111e8e9fe635066a9aba0ea7a28c1a9",
            "1": "7f6e8081.83a9c8e5.45df3e14.89f13fa7.556f02b4.2f4e1548.e9902f05.678b0e20.7f6e8081.277c621c.45df3e14.e22980a8.e8c00e77.67ab4541.c2cfdcd9.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 355,
                            "endLine": 355,
                            "startColumn": 56,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 401,
                            "endLine": 401,
                            "startColumn": 61,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 402,
                            "endLine": 402,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 402,
                            "endLine": 402,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[os.WriteFile](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a56302c2a81c3909ec2a6f5c2b867b564cef7508b5980fb95278a48c30abba1e",
            "1": "3e0ea818.73eb5804.45df3e14.e22980a8.84c49f13.67ab4541.be8ec6d7.37d4bff0.2200018d.348ddf12.45df3e14.9692a5c1.c43b942e.67ab4541.be8ec6d7.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 35,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 137,
                            "startColumn": 9,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 137,
                            "startColumn": 3,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 30,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 3,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 168,
                            "endLine": 168,
                            "startColumn": 22,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/cmd/stringer/stringer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 168,
                            "endLine": 168,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 509,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.Open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[os.Open](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 469,
                  "endLine": 469,
                  "startColumn": 14,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd61df8cefbdcecf6438c78666c88e44258b8b690064c16b539e28cbf5408a14",
            "1": "3900f8ff.be4cf75b.45df3e14.b1b7c4aa.035dca27.6f8c869a.df7e59ba.d84ac41f.8da4b8b6.2bfdd974.45df3e14.b1b7c4aa.e8c00e77.67ab4541.1bf4e01c.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 62,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 62,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 49,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 36,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 35,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 23,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 23,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 2,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 419,
                            "endLine": 419,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 419,
                            "endLine": 419,
                            "startColumn": 9,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 420,
                            "endLine": 420,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 459,
                            "endLine": 459,
                            "startColumn": 41,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 469,
                            "endLine": 469,
                            "startColumn": 22,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/cp/cp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 469,
                            "endLine": 469,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into os.Symlink, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4)",
              "[os.Symlink](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 262,
                  "endLine": 262,
                  "startColumn": 10,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "851a5be3ec0c9e024d61c05e9f7e3a026b647c6c9137058f16a2aa25d3671671",
            "1": "2d06e3d6.73eb5804.45df3e14.6483b32f.84c49f13.67ab4541.860c51ff.545e9171.1f0bd5c5.940077cb.734a90e3.e22980a8.556f02b4.67ab4541.c2e93e04.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 25,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 25,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 262,
                            "endLine": 262,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/toolbox/hgfs/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 262,
                            "endLine": 262,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 809,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.Open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4)",
              "[os.Open](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/prune-junit-xml/prunexml.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 21,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fb22803931e9c1b31b938f1bb0cbee7f2ef5bd71c43d4ddb482e366861a0dc92",
            "1": "5ea2ec93.edc09c40.45df3e14.edbd913d.51a8f989.e4d7b7ac.aa359f29.5c1afcc5.5ea2ec93.e3a22afc.45df3e14.e22980a8.c43b942e.57f89f2f.aa359f29.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 23,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 23,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 50,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prune-junit-xml/prunexml.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 21,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 559,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into io.ioutil.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[io.ioutil.ReadFile](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 14,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8e6eef2c05d7b16a8e6810e9b5c8d5cc87d23c7ac566963e7df3ee2904d8df3f",
            "1": "424eddda.61de85e3.45df3e14.0c66bee6.51a8f989.9383b6fc.924ee9f3.b2014c83.86d45000.73eb5804.45df3e14.1913ff44.164cb049.9383b6fc.fa5894c3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 25,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 25,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 5,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 61,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 60,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 38,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 23,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 23,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/cadvisor/machine/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 509,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[open](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "startColumn": 10,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f189e494d174c42b674603066d2cc11261e0b37b9833c038b0eb878ee9023d1c",
            "1": "e06468b8.f8545116.187bf175.139c59a8.b99ddc28.ba14daf2.a2237efa.f46ed94e.e06468b8.42d5b847.187bf175.139c59a8.b99ddc28.ba14daf2.c532d34b.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 33,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[open](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 105,
                  "startColumn": 1,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "85dd602968914117c3a0868938c7ca50ffb5c5a58903193dcac7e1b67fbdb928",
            "1": "e34e1fea.42d5b847.3c3a65ff.139c59a8.c8b7d5cc.ba14daf2.1449530d.742d9b21.e06468b8.42d5b847.d4fa07ba.139c59a8.c8b7d5cc.73cfdf26.a5e58efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 33,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/i18n/translations/extract.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[open](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hack/boilerplate/boilerplate.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 14,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "10519dfe59ca2e32ec139e7adba4abbac339b1f79b4cfe5640f18272247754e1",
            "1": "9073aae1.5b46cdac.187bf175.139c59a8.f3eda546.ba14daf2.1cb0cc57.ebed174f.3ab5af84.f40eb707.187bf175.f6463326.f3eda546.0a892d8d.f6dc7859.4d08e3d1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 8,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 8,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 1,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 40,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 40,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 27,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 19,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[open](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hack/verify-flags-underscore.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 13,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "092a124fbf421226affbcf88ecfb5d01fa8fb900c1aafbb14aae88f01b0d0667",
            "1": "da9cf85a.9f19498e.bafb6c05.139c59a8.f3eda546.ba14daf2.2701234b.a4830b9a.da9cf85a.27dbfe85.de8c00a5.9cd2dfe0.f3eda546.73cfdf26.2701234b.cbb4379e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 8,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 8,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 1,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 17,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 9,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 40,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 40,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 21,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 12,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/verify-flags-underscore.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into os.walk, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[os.walk](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hack/boilerplate/boilerplate.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 178,
                  "endLine": 178,
                  "startColumn": 38,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6c5ef00920655677319032074baf73d86bda6cbd627cd0778311707df2612e9a",
            "1": "16691f08.d3fa0bdc.79e62dc9.139c59a8.5bd3e035.ba14daf2.081ac3f4.6aac30d8.5ca1f94d.f40eb707.e6e72a62.9cd2dfe0.a5fb405f.0a892d8d.f6dc7859.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 8,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 8,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 1,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 40,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 46,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 46,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "hack/boilerplate/boilerplate.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 38,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17)",
              "[Write](18)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 4,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "94bfcd8e924c9a480d626cd9a673962819a97802550d9cbb4105c3fa62052cfa",
            "1": "34950bd9.73eb5804.45df3e14.f24cd98e.f658f14a.57f89f2f.df7e59ba.bda788af.34950bd9.277c621c.7b661315.f24cd98e.1453389a.57f89f2f.0dacda09.96db056b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 85,
                            "endColumn": 89
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 69,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 23,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 4,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 4,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 39,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 17,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 4,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/edit/testdata/record.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 4,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in UserName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[UserName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/simulator/task.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 43,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c701772a1f649f66664d2a8200878c815f03b70034fb988c12f1aa4b6dbf9127",
            "1": "cb3253e1.98f0ff0f.3d13e656.bfac11f0.6ee851a6.48a21a67.8ee950b3.5f069fdb.cb3253e1.ebff3563.3d13e656.bfac11f0.6ee851a6.48a21a67.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/task.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 53,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/task.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/legacy-cloud-providers/gce/gcpcredential/gcpcredential.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "effff3b20657990571f8186d93e5a7f75af30984bf9d2bb218765e39e9632bd9",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.05e89bfa.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/gce/gcpcredential/gcpcredential.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/gce/gcpcredential/gcpcredential.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/audit/format.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5de1cdf0a65695f1888e39a772968eb0ef43b2a8604ab1f0a05de5935eb577ff",
            "1": "3e0ea818.73eb5804.45df3e14.e22980a8.2a09325e.995dab92.0e551725.1bff12d3.3e0ea818.73eb5804.45df3e14.e22980a8.2a09325e.995dab92.0e551725.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/audit/format.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/audit/format.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/audit/format.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7f34d0b7608c734f7ce977c5ac03a0b7b72aed18cc2f1481586eaef64a516fa3",
            "1": "3e0ea818.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.a436cd0e.3e0ea818.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/audit/format.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/audit/format.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/k8s.io/klog/v2/klog_file.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "25a1b67e1921024a8bc825fbc491ebbf84cf954cb021d51f7040ab9b42fcda35",
            "1": "5c121d52.0d9b46dd.3602530c.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3.5c121d52.89ffa169.3602530c.79502f34.d4a84630.73f682b3.2563f0c1.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/k8s.io/klog/v2/klog_file.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 17,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/k8s.io/klog/v2/klog_file.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into Get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18)",
              "[Get](19)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/guestbook/guestbook.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 212,
                  "endLine": 212,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1da3ead7eb1127886d05f3dac22f965adacad3bed944db2beb18e3ecc0cb3f3e",
            "1": "ca1e41fe.73eb5804.45df3e14.77581c4b.be152d1f.995dab92.df7e59ba.678b0e20.47d3c013.277c621c.4c9b5203.76b707f0.be152d1f.57f89f2f.6c7db953.949d0607"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 192,
                            "endLine": 192,
                            "startColumn": 27,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 192,
                            "endLine": 192,
                            "startColumn": 27,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 192,
                            "endLine": 192,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 192,
                            "endLine": 192,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 198,
                            "endLine": 198,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 11,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 11,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 2,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 201,
                            "endLine": 201,
                            "startColumn": 46,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 208,
                            "endLine": 208,
                            "startColumn": 15,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 208,
                            "endLine": 208,
                            "startColumn": 2,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 209,
                            "endLine": 209,
                            "startColumn": 53,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 209,
                            "endLine": 209,
                            "startColumn": 13,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 209,
                            "endLine": 209,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 212,
                            "endLine": 212,
                            "startColumn": 21,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 274,
                            "endLine": 274,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 68,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 30,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 15,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into Get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17)",
              "[Get](18)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/guestbook/guestbook.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 277,
                  "endLine": 277,
                  "startColumn": 15,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f1d9de0c443e5f0f017ab15bb43adab31b3197ab85617f4b01473778a4c55012",
            "1": "3900f8ff.e0beca80.45df3e14.0c66bee6.be152d1f.67ab4541.6c7db953.1bff12d3.add02d51.277c621c.fd4eeae2.e22980a8.be152d1f.75c1163d.6c7db953.949d0607"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 27,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 27,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 238,
                            "endLine": 238,
                            "startColumn": 25,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 240,
                            "endLine": 240,
                            "startColumn": 11,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 240,
                            "endLine": 240,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 240,
                            "endLine": 240,
                            "startColumn": 11,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 240,
                            "endLine": 240,
                            "startColumn": 2,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 64,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 57,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 13,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 266,
                            "endLine": 266,
                            "startColumn": 28,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 274,
                            "endLine": 274,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 68,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 30,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/guestbook/guestbook.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 15,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into net.http.Get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[net.http.Get](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 15,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "77379ec20d152db2d29e5e633f9eeea44de8836097f7c29405c88ac2f616f0df",
            "1": "1164e1a5.940077cb.45df3e14.82b156fc.7ed83494.995dab92.fab75e61.e01cd24f.033439eb.277c621c.45df3e14.2f1c3655.09f6f95e.67ab4541.fab75e61.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 21,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 53,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test-proxy/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into net.http.Get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[net.http.Get](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/no-snat-test/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118,
                  "startColumn": 14,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "168328d84c08c0fdb3e378fde4761ba749aeac9ba63e9be1421cb1387ac29cdc",
            "1": "424eddda.786cc0a8.45df3e14.89f13fa7.556f02b4.d9c4bbd5.924ee9f3.9925e872.47d3c013.c55d47e1.4c9b5203.e22980a8.164cb049.67ab4541.fa5894c3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 10,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 22,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 20,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 137,
                            "startColumn": 12,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 41,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into net.http.Get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[net.http.Get](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/images/agnhost/no-snat-test/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 15,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fa59ae0273f5d32d39ef9c05df321b79f46968d4ce95e24ff6463c66da3aef3c",
            "1": "1164e1a5.940077cb.45df3e14.6f6e1432.480200df.995dab92.df7e59ba.e01cd24f.033439eb.940077cb.45df3e14.e22980a8.164cb049.67ab4541.fa5894c3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 10,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 22,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 20,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 137,
                            "startColumn": 12,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 41,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/images/agnhost/no-snat-test/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/crypto/ssh/keys.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1430,
                  "endLine": 1430,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "81f52c79baa8c551b87122b90864b796f1a17c54ce99a6629eb7aff67698e1d7",
            "1": "0d779d32.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.0c728423.1d874c72.0d779d32.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.0c728423.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/crypto/ssh/keys.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1430,
                            "endLine": 1430,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/csi-translation-lib/plugins/rbd.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 105,
                  "startColumn": 45,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ad88651cea74db3c1ad3bd5f244c3f8244d8cbbe9719dbe3c03e33d33cf497e7",
            "1": "3e0ea818.c686e79d.45df3e14.9692a5c1.811b6161.67ab4541.0c728423.1bff12d3.3e0ea818.c686e79d.45df3e14.9692a5c1.811b6161.67ab4541.0c728423.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/csi-translation-lib/plugins/rbd.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 45,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/csi-translation-lib/plugins/rbd.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 47,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a802b9b58fc41533252a33102b6a18c2b587c8036237c0ddc1d88f010bbb2f67",
            "1": "3e0ea818.0e51825d.45df3e14.9692a5c1.1eb1019f.67ab4541.0c728423.1bff12d3.3e0ea818.0e51825d.45df3e14.9692a5c1.1eb1019f.67ab4541.0c728423.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/csi-translation-lib/plugins/rbd.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 47,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/csi-translation-lib/plugins/rbd.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 184,
                  "startColumn": 54,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "16c5f81cd02f86d9b7239e5dfab9937d0d1b27864229a07c5dd65644d12e3a1b",
            "1": "3e0ea818.0e51825d.45df3e14.9692a5c1.1eb1019f.67ab4541.0c728423.1bff12d3.3e0ea818.0e51825d.45df3e14.9692a5c1.1eb1019f.67ab4541.0c728423.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/csi-translation-lib/plugins/rbd.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 184,
                            "endLine": 184,
                            "startColumn": 54,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/csi-translation-lib/plugins/rbd.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294,
                  "startColumn": 23,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5417d02381e67753d1f3e26cacb250674436f55baece65276b9c6e2c4f5f2f22",
            "1": "83f57765.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.0c728423.aa628d59.83f57765.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.0c728423.aa628d59"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/csi-translation-lib/plugins/rbd.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 23,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/Azure/azure-sdk-for-go/storage/appendblob.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 14,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f0f3e50495fe20f25eb6024b75673e4fd1cec3a71dfec69d98266b6324d7daaf",
            "1": "0d779d32.e4097794.45df3e14.e22980a8.9aacacff.67ab4541.0c728423.1d874c72.0d779d32.e4097794.45df3e14.e22980a8.9aacacff.67ab4541.0c728423.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Azure/azure-sdk-for-go/storage/appendblob.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/util/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 27,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6e6faade9570adf5f558174329bf56cd4401ea75d97948066ccd1a9da4768a2f",
            "1": "34950bd9.0e51825d.45df3e14.f24cd98e.f658f14a.67ab4541.0c728423.1bff12d3.34950bd9.0e51825d.45df3e14.f24cd98e.f658f14a.67ab4541.0c728423.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/util/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/volume/util/attach_limit.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 11,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "27427a6d807d79cd9940344eadb73bcbf335336ab94db22f57e7a5f5fd4ae270",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/volume/util/attach_limit.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/legacy-cloud-providers/gce/gce_loadbalancer_naming.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 11,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "03437afc05bcef2cd9810cd09f2fa8e41fecf02d7b2b174b378998586bdd8166",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/gce/gce_loadbalancer_naming.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/Microsoft/go-winio/pkg/guid/guid.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d81c9edfde3c7564c88a0d3e43ebb139c9673d41289c41bd73fc003c398afce",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Microsoft/go-winio/pkg/guid/guid.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/Azure/go-autorest/autorest/adal/token.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0fe83ab218aaa41621d154712eb4af24251061dce2af2b4abca4da47bb7b5cc7",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.fe86eaf4.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Azure/go-autorest/autorest/adal/token.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 247,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/godbus/dbus/v5/auth_sha1.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ef84fdc26b097cb38895cf942beeaa06e392c69e002604cf8ca329ce08924a88",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/godbus/dbus/v5/auth_sha1.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/cilium/ebpf/asm/instruction.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 703,
                  "endLine": 703,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c7d77eccbe8cfb9c13989986b99a21fada925613796a0cbec66b181086789938",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/cilium/ebpf/asm/instruction.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 703,
                            "endLine": 703,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/net/websocket/hybi.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "endLine": 392,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "09382998be7e21c64eea417636b06442967e9775792668ea92a213611e23238d",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/net/websocket/hybi.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 392,
                            "endLine": 392,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/gofrs/uuid/generator.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 273,
                  "startColumn": 19,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "97f67042d5a2d30ac9658fe8845bd88585f5882a55fe7f11ceeeecfc043b326e",
            "1": "d1695a15.32e1fb1f.45df3e14.b7c77b99.556f02b4.67ab4541.c2e93e04.678b0e20.d1695a15.32e1fb1f.45df3e14.b7c77b99.556f02b4.67ab4541.c2e93e04.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/gofrs/uuid/generator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 273,
                            "endLine": 273,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/google/uuid/hash.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 17,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5b485f1581b9dd60cda3a117d78ab34bccbb4c62047eb40c12c219817b4e3310",
            "1": "20d5557e.48506fc8.45df3e14.89f13fa7.556f02b4.67ab4541.860c51ff.678b0e20.20d5557e.48506fc8.45df3e14.89f13fa7.556f02b4.67ab4541.860c51ff.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/uuid/hash.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/gopkg.in/square/go-jose.v2/asymmetric.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 200,
                  "endLine": 200,
                  "startColumn": 26,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fb0692b9c4c5b221e926d6c80babb492ef9d6a10a6529e9dc0e2c435b3107fab",
            "1": "d1695a15.6ce5dfff.45df3e14.48845822.bcaf552e.67ab4541.860c51ff.5c311668.d1695a15.6ce5dfff.45df3e14.48845822.bcaf552e.67ab4541.860c51ff.5c311668"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/gopkg.in/square/go-jose.v2/asymmetric.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/gopkg.in/square/go-jose.v2/asymmetric.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 253,
                  "endLine": 253,
                  "startColumn": 26,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f0bbbc7dd2e2074805314a93f4e0b90661b8549d59c437e9e8c6bd87e877750f",
            "1": "d1695a15.9c454c59.45df3e14.48845822.bcaf552e.67ab4541.860c51ff.5c311668.d1695a15.9c454c59.45df3e14.48845822.bcaf552e.67ab4541.860c51ff.5c311668"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/gopkg.in/square/go-jose.v2/asymmetric.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 253,
                            "endLine": 253,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/gorilla/websocket/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "085b8b38d65860644d2f2d26f7f9107bb2f89c3c9e7652eb7772db50954eb45a",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/gorilla/websocket/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/go-task/slim-sprig/crypto.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d7f06af90a1acac6171ec538bc9f655438d0b6283afac0896cbf105c6520c648",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.5c650436.1d874c72.ba4e4356.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.5c650436.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/go-task/slim-sprig/crypto.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/Microsoft/hcsshim/layer.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9cbc853f5ac1371c7b2eb6b43c1e84726e7040bc9587a945b42c23ce4039407a",
            "1": "685bf8ba.73eb5804.45df3e14.e22980a8.099b8dff.67ab4541.860c51ff.1d874c72.685bf8ba.73eb5804.45df3e14.e22980a8.099b8dff.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Microsoft/hcsshim/layer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/go.etcd.io/etcd/server/v3/etcdserver/api/membership/cluster.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 239,
                  "endLine": 239,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b84e4a2a1de44d96d00947c557b43a2d2a7678900c72d594b38a4649195d154e",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72.ba4e4356.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/go.etcd.io/etcd/server/v3/etcdserver/api/membership/cluster.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/proxy/winkernel/hns.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 446,
                  "endLine": 446,
                  "startColumn": 21,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cafaa580277a6ba59c83c149789b6c29407bc4fc4a04494f2c2f128ec7e70f65",
            "1": "f5b92d3b.c2991f7e.45df3e14.667761a9.0772103c.67ab4541.75194171.178b9d5e.f5b92d3b.c2991f7e.45df3e14.667761a9.0772103c.67ab4541.75194171.178b9d5e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/proxy/winkernel/hns.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 446,
                            "endLine": 446,
                            "startColumn": 21,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/vim25/soap/client.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "endLine": 351,
                  "startColumn": 9,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "88872836a641a56c8740a1e51bb7d41b8caef4ea50f07055b73ed009dc7055c7",
            "1": "339a08ba.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72.339a08ba.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vim25/soap/client.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 351,
                            "endLine": 351,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/vapi/vcenter/vcenter_vmtx.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 259,
                  "startColumn": 9,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eef74d2a14b7ac05303f5b4c7f481d4735288ce21482b1be94af7c62597e2198",
            "1": "339a08ba.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72.339a08ba.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/vcenter/vcenter_vmtx.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 259,
                            "endLine": 259,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/go.etcd.io/etcd/server/v3/etcdserver/api/membership/member.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b503c4969f4b2d643903bab50cbc96e299f75b18ea66d472f0ed8658aefc4c23",
            "1": "3e0ea818.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72.3e0ea818.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/go.etcd.io/etcd/server/v3/etcdserver/api/membership/member.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/crypto/pkcs12/pbkdf.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "startColumn": 9,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9961d5a940088fde77463e687cce21d2b531a036740b00398973cc2a4e88da50",
            "1": "2efc96be.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72.2efc96be.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/crypto/pkcs12/pbkdf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/gopkg.in/square/go-jose.v2/jwk.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 148,
                  "endLine": 148,
                  "startColumn": 19,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d5b85f52487ff4a1efd49f4afa6a46a35a2be57fcce6deee9a3f26c2a084bd87",
            "1": "f1cb724d.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.ca59ef5d.f1cb724d.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.ca59ef5d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/gopkg.in/square/go-jose.v2/jwk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/gopkg.in/square/go-jose.v2/jwk.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298,
                  "startColumn": 14,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "898dc1019d4613a05363bffe602749cd68f1a44713a15899532556ddf10da82c",
            "1": "26ce6fdf.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72.26ce6fdf.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/gopkg.in/square/go-jose.v2/jwk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/endpointslice/util/controller_utils.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "10be35d84c5f8334f489c50a1276b6135c2919a13741a83934836c26e4abedfa",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72.ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/endpointslice/util/controller_utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/config/common.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "42adc819405cada3af3a0ac2ea2951de453a2ac6638c0eae134bc40060ec870c",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72.ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/config/common.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/api/v1/endpoints/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c0b38ec198bc21f885ac2953bdee5c9627b02094d3b7f0a3fed59cd341ffb27c",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72.ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/api/v1/endpoints/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 157,
                            "endLine": 157,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/api/v1/endpoints/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "04c31959aa6bf67c0337fdda90b2e0bd14bfd547ed679ce960367d03c59450bd",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72.ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/api/v1/endpoints/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/api/v1/endpoints/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ad2b6ebb04b65f96b71b568e1fdc4bcd4abfff5c610b28933f3e29e91974fc71",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72.ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/api/v1/endpoints/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/kubeadm/app/util/staticpod/utils.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 365,
                  "endLine": 365,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9f66f0871b862c6a5c5c6ce0901f9c21c2cd7c57f80f8ef2ef88ebda832d2b19",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72.ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/staticpod/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 365,
                            "endLine": 365,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/gofrs/uuid/generator.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 252,
                  "endLine": 252,
                  "startColumn": 19,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "226bb085a30a3910248e2f81e127b696eab940f0afe4ce0437d29109b2aa9d8d",
            "1": "8379f5e8.32e1fb1f.45df3e14.b7c77b99.556f02b4.67ab4541.c2e93e04.678b0e20.8379f5e8.32e1fb1f.45df3e14.b7c77b99.556f02b4.67ab4541.c2e93e04.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/gofrs/uuid/generator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 252,
                            "endLine": 252,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/google/uuid/hash.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 17,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "20e2577c8c8fda32e29a3cc142608ed1ad6a82c4b9ba473a28584912ecc6ea89",
            "1": "20d5557e.48506fc8.45df3e14.772d51ed.556f02b4.67ab4541.860c51ff.678b0e20.20d5557e.48506fc8.45df3e14.772d51ed.556f02b4.67ab4541.860c51ff.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/uuid/hash.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/tools/internal/pkgbits/encoder.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2e22ea9790f6f47b26500683d06b37083162995b70a2c01bb8fd1ab42017e68b",
            "1": "685bf8ba.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72.685bf8ba.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/internal/pkgbits/encoder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 7,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in LocalhostKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[LocalhostKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/simulator/internal/testcert.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 5,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "93035999fe818e0ee58d049c1365c590f416ece3f3e722a3e41089848d8e70b3",
            "1": "8379f5e8.61a12537.45df3e14.2924c279.f5a78a3d.5b6553b0.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.2924c279.f5a78a3d.5b6553b0.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/internal/testcert.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 76,
                            "startColumn": 27,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/internal/testcert.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in CAKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[CAKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 5,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ec96a57f77e5383ebe958ecf39c474d75d4e368234b2ed8da26eb54c7fca217b",
            "1": "8379f5e8.37bed54b.45df3e14.79502f34.6d4efaa9.63a86890.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.79502f34.6d4efaa9.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 48,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 5,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in BadCAKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[BadCAKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8054aa74cf368fc326ea63c841da700578ac9f28be833d374f477c8fd3e208bd",
            "1": "8379f5e8.44de0f9d.45df3e14.79502f34.296ea331.788dfa27.4526c450.1bff12d3.8379f5e8.44de0f9d.45df3e14.79502f34.296ea331.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 97,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ServerKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ServerKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6cdc1b2a35b26c058255b65c836b0ae8dd914140a8966d96f3d2a48b99d71398",
            "1": "8379f5e8.1e881304.45df3e14.febf2b49.91b7c08c.63a86890.fb9e89bc.1bff12d3.8379f5e8.1e881304.45df3e14.febf2b49.91b7c08c.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 146,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ClientKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ClientKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0a23f6cad4b6a36b431c07869c533cb1b00f63fe61df7ab11c9358a01e6fd19b",
            "1": "d0acce59.645bedd3.45df3e14.79502f34.ed32c1b4.8f229105.c05e920c.1bff12d3.d0acce59.645bedd3.45df3e14.79502f34.ed32c1b4.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 195,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/testcerts/certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword/test",
          "ruleIndex": 20,
          "level": "note",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/controlplane/transformation/kms_transformation_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 854,
                  "endLine": 854,
                  "startColumn": 56,
                  "endColumn": 65
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e202a6e12d807ed08c2a36a0df4eb33df34fc2401d2c5dd0cc23b84c14da2160",
            "1": "f93f09c7.5d8de7a9.45df3e14.568a5d7f.b30b958b.67ab4541.860c51ff.1bff12d3.ff872371.c55d47e1.45df3e14.e22980a8.396b7a15.67ab4541.83265159.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/controlplane/transformation/kms_transformation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 854,
                            "endLine": 854,
                            "startColumn": 56,
                            "endColumn": 65
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword/test",
          "ruleIndex": 20,
          "level": "note",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/controlplane/transformation/kms_transformation_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 912,
                  "endLine": 912,
                  "startColumn": 9,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f9924dc0af022b07ab9a9a9df3887bba91e7eca868be7586118683815fc1bd0e",
            "1": "f93f09c7.5d8de7a9.45df3e14.e22980a8.f1d9f854.67ab4541.80341c54.fbc19cb8.ff872371.c55d47e1.45df3e14.e22980a8.396b7a15.67ab4541.83265159.37d4bff0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/controlplane/transformation/kms_transformation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 912,
                            "endLine": 912,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/WebCookieSecureDisabledByDefault",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "In net.http.SetCookie Secure is not set to true. Set it to true to protect the cookie from man-in-the-middle attacks. A cookie with the Secure attribute is only sent to the server with an encrypted request over the HTTPS protocol.",
            "markdown": "In {0} Secure is not set to true. Set it to true to protect the cookie from man-in-the-middle attacks. A cookie with the Secure attribute is only sent to the server with an encrypted request over the HTTPS protocol.",
            "arguments": [
              "[net.http.SetCookie](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 436,
                  "endLine": 436,
                  "startColumn": 4,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "588fb1a8edcfc6ca30583c6658087f7a3e77674cbfa233637d91f864678f0e98",
            "1": "f0a84589.43be7f94.a3cdcda2.e22980a8.7ed83494.57f89f2f.cf894c96.37d4bff0.f0a84589.43be7f94.a3cdcda2.e22980a8.7ed83494.57f89f2f.cf894c96.37d4bff0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 436,
                            "endLine": 436,
                            "startColumn": 4,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/WebCookieSecureDisabledByDefault",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "In net.http.SetCookie Secure is not set to true. Set it to true to protect the cookie from man-in-the-middle attacks. A cookie with the Secure attribute is only sent to the server with an encrypted request over the HTTPS protocol.",
            "markdown": "In {0} Secure is not set to true. Set it to true to protect the cookie from man-in-the-middle attacks. A cookie with the Secure attribute is only sent to the server with an encrypted request over the HTTPS protocol.",
            "arguments": [
              "[net.http.SetCookie](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/simulator/session_manager.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 355,
                  "endLine": 355,
                  "startColumn": 3,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4bd2c94213c4562a1d2f657de6660e466c5a890e29e93be98d819ea3b13f29a8",
            "1": "f0a84589.882fa890.a3cdcda2.e22980a8.f1d9f854.57f89f2f.860c51ff.37d4bff0.f0a84589.882fa890.a3cdcda2.e22980a8.f1d9f854.57f89f2f.860c51ff.37d4bff0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/simulator/session_manager.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 355,
                            "endLine": 355,
                            "startColumn": 3,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 280,
                  "startColumn": 27,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bfd898ac749b6f0f33be050a096baa2d62a7a3407dee673d09cca479fb0ba1b5",
            "1": "424eddda.98f0ff0f.3d13e656.9804e23b.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.9804e23b.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 37,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296,
                  "startColumn": 27,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1d2486220f812ff4ce401bcd2a307c9c377cf0c756cfd32371d3eb3a8d88080e",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 296,
                            "endLine": 296,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 296,
                            "endLine": 296,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304,
                  "startColumn": 27,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4d64acafefc983670a2c0f5b29dcce7d8e92f71125087f1257b19bdaf03cfa9b",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_image_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "endLine": 529,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a916803b942e9c9c3b0fae1202f889eb1202e8ac3c0cb1936fdf570d38da28a8",
            "1": "4dad368e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.93c7cb1a.98f0ff0f.07cbee33.457a62f8.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 529,
                            "endLine": 529,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 529,
                            "endLine": 529,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 596,
                  "endLine": 596,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c889a826f8a7ca2f3dd974496480b0ff1bf0874718eb68fa03dd7cec56b1a620",
            "1": "4dad368e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.93c7cb1a.98f0ff0f.07cbee33.457a62f8.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 596,
                            "endLine": 596,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 596,
                            "endLine": 596,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd5f6820fa0d32c0b83def3fdf93ff0d19c95f3a4774d648254da383bbeb0e06",
            "1": "4dad368e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.93c7cb1a.98f0ff0f.07cbee33.457a62f8.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "65cc5c30703e326073c377a3278e7bc5f3a391cf8d8570679f7d1cfda01bea2d",
            "1": "4dad368e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.93c7cb1a.98f0ff0f.07cbee33.457a62f8.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6300e9b816973064458f13afec77c56c9a042da8240dc6c080cce3abaec8a99d",
            "1": "4dad368e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.93c7cb1a.98f0ff0f.07cbee33.457a62f8.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6cd1a7699bae2d1933e5eb71d5123799292f35371771f3eb41be83c1e70fe845",
            "1": "4dad368e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.93c7cb1a.98f0ff0f.07cbee33.457a62f8.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c08b1e3cbd6e65d7a1c17e8f5a5a9a4c5182f0625f4a975a78cec568eb91910a",
            "1": "4dad368e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.93c7cb1a.98f0ff0f.07cbee33.457a62f8.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/transport_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/credentialprovider/keyring_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "endLine": 492,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3cdc5b6c126c022a359032027bc744bb8fd34ad4171691d4ae38b2dc4e3713b6",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67ab4541.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/credentialprovider/keyring_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 492,
                            "endLine": 492,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/credentialprovider/keyring_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 492,
                            "endLine": 492,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/apis/certificates/v1beta1/defaults_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "endLine": 282,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0d8391c61391dc3bdfc43e20a2c175277a2b39dc4adf0599779599424530366f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.58528e8b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/apis/certificates/v1beta1/defaults_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 282,
                            "endLine": 282,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/apis/certificates/v1beta1/defaults_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 282,
                            "endLine": 282,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/apis/certificates/v1beta1/defaults_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "078e34e2521b87713196b969f6ebeb6ea05179ef8114e334bc74ea6a11e3f53b",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.1d8d1e77.ff3d0695.424eddda.98f0ff0f.3d13e656.ed483a74.6ee851a6.cb226f82.1d8d1e77.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/apis/certificates/v1beta1/defaults_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 290,
                            "endLine": 290,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/apis/certificates/v1beta1/defaults_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 290,
                            "endLine": 290,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/pod-security-admission/admission/admission_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 982,
                  "endLine": 982,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "67b78912c873e08b645f37f8581cc6e773239dd42e6d1690b91680d4707959a5",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/pod-security-admission/admission/admission_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 982,
                            "endLine": 982,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/pod-security-admission/admission/admission_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 982,
                            "endLine": 982,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/registry/certificates/certificates/strategy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "16c343a9ef59779285805bb1138f682d6a066419abefec1ca204263938d848b6",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/registry/certificates/certificates/strategy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 16,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/registry/certificates/certificates/strategy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 349,
                  "endLine": 349,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "64aedefd70e2137150fed411af25bef95eae2e6915e150caedd4c533c2788806",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 362,
                  "endLine": 362,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "28980f3bb107bd3906d4eb4c1f3ed482ce9eae901583232162407d4b46153161",
            "1": "92874532.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.d69fec65.92874532.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 362,
                            "endLine": 362,
                            "startColumn": 16,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 362,
                            "endLine": 362,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 381,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8040a5b9ab08153695596ce4915c98a6c8a2de55c9ae10823e6c73d5d99dd9cb",
            "1": "01dfada7.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.01dfada7.98f0ff0f.0ac8d4b6.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 381,
                            "endLine": 381,
                            "startColumn": 16,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 381,
                            "endLine": 381,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 404,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aed603802dd6c556e154e3e8bdd4cc847e9cf0bd3307a48d274b6814bb1c765b",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 404,
                            "endLine": 404,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 404,
                            "endLine": 404,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 420,
                  "endLine": 420,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7418496781cf89ec2a6bc06f8d49fd628c7c393a505d4e758554768e6c06112a",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 420,
                            "endLine": 420,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 420,
                            "endLine": 420,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 446,
                  "endLine": 446,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "76aaa50e19c54422b5dd16729fb73897360a3f020eb5c903ba895b3cda703046",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 446,
                            "endLine": 446,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 446,
                            "endLine": 446,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 458,
                  "endLine": 458,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bd1dc01e103bb12ba8ab350e067086888e3eb3fe92a1cfefeb8597dbdae8013a",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 458,
                            "endLine": 458,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 458,
                            "endLine": 458,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 473,
                  "endLine": 473,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b724b3f7e8e1c3c6d9981f9011be2b10eb2925ad55f1ff37948f3dc7e4f662da",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 473,
                            "endLine": 473,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 473,
                            "endLine": 473,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 489,
                  "endLine": 489,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "afde89db043a816d1e87e317a9f3af6dffc66269ecd873756196f4b97f6d27c3",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 489,
                            "endLine": 489,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 489,
                            "endLine": 489,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e_node/plugins/gcp-credential-provider/provider.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aa86d717d1a3411f749ad3549635a58224cbfbd2a98f1121dd3db66411d7b9b7",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.05e89bfa.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/plugins/gcp-credential-provider/provider.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/plugins/gcp-credential-provider/provider.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/credentialprovider/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "832924e564624c05f4f38571ce92d74abda5e0cd040f35a7361732600333da5d",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2c158946.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/credentialprovider/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 156,
                            "endLine": 156,
                            "startColumn": 15,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/credentialprovider/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 156,
                            "endLine": 156,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/request/admissionreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 531,
                  "endLine": 531,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c6c26d550b340a8557446073ba4c74d636518db1764bbdf94f694e651208508a",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.0043c683.424eddda.98f0ff0f.3d13e656.bfac11f0.929e3348.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/request/admissionreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 531,
                            "endLine": 531,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/request/admissionreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 531,
                            "endLine": 531,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/request/admissionreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 574,
                  "endLine": 574,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0cb4f7a5ad5b4e15da957404fb034c9b8b01b0829771cd6c95e68af11003fd66",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.0043c683.424eddda.98f0ff0f.3d13e656.bfac11f0.929e3348.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/request/admissionreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 574,
                            "endLine": 574,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/request/admissionreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 574,
                            "endLine": 574,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/legacy-cloud-providers/gce/gcpcredential/registry_marshal_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "33f374738d8a33a32101f463e790cc6d934e3cebef88befa836e27b060b22ce9",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2c158946.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/gce/gcpcredential/registry_marshal_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 16,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/gce/gcpcredential/registry_marshal_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/audit/log/backend_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "68dac68973a61de0ad130dd7477b28f669921d6c3938f447bbf90b4d1a35ae74",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/audit/log/backend_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 16,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/audit/log/backend_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/audit/log/backend_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "64052c66f7e454e5b0baf72b6bab59977c3edcb306c7d2d595d7322b38fe1e6f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/audit/log/backend_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/audit/log/backend_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/auth_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1010,
                  "endLine": 1010,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6573525fb80b708557970ca7f7bcfa6f62b61c0543d05d76bd0ccd283de9e422",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/auth_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1010,
                            "endLine": 1010,
                            "startColumn": 16,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/auth_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1010,
                            "endLine": 1010,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/auth/whoami_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 280,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ddad1ad2fa28481c53ac785009840a3af498e4dba32b53980c52a0fc2c5e8a87",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/auth/whoami_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/auth/whoami_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 346,
                  "endLine": 346,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "734228aa95780d99784d8af650b73fff7b64c3c426cee1fbdfb03e5cb20ae644",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 346,
                            "endLine": 346,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 346,
                            "endLine": 346,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 359,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d2311b33c3ddb12ebfa85f35ca7c3206f7fb509ee47912d9e9075ff22a8a3b0f",
            "1": "92874532.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.d69fec65.92874532.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 16,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 378,
                  "endLine": 378,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "75ef6f60ea4ba8dbb6cdb53c5404866020242b5ca0bb0800c2d2a7c27551354e",
            "1": "01dfada7.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.01dfada7.98f0ff0f.0ac8d4b6.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 378,
                            "endLine": 378,
                            "startColumn": 16,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 378,
                            "endLine": 378,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 401,
                  "endLine": 401,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "49ef45f32b51382b04c69e83f3223dd814728b501d9bfb889478820c14afce09",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 401,
                            "endLine": 401,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 401,
                            "endLine": 401,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 417,
                  "endLine": 417,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9abdd744565579b4288cf3d99a9f621cb29c2f81fd0260dfccd688cccbe700a9",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 443,
                  "endLine": 443,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "191c4037eb2c6587388b00098a134b670e957bb883dc497734b48ce09183a340",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 443,
                            "endLine": 443,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 443,
                            "endLine": 443,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 455,
                  "endLine": 455,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "afb10c2b9ed2400a68b7b642fbd8cdfc89025b94f7f4f5060e7b94febe81e85c",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 455,
                            "endLine": 455,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 455,
                            "endLine": 455,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 470,
                  "endLine": 470,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1cb6d261c61998432c967647a703d6edbb2644e8cb6f27b1288edd9a5a1cf00f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 470,
                            "endLine": 470,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 470,
                            "endLine": 470,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 486,
                  "endLine": 486,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3c083a9281371bc0f494ce5d18fef17adfdc9f06f491656afc6d92cc32708e29",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.d36f68fb.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 486,
                            "endLine": 486,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 486,
                            "endLine": 486,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in UserName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[UserName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 600,
                  "endLine": 600,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "594d4642809fb563d55223f459112646b5670ccb0922a7d8f6eecb0a9a182a9a",
            "1": "cb3253e1.98f0ff0f.3d13e656.bfac11f0.6ee851a6.cb2eb15e.8ee950b3.5f069fdb.cb3253e1.98f0ff0f.3d13e656.ab81a91f.6ee851a6.cb2eb15e.8ee950b3.e06bfb66"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 600,
                            "endLine": 600,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/rest/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 600,
                            "endLine": 600,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in UserName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[UserName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/authentication_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "62550f708d9cec6c30b35a3a8e39c37c09aea8744479f304fcadaf6101157322",
            "1": "cb3253e1.98f0ff0f.3d13e656.bfac11f0.6ee851a6.48a21a67.8ee950b3.5f069fdb.cb3253e1.98f0ff0f.3d13e656.bfac11f0.6ee851a6.48a21a67.8ee950b3.e9e1d50e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/authentication_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/webhook/authentication_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in UserName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[UserName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/auth_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 980,
                  "endLine": 980,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "045a6aa381dc0a5babe9a3c0db300b76e215c6c608673df3e08c35e519cbe4b1",
            "1": "cb3253e1.98f0ff0f.3d13e656.bfac11f0.6ee851a6.48a21a67.8ee950b3.5f069fdb.cb3253e1.14674c9b.bb84eacf.bfac11f0.6ee851a6.48a21a67.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/auth_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 980,
                            "endLine": 980,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/auth_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 980,
                            "endLine": 980,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in UserName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[UserName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/auth_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1056,
                  "endLine": 1056,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5b80ce16ddebcb5727503e5733c56e95c8359bfbcc3a8931b9660af6fa596ae7",
            "1": "cb3253e1.98f0ff0f.3d13e656.bfac11f0.6ee851a6.48a21a67.8ee950b3.5f069fdb.cb3253e1.98f0ff0f.f38c9594.bfac11f0.6ee851a6.48a21a67.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/auth_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1056,
                            "endLine": 1056,
                            "startColumn": 14,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/auth_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1056,
                            "endLine": 1056,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in UserName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[UserName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/cel/validatingadmissionpolicy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2411,
                  "endLine": 2411,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c712c3a18a0a1386cdc2ae5930deabb2cb891a60ea04de452fd864251f9aea51",
            "1": "cb3253e1.98f0ff0f.3d13e656.bfac11f0.6ee851a6.48a21a67.8ee950b3.5f069fdb.cb3253e1.14674c9b.bb84eacf.bfac11f0.6ee851a6.48a21a67.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/cel/validatingadmissionpolicy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2411,
                            "endLine": 2411,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/cel/validatingadmissionpolicy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2411,
                            "endLine": 2411,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in UserName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[UserName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/cel/validatingadmissionpolicy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3060,
                  "endLine": 3060,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bf6eb62f8e19bbb4672aed160a10d643b0cbe92713fc8ceb5304978e43402587",
            "1": "cb3253e1.98f0ff0f.3d13e656.bfac11f0.6ee851a6.48a21a67.8ee950b3.5f069fdb.cb3253e1.14674c9b.bb84eacf.bfac11f0.6ee851a6.48a21a67.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/cel/validatingadmissionpolicy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3060,
                            "endLine": 3060,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/cel/validatingadmissionpolicy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3060,
                            "endLine": 3060,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in UserName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[UserName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/clustertrustbundles/admission_establishtrust_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "startColumn": 58,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "80367ba73a1553ccb1e365f5a09a853f81a984b576e25017ad6c59e1d3f097ac",
            "1": "cb3253e1.98f0ff0f.3d13e656.bfac11f0.6ee851a6.48a21a67.8ee950b3.5f069fdb.cb3253e1.98f0ff0f.3d13e656.bfac11f0.6ee851a6.48a21a67.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/clustertrustbundles/admission_establishtrust_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 68,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/clustertrustbundles/admission_establishtrust_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 58,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/certreload/certreload_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 280,
                  "startColumn": 5,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d591133a034d8c28c2bf973563eb75e6f38eba645b861237e9b88c09fd21ddd",
            "1": "dfa51f1b.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.b5783c36.ff3d0695.dfa51f1b.98f0ff0f.3d13e656.8bb248be.797c781d.edf5ab56.b5783c36.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/certreload/certreload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 11,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/certreload/certreload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 5,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 4,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ced049e60c14e01c88c67b2e9206f6014e78c19cc8a57bcb80742b25abb4340",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 11,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 4,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "475c24085ddefb2c163bd714593fec7431eb35b86f62ab645ea33acd6f8bae8a",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 11,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 269,
                  "endLine": 269,
                  "startColumn": 4,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "55b155987a9ce45c52d545ab4945c14c22238dc817a4bee5818d8970bee185a0",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 269,
                            "endLine": 269,
                            "startColumn": 11,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 269,
                            "endLine": 269,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 275,
                  "startColumn": 4,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f0e760eda7b169aac147e21374d4b8e5ceb796068cb31736cc66fddd5b801513",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 11,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/csi_mock/csi_selinux_mount.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/securitycontext/accessors_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 666,
                  "endLine": 666,
                  "startColumn": 42,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1fd4fb18a4ca93ca1f7e617411e5e271f2ef035d2a26f05032dd25e14a86835a",
            "1": "639ccccc.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.639ccccc.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/securitycontext/accessors_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 48,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/securitycontext/accessors_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 42,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 633,
                  "endLine": 633,
                  "startColumn": 3,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cd4998c548db29cc7d9e40d1a436930770fb10ad9359f5dcbf04630d81cf82e3",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 714,
                  "endLine": 714,
                  "startColumn": 3,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c7f60c8b10a7a73410be76ba9ea5bda69a0956995174dafaf91d4c0e95a46784",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 714,
                            "endLine": 714,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 714,
                            "endLine": 714,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 796,
                  "endLine": 796,
                  "startColumn": 3,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e0b08b37e8119a205170119fcea959b72feb15a13825e6560f9de91c9d708e7c",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 796,
                            "endLine": 796,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 796,
                            "endLine": 796,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 897,
                  "endLine": 897,
                  "startColumn": 3,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6ece505d7833db419ebd2402cb942eb1e9e81502159c508a4c2290478673e140",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 897,
                            "endLine": 897,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 897,
                            "endLine": 897,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 954,
                  "endLine": 954,
                  "startColumn": 3,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "77da483a4374327aaab89db417a03176c9131563cf04381d351e1b8c0e4dff87",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 954,
                            "endLine": 954,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/cache/desired_state_of_world_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 954,
                            "endLine": 954,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e/storage/drivers/in_tree.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 591,
                  "endLine": 591,
                  "startColumn": 4,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "911585800b3671cc6389b94c3ff5499e2dd1a94b3f55482e7a9f2b23839decd2",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.8d544874.8ee950b3.6cb019ba.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.8d544874.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/drivers/in_tree.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 14,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/drivers/in_tree.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e/storage/drivers/in_tree.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 611,
                  "endLine": 611,
                  "startColumn": 4,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fcb6db1601554077c7f762dc00c672caa0dafdd69918af7b9b614d36f2d95975",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.8d544874.8ee950b3.6cb019ba.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.8d544874.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/drivers/in_tree.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 611,
                            "endLine": 611,
                            "startColumn": 14,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/storage/drivers/in_tree.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 611,
                            "endLine": 611,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 503,
                  "endLine": 503,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0fd9611c1805b83551b0a28fd9e522cfa8f4ff2629c1b6518f940a252fb70f48",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.62c92d4c.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.173b4d57.797c781d.62c92d4c.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 503,
                            "endLine": 503,
                            "startColumn": 29,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 503,
                            "endLine": 503,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 528,
                  "endLine": 528,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4d18cb7ced086cadad7e123b4c9d42108ea5c3dc5f9d8971c6c1cad8ffb07283",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.62c92d4c.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.173b4d57.797c781d.62c92d4c.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 528,
                            "endLine": 528,
                            "startColumn": 14,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 528,
                            "endLine": 528,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/volumemanager/populator/desired_state_of_world_populator_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1195,
                  "endLine": 1195,
                  "startColumn": 3,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d38657f05ec993d3351b175dfad111dd246113aaa8ec5952ec143f58b31c013a",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/populator/desired_state_of_world_populator_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1195,
                            "endLine": 1195,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/populator/desired_state_of_world_populator_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1195,
                            "endLine": 1195,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/volumemanager/populator/desired_state_of_world_populator_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1201,
                  "endLine": 1201,
                  "startColumn": 3,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6a12fe74af9a3a1d5c8fdafcc638283a5010385ffe436339bed02fbf5a4c8509",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/populator/desired_state_of_world_populator_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1201,
                            "endLine": 1201,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/volumemanager/populator/desired_state_of_world_populator_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1201,
                            "endLine": 1201,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/apis/core/validation/validation_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4736,
                  "endLine": 4736,
                  "startColumn": 7,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "34bc90af3707f4c107481d47443a957e1f161a20684a91fef5a888cd07146297",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/apis/core/validation/validation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4736,
                            "endLine": 4736,
                            "startColumn": 17,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/apis/core/validation/validation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4736,
                            "endLine": 4736,
                            "startColumn": 7,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 493,
                  "endLine": 493,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d64f6b76cfaa64172e10a5014fead80a3d50c7dc6c5129279e8321715cf758a3",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.62c92d4c.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.173b4d57.797c781d.62c92d4c.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 493,
                            "endLine": 493,
                            "startColumn": 29,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 493,
                            "endLine": 493,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 518,
                  "endLine": 518,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "33a817c4a2b30b49a3d41e46c564757d9a8424febe7bc87eb32ae90e9602771a",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.62c92d4c.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.173b4d57.797c781d.62c92d4c.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 518,
                            "endLine": 518,
                            "startColumn": 14,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 518,
                            "endLine": 518,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f235f51b806fee2feb638d6033857164e0eeaf3c74dc19aa9e58e8899ec8e74a",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4259059a9692af0ccebffbfddff88ba4a90103585b369c598330c3c73a06dc10",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.daa2206a.424eddda.98f0ff0f.d698b9c2.ecf71d36.797c781d.a0b9d092.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "553e9c1d924feb0246e5592cf8be4ea5f12d31fa516b23ea7613a03390498350",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.14674c9b.bb84eacf.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 315,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5026bb81c38abbf247a94cecc20c533582c8350f78454282ad4bd44b99978128",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.daa2206a.424eddda.98f0ff0f.d698b9c2.ecf71d36.797c781d.a0b9d092.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 337,
                  "endLine": 337,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "91347ca53b76e56e91cebe19ba5c947fb30e0cdfcae65e0b97cec9c5200cca69",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.daa2206a.424eddda.98f0ff0f.d698b9c2.ecf71d36.797c781d.a0b9d092.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 337,
                            "endLine": 337,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 337,
                            "endLine": 337,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 354,
                  "endLine": 354,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "93e3ad36fce2c0860906e597fe301a5e4d7241a307d1c09ff448625d50896c17",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.daa2206a.424eddda.98f0ff0f.d698b9c2.ecf71d36.797c781d.a0b9d092.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 354,
                            "endLine": 354,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 354,
                            "endLine": 354,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "302ceba33363170b0632269ceb38043c7ba5d79c0437f6a9ae458335a40aa77c",
            "1": "aeb8d614.73eb5804.45df3e14.e22980a8.9f81532b.995dab92.b963c84e.1bff12d3.aeb8d614.73eb5804.45df3e14.e22980a8.9f81532b.995dab92.b963c84e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 219,
                            "endLine": 219,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 219,
                            "endLine": 219,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226,
                  "startColumn": 20,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1cd4eecf63064ae5ad3069aec482faa717e3e0b35c164de52839fb98c0d5e162",
            "1": "2fea1925.73eb5804.45df3e14.e22980a8.797c781d.67ab4541.860c51ff.1bff12d3.2fea1925.73eb5804.45df3e14.e22980a8.797c781d.67ab4541.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 219,
                            "endLine": 219,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 20,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 466,
                  "endLine": 466,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f409031e45f799e6db5f1586dcf154c5a40206f266781ff36576e2a7be98aae2",
            "1": "424eddda.73eb5804.3d13e656.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3.424eddda.73eb5804.3d13e656.e22980a8.929e3348.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 466,
                            "endLine": 466,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 466,
                            "endLine": 466,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 474,
                  "endLine": 474,
                  "startColumn": 13,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e93eca0da8eb907641ed9a18319fcaf29422410d9706842a4d9587a4b847f83e",
            "1": "424eddda.32371bae.45df3e14.c645f858.6ee851a6.995dab92.8ee950b3.1bff12d3.424eddda.32371bae.45df3e14.e22980a8.929e3348.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 466,
                            "endLine": 466,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 474,
                            "endLine": 474,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "34fb059da7ed6b88e10d1d0755fe3fce273c4a695be3a30241a2d4fa7c6557c4",
            "1": "b819a01f.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.30910d28.1bff12d3.a0396eca.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 39,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f6392ac846e950ef69d42b97ddc9dc4cae482e115d96d48c7716067a0a65d4b0",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.30910d28.a436cd0e.424eddda.73eb5804.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 39,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cfdee0b62a1a0a5a18c1e89647f23baddf1e5007d48d81e8a35e788060725e97",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.73eb5804.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 39,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 93,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "09aeb45b9f826f052e335b6775c71e2abf3d4a9b1b1302e6aabc9e32bf18ad6f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.73eb5804.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 39,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "25b9f90b268df76745ced9a84b27a6271c00049c4de63c92f892bd63ee2a931c",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.73eb5804.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 39,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c5854dd10af208d93defe1485b0fe4003431bae803c897bd8c1ae0c277959aa9",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.73eb5804.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 39,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 150,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a798d10899149a988543e0a5d9cdc9155d0868a47f0bc291c57ef97d2d06ed2",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.73eb5804.45df3e14.e22980a8.6ee851a6.995dab92.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 39,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/create/create_secret_docker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/kuberuntime_container_windows_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2a84d12151916b52a7717db4ecb1f29674eaec61fdf3e2b4d1d55a83ef4cdd93",
            "1": "424eddda.73eb5804.b17d4ed1.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3.cad401db.7516af51.b17d4ed1.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_container_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 14,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_container_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/kuberuntime_container_windows_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 33,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cce60eec15499866f29b911943fd9201c60a98c9eae86dc53a35edaa3ed23208",
            "1": "424eddda.73eb5804.b17d4ed1.bfac11f0.6ee851a6.995dab92.8ee950b3.1bff12d3.cad401db.7516af51.b17d4ed1.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_container_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 14,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_container_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 33,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/certificates/admission_sign_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9261964aa364310e59bf297d0acbb82915d3fe738efe3acfe4fd028c0efea042",
            "1": "8379f5e8.0291bc58.45df3e14.79502f34.efefb4d9.a9759be7.84536798.1bff12d3.8379f5e8.0291bc58.45df3e14.79502f34.efefb4d9.a9759be7.84536798.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/certificates/admission_sign_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/certificates/admission_sign_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/certificates/admission_sign_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76,
                  "startColumn": 74,
                  "endColumn": 82
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e6959da500d9f03b5c3ab5bcc81108c01cc8307705bcc34a3c8f31c54bf3a3ba",
            "1": "cb3253e1.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.cb3253e1.98f0ff0f.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/certificates/admission_sign_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/certificates/admission_sign_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 74,
                            "endColumn": 82
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/helpers_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 200,
                  "endLine": 200,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "613d6dc876d1c17a143bdf72f017da0093303ba5a477e086a35e77267afdcb27",
            "1": "3f86bf3e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.664ad69b.8ee950b3.a436cd0e.3f86bf3e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.664ad69b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/helpers_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/helpers_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/helpers_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ca153c82e6c02f9971cd71900318a0a15d1376c25e90e5ccd22251f6be6b4080",
            "1": "3f86bf3e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.664ad69b.8ee950b3.a436cd0e.3f86bf3e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.664ad69b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/helpers_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 204,
                            "endLine": 204,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/helpers_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 204,
                            "endLine": 204,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/helpers_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a0445321d237377eeaf741d11eb69f66c988b9e069cdcc26e881795e145bd7c",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.74e16011.8ee950b3.a436cd0e.76ce63cd.98f0ff0f.5dff7758.bfac11f0.6ee851a6.74e16011.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/helpers_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/helpers_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/certificates/admission_approval_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e5631aa5cc6beac04005bb1d2b0cf2e3e329566f08fbc3d5ac4348b6c1cb6643",
            "1": "8379f5e8.0291bc58.45df3e14.79502f34.efefb4d9.a9759be7.84536798.1bff12d3.8379f5e8.0291bc58.45df3e14.79502f34.efefb4d9.a9759be7.84536798.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/certificates/admission_approval_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/certificates/admission_approval_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/certificates/admission_approval_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 74,
                  "endColumn": 82
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d6916f161da52e6e1fe50c5ab936b81dfa6693d21076855f048280654633bb6a",
            "1": "cb3253e1.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.cb3253e1.98f0ff0f.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/certificates/admission_approval_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/certificates/admission_approval_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 74,
                            "endColumn": 82
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/util/flowcontrol/apf_filter_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "38aaf5d2b962059d5ab049cc624b6fb11b7865836cf3c67e3c3664fbcb26aaac",
            "1": "424eddda.73eb5804.3d13e656.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3.424eddda.73eb5804.3d13e656.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/flowcontrol/apf_filter_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/flowcontrol/apf_filter_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/util/flowcontrol/apf_filter_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 43,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8dfa4f660fded5f1660b9ffb3c359266cb10dd7e03d6be2ad82d5aebd0c865d9",
            "1": "424eddda.73eb5804.3d13e656.bfac11f0.6ee851a6.995dab92.8ee950b3.1bff12d3.424eddda.73eb5804.3d13e656.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/flowcontrol/apf_filter_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/util/flowcontrol/apf_filter_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 163,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57afd577fe5c1a123a57f4c3708fe8f481b7dc71eab6eaef2691893cf4eda9c9",
            "1": "424eddda.73eb5804.3d13e656.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3.424eddda.14674c9b.bb84eacf.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 170,
                  "endLine": 170,
                  "startColumn": 13,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fb36716ea8dd92773fa227d111c07ab2209c58f6bef8239c51bb807e3a739c35",
            "1": "424eddda.73eb5804.3d13e656.bfac11f0.6ee851a6.995dab92.8ee950b3.1bff12d3.424eddda.14674c9b.bb84eacf.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171,
                  "startColumn": 13,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "023fb00adc581f252aefdd6e61bcc12aeda27230fc66fd642777dab3e9fd09b0",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.14674c9b.bb84eacf.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1d04db98e570588aa59d69d5c546b2e9f0dc3a214672bb7dcfbb06f96a26dc2c",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.14674c9b.bb84eacf.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 196,
                            "endLine": 196,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 214,
                  "endLine": 214,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a87deef360da22a30c6b33a8467a94586b77a6b5c4ec72fbd9823d7458404cb5",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.14674c9b.bb84eacf.e22980a8.6ee851a6.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/accessreview_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "endLine": 235,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "18666b4ad0a477a29d07fd52f151a6921e32005805d9e3ba97824ecf240a6258",
            "1": "3e0ea818.73eb5804.fc7d5400.e22980a8.a361f2df.67ab4541.860c51ff.a436cd0e.424eddda.14674c9b.bb84eacf.e22980a8.6ee851a6.67ab4541.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/accessreview_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/admissionwebhook/admission_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 517,
                  "endLine": 517,
                  "startColumn": 2,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "27c49b7f3458f175f1af7a0907a53d9e67c29410a125cd4920556b648bb855f8",
            "1": "8379f5e8.2706d37c.09cd32c2.e22980a8.c8f211d9.67ab4541.452aacfc.beaa207a.cb3253e1.2706d37c.09cd32c2.e22980a8.999b5c1b.67ab4541.452aacfc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/admission_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 23,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/admission_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 517,
                            "endLine": 517,
                            "startColumn": 2,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/plugin/pkg/client/auth/exec/exec_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 981,
                  "endLine": 981,
                  "startColumn": 5,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0457ab8901f59da8bfce71db41d9f124776890baa32c79b33cb9efa7cfbbeac5",
            "1": "6f4330fa.73eb5804.738307e1.e22980a8.c8f211d9.67ab4541.b5e396cd.1bff12d3.6f4330fa.73eb5804.738307e1.e22980a8.c8f211d9.67ab4541.b5e396cd.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/plugin/pkg/client/auth/exec/exec_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 981,
                            "endLine": 981,
                            "startColumn": 23,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/plugin/pkg/client/auth/exec/exec_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 981,
                            "endLine": 981,
                            "startColumn": 5,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 393,
                  "endLine": 393,
                  "startColumn": 2,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e3a8ba17f05e2b16eccb51b2ed33e86ff901d8775ae47a57e18ea9d6d7893769",
            "1": "3e0ea818.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.6101856a.1bff12d3.3e0ea818.73eb5804.52a8a1ee.e22980a8.929e3348.67ab4541.6101856a.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 393,
                            "endLine": 393,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 393,
                            "endLine": 393,
                            "startColumn": 2,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "endLine": 413,
                  "startColumn": 2,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0818a37047f362c47f5f71fe5295d9c0217a90040133d14371379dd4c282883e",
            "1": "ba4e4356.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.860c51ff.1bff12d3.3e0ea818.73eb5804.52a8a1ee.e22980a8.929e3348.67ab4541.47f9659a.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 413,
                            "endLine": 413,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/kubectl/pkg/cmd/config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 413,
                            "endLine": 413,
                            "startColumn": 2,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/client/exec_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325,
                  "startColumn": 5,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "49e696c5248e08f8ce8a554c3da1fcaf2e7801e9b83d9bb1df3dfa74810d56f6",
            "1": "3e0ea818.73eb5804.738307e1.e22980a8.c8f211d9.67ab4541.b5e396cd.1bff12d3.d954b53f.73eb5804.81e18a6e.e22980a8.c8f211d9.67ab4541.b5e396cd.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/client/exec_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 325,
                            "endLine": 325,
                            "startColumn": 18,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/client/exec_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 325,
                            "endLine": 325,
                            "startColumn": 5,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e/auth/selfsubjectreviews.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 189,
                  "endLine": 189,
                  "startColumn": 2,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e6e84f9a3ce8ff2fefe877c28a59c22ef680966ededee9adc1f4a16e6d7f8d76",
            "1": "ba4e4356.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.860c51ff.1bff12d3.cb3253e1.73eb5804.52a8a1ee.e22980a8.24c1a554.67ab4541.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/auth/selfsubjectreviews.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 189,
                            "endLine": 189,
                            "startColumn": 32,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/auth/selfsubjectreviews.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 189,
                            "endLine": 189,
                            "startColumn": 2,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/admissionwebhook/timeout_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176,
                  "startColumn": 2,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "17699149fcfed6212a68dca21c1879e3f3259e106fe8881d085b87c52782602f",
            "1": "7572e22a.73eb5804.52a8a1ee.e22980a8.0de0c51b.67ab4541.860c51ff.0b3b5371.cb3253e1.73eb5804.52a8a1ee.acdcf0f6.0de0c51b.67ab4541.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/timeout_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 30,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/timeout_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 2,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 173,
                  "startColumn": 3,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5bb0ecee4b703c9fac3917c5fc4851763a6f05d74962e2480f9d5f7ffb915e8b",
            "1": "50c4d95b.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.860c51ff.1bff12d3.638d951f.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.04dcf3a1.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 28,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 3,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/pod-security-admission/test/fixtures_seLinuxOptions.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76,
                  "startColumn": 36,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "24e267aca93a9400b76db62e6e4cf82ca320d1ce9e8baddc4fb5237c264c562c",
            "1": "087264cd.73eb5804.738307e1.e22980a8.c8f211d9.67ab4541.b5e396cd.1bff12d3.3e0ea818.73eb5804.738307e1.e22980a8.797c781d.67ab4541.b5e396cd.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/pod-security-admission/test/fixtures_seLinuxOptions.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 81,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/pod-security-admission/test/fixtures_seLinuxOptions.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 36,
                            "endColumn": 92
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/admissionwebhook/reinvocation_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302,
                  "startColumn": 2,
                  "endColumn": 68
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bfe44503629b5d50bfe8d561c6cf8ee8c853231ad68b0a1a8904f041839de7d7",
            "1": "424eddda.73eb5804.52a8a1ee.e22980a8.832e00ba.67ab4541.8ee950b3.37d4bff0.cb3253e1.73eb5804.52a8a1ee.e22980a8.832e00ba.67ab4541.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/reinvocation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 35,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/reinvocation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 2,
                            "endColumn": 68
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/admissionwebhook/client_auth_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 150,
                  "startColumn": 2,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dced450ee49cb9f57957d31b52b368974350330a81925435e9ddb7407cfbc6c0",
            "1": "b36d26f4.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.860c51ff.37d4bff0.b36d26f4.73eb5804.e400bc32.0920b3cb.c8f211d9.67ab4541.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/client_auth_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 33,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/client_auth_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 2,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/admissionwebhook/load_balance_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97,
                  "startColumn": 2,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f0d230183908fa5ae85b13462db8379d34a812e6f03aa980f2709782f6cb7b62",
            "1": "ade0124a.0be5e289.52a8a1ee.e22980a8.c8f211d9.67ab4541.236d615c.37d4bff0.ade0124a.0be5e289.52a8a1ee.e22980a8.c8f211d9.67ab4541.236d615c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/load_balance_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 34,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/admissionwebhook/load_balance_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 2,
                            "endColumn": 67
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/apiserver/cel/validatingadmissionpolicy_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 457,
                  "endLine": 457,
                  "startColumn": 2,
                  "endColumn": 62
                }
              }
            }
          ],
          "fingerprints": {
            "0": "820e3459de0cadfc07bfc3477965ee7d6f3f0af16e6b46b69e48918085abcf22",
            "1": "424eddda.2706d37c.52a8a1ee.e22980a8.832e00ba.67ab4541.8ee950b3.37d4bff0.cb3253e1.2706d37c.52a8a1ee.e22980a8.832e00ba.67ab4541.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/cel/validatingadmissionpolicy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2907,
                            "endLine": 2907,
                            "startColumn": 35,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/apiserver/cel/validatingadmissionpolicy_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 457,
                            "endLine": 457,
                            "startColumn": 2,
                            "endColumn": 62
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167,
                  "startColumn": 3,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d31e7c1b587c3358994d5a37ca2dc73bd55ce1f48c8f776c0b47d1705eaaaa1",
            "1": "50c4d95b.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.860c51ff.1bff12d3.638d951f.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.04dcf3a1.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 167,
                            "endLine": 167,
                            "startColumn": 28,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/webhook/webhook_v1beta1_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 167,
                            "endLine": 167,
                            "startColumn": 3,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/kuberuntime_sandbox_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 220,
                  "endLine": 220,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ee671e06b9327151ca2c37b4916999faa58eba0ba621a9d9b6075bda95108480",
            "1": "5c121d52.73eb5804.b17d4ed1.e22980a8.d4a84630.995dab92.8ee950b3.1bff12d3.5c121d52.73eb5804.b17d4ed1.e22980a8.d4a84630.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_sandbox_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_sandbox_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kuberuntime/kuberuntime_sandbox_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266,
                  "startColumn": 23,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eecf02f7d6c5889fb9787439c9fc4fe9aa72486a62dec3d462dc596bf69577c1",
            "1": "5c121d52.73eb5804.b17d4ed1.4054f0ff.d4a84630.995dab92.8ee950b3.1bff12d3.5c121d52.73eb5804.b17d4ed1.e22980a8.d4a84630.995dab92.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_sandbox_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kuberuntime/kuberuntime_sandbox_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 266,
                            "endLine": 266,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/kubeadm/app/util/kubeconfig/kubeconfig_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "startColumn": 46,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e40daed2c8efb6da3d4bd4525b10efa1bc4ba10b41b7ee60aa169fc11eff81ac",
            "1": "5c121d52.98f0ff0f.3d13e656.4054f0ff.d4a84630.67752288.8ee950b3.ff3d0695.25f4d443.98f0ff0f.3d13e656.4054f0ff.d4a84630.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/kubeconfig/kubeconfig_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 158,
                            "endLine": 158,
                            "startColumn": 56,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/kubeconfig/kubeconfig_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 158,
                            "endLine": 158,
                            "startColumn": 46,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/kubeadm/app/util/kubeconfig/kubeconfig_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "startColumn": 53,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b634cbdc5cae5286126bc902e84ab9b36389a57959f44c156ae4f3e353c88841",
            "1": "5c121d52.98f0ff0f.3d13e656.4054f0ff.d4a84630.67752288.8ee950b3.30d0b53f.5c121d52.da0c6b18.3d13e656.4054f0ff.c82b11d9.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/kubeconfig/kubeconfig_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 63,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kubeadm/app/util/kubeconfig/kubeconfig_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 680,
                  "endLine": 680,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "01e561d42d1ad1c816a69436dce7d4867d259a8f137d6685818b82764f523292",
            "1": "5c121d52.66f6ba1f.45df3e14.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3.5c121d52.14674c9b.bb84eacf.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 60,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 750,
                  "endLine": 750,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "114b30027925416a29d21a4a7859f8aa5309ce73657699effcc241914b0b5a98",
            "1": "5c121d52.66f6ba1f.45df3e14.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3.5c121d52.14674c9b.bb84eacf.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 750,
                            "endLine": 750,
                            "startColumn": 60,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 750,
                            "endLine": 750,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 826,
                  "endLine": 826,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "435465ee1207aa62f77021aa3fae8c2b9aa6e2324a151eb298ab6f087e66ac1f",
            "1": "5c121d52.66f6ba1f.45df3e14.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3.5c121d52.14674c9b.bb84eacf.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 826,
                            "endLine": 826,
                            "startColumn": 60,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 826,
                            "endLine": 826,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 904,
                  "endLine": 904,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "baf359f9407c6b3125b8acfffb47d73b9f822acd8afd0dd0b763c4613891e23b",
            "1": "5c121d52.66f6ba1f.45df3e14.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3.5c121d52.14674c9b.bb84eacf.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 904,
                            "endLine": 904,
                            "startColumn": 60,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 904,
                            "endLine": 904,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 979,
                  "endLine": 979,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7e5ad9281bdb4ee5a89eecd520e55c0b9daf6d9878038a2207a043ccb499bf35",
            "1": "5c121d52.66f6ba1f.45df3e14.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3.5c121d52.14674c9b.bb84eacf.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 979,
                            "endLine": 979,
                            "startColumn": 73,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/priority-and-fairness_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 979,
                            "endLine": 979,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1315,
                  "endLine": 1315,
                  "startColumn": 33,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3e083ec87e1415f60819573ba6bff1624731e2251dd9a6e9e05b2bbf2378a9de",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1315,
                            "endLine": 1315,
                            "startColumn": 33,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/vim25/soap/client.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 397,
                  "endLine": 397,
                  "startColumn": 24,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c95bb16c22b7ecef3fe3fd423623765e35aa1b48d2a7b380f45d5edcc63007ba",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vim25/soap/client.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 397,
                            "endLine": 397,
                            "startColumn": 24,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubelet/kubelet.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 499,
                  "endLine": 499,
                  "startColumn": 33,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "abab24eedb83e2f86b7f826833600e284d23dff74adf9c1d62437b4fedf350ce",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubelet/kubelet.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 499,
                            "endLine": 499,
                            "startColumn": 33,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 504,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/storage/storage_factory.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 329,
                  "endLine": 329,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3dbd0d75cc89da5e6701c3cbccf8783ceca52fa4f0d02adc80c47966c2bf1afe",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/storage/storage_factory.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 329,
                            "endLine": 329,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 504,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/kube-apiserver/app/server.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201,
                  "startColumn": 38,
                  "endColumn": 62
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2acf61952741195e82b142fedd41c3122eaeefadff9c3806af76e907377d31d3",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/kube-apiserver/app/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 201,
                            "endLine": 201,
                            "startColumn": 38,
                            "endColumn": 62
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 504,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/probe/http/http.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 27,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd9cc258ba2e5510c759e0401216dc065dc22c4bd2bd4addeac4c8d82dab2119",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/probe/http/http.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 27,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 504,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/dial.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 6,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "75615faf846042b901ff8b7fa8f02b9580c0e2f8cb7663764cb109a3681fea0f",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/dial.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 6,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 504,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/go.etcd.io/etcd/client/pkg/v3/transport/listener.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 557,
                  "endLine": 557,
                  "startColumn": 3,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a30eb356ec2a640ad7925e1aa18774a6ce8209f38d4ad6c0f237953b73ad47e8",
            "1": "9cf53582.9bf9da8e.8d277033.e22980a8.c8f211d9.67ab4541.860c51ff.91f18234.b8a4ff30.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.91f18234"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/go.etcd.io/etcd/client/pkg/v3/transport/listener.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 557,
                            "endLine": 557,
                            "startColumn": 3,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 504,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/util/cert/server_inspection.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d6c833a3c1ed79e9f66b6d046137202c3a57f2b13b133346fd8ca42b4ab50ef5",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.b5e396cd.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.b5e396cd.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/util/cert/server_inspection.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/client-go/util/cert/server_inspection.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c61069ea1797d1d35b4f3ddf2040bdfacedb07c308d6d3ff4de7993413d81fc1",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/client-go/util/cert/server_inspection.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/registry/core/rest/storage_core.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 462,
                  "endLine": 462,
                  "startColumn": 95,
                  "endColumn": 119
                }
              }
            }
          ],
          "fingerprints": {
            "0": "062974c0421c64cf761f071b68ba3ffa6c209ba42064bef77d913a3b25d31ff6",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.8401935d.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/registry/core/rest/storage_core.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 462,
                            "endLine": 462,
                            "startColumn": 95,
                            "endColumn": 119
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/registry/core/rest/storage_core.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 463,
                  "endLine": 463,
                  "startColumn": 95,
                  "endColumn": 119
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e2b42be2caf92c9bbdacfff4fdfd2ac6dfa61261e89cc4619c80cada128942f5",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.8401935d.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/registry/core/rest/storage_core.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 463,
                            "endLine": 463,
                            "startColumn": 95,
                            "endColumn": 119
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 428,
                  "startColumn": 5,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1c1ddeeb250f647f3021e1db6386f96efffdfb3b2463551b10bee782ce418fa2",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.8ee950b3.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 428,
                            "endLine": 428,
                            "startColumn": 5,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 444,
                  "endLine": 444,
                  "startColumn": 94,
                  "endColumn": 118
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b2362e0ffc3ba2e7733d0d49668d93066b255a253ea6757b93d714bed3a1bebb",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 444,
                            "endLine": 444,
                            "startColumn": 94,
                            "endColumn": 118
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/tls/ciphers_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 4,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4891d4759173961d8087269554cd6b12ef0cbc430f930d669bb24d442fb2f340",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.8ee950b3.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/tls/ciphers_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 4,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e/framework/network/utils.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1068,
                  "endLine": 1068,
                  "startColumn": 34,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "17985f77cb05cbcd7857814b5897439eef37932715db96a0bdb7ea7436a40b39",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/framework/network/utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1068,
                            "endLine": 1068,
                            "startColumn": 34,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e_node/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 483,
                  "endLine": 483,
                  "startColumn": 50,
                  "endColumn": 74
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f790d8497745df1b82d32bee94fc0e68b8cd5a26130dc2fd08bbcb0319a86763",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 483,
                            "endLine": 483,
                            "startColumn": 50,
                            "endColumn": 74
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e_node/standalone_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154,
                  "startColumn": 32,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "132789a70884bf66bdcaf4f26ab3c43125321cb6323a90641242d3596fecd206",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/standalone_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 32,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e_node/services/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 50,
                  "endColumn": 74
                }
              }
            }
          ],
          "fingerprints": {
            "0": "92fc6296978293a16f19885e23b8f509d9cc70a3d78193f3e31c358bc23bb420",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/services/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 50,
                            "endColumn": 74
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e_node/kubeletconfig/kubeletconfig.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 153,
                  "endLine": 153,
                  "startColumn": 32,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9b99945d71a592c76280a10fd583ed2deb499a7e028d1b8b0e3e71679ccb087e",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_node/kubeletconfig/kubeletconfig.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 153,
                            "endLine": 153,
                            "startColumn": 32,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/goaway_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 323,
                  "endLine": 323,
                  "startColumn": 5,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "424fbaa96f4fe72e57c5d46d129cc9520cb12f11eb27d16e63668ceb2cc8a779",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.8ee950b3.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/goaway_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 5,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/goaway_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 398,
                  "endLine": 398,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d5eea1fbc820d70745273cc977b4ae012af5ef4c78c8679ae73baef985012366",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.8ee950b3.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/goaway_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 398,
                            "endLine": 398,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/goaway_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 430,
                  "endLine": 430,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c24af4a1b5b84987a65a08b9cbd1f5ce7fc15382da3232694ce3d901985e00c0",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.8ee950b3.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "staging/src/k8s.io/apiserver/pkg/server/filters/goaway_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 430,
                            "endLine": 430,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration/auth/podsecurity_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 317,
                  "endLine": 317,
                  "startColumn": 32,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bf232afb9d706cd12ac6d2d0c70208add7557e8c6cede239db156d5c759da7fc",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration/auth/podsecurity_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 32,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e/framework/ingress/ingress_utils.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 384,
                  "endLine": 384,
                  "startColumn": 52,
                  "endColumn": 76
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d0736da1da6b74db3b915ff113aa5dca5ed6e2be986ba769b983074a987b7382",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/framework/ingress/ingress_utils.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 384,
                            "endLine": 384,
                            "startColumn": 52,
                            "endColumn": 76
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/WebCookieMissesCallToSetHttpOnly",
          "ruleIndex": 25,
          "level": "note",
          "message": {
            "text": "In net.http.SetCookie HttpOnly is not set to true. Set the flag to true to protect the cookie from possible malicious code on client side. A cookie with the HttpOnly attribute is inaccessible to the JavaScript Document.cookie API.",
            "markdown": "In {0} HttpOnly is not set to true. Set the flag to true to protect the cookie from possible malicious code on client side. A cookie with the HttpOnly attribute is inaccessible to the JavaScript Document.cookie API.",
            "arguments": [
              "[net.http.SetCookie](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 436,
                  "endLine": 436,
                  "startColumn": 4,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1ae56c52b9bfa3608957b8aecd8caf79c2eb6eea052b9f4c953cf50016394569",
            "1": "f0a84589.43be7f94.a3cdcda2.e22980a8.7ed83494.57f89f2f.cf894c96.37d4bff0.f0a84589.43be7f94.a3cdcda2.e22980a8.7ed83494.57f89f2f.cf894c96.37d4bff0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/vmware/govmomi/vapi/simulator/simulator.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 436,
                            "endLine": 436,
                            "startColumn": 4,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "C",
            "files": 4,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 7,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Go",
            "files": 15451,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 2,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 1,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "C",
            "files": 1,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

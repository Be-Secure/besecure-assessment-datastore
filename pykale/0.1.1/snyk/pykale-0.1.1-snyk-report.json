{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "CommandInjection",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Xcal1bur/Giter/commit/cd3cb5a9a8a2b20d38d76350dce71d5ce4c1ae52?diff=split#diff-5525cbff62ceafe31dc99d746001579986f2348868bf4da54771d6a54259e3f7L-1",
                    "lines": [
                      {
                        "line": "    subprocess.run(f\"git remote add origin git@github.com:{username}/{repo_name}.git\", shell=True)\n",
                        "lineNumber": 99,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git pull origin master:master\", shell=True)\n",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git rebase origin/master\", shell=True)\n",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git push -u origin master\", shell=True)\n",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.run([\"git\", \"remote\", \"add\", \"origin\", f\"git@github.com:{username}/{repo_name}.git\"])\n",
                        "lineNumber": 112,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"pull\", \"origin\", \"master:master\"])\n",
                        "lineNumber": 113,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"rebase\", \"origin/master\"])\n",
                        "lineNumber": 114,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"push\", \"-u\", \"origin\", \"master\"])\n",
                        "lineNumber": 115,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/lammps/lammps/commit/22f99be57e6e97754bb9f1ee264b7dd844916fda?diff=split#diff-4e7cc7a44b4b4f346493d07636004e210db6bc3f4ec9e0652aa5c7408360f27aL-1",
                    "lines": [
                      {
                        "line": "import sys,os,re,subprocess\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import sys,os,re,subprocess,shutil\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "# help message\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "help = \"\"\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "Syntax from src dir: make lib-scafacos args=\"-b\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 or: make lib-scafacos args=\"-p /usr/local/scafacos\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "Syntax from lib dir: python Install.py -b\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 or: python Install.py -p /usr/local/scafacos\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "specify zero or more options, order does not matter\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  -b = download and build the Scafacos library\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "  -p = specify folder of existing Scafacos installation\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "   always creates includelink, liblink to Scafacos dirs\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "Example:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "make lib-scafacos args=\"-b\"   # download/build in lib/scafacos/scafacos\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "make lib-scafacos args=\"-p $HOME/scafacos\" # use existing Scafacos installation in $HOME\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "# settings\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "version = \"scafacos-1.0.1\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "url = \"https://github.com/scafacos/scafacos/releases/download/v1.0.1/scafacos-1.0.1.tar.gz\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "#url = \"https://gigamove.rz.rwth-aachen.de/d/id/CTzyApN76MXMJ6/dd/100\" % version\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "# print error message or help\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "def error(str=None):\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not str: print(help)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else: print(\"ERROR\",str)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sys.exit()\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "# expand to full path name\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "# process leading '~' or relative path\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "def fullpath(path):\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return os.path.abspath(os.path.expanduser(path))\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "def which(program):\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  def is_exe(fpath):\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fpath, fname = os.path.split(program)\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if fpath:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if is_exe(program):\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return program\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else:\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for path in os.environ[\"PATH\"].split(os.pathsep):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      path = path.strip('\"')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "      exe_file = os.path.join(path, program)\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if is_exe(exe_file):\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return exe_file\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return None\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "def geturl(url,fname):\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  success = False\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if which('curl') != None:\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'curl -L -o \"%s\" %s' % (fname,url)\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "      success = True\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except subprocess.CalledProcessError as e:\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "      print(\"Calling curl failed with: %s\" % e.output.decode('UTF-8'))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not success and which('wget') != None:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'wget -O \"%s\" %s' % (fname,url)\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print(\"Wget command: %s\" % cmd)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "      success = True\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except subprocess.CalledProcessError as e:\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "      print(\"Calling wget failed with: %s\" % e.output.decode('UTF-8'))\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not success:\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    error(\"Failed to download source code with 'curl' or 'wget'\")\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "# parse args\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "args = sys.argv[1:]\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "nargs = len(args)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "homepath = \".\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "buildflag = True \n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "pathflag = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "linkflag = True\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "iarg = 0\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "while iarg < nargs:\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if args[iarg] == \"-v\":\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if iarg+2 > nargs: error()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "    version = args[iarg+1]\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 2\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "  elif args[iarg] == \"-p\":\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if iarg+2 > nargs: error()\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scafacospath = fullpath(args[iarg+1])\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    pathflag = True\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 2\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "  elif args[iarg] == \"-b\":\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    buildflag = True\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 1\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else: error()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "homepath = fullpath(homepath)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "homedir = \"%s/%s\" % (homepath,version)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (pathflag):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.isdir(scafacospath): error(\"Scafacos path does not exist\")\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    homedir =scafacospath\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (buildflag and pathflag):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "    error(\"Cannot use -b and -p flag at the same time\")\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "# download and unpack Scafacos tarball\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "if buildflag:\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(\"Downloading Scafacos ...\")\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "  geturl(url,\"%s/%s.tar.gz\" % (homepath,version))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(\"Unpacking Scafacos tarball ...\")\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if os.path.exists(\"%s/%s\" % (homepath,version)):\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'rm -rf \"%s/%s\"' % (homepath,version)\n",
                        "lineNumber": 134,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 135,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    shutil.rmtree(\"%s/%s\" % (homepath,version))\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jachinlin/kindle_maker/commit/8804b85a69865837d31e37bdf73e01844229c5bc?diff=split#diff-00e2b2a85960fbf3f1969c885888cbc0aefd4e01c24e7fc34e1fecc94429f7b3L-1",
                    "lines": [
                      {
                        "line": "import shutil\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "from jinja2 import Environment, FileSystemLoader\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "templates_env = Environment(loader=FileSystemLoader('%s/templates/' % os.path.dirname(os.path.realpath(__file__))))\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "_default_output_dir = '/tmp/kindle_maker/'\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_file(template_name, context, output_name, output_dir):\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "    template = templates_env.get_template(template_name)\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(os.path.join(output_dir, output_name), \"w\") as f:\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "        f.write(template.render(**context))\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_toc_ncx(headers, output_dir, title=None, author=None):\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param title:\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param author:\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file(\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'toc.xml',\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'headers': headers,\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': title or 'jachinlin.github.io' + str(datetime.date.today()),\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'author': author or 'jachinlin.github.io'\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        },\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'toc.ncx',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        output_dir\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_toc_html(headers, output_dir):\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file('toc.html', {'headers': headers}, 'toc.html', output_dir)\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_opf(headers, title, output_dir, author=None):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param title:\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param author:\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file('opf.xml', {'headers': headers, 'title': title,\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            'author': author or 'jachinlin.github.io'}, '{}.opf'.format(title), output_dir)\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "def parse_headers(toc_file_name):\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param toc_file_name:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    headers_info = []\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(toc_file_name) as f:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        headers = f.readlines()\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        order = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not headers:\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None, None\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title_line = 0\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        while (not headers[title_line].strip()) or title_line == len(headers):\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "            title_line += 1\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if title_line == len(headers):\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None, None\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title = headers[title_line].strip()\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for h in headers[title_line + 1:]:\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if h.startswith('# '):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                order += 1\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "                headers_info.append({\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'title': h[2:].strip(),\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'play_order': order,\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'next_headers': []\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if h.startswith('## '):\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if len(headers) == 0:\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    continue\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "                order += 1\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "                headers_info[-1]['next_headers'].append({\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'title': h[2:].strip(),\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'play_order': order,\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return title, headers_info\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "def make_ebook(source_dir, output_dir=None):\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    make ebook with the files in source_dir and put the ebook made in output_dir\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param source_dir:\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output_dir = output_dir or _default_output_dir\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # make a tmp dir in output_dir\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmp_dir = os.path.join(output_dir, str(uuid.uuid4()))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"mkdir -p {}\".format(tmp_dir))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # copy source files to tmp dir\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"cp -rf {}/* {}\".format(source_dir, tmp_dir))\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # parse toc.md file\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toc_file_name = os.path.join(tmp_dir, 'toc.md')\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(toc_file_name):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise ValueError('not exists toc md file')\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    title, headers = parse_headers(toc_file_name)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not title:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise ValueError('invalid toc md file')\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # cover\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cover_file_name = os.path.join(tmp_dir, 'cover.jpg')\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(cover_file_name):\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        cover = '%s/templates/cover.jpg' % os.path.dirname(os.path.realpath(__file__))\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "        os.system('cp %s %s' % (cover, tmp_dir))\n",
                        "lineNumber": 133,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        shutil.copy(cover, tmp_dir)\n",
                        "lineNumber": 133,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 47,
                "cwe": [
                  "CWE-78"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into os.system, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18)",
              "[os.system](19)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/cifar_isonet/main.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 14,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cadb0ea44e8d201274872f9f3c52cbcb989f32aa74fa4bcd04bb3eafe66638b7",
            "1": "8abebb5c.cca8abb3.8935e792.139c59a8.960e4b8b.ba14daf2.8cca4fca.3323d23b.9264acac.277c621c.fb0b7f77.9cd2dfe0.e57c3047.1bee6699.f6dc7859.3323d23b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 5,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 65,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 65,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 18,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 5,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/cifar_isonet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 41,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 28,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 34,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 21,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 5,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 34,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 15,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 600,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into os.system, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18)",
              "[os.system](19)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/polypharmacy_gripnet/main.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 14,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e8f7274f44e5e4e765c1ec43958d46f3361a4658eb273ff2496e5056b2ce1d9e",
            "1": "95d81e5c.9573e0a4.3510e142.139c59a8.56a97589.ba14daf2.8cca4fca.545e9171.95d81e5c.277c621c.fb0b7f77.9cd2dfe0.e57c3047.0a892d8d.f6dc7859.1b5bf506"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 5,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 65,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 65,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 18,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 5,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/polypharmacy_gripnet/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 45,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 28,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 34,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 21,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 5,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 34,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 15,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kale/utils/logger.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 600,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Python",
            "files": 108,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}

{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/InsecurelyGeneratedPassword",
              "name": "InsecurelyGeneratedPassword",
              "shortDescription": {
                "text": "Use of Insufficiently Random Values"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nComputer security relies on random numbers for many things: generating secure, confidential session keys; hashing password data; encryption for transmitting sensitive data, and more. It's easy to understand why. If session keys, for example, were generated sequentially, attackers would be able to guess these easily and then hijack legitimate user sessions. Similarly, if encryption techniques used easy-to-guess numbers, attackers could use brute-force attacks to gain unauthorized access.\n\nIn reality, since computers cannot generate truly random numbers, they use \"pseudorandom\" numbers instead, generated using an algorithm that is \"seeded\" in a variety of ways to produce highly variable values in a random-seeming order, making them very hard-in theory-for attackers to guess. However, if developers inadvertently make use of a weak random algorithm, attackers may be able to discover the algorithm, seed, or pattern, ultimately unlocking access to commands or sensitive data, which can then be held for ransom or sold.\n\n## Best practices for prevention\n* Avoid using weak pseudorandom number generators (PRNGs), such as statistical PRNGs. Instead, choose a cryptographically secure PRNG.\n* Avoid using predictable seed values, such as user ID or server start time. Instead, use a seed that is itself pseudorandom, such as one taken from an external hardware source.\n* Use standard, accepted security algorithms and libraries rather than taking a DIY approach and creating custom code that may contain inherent weaknesses or overlook critical flaws.\n* Use static analysis tools to identify potential instances of this weakness in code and then ensure good test coverage with appropriate white-box testing.\n* Educate developers about the importance of entropy in security systems development, and consider adopting tools that are FIPS 140-2 compliant.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecurelyGeneratedPassword",
                  "Security",
                  "SourceWeakRandom"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/alibaba/terraform-provider/commit/ba6a37cf9504c09d63bed9ccc584721086a93e79?diff=split#diff-501aecdceff0e56ddef3a7a70d70258cL520",
                    "lines": [
                      {
                        "line": "func buildClientToken(prefix string) string {",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "  token := resource.PrefixedUniqueId(fmt.Sprintf(\"%s-%d-\", prefix, rand.Int()))",
                        "lineNumber": 519,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  token := strings.Replace(fmt.Sprintf(\"%s-%d-%s\", prefix, time.Now().Unix(), uuid.New().String()), \" \", \"\", -1)",
                        "lineNumber": 517,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if len(token) > 64 {",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "    token = token[0:64]",
                        "lineNumber": 521,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Bitspark/slang/commit/35a1ab629c76d0390e58f9577108536f0dd0c3b5?diff=split#diff-2977c4b4f04816d17a091f7805e5984eL32",
                    "lines": [
                      {
                        "line": " ",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (s *Synchronizer) Push(push pushFunc) int64 {",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var token int64",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  token = rand.Int63()",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  s.mutex.Lock()",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  s.counter++",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "  token := s.counter",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": " \tpush(s.out)",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": " \ts.tasks[token] = make(chan pullFunc)",
                        "lineNumber": 35,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Luzifer/password/commit/aa39ad3413d920cce18c1ea0153cddf30f83b2ab?diff=split#diff-71d1ff998ae100c984e4480f267848f8L46",
                    "lines": [
                      {
                        "line": "rand.Seed(time.Now().UnixNano())",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "for len(usedWords) < length {",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  word := strings.Title(xkcdWordList[rand.Intn(len(xkcdWordList))])",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if str.StringInSlice(word, usedWords) {",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Don't use a word twice",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    continue",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  password = password + word",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  usedWords = append(usedWords, word)",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "return password + strings.Join(usedWords, x.Separator), nil",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 58,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 3,
                "cwe": [
                  "CWE-330"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/arangodb/kube-arangodb/commit/7c9b8fdecccf78ec76983baa9bbf3747aba6f1d0?diff=split#diff-ee987cb87cf8e0096365e15a5a52358eL101",
                    "lines": [
                      {
                        "line": "func createArangodVSTConfigForDNSNames(ctx context.Context, cli corev1.CoreV1Interface, apiObject *api.ArangoDeployment, dnsNames []string) (vst.ConnectionConfig, error) {",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  scheme := \"http\"",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "  tlsConfig := &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  tlsConfig := &tls.Config{}",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if apiObject != nil && apiObject.Spec.IsSecure() {",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scheme = \"https\"",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tlsConfig = &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "transport := vstProtocol.TransportConfig{",
                        "lineNumber": 105,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fiorix/go-diameter/commit/fbf03cf9eaf1047d51aed495f311280b3f74cb50?diff=split#diff-04482c9117706d6f62ddf81a1153cc2bL72",
                    "lines": [
                      {
                        "line": "  addr = \":3868\"",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "config := &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if srv.TLSConfig != nil {",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  *config = *srv.TLSConfig",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var config *tls.Config",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "if srv.TLSConfig == nil {",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "  config = &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "  config = srv.TLSConfig.Clone()",
                        "lineNumber": 75,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/toorop/tmail/commit/67f8ce07ab1260618c2afb2cb0a07ea4e71f33ad?diff=split#diff-898d6a5dc29ee443fb3b42c23bf863a4R25",
                    "lines": [
                      {
                        "line": "var listener net.Listener",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "var err error",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tlsConfig *tls.Config",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "// SSL ?",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "if s.dsn.ssl {",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "// TODO: http://fastah.blackbuck.mobi/blog/securing-https-in-go/",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "tlsConfig := tls.Config{",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Certificates:       []tls.Certificate{cert},",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  InsecureSkipVerify: true,",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 39,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 138,
                "cwe": [
                  "CWE-295"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/helper.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "362b694e29e76aa87d9b03ff8cd1ff3155535d2df4de0140c157a78741fcba34",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/helper.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distribute/wizard.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6fc6ff388adf806fb7bd60477b65419921065e3708697c87e25e7c48c189a2d8",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "distribute/wizard.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 17,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "distribute/wizard.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 218,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distribute/wizard.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6e435375fe60217a8b52e69c6b412703831ed5ad2c9d0dfc4f1a3b3ffc989a4b",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "distribute/wizard.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 18,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "distribute/wizard.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 218,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distribute/wizard.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "endLine": 146,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5d9b4f16f0a53d95c995e42d1b8073c74914bf8cccf611d09a580ad6012c7f38",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "distribute/wizard.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 146,
                            "endLine": 146,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "distribute/wizard.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 146,
                            "endLine": 146,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 218,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in variable passwordChars. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in variable {1}. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)",
              "[passwordChars](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fc798ad40833dec24ab822116c951f614265a0b416bc5311f3820287cee02c97",
            "1": "3e0ea818.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.7b915e3a.1d874c72.47d3c013.c55d47e1.4c9b5203.9692a5c1.0de0c51b.57f89f2f.0873598c.8357cea2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in variable passwordChars. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in variable {1}. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)",
              "[passwordChars](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "93962498f16ced7f6c5b85b64db48ea48c7f780ca69bdad98c06b90a3f709ff3",
            "1": "3e0ea818.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.7b915e3a.1d874c72.47d3c013.c55d47e1.4c9b5203.9692a5c1.0de0c51b.57f89f2f.0873598c.8357cea2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in variable passwordChars. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in variable {1}. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)",
              "[passwordChars](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "643bc0ad358736bd47d8711ee930bc301dad7f6397f91f9beaa1b888fb8159bd",
            "1": "3e0ea818.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.7b915e3a.1d874c72.47d3c013.c55d47e1.4c9b5203.9692a5c1.0de0c51b.57f89f2f.0873598c.8357cea2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in variable passwordChars. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in variable {1}. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)",
              "[passwordChars](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e2605b5ad17466e9a9090e875d3c57aabbeaf43a76a9e5f0b11178fa3304faae",
            "1": "3e0ea818.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.7b915e3a.1d874c72.47d3c013.c55d47e1.4c9b5203.9692a5c1.0de0c51b.57f89f2f.0873598c.8357cea2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in variable passwordChars. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in variable {1}. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)",
              "[passwordChars](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107,
                  "startColumn": 4,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2dbbde4119f1821df4e071cb58e4cd6c52d99fafff45f5aa69d5a9a9aa0ada77",
            "1": "3e0ea818.73eb5804.45df3e14.6f6e1432.db2bb079.995dab92.7b915e3a.37d4bff0.47d3c013.c55d47e1.4c9b5203.9692a5c1.0de0c51b.57f89f2f.0873598c.c3c9d664"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 4,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in variable passwordChars. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in variable {1}. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)",
              "[passwordChars](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109,
                  "startColumn": 4,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "75e86d1995dc3f807c27e7a140dd05a9ab452ea58234ee01cef3f5b0d26b59d6",
            "1": "3e0ea818.73eb5804.45df3e14.6f6e1432.db2bb079.995dab92.7b915e3a.37d4bff0.47d3c013.c55d47e1.4c9b5203.9692a5c1.0de0c51b.57f89f2f.0873598c.c3c9d664"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 4,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in variable passwordChars. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in variable {1}. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)",
              "[passwordChars](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111,
                  "startColumn": 4,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f89059ccaf951a6002542116983b53de88db6624398a49481dde3dd7c5aa3ba2",
            "1": "3e0ea818.73eb5804.45df3e14.6f6e1432.db2bb079.995dab92.7b915e3a.37d4bff0.47d3c013.c55d47e1.4c9b5203.9692a5c1.0de0c51b.57f89f2f.0873598c.c3c9d664"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 4,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in variable passwordChars. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in variable {1}. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)",
              "[passwordChars](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113,
                  "startColumn": 4,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ea67df9595e32fbea6b1674ecde377a785764baa203e644da9831b13c2cd5fc6",
            "1": "3e0ea818.73eb5804.45df3e14.6f6e1432.db2bb079.995dab92.7b915e3a.37d4bff0.47d3c013.c55d47e1.4c9b5203.9692a5c1.0de0c51b.57f89f2f.0873598c.c3c9d664"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 4,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "startColumn": 15,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "538d08845732f3ef8039e5b01a1fae1d431965a63fb3f5747f43c8e6f2df9f7b",
            "1": "f93f09c7.5d8de7a9.a6807920.e22980a8.4cfde8db.67ab4541.860c51ff.7f9d8eaf.ff872371.c55d47e1.a6807920.e22980a8.0de0c51b.57f89f2f.83265159.6b914ace"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 17,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4716e64973e34fd6c46ce0191ea238ae1950330c2410f7db375a2dd3f2b62a54",
            "1": "0120c889.348ddf12.45df3e14.9692a5c1.0bfd2306.67ab4541.0873598c.5c311668.ff872371.c55d47e1.45df3e14.9692a5c1.0de0c51b.57f89f2f.83265159.6b914ace"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Intn is used to create a password in variable string. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in variable {1}. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Intn](0)",
              "[string](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "provider/parser.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122,
                  "startColumn": 9,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "baa56965afbd3308ac66132894535701c2ecd702513216f2bdc182272b110492",
            "1": "1eb6ec6b.736fc864.45df3e14.e22980a8.f1d9f854.57f89f2f.399adb59.37d4bff0.47d3c013.c55d47e1.4c9b5203.9692a5c1.0de0c51b.57f89f2f.83265159.c3c9d664"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "provider/parser.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 122,
                            "endLine": 122,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 865,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "execution/request.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "startColumn": 38,
                  "endColumn": 62
                }
              }
            }
          ],
          "fingerprints": {
            "0": "224468847d4cfbb32c292cd38e56ee7d14bbf2459307b6abc002420cbe6f1cfc",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "execution/request.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 38,
                            "endColumn": 62
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 512,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/request.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "startColumn": 34,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "be082ca788e45e32cd573222a1113432c88743e8e5e86eca5da895a3b628ba5d",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/request.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 34,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 512,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Go",
            "files": 101,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}

{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "java/TooPermissiveHostnameVerifier",
              "name": "TooPermissiveHostnameVerifier",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "TooPermissiveHostnameVerifier",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "java/TooPermissiveCors",
              "name": "TooPermissiveCors",
              "shortDescription": {
                "text": "Origin Validation Error"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nAs a legacy of early web design and site limitations, most web applications default, for security reasons, to a \"same origin policy\". This means that browsers can only retrieve data from another site if the two sites share the same domain. In today's complex online environment, however, sites and applications often need to retrieve data from other domains. This is done under fairly limited conditions through an exception to the same origin policy known as \"cross-origin resource sharing\".\n\nDevelopers may create definitions of trusted domains that are broader than absolutely necessary, inadvertently opening up wider access than intended. This weakness could result in data exposure or loss, or even allow an attacker to take over the site or application.\n\n## Best practices for prevention\n* Avoid using wildcards for cross-origin resource sharing. Instead, define intended domains explicitly.\n* Ensure that your site or app is well defended against cross-site scripting attacks (XSS), which could lead to takeover via an overly permissive cross-domain policy.\n* Do not mix secure and insecure protocols when defining cross-domain policies.\n* Consider defining a clear approved list to specify which domains will be given resource-level access; use this approved list to validate all domain access requests.\n* Clearly define which methods (view, read, and update) are permitted for each resource and domain to avoid abuse.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "TooPermissiveCors",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-942",
                  "CWE-346"
                ]
              }
            },
            {
              "id": "java/DisablesCSRFProtection/test",
              "name": "DisablesCSRFProtection/test",
              "shortDescription": {
                "text": "Cross-Site Request Forgery (CSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\n## Best practices for prevention\n* Use development frameworks that defend against CSRF, using a nonce, hash, or some other security device to the URL and/or to forms.\n* Implement secure, unique, hidden tokens that are checked by the server each time to validate state-change requests.\n* Never assume that authentication tokens and session identifiers mean a request is legitimate.\n* Understand and implement other safe-cookie techniques, such as double submit cookies.\n* Terminate user sessions when not in use, including automatic timeout.\n* Ensure rigorous coding practices and defenses against other commonly exploited CWEs, since cross-site scripting (XSS), for example, can be used to bypass defenses against CSRF.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "DisablesCSRFProtection",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/hocgin/SpringBoot-CMS/commit/ca9c4230ea0798354ec5daa74721c0ff10964997?diff=split#diff-9b1a54996a1ac9ec5ce8e59a5a2e16e9bd07b2cc0bf0c81c25fccdffcd426f65L-1",
                    "lines": [
                      {
                        "line": "http.antMatcher(\"/**\")\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "        .exceptionHandling()\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "        .authenticationEntryPoint(new IWebUnauthorizedEntryPoint()).and()\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        .csrf().disable() //TODO 临时关闭, 调试\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        .csrf().and()\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blackducksoftware/blackduck-alert/commit/bd5da4c01f8a11a0b3219180a7f9cd899bbc999e?diff=split#diff-4a764a20aa4d81721b3ba9c25ca03615286b91d5147fe7b715f0a1b399c37420L-1",
                    "lines": [
                      {
                        "line": "        http.csrf().disable().authorizeRequests().antMatchers(allowedPaths).permitAll()\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        final String[] csrfIgnoredPaths = {\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/\",\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/#\",\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/favicon.ico\",\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/fonts/**\",\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/js/bundle.js\",\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/js/bundle.js.map\",\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/css/style.css\",\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"index.html\",\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "                BaseController.BASE_PATH + \"/login\",\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "                BaseController.BASE_PATH + \"/verify\",\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "                BaseController.BASE_PATH + \"/about\" };\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "        http.csrf().csrfTokenRepository(csrfTokenRepository).ignoringAntMatchers(csrfIgnoredPaths)\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .and().authorizeRequests().antMatchers(allowedPaths).permitAll()\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mraible/java-webapp-security-examples/commit/1ae83aeb6975a107dcdb616eeae63bc846fcadaf?diff=split#diff-b8cb20d5732c784ae693cb1cd9ecb813e912a21fe570c581998875276a2a642dL-1",
                    "lines": [
                      {
                        "line": "http\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .csrf().disable()\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    .csrf().and()\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 69,
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "java/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/hadoop/commit/1373e3d8ad60e4da721a292912cb69243bfdf470?diff=split#diff-66aa82c274f41b59e09661e4d60fbf9dcb3465c466c1af64ca9826876bbbcef4L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.OutputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.URI;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.UnknownHostException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Arrays;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Map;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Attributes;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.JarOutputStream;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Manifest;\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.GZIPInputStream;\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.collections.map.CaseInsensitiveMap;\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceAudience;\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceStability;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.conf.Configuration;\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsAction;\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsPermission;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.IOUtils;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.nativeio.NativeIO;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell.ShellCommandExecutor;\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.StringUtils;\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.Logger;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.LoggerFactory;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": " * A collection of file-processing util methods\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceAudience.Public\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceStability.Evolving\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final Logger LOG = LoggerFactory.getLogger(FileUtil.class);\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /* The error code is defined in winutils to indicate insufficient\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * privilege to create symbolic links. This value need to keep in\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * sync with the constant of the same name in:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \"src\\winutils\\common.h\"\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * */\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static final int SYMLINK_NO_PRIVILEGE = 2;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats) {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return null;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path[] ret = new Path[stats.length];\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i < stats.length; ++i) {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "      ret[i] = stats[i].getPath();\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ret;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path.\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If stats if null, return path\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param path\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          default path to return in stats is null\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats, Path path) {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new Path[]{path};\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stat2Paths(stats);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Register all files recursively to be deleted on exit.\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file File/directory to be deleted\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDeleteOnExit(final File file) {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "    file.deleteOnExit();\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (file.isDirectory()) {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] files = file.listFiles();\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File child : files) {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        fullyDeleteOnExit(child);\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir) {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDelete(dir, false);\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir the file or directory to be deleted\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions true if permissions should be modified to delete a file.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return true on success false on failure.\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir, boolean tryGrantPermissions) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // try to chmod +rwx the parent folder of the 'dir': \n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File parent = dir.getParentFile();\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(parent);\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteImpl(dir, false)) {\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // dir is (a) normal file, (b) symlink to a file, (c) empty directory or\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // (d) symlink to a directory\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // handle nonempty directory deletion\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!fullyDeleteContents(dir, tryGrantPermissions)) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deleteImpl(dir, true);\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns the target of the given symlink. Returns the empty string if\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * the given path does not refer to a symlink or there is an error\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * accessing the symlink.\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param f File representing the symbolic link.\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The target of the symbolic link, empty string on error or if not\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *         a symlink.\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String readLink(File f) {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /* NB: Use readSymbolicLink in java.nio.file.Path once available. Could\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * use getCanonicalPath in File to get the target of the symlink but that\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * does not indicate if the given path refers to a symlink.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return Shell.execCommand(\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Shell.getReadlinkCommand(f.toString())).trim();\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (IOException x) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return \"\";\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /*\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Pure-Java implementation of \"chmod +rwx f\".\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void grantPermissions(final File f) {\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setExecutable(f, true);\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setReadable(f, true);\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setWritable(f, true);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean deleteImpl(final File f, final boolean doLog) {\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f == null) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"null file argument.\");\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean wasDeleted = f.delete();\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (wasDeleted) {\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean ex = f.exists();\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (doLog && ex) {\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"Failed to delete file or dir [\"\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "          + f.getAbsolutePath() + \"]: it still exists.\");\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return !ex;\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir) {\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDeleteContents(dir, false);\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this \n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * and all the underlying directories before trying to delete their contents.\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir, final boolean tryGrantPermissions) {\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // to be able to list the dir and delete files from it\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // we must grant the dir rwx permissions: \n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(dir);\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean deletionSucceeded = true;\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final File[] contents = dir.listFiles();\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (contents != null) {\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!deleteImpl(contents[i], true)) {// normal file or symlink to another file\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue; // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Either directory or symlink to another directory.\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Try deleting the directory as this might be a symlink\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "          boolean b = false;\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "          b = deleteImpl(contents[i], false);\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (b){\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //this was indeed a symlink or an empty directory\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue;\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // if not an empty directory or symlink let\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // fullydelete handle it.\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!fullyDelete(contents[i], tryGrantPermissions)) {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deletionSucceeded;\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete a directory.\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param fs {@link FileSystem} on which the path is present\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir directory to recursively delete \n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @deprecated Use {@link FileSystem#delete(Path, boolean)}\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDelete(FileSystem fs, Path dir) \n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fs.delete(dir, true);\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // If the destination is a subdirectory of the source, then\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // generate exception\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void checkDependencies(FileSystem srcFS, \n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path src, \n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        FileSystem dstFS, \n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path dst)\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        throws IOException {\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcFS == dstFS) {\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String srcq = src.makeQualified(srcFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String dstq = dst.makeQualified(dstFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (dstq.startsWith(srcq)) {\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (srcq.length() == dstq.length()) {\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to itself.\");\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to its subdirectory \" +\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                dst);\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, src, dstFS, dst, deleteSource, true, conf);\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path[] srcs, \n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource, \n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite, Configuration conf)\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             throws IOException {\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean gotException = false;\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean returnVal = true;\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder exceptions = new StringBuilder();\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcs.length == 1)\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return copy(srcFS, srcs[0], dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Check if dest is directory\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!sdst.isDirectory()) \n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IOException(\"copying multiple files, but last argument `\" +\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              dst + \"' is not a directory\");\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "          \"`\" + dst + \"': specified destination directory \" +\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "              \"does not exist\", e);\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (Path src : srcs) {\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!copy(srcFS, src, dstFS, dst, deleteSource, overwrite, conf))\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "          returnVal = false;\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "        gotException = true;\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(e.getMessage());\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(\"\\n\");\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (gotException) {\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(exceptions.toString());\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return returnVal;\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus fileStatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, fileStatus, dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, overwrite);\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "      checkDependencies(srcFS, src, dstFS, dst);\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i], dstFS,\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new Path(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, overwrite, conf);\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in=null;\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out = null;\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = srcFS.open(src);\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst, overwrite);\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf, true);\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(out);\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(in);\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy all files in a directory to one output file (merge). */\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copyMerge(FileSystem srcFS, Path srcDir, \n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  FileSystem dstFS, Path dstFile, \n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  boolean deleteSource,\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  Configuration conf, String addString) throws IOException {\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dstFile = checkDest(srcDir.getName(), dstFS, dstFile, false);\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!srcFS.getFileStatus(srcDir).isDirectory())\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "   \n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OutputStream out = dstFS.create(dstFile);\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(srcDir);\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Arrays.sort(contents);\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "          InputStream in = srcFS.open(contents[i].getPath());\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "            IOUtils.copyBytes(in, out, conf, false);\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (addString!=null)\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "              out.write(addString.getBytes(\"UTF-8\"));\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } finally {\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "            in.close();\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } \n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "      out.close();\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(srcDir, true);\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }  \n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy local files to a FileSystem. */\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(File src,\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, false);\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (src.isDirectory()) {\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File contents[] = listFiles(src);\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(contents[i], dstFS, new Path(dst, contents[i].getName()),\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else if (src.isFile()) {\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = null;\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out =null;\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = new FileInputStream(src);\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst);\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf);\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( out );\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( in );\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(src.toString() + \n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            \": No such file or directory\");\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return FileUtil.fullyDelete(src);\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             File dst, boolean deleteSource,\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus filestatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, filestatus, dst, deleteSource, conf);\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              File dst, boolean deleteSource,\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              Configuration conf) throws IOException {\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dst.mkdirs()) {\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i],\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new File(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = srcFS.open(src);\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static Path checkDest(String srcName, FileSystem dstFS, Path dst,\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "      boolean overwrite) throws IOException {\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus sdst;\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = null;\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (null != sdst) {\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (sdst.isDirectory()) {\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (null == srcName) {\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new PathIsDirectoryException(dst.toString());\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return checkDest(null, dstFS, new Path(dst, srcName), overwrite);\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else if (!overwrite) {\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new PathExistsException(dst.toString(),\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \"Target \" + dst + \" already exists\");\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return dst;\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param filename The filename to convert\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(String filename) throws IOException {\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return filename;\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file) throws IOException {\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return makeShellPath(file, false);\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param makeCanonicalPath \n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          Whether to make canonical path for the file passed\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file, boolean makeCanonicalPath) \n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (makeCanonicalPath) {\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.getCanonicalPath());\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.toString());\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Takes an input dir and returns the du on that local directory. Very basic\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * implementation.\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          The input dir to get the disk space of this local dir\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The total disk space of the input local directory\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static long getDU(File dir) {\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "    long size = 0;\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.exists())\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return 0;\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.isDirectory()) {\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return dir.length();\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] allFiles = dir.listFiles();\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if(allFiles != null) {\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "         for (int i = 0; i < allFiles.length; i++) {\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "           boolean isSymLink;\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "           try {\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "           } catch(IOException ioe) {\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = true;\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "           if(!isSymLink) {\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "             size += getDU(allFiles[i]);\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "         }\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return size;\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Given a File input it will unzip the file in a the unzip directory\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * passed as the second parameter\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param inFile The zip file as input\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param unzipDir The unzip directory where to unzip the zip file.\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<? extends ZipEntry> entries;\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipFile zipFile = new ZipFile(inFile);\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n",
                        "lineNumber": 622,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "      entries = zipFile.entries();\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "      while (entries.hasMoreElements()) {\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!entry.isDirectory()) {\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 629,
                        "lineChange": "added"
                      },
                      {
                        "line": "          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n",
                        "lineNumber": 630,
                        "lineChange": "added"
                      },
                      {
                        "line": "            throw new IOException(\"expanding \" + entry.getName()\n",
                        "lineNumber": 631,
                        "lineChange": "added"
                      },
                      {
                        "line": "                + \" would create file outside of \" + unzipDir);\n",
                        "lineNumber": 632,
                        "lineChange": "added"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 633,
                        "lineChange": "added"
                      },
                      {
                        "line": "          InputStream in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!file.getParentFile().mkdirs()) {\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!file.getParentFile().isDirectory()) {\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throw new IOException(\"Mkdirs failed to create \" + \n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "                          file.getParentFile().toString());\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "OutputStream out = new FileOutputStream(file);\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mockingbot/react-native-zip-archive/commit/74da5ecb3c61e96374857e7aa77ff99948e34270?diff=split#diff-bd4e482df53115aae45520ce6a60abd8d76390dcd9ed817375e437b9c312a408L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.PrintWriter;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.StringWriter;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipInputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipOutputStream;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.exception.ZipException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.model.FileHeader;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.progress.ProgressMonitor;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class RNZipArchiveModule extends ReactContextBaseJavaModule {\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = RNZipArchiveModule.class.getSimpleName();\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final int BUFFER_SIZE = 4096;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String PROGRESS_EVENT_NAME = \"zipArchiveProgressEvent\";\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_FILENAME = \"filePath\";\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_PROGRESS = \"progress\";\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public RNZipArchiveModule(ReactApplicationContext reactContext) {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    super(reactContext);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getName() {\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return \"RNZipArchive\";\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void isPasswordProtected(final String zipFilePath, final Promise promise) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.resolve(zipFile.isEncrypted());\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (ZipException ex) {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.reject(null, String.format(\"Unable to check for encryption due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipWithPassword(final String zipFilePath, final String destDirectory,\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final String password, final Promise promise) {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "          net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (zipFile.isEncrypted()) {\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.setPassword(password);\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } else {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "            promise.reject(null, String.format(\"Zip file: %s is not password protected\", zipFilePath));\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List fileHeaderList = zipFile.getFileHeaders();\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List extractedFileNames = new ArrayList<>();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "          int totalFiles = fileHeaderList.size();\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "          for (int i = 0; i < totalFiles; i++) {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            FileHeader fileHeader = (FileHeader) fileHeaderList.get(i);\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.extractFile(fileHeader, destDirectory);\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fileHeader.isDirectory()) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "              extractedFileNames.add(fileHeader.getFileName());\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(i + 1, totalFiles, zipFilePath);\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(Arguments.fromList(extractedFileNames));\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (ZipException ex) {\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Failed to unzip file, due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzip(final String zipFilePath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Check the file exists\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileInputStream inputStream = null;\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "          inputStream = new FileInputStream(zipFilePath);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "          new File(zipFilePath);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (FileNotFoundException | NullPointerException e) {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (inputStream != null) {\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "              inputStream.close();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ignored) {\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Couldn't open file \" + zipFilePath + \". \");\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Find the total uncompressed size of every file in the zip, so we can\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // get an accurate progress measurement\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long totalUncompressedBytes = getUncompressedSize(zipFilePath);\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File destDir = new File(destDirectory);\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!destDir.exists()) {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destDir.mkdirs();\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // We use arrays here so we can update values\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // from inside the callback\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long[] extractedBytes = {0};\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final int[] lastPercentage = {0};\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final ZipFile zipFile = new ZipFile(zipFilePath);\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final Enumeration<? extends ZipEntry> entries = zipFile.entries();\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Log.d(TAG, \"Zip has \" + zipFile.size() + \" entries\");\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "          while (entries.hasMoreElements()) {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (entry.isDirectory()) continue;\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            StreamUtil.ProgressCallback cb = new StreamUtil.ProgressCallback() {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "              @Override\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "              public void onCopyProgress(long bytesRead) {\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                extractedBytes[0] += bytesRead;\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int lastTime = lastPercentage[0];\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int percentDone = (int) ((double) extractedBytes[0] * 100 / (double) totalUncompressedBytes);\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                // update at most once per percent.\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (percentDone > lastTime) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  lastPercentage[0] = percentDone;\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  updateProgress(extractedBytes[0], totalUncompressedBytes, zipFilePath);\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fout.exists()) {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "              (new File(fout.getParent())).mkdirs();\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "            InputStream in = null;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedOutputStream Bout = null;\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout = new BufferedOutputStream(new FileOutputStream(fout));\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "              StreamUtil.copy(in, Bout, cb);\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout.close();\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in.close();\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ex) {\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (in != null) {\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  in.close();\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (Bout != null) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  Bout.close();\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "          zipFile.close();\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(1, 1, zipFilePath); // force 100%\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(destDirectory);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (Exception ex) {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Failed to extract file \" + ex.getLocalizedMessage());\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a zip held in the assets directory.\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Note that the progress value isn't as accurate as when unzipping\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * from a file. When reading a zip from a stream, we can't\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * get accurate uncompressed sizes for files (ZipEntry#getCompressedSize() returns -1).\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Instead, we compare the number of bytes extracted to the size of the compressed zip file.\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * In most cases this means the progress 'stays on' 100% for a little bit (compressedSize < uncompressed size)\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipAssets(final String assetsPath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream assetsInputStream;\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final long size;\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "          assetsInputStream = getReactApplicationContext().getAssets().open(assetsPath);\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "          AssetFileDescriptor fileDescriptor = getReactApplicationContext().getAssets().openFd(assetsPath);\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "          size = fileDescriptor.getLength();\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (IOException e) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Asset file `%s` could not be opened\", assetsPath));\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File destDir = new File(destDirectory);\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!destDir.exists()) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "              destDir.mkdirs();\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipInputStream zipIn = new ZipInputStream(assetsInputStream);\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedInputStream bin = new BufferedInputStream(zipIn);\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipEntry entry;\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final long[] extractedBytes = {0};\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int[] lastPercentage = {0};\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(0, 1, assetsPath); // force 0%\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout;\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            while ((entry = zipIn.getNextEntry()) != null) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (entry.isDirectory()) continue;\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "              fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String destDirCanonicalPath = (new File(destDirectory)).getCanonicalPath();\n",
                        "lineNumber": 254,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String canonicalPath = fout.getCanonicalPath();\n",
                        "lineNumber": 255,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!canonicalPath.startsWith(destDirCanonicalPath)) {\n",
                        "lineNumber": 256,
                        "lineChange": "added"
                      },
                      {
                        "line": "                throw new Exception(String.format(\"Found Zip Path Traversal Vulnerability with %s\", canonicalPath));\n",
                        "lineNumber": 257,
                        "lineChange": "added"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 258,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 259,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!fout.exists()) {\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-7f1146763ff0eeee6320973b41ea444dd74b8bf7ee644cc135133047c1a430c6L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.charset.Charset;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.HashSet;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Properties;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Set;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.annotation.Nullable;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.tools.JavaFileObject;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Utilities for reading {@link com.google.devtools.j2objc.file.InputFile}s.\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": " *\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @author Tom Ball, Keith Stanger, Mike Thvedt, Tim Gao\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Set<String> tempDirs = new HashSet<>();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> sourcePathEntries = new ArrayList<>();\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> classPathEntries = new ArrayList<>();\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private File outputDirectory = new File(\".\");\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private String fileEncoding = System.getProperty(\"file.encoding\", \"UTF-8\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Charset charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setSourcePathEntries(List<String> sourcePathEntries) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.sourcePathEntries = sourcePathEntries;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getSourcePathEntries() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return sourcePathEntries;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void appendSourcePath(String entry) {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(entry);\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void insertSourcePath(int index, String entry) {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(index, entry);\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getClassPathEntries() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return classPathEntries;\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setOutputDirectory(File outputDirectory) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.outputDirectory = outputDirectory;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File getOutputDirectory() {\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!outputDirectory.exists()) {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "      outputDirectory.mkdirs();\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return outputDirectory;\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setFileEncoding(String fileEncoding) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.fileEncoding = fileEncoding;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getFileEncoding() {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fileEncoding;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Charset getCharset() {\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return charset;\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void addTempDir(String tempDir) {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tempDirs.add(tempDir);\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Set<String> getTempDirs() {\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tempDirs;\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(InputFile file) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = file.getBasename();\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(JavaFileObject file) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = file.getName();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = path.substring(path.lastIndexOf('/') + 1);\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static String removeFileSuffix(String basename) {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int end = basename.lastIndexOf(\".java\");\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (end == -1) {\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      end = basename.lastIndexOf(\".class\");\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return end != -1 ? basename.substring(0, end) : basename;\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getQualifiedMainTypeName(InputFile file, CompilationUnit unit) {\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String qualifiedName = getMainTypeName(file);\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PackageDeclaration packageDecl = unit.getPackage();\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (packageDecl != null) {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String packageName = packageDecl.getName().getFullyQualifiedName();\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "      qualifiedName = packageName + \".\" + qualifiedName;\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return qualifiedName;\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the source path,\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnSourcePath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, sourcePathEntries, \".java\");\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the class path,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnClassPath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, classPathEntries, \".class\");\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputFile findOnPaths(\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String qualifiedName, List<String> paths, String extension) throws IOException {\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String sourceFileName = qualifiedName.replace('.', File.separatorChar) + extension;\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Zip/jar files always use forward slashes.\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String jarEntryName = qualifiedName.replace('.', '/') + extension;\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (String pathEntry : paths) {\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File f = new File(pathEntry);\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (f.isDirectory()) {\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        RegularInputFile regularFile = new RegularInputFile(\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pathEntry + File.separatorChar + sourceFileName, sourceFileName);\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (regularFile.exists()) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return regularFile;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Assume it's a jar file\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        JarredInputFile jarFile = new JarredInputFile(pathEntry, jarEntryName);\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (jarFile.exists()) {\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return jarFile;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return null;\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String readFile(InputFile file) throws IOException {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return CharStreams.toString(file.openReader(charset));\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputStream streamForFile(String filename) throws IOException {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File f = new File(filename);\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f.exists()) {\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new FileInputStream(f);\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream stream = J2ObjC.class.getResourceAsStream(filename);\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (stream == null) {\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new FileNotFoundException(filename);\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stream;\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Reads the given properties file.\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(String resourceName) throws IOException {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return loadProperties(streamForFile(resourceName));\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(InputStream in) throws IOException {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Properties p = new Properties();\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "      p.load(in);\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return p;\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "      in.close();\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static File createTempDir(String dirname) throws IOException {\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File tmpDirectory = File.createTempFile(dirname, \".tmp\");\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.delete();\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!tmpDirectory.mkdir()) {\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\"Could not create tmp directory: \" + tmpDirectory.getPath());\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.deleteOnExit();\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tmpDirectory;\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete specified directory.\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void deleteTempDir(File dir) {\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO(cpovirk): try Directories.deleteRecursively if a c.g.c.unix dep is OK\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (dir != null && dir.exists()) {\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File f : dir.listFiles()) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (f.isDirectory()) {\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          deleteTempDir(f);\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "          f.delete();\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "      dir.delete();\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a ZipEntry to the specified directory.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File outputFile = new File(dir, entry.getName());\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File parentFile = outputFile.getParentFile();\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!parentFile.isDirectory() && !parentFile.mkdirs()) {\n",
                        "lineNumber": 245,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract file to \" + dir.getPath());\n",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)\n",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "        || (!parentFile.isDirectory() && !parentFile.mkdirs())) {\n",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());\n",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try (InputStream inputStream = zipFile.getInputStream(entry);\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 18,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "java/TooPermissiveCors/test",
              "name": "TooPermissiveCors/test",
              "shortDescription": {
                "text": "Origin Validation Error"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nAs a legacy of early web design and site limitations, most web applications default, for security reasons, to a \"same origin policy\". This means that browsers can only retrieve data from another site if the two sites share the same domain. In today's complex online environment, however, sites and applications often need to retrieve data from other domains. This is done under fairly limited conditions through an exception to the same origin policy known as \"cross-origin resource sharing\".\n\nDevelopers may create definitions of trusted domains that are broader than absolutely necessary, inadvertently opening up wider access than intended. This weakness could result in data exposure or loss, or even allow an attacker to take over the site or application.\n\n## Best practices for prevention\n* Avoid using wildcards for cross-origin resource sharing. Instead, define intended domains explicitly.\n* Ensure that your site or app is well defended against cross-site scripting attacks (XSS), which could lead to takeover via an overly permissive cross-domain policy.\n* Do not mix secure and insecure protocols when defining cross-domain policies.\n* Consider defining a clear approved list to specify which domains will be given resource-level access; use this approved list to validate all domain access requests.\n* Clearly define which methods (view, read, and update) are permitted for each resource and domain to avoid abuse.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "TooPermissiveCors",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-942",
                  "CWE-346"
                ]
              }
            },
            {
              "id": "java/UsageOfUnencryptedSocket",
              "name": "UsageOfUnencryptedSocket",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n## Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "UsageOfUnencryptedSocket",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/SmartBear/soapui/commit/98ce7aeaac98963795d4ebf22f673b64032fe572?diff=split#diff-c6679790ed47144c981b0f64cf5abe08d625880b9a6eb64cf9f6373a2ab84c83L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocket;\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.servlet.ServletException;\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.jetty.Request;\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.jetty.Response;\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.util.IO;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class Server extends org.mortbay.jetty.Server\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "{\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Override\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic void handle(final org.mortbay.jetty.HttpConnection connection) throws IOException, ServletException\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t{\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Request request = connection.getRequest();\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif (!request.getMethod().equals(\"CONNECT\"))\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t{\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tsuper.handle(connection);\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String uri = request.getUri().toString();\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal int c = uri.indexOf(':');\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String port = uri.substring(c + 1);\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String host = uri.substring(0, c);\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal InetSocketAddress inetAddress = new InetSocketAddress(host, Integer.parseInt(port));\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Socket clientSocket = connection.getEndPoint().getTransport() instanceof Socket ? (Socket) connection\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t.getEndPoint().getTransport() : ((SocketChannel) connection.getEndPoint().getTransport()).socket();\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal InputStream in = clientSocket.getInputStream();\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal OutputStream out = clientSocket.getOutputStream();\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Socket socket = new Socket(inetAddress.getAddress(), inetAddress.getPort());\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tfinal SSLSocket socket = (SSLSocket) SSLSocketFactory.getDefault().createSocket(inetAddress.getAddress(), inetAddress.getPort());\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Response response = connection.getResponse();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tresponse.setStatus(200);\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "//\t\tresponse.setHeader(\"Connection\", \"close\");\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tresponse.flushBuffer();\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tIO.copyThread(socket.getInputStream(), out);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Gocnak/Botnak/commit/14a30fa3499ad9f41f50ac4b2afeeef1b5aae773?diff=split#diff-05d95d78e3001cfaa0cbd571fedb93732922c7c8990bf59d63a7ef2a6e6bfe01L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "import java.io.*;\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.Socket;\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.concurrent.ArrayBlockingQueue;\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Created by Nick on 9/7/2015.\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class PircBotConnection {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InputThread _inputThread = null;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private OutputThread _outputThread = null;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ArrayBlockingQueue<String> _outQueue;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private PircBot bot;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ConnectionType type;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private String _server, name;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public OutputThread getOutputThread() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outputThread;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ArrayBlockingQueue<String> getOutQueue()\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outQueue;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBot getBot() {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return bot;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public void setName(String name)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = name;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public String getName() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ConnectionType getType() {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return type;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InetAddress _inetAddress = null;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public enum ConnectionType {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        NORMAL(6667, \"irc.chat.twitch.tv\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int port;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String[] hosts;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ConnectionType(int port, String... hosts) {\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.port = port;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.hosts = hosts;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBotConnection(PircBot bot, ConnectionType type) {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.bot = bot;\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.type = type;\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = bot.getNick();\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this._outQueue = new ArrayBlockingQueue<>(500, true); // I don't know if people will use more than 500 msgs\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Returns whether or not the PircBot is currently connected to a server.\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * The result of this method should only act as a rough guide,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * as the result may not be valid by the time you act upon it.\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return True if and only if the PircBot is currently connected to a server.\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean isConnected() {\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _inputThread != null && _inputThread.isConnected();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean connect() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (isConnected()) {\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return false;\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        _server = type.hosts[Utils.random(0, type.hosts.length)];\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Connect to the server.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Socket socket;\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream socketIn;\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        OutputStream socketOut;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socket = new Socket(_server, type.port);\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            socket = SSLSocketFactory.getDefault().createSocket(_server, type.port);\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "            bot.log(\"*** Trying to connect to \" + _server + \" on port \" + getPort());\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketIn = socket.getInputStream();\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Gocnak/Botnak/commit/14a30fa3499ad9f41f50ac4b2afeeef1b5aae773?diff=split#diff-05d95d78e3001cfaa0cbd571fedb93732922c7c8990bf59d63a7ef2a6e6bfe01L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "import java.io.*;\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.Socket;\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.concurrent.ArrayBlockingQueue;\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Created by Nick on 9/7/2015.\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class PircBotConnection {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InputThread _inputThread = null;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private OutputThread _outputThread = null;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ArrayBlockingQueue<String> _outQueue;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private PircBot bot;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ConnectionType type;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private String _server, name;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public OutputThread getOutputThread() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outputThread;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ArrayBlockingQueue<String> getOutQueue()\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outQueue;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBot getBot() {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return bot;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public void setName(String name)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = name;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public String getName() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ConnectionType getType() {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return type;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InetAddress _inetAddress = null;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public enum ConnectionType {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        NORMAL(6667, \"irc.chat.twitch.tv\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int port;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String[] hosts;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ConnectionType(int port, String... hosts) {\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.port = port;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.hosts = hosts;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBotConnection(PircBot bot, ConnectionType type) {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.bot = bot;\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.type = type;\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = bot.getNick();\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this._outQueue = new ArrayBlockingQueue<>(500, true); // I don't know if people will use more than 500 msgs\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Returns whether or not the PircBot is currently connected to a server.\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * The result of this method should only act as a rough guide,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * as the result may not be valid by the time you act upon it.\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return True if and only if the PircBot is currently connected to a server.\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean isConnected() {\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _inputThread != null && _inputThread.isConnected();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean connect() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (isConnected()) {\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return false;\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        _server = type.hosts[Utils.random(0, type.hosts.length)];\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Connect to the server.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Socket socket;\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream socketIn;\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        OutputStream socketOut;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socket = new Socket(_server, type.port);\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            socket = SSLSocketFactory.getDefault().createSocket(_server, type.port);\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "            bot.log(\"*** Trying to connect to \" + _server + \" on port \" + getPort());\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketIn = socket.getInputStream();\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketOut = socket.getOutputStream();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "java/Ssrf/test",
              "name": "Ssrf/test",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "Ssrf",
                  "Security",
                  "InTest",
                  "SourceResourceAccess",
                  "SourceArchive",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "java/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "java/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/javabeanz/owasp-security-logging/commit/477ecf68f3102f309f3ec9af01ab852294cbd826?diff=split#diff-c14e8b3d208e6acad1c0ca88a8a8227e4140088dfe2206349680aec0558df5cbL-1",
                    "lines": [
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/AmadeusITGroup/HttpSessionReplacer/commit/2446e990415bc285fed740539c4f131708c56a3c?diff=split#diff-c03b1a2951c34501ec780ec5f5e146284be8a5f93d21ace8abcb1a54d43dd5d2L-1",
                    "lines": [
                      {
                        "line": "MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest sha = MessageDigest.getInstance(\"SHA-256\");\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/codeka/wwmmo/commit/31c54b90cae6bc6dafa4aa2b2e8206fc2324dfbe?diff=split#diff-bf17bd3165b8e75a0bfb95f42138140d5befba995b54eff50f4389f0e47a0feeL-1",
                    "lines": [
                      {
                        "line": "Hashing.sha1().hashString(etag, Charset.defaultCharset()).asBytes());\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Hashing.sha256().hashString(etag, Charset.defaultCharset()).asBytes());\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 3,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "java/XXE",
              "name": "XXE",
              "shortDescription": {
                "text": "XML External Entity (XXE) Injection"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nFor convenience, XML documents can use system identifiers to enable access to stored content, whether local or remote. The XML processor then uses the system identifier to access the resource rather than using the URI. When this weakness exists, the application permits user-supplied data, which could include the address of an XML external identity, to be passed directly to the XML parser. The application will then attempt to retrieve documents from outside of secure, controlled areas.\n\nAttackers can exploit this weakness to expose sensitive data, execute port scanning on the server side, or launch a denial-of-service attack (DoS) such as Billion Laughs.\n\n## Best practices for prevention\n* When possible, disable loading of data from external entities. The method of doing this will vary based on the language and XML parser being used.\n* Use a local, static document type definitions (DTDs) and ensure that external DTDs are disallowed entirely.\n* If user input cannot be avoided, perform validation against an allowlist of possible data sources. However, as long as external DTDs are allowed, XML code remains inherently vulnerable to attacks exploiting this weakness.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "XXE",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Evolveum/midpoint/commit/18c5f460c064a7d1fd6fc23117fffee4c535b836?diff=split#diff-582822e2b0e2222762716e69706db01a87546a14a5e6e8fd9e62358fea595dbbL-1",
                    "lines": [
                      {
                        "line": "\t\t\treturn loader.parse(file);\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t} catch (SAXException | IOException | ParserConfigurationException ex) {\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tthrow new IllegalStateException(\"Error parsing XML document \" + ex.getMessage(),ex);\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic static Document parse(InputStream inputStream) throws IOException {\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttry {\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setNamespaceAware(true);\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// voodoo to turn off reading of DTDs during parsing. This is needed e.g. to pre-parse schemas\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setValidating(false);\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://xml.org/sax/features/validation\", false);\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\", false);\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// XXE\n",
                        "lineNumber": 272,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n",
                        "lineNumber": 273,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n",
                        "lineNumber": 274,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n",
                        "lineNumber": 275,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n",
                        "lineNumber": 276,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setXIncludeAware(false);\n",
                        "lineNumber": 277,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setExpandEntityReferences(false);\n",
                        "lineNumber": 278,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jfree/jfreechart/commit/c1effea7fe2cdc3dd39f3c8bf8d402cecf3d2421?diff=split#diff-28135f96a28cfa5498e33aac3f4d9871b69209a03d8de0d79f9e5148c39af65dL-1",
                    "lines": [
                      {
                        "line": "import javax.xml.XMLConstants;\r\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.xml.parsers.ParserConfigurationException;\r\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.xml.parsers.SAXParser;\r\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.xml.parsers.SAXParserFactory;\r\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.jfree.data.category.CategoryDataset;\r\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.jfree.data.general.PieDataset;\r\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.xml.sax.SAXException;\r\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.xml.sax.SAXNotRecognizedException;\r\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "import org.xml.sax.SAXNotSupportedException;\r\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\r\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": " * A utility class for reading datasets from XML.\r\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\r\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class DatasetReader {\r\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t/** A factory for creating new parser instances. */\r\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "    static SAXParserFactory factory;\r\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * Returns the {@link SAXParserFactory} used to create {@link SAXParser} instances.\r\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * \r\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * @return The {@link SAXParserFactory} (never {@code null}).\r\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "    public static SAXParserFactory getSAXParserFactory() {\r\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \tif (factory == null) {\r\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \t\tSAXParserFactory f = SAXParserFactory.newInstance();\r\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\ttry {\r\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\tf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\r\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t        f.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\r\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t        factory = f;\r\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t} catch (SAXNotRecognizedException e) {\r\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\tthrow new RuntimeException(e);\r\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t} catch (SAXNotSupportedException e) {\r\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\tthrow new RuntimeException(e);\r\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t} catch (ParserConfigurationException e) {\r\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\tthrow new RuntimeException(e);\r\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t}\r\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \t}\r\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return factory;\r\n",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\r\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \r\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * Sets the SAXParserFactory that will be used to create SAXParser instances.  \r\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * You would only call this method if you wish to configure a new factory because\r\n",
                        "lineNumber": 93,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * the default does not meet requirements.\r\n",
                        "lineNumber": 94,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * \r\n",
                        "lineNumber": 95,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * @param f  the new factory ({@code null} not permitted).\r\n",
                        "lineNumber": 96,
                        "lineChange": "added"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "    public static void setSAXParserFactory(SAXParserFactory f) {\r\n",
                        "lineNumber": 98,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \tArgs.nullNotPermitted(f, \"f\");\r\n",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "        factory = f;\r\n",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\r\n",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Reads a {@link PieDataset} from an XML file.\r\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @param file  the file.\r\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return A dataset.\r\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @throws IOException if there is a problem reading the file.\r\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public static PieDataset readPieDatasetFromXML(File file)\r\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            throws IOException {\r\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream in = new FileInputStream(file);\r\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return readPieDatasetFromXML(in);\r\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\r\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Reads a {@link PieDataset} from a stream.\r\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @param in  the input stream.\r\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return A dataset.\r\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @throws IOException if there is an I/O error.\r\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public static PieDataset readPieDatasetFromXML(InputStream in)\r\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "             throws IOException {\r\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "PieDataset result = null;\r\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "SAXParserFactory factory = SAXParserFactory.newInstance();\r\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {\r\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SAXParser parser = factory.newSAXParser();\r\n",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    SAXParser parser = getSAXParserFactory().newSAXParser();\r\n",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "    PieDatasetHandler handler = new PieDatasetHandler();\r\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parser.parse(in, handler);\r\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    result = handler.getDataset();\r\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\r\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "catch (SAXException e) {\r\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(e.getMessage());\r\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\r\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "catch (ParserConfigurationException e2) {\r\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(e2.getMessage());\r\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\r\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return result;\r\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\r\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Reads a {@link CategoryDataset} from a file.\r\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @param file  the file.\r\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return A dataset.\r\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @throws IOException if there is a problem reading the file.\r\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public static CategoryDataset readCategoryDatasetFromXML(File file)\r\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "            throws IOException {\r\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream in = new FileInputStream(file);\r\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return readCategoryDatasetFromXML(in);\r\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\r\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Reads a {@link CategoryDataset} from a stream.\r\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @param in  the stream.\r\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return A dataset.\r\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @throws IOException if there is a problem reading the file.\r\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public static CategoryDataset readCategoryDatasetFromXML(InputStream in)\r\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            throws IOException {\r\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        CategoryDataset result = null;\r\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "        SAXParserFactory factory = SAXParserFactory.newInstance();\r\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {\r\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SAXParser parser = factory.newSAXParser();\r\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "CategoryDatasetHandler handler = new CategoryDatasetHandler();\r\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "parser.parse(in, handler);\r\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/eclipse/kura/commit/09d8de558780e70fc1d607146e934ee523b49760?diff=split#diff-6bc43c192fffb098adbf191ad41a5abf3c8039e813edbe60688d9410fd95aa22L-1",
                    "lines": [
                      {
                        "line": "            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n",
                        "lineNumber": 138,
                        "lineChange": "added"
                      },
                      {
                        "line": "            dbf.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n",
                        "lineNumber": 139,
                        "lineChange": "added"
                      },
                      {
                        "line": "            dbf.setXIncludeAware(false);\n",
                        "lineNumber": 140,
                        "lineChange": "added"
                      },
                      {
                        "line": "            dbf.setExpandEntityReferences(false);\n",
                        "lineNumber": 141,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 142,
                        "lineChange": "added"
                      },
                      {
                        "line": "            DocumentBuilder db = dbf.newDocumentBuilder();\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Document doc = db.parse(connection.getInputStream());\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 23,
                "cwe": [
                  "CWE-611"
                ]
              }
            },
            {
              "id": "java/XXE/test",
              "name": "XXE/test",
              "shortDescription": {
                "text": "XML External Entity (XXE) Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nFor convenience, XML documents can use system identifiers to enable access to stored content, whether local or remote. The XML processor then uses the system identifier to access the resource rather than using the URI. When this weakness exists, the application permits user-supplied data, which could include the address of an XML external identity, to be passed directly to the XML parser. The application will then attempt to retrieve documents from outside of secure, controlled areas.\n\nAttackers can exploit this weakness to expose sensitive data, execute port scanning on the server side, or launch a denial-of-service attack (DoS) such as Billion Laughs.\n\n## Best practices for prevention\n* When possible, disable loading of data from external entities. The method of doing this will vary based on the language and XML parser being used.\n* Use a local, static document type definitions (DTDs) and ensure that external DTDs are disallowed entirely.\n* If user input cannot be avoided, perform validation against an allowlist of possible data sources. However, as long as external DTDs are allowed, XML code remains inherently vulnerable to attacks exploiting this weakness.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "XXE",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Evolveum/midpoint/commit/18c5f460c064a7d1fd6fc23117fffee4c535b836?diff=split#diff-582822e2b0e2222762716e69706db01a87546a14a5e6e8fd9e62358fea595dbbL-1",
                    "lines": [
                      {
                        "line": "\t\t\treturn loader.parse(file);\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t} catch (SAXException | IOException | ParserConfigurationException ex) {\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tthrow new IllegalStateException(\"Error parsing XML document \" + ex.getMessage(),ex);\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic static Document parse(InputStream inputStream) throws IOException {\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttry {\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setNamespaceAware(true);\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// voodoo to turn off reading of DTDs during parsing. This is needed e.g. to pre-parse schemas\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setValidating(false);\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://xml.org/sax/features/validation\", false);\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\", false);\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// XXE\n",
                        "lineNumber": 272,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n",
                        "lineNumber": 273,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n",
                        "lineNumber": 274,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n",
                        "lineNumber": 275,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n",
                        "lineNumber": 276,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setXIncludeAware(false);\n",
                        "lineNumber": 277,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfactory.setExpandEntityReferences(false);\n",
                        "lineNumber": 278,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jfree/jfreechart/commit/c1effea7fe2cdc3dd39f3c8bf8d402cecf3d2421?diff=split#diff-28135f96a28cfa5498e33aac3f4d9871b69209a03d8de0d79f9e5148c39af65dL-1",
                    "lines": [
                      {
                        "line": "import javax.xml.XMLConstants;\r\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.xml.parsers.ParserConfigurationException;\r\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.xml.parsers.SAXParser;\r\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.xml.parsers.SAXParserFactory;\r\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.jfree.data.category.CategoryDataset;\r\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.jfree.data.general.PieDataset;\r\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.xml.sax.SAXException;\r\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.xml.sax.SAXNotRecognizedException;\r\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "import org.xml.sax.SAXNotSupportedException;\r\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\r\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": " * A utility class for reading datasets from XML.\r\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\r\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class DatasetReader {\r\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t/** A factory for creating new parser instances. */\r\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "    static SAXParserFactory factory;\r\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * Returns the {@link SAXParserFactory} used to create {@link SAXParser} instances.\r\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * \r\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * @return The {@link SAXParserFactory} (never {@code null}).\r\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "    public static SAXParserFactory getSAXParserFactory() {\r\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \tif (factory == null) {\r\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \t\tSAXParserFactory f = SAXParserFactory.newInstance();\r\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\ttry {\r\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\tf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\r\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t        f.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\r\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t        factory = f;\r\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t} catch (SAXNotRecognizedException e) {\r\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\tthrow new RuntimeException(e);\r\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t} catch (SAXNotSupportedException e) {\r\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\tthrow new RuntimeException(e);\r\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t} catch (ParserConfigurationException e) {\r\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\tthrow new RuntimeException(e);\r\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t}\r\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \t}\r\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return factory;\r\n",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\r\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \r\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * Sets the SAXParserFactory that will be used to create SAXParser instances.  \r\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * You would only call this method if you wish to configure a new factory because\r\n",
                        "lineNumber": 93,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * the default does not meet requirements.\r\n",
                        "lineNumber": 94,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * \r\n",
                        "lineNumber": 95,
                        "lineChange": "added"
                      },
                      {
                        "line": "     * @param f  the new factory ({@code null} not permitted).\r\n",
                        "lineNumber": 96,
                        "lineChange": "added"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "    public static void setSAXParserFactory(SAXParserFactory f) {\r\n",
                        "lineNumber": 98,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \tArgs.nullNotPermitted(f, \"f\");\r\n",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "        factory = f;\r\n",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\r\n",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Reads a {@link PieDataset} from an XML file.\r\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @param file  the file.\r\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return A dataset.\r\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @throws IOException if there is a problem reading the file.\r\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public static PieDataset readPieDatasetFromXML(File file)\r\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            throws IOException {\r\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream in = new FileInputStream(file);\r\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return readPieDatasetFromXML(in);\r\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\r\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Reads a {@link PieDataset} from a stream.\r\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @param in  the input stream.\r\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return A dataset.\r\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @throws IOException if there is an I/O error.\r\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public static PieDataset readPieDatasetFromXML(InputStream in)\r\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "             throws IOException {\r\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "PieDataset result = null;\r\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "SAXParserFactory factory = SAXParserFactory.newInstance();\r\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {\r\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SAXParser parser = factory.newSAXParser();\r\n",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    SAXParser parser = getSAXParserFactory().newSAXParser();\r\n",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "    PieDatasetHandler handler = new PieDatasetHandler();\r\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parser.parse(in, handler);\r\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    result = handler.getDataset();\r\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\r\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "catch (SAXException e) {\r\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(e.getMessage());\r\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\r\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "catch (ParserConfigurationException e2) {\r\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(e2.getMessage());\r\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\r\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return result;\r\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\r\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Reads a {@link CategoryDataset} from a file.\r\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @param file  the file.\r\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return A dataset.\r\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @throws IOException if there is a problem reading the file.\r\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public static CategoryDataset readCategoryDatasetFromXML(File file)\r\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "            throws IOException {\r\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream in = new FileInputStream(file);\r\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return readCategoryDatasetFromXML(in);\r\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\r\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\r\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Reads a {@link CategoryDataset} from a stream.\r\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @param in  the stream.\r\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return A dataset.\r\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\r\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @throws IOException if there is a problem reading the file.\r\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\r\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public static CategoryDataset readCategoryDatasetFromXML(InputStream in)\r\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            throws IOException {\r\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        CategoryDataset result = null;\r\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "        SAXParserFactory factory = SAXParserFactory.newInstance();\r\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {\r\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SAXParser parser = factory.newSAXParser();\r\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "CategoryDatasetHandler handler = new CategoryDatasetHandler();\r\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "parser.parse(in, handler);\r\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/eclipse/kura/commit/09d8de558780e70fc1d607146e934ee523b49760?diff=split#diff-6bc43c192fffb098adbf191ad41a5abf3c8039e813edbe60688d9410fd95aa22L-1",
                    "lines": [
                      {
                        "line": "            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n",
                        "lineNumber": 138,
                        "lineChange": "added"
                      },
                      {
                        "line": "            dbf.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n",
                        "lineNumber": 139,
                        "lineChange": "added"
                      },
                      {
                        "line": "            dbf.setXIncludeAware(false);\n",
                        "lineNumber": 140,
                        "lineChange": "added"
                      },
                      {
                        "line": "            dbf.setExpandEntityReferences(false);\n",
                        "lineNumber": 141,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 142,
                        "lineChange": "added"
                      },
                      {
                        "line": "            DocumentBuilder db = dbf.newDocumentBuilder();\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Document doc = db.parse(connection.getInputStream());\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 23,
                "cwe": [
                  "CWE-611"
                ]
              }
            },
            {
              "id": "java/NonCryptoHardcodedSecret/test",
              "name": "NonCryptoHardcodedSecret/test",
              "shortDescription": {
                "text": "Use of Hardcoded, Security-relevant Constants"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n* Never hard code security-related constants; use symbolic names or configuration lookup files.\n* As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n* Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "NonCryptoHardcodedSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tulaoda/shandianpaopao/commit/1e2ffaffdc5e1f20d89268237c9e6a741644528d?diff=split#diff-0acf6bcafe86b10f2d48f5702ba55f8587dd4c1e5c6724786b99bd056425a127L-1",
                    "lines": [
                      {
                        "line": "String wxspAppid = \"wxc4c6ab37b0d79d8b\";\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String wxspAppid = Constant.APP_ID;\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "//小程序的 app secret (在微信小程序管理后台获取)\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "String wxspSecret = \"6ede70b3af433549cb921077a531ae18\";\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String wxspSecret = Constant.APP_SECRET;\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/codeka/weather/commit/993ad273e475d16df1029bfd5c9a42e80bfdf3e4?diff=split#diff-ef1202ca8d5c5972373553ba53d84a5e7d32e637652a3cb2b1b602bd072e842dL-1",
                    "lines": [
                      {
                        "line": "private static final String API_KEY = \"094ceebb0893481d\";\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private static final String API_KEY = BuildConfig.WUNDERGROUND_API_KEY;\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/longfeizheng/security-oauth2/commit/5b8659a33e42db71d916d2239116f58658aa7d5f?diff=split#diff-bd9bc7dcdbd3e9e2ee70d524baf89883cd6f7f360255aab53dad8c52c30170dcL-1",
                    "lines": [
                      {
                        "line": "Claims claims = Jwts.parser().setSigningKey(\"merryyou\".getBytes(\"UTF-8\")).parseClaimsJws(token).getBody();\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Claims claims = Jwts.parser().setSigningKey(oAuth2Properties.getJwtSigningKey().getBytes(\"UTF-8\")).parseClaimsJws(token).getBody();\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 52,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "java/Reflection",
              "name": "Reflection",
              "shortDescription": {
                "text": "Unsafe Reflection"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nA number of modern programming languages have attempted to introduce efficiencies into the development process by introducing reflection, which allows code to dynamically examine or even modify code-including itself-as required based on runtime conditions. This creates great flexibility but must be leveraged correctly to avoid introducing risk. When this weakness exists, the user is able to transmit values to the server that are then used to select unintended classes or methods.\n\nThis could modify the control flow of the application leading to unpredictable behavior, including bypassing authentication and adding malicious behaviors. In Java, for example, unsafe reflection has typically been the primary way for attackers to bypass sandboxing security mechanisms and execute malicious code.\n\n## Best practices for prevention\n\n* Many developers suggest avoiding the use of reflection altogether.\n* Never trust user input. In this case, do not use user-supplied inputs for selecting or loading classes or code.\n* Because an attacker could supply such a broad range of parameters in a brute-force attempt to exploit this weakness, consider adopting an \"accept-known-good\" strategy: limiting input to an allowlist of acceptable classes or code where possible rather than attempting to sanitize input of all possible attack types.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "Reflection",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-470"
                ]
              }
            },
            {
              "id": "java/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Gepardec/Hogarama/commit/7b532d9240eb2e7a059539e419ea218c22a5b0f5?diff=split#diff-db19dfe0e7a0c625c6e48b0d94c04add219239f2f63cf6f2674dd962e92e8ff2L-1",
                    "lines": [
                      {
                        "line": "\tprivate static final char[] PASSWORD = \"hogajama@mongodb\".toCharArray();\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tprivate static final char[] PASSWORD = System.getProperty(\"MONGODB_PW\").toCharArray();\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tprivate static final int PORT = 27017;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate static final String COLLECTION = \"habarama\";\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate static final String HOST = System.getProperty(\"mongo.host\", \"mongodb\");\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Produces \n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic Datastore datastore() {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMongoClient mongoClient = getClient();\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMorphia morphia = new Morphia();\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmorphia.mapPackage(\"com.gepardec.hogarama.domain\");\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tDatastore datastore = morphia.createDatastore(mongoClient, MongoDbProducer.HOGAJAMA_DB);\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tdatastore.ensureIndexes();\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn datastore;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Produces \n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic DBCollection collection() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMongoClient mongoClient = getClient();\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tDB db = mongoClient.getDB(HOGAJAMA_DB);\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn db.getCollection(COLLECTION);\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate MongoClient getClient() {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMongoCredential credential = MongoCredential.createCredential(USER, HOGAJAMA_DB, PASSWORD);\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/xfifix/SEO_REPO/commit/4807500fee6a392ed64f66bc4dfe38d103bdb64e?diff=split#diff-9873c5adc0806eb5d51fdefea3f0460c6fc28b67d21ce7380f6c9cd52770b250L-1",
                    "lines": [
                      {
                        "line": "\t\t//\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t//\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t//\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t//\t\t\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url=\"jdbc:postgresql://localhost/KEYWORDSDB\";\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString user=\"postgres\";\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString passwd=\"mogette\";\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// Instantiating the database\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tConnection con = null;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tPreparedStatement pst = null;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// the csv file variables\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tResultSet rs = null;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttry {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcon = DriverManager.getConnection(url, user, passwd);\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/xfifix/SEO_REPO/commit/4807500fee6a392ed64f66bc4dfe38d103bdb64e?diff=split#diff-a3dca6ec48a4147bea68835a9da60df6ca08a8bff0c47e1eff8ce86c6a1c601fL-1",
                    "lines": [
                      {
                        "line": "//\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\t\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url=\"jdbc:postgresql://localhost/KEYWORDSDB\";\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString user=\"postgres\";\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString passwd=\"mogette\";\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// Instantiating the database\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tConnection con = null;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tPreparedStatement pst = null;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// the csv file variables\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tResultSet rs = null;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttry {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcon = DriverManager.getConnection(url, user, passwd);\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 65,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "TooPermissiveTrustManager",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "java/DisablesCSRFProtection",
              "name": "DisablesCSRFProtection",
              "shortDescription": {
                "text": "Cross-Site Request Forgery (CSRF)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\n## Best practices for prevention\n* Use development frameworks that defend against CSRF, using a nonce, hash, or some other security device to the URL and/or to forms.\n* Implement secure, unique, hidden tokens that are checked by the server each time to validate state-change requests.\n* Never assume that authentication tokens and session identifiers mean a request is legitimate.\n* Understand and implement other safe-cookie techniques, such as double submit cookies.\n* Terminate user sessions when not in use, including automatic timeout.\n* Ensure rigorous coding practices and defenses against other commonly exploited CWEs, since cross-site scripting (XSS), for example, can be used to bypass defenses against CSRF.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "DisablesCSRFProtection",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/hocgin/SpringBoot-CMS/commit/ca9c4230ea0798354ec5daa74721c0ff10964997?diff=split#diff-9b1a54996a1ac9ec5ce8e59a5a2e16e9bd07b2cc0bf0c81c25fccdffcd426f65L-1",
                    "lines": [
                      {
                        "line": "http.antMatcher(\"/**\")\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "        .exceptionHandling()\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "        .authenticationEntryPoint(new IWebUnauthorizedEntryPoint()).and()\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        .csrf().disable() //TODO 临时关闭, 调试\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        .csrf().and()\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blackducksoftware/blackduck-alert/commit/bd5da4c01f8a11a0b3219180a7f9cd899bbc999e?diff=split#diff-4a764a20aa4d81721b3ba9c25ca03615286b91d5147fe7b715f0a1b399c37420L-1",
                    "lines": [
                      {
                        "line": "        http.csrf().disable().authorizeRequests().antMatchers(allowedPaths).permitAll()\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        final String[] csrfIgnoredPaths = {\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/\",\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/#\",\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/favicon.ico\",\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/fonts/**\",\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/js/bundle.js\",\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/js/bundle.js.map\",\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"/css/style.css\",\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "                \"index.html\",\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "                BaseController.BASE_PATH + \"/login\",\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "                BaseController.BASE_PATH + \"/verify\",\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "                BaseController.BASE_PATH + \"/about\" };\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "        http.csrf().csrfTokenRepository(csrfTokenRepository).ignoringAntMatchers(csrfIgnoredPaths)\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .and().authorizeRequests().antMatchers(allowedPaths).permitAll()\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mraible/java-webapp-security-examples/commit/1ae83aeb6975a107dcdb616eeae63bc846fcadaf?diff=split#diff-b8cb20d5732c784ae693cb1cd9ecb813e912a21fe570c581998875276a2a642dL-1",
                    "lines": [
                      {
                        "line": "http\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .csrf().disable()\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    .csrf().and()\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 69,
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "java/UserControlledFormatString",
              "name": "UserControlledFormatString",
              "shortDescription": {
                "text": "Use of Externally-Controlled Format String"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSimilar to SQL injection and other injection-type weaknesses, a format string weakness is one in which the user is able to control the application's execution by supplying unexpected input. In this case, the input string is passed directly from the user to a format function such as printf (this weakness appears primarily in C-type languages).\n\nFormat functions were originally designed to provide more flexible output options through specified parameters. However, if input is passed directly from the user to the site or application without sanitization, an attacker may add special characters that will then be interpreted as formatting parameters, causing the application to behave unpredictably, read/write in unauthorized memory locations, crash, or even permit the attacker to execute commands. Since format functions with this weakness may behave exactly like properly coded format functions (until the weakness is exploited), it may be difficult to identify with standard testing.\n\n## Best practices for prevention\n* Implement constraints for user input wherever possible (permitted length, special characters, etc.).\n* Always perform input validation; never pass user data directly to the application.\n* Avoid single-parameter calls to format functions. Always pass a format-specifying parameter, ideally one that is not user-controlled, to the format function in addition to the text output. Never allow user-controlled input to be the only parameter passed.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "UserControlledFormatString",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-134"
                ]
              }
            },
            {
              "id": "java/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "XSS",
                  "Security",
                  "InTest",
                  "SourceHttpBody",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/clafonta/Mockey/commit/020ba75aef7b10b1d40cc210cf9251912f72e31a?diff=split#diff-47753d0273d9aac8e8d34d07580830b58698ae2cd2b387a021977e9ecd1c638fL-1",
                    "lines": [
                      {
                        "line": "\t\t        resp.setContentType(\"application/json\");\n",
                        "lineNumber": 306,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\tPrintWriter out = resp.getWriter();\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tString msg = \"Service plan \" + servicePlan.getName() + \" saved\";\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t// HACK: For redirect IF JavaScript decides to (if type is not\n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t// JSON)\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tif (!\"json\".equalsIgnoreCase(req.getParameter(API_SETPLAN_PARAMETER_TYPE))) {\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\tUtil.saveSuccessMessage(msg, req);\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t}\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t// JSON response\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tJSONObject jsonObject = new JSONObject();\n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tjsonObject.put(\"success\", msg);\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tjsonObject.put(\"planid\", \"\" + savedServicePlan.getId());\n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tjsonObject.put(\"planName\", \"\" + savedServicePlan.getName());\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tjsonResultObject.put(\"result\", jsonObject);\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tout.println(jsonResultObject.toString());\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ctron/package-drone/commit/5ef92a7bab0d6943239e12fc0eeca39f73b5e67a?diff=split#diff-89b983f4d57516b117f9117a66fb26cec32bb80e19f8490d9543c7ef45030899L-1",
                    "lines": [
                      {
                        "line": "response.setContentType ( \"text/plain\" );\n",
                        "lineNumber": 150,
                        "lineChange": "added"
                      },
                      {
                        "line": "response.getWriter ().format ( \"Channel %s not found\", channelId );\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/oracle/opengrok/commit/3ea25b76059c8f4891b04032915f28b433b9d6bd?diff=split#diff-7999331a5167ce439062921b37d0bedc26d377e1c0d62f9ff14a1d8e875bd6b4L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            resp.setContentType(\"application/json\");\n",
                        "lineNumber": 155,
                        "lineChange": "added"
                      },
                      {
                        "line": "            resp.getWriter().write(result.toString());\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 24,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "java/SpringCSRF/test",
              "name": "SpringCSRF/test",
              "shortDescription": {
                "text": "Spring Cross-Site Request Forgery (CSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.\n\n## Best practices for prevention\n* Use a vetted library or framework which has anti-CSRF packages that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Consider including Spring Security library within your application.\n\n\n## References\n* [Spring Security Docs](https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html)\n* [A Guide to CSRF Protection in Spring Security](https://www.baeldung.com/spring-security-csrf)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "SpringCSRF",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "java/TLS",
              "name": "TLS",
              "shortDescription": {
                "text": "Inadequate Encryption Strength"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n## Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "TLS",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/aws-amplify/aws-sdk-android/commit/b58973df44347c971023f8b87812f9278c1caab2?diff=split#diff-ad4be49511cb480e12b110fdedc423600f27dec409db515519acc55bfa1e9ed0L-1",
                    "lines": [
                      {
                        "line": "final SSLContext context = SSLContext.getInstance(\"TLSv1\");\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "final SSLContext context = SSLContext.getInstance(\"TLSv1.2\");\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/igniterealtime/Openfire/commit/e33ed6b6a91b53856521197f8bf2fc89ee25512a?diff=split#diff-080d3c608f037e44c81caac827efa48875f563dd5fefb634bb2b7e9e03b51e63L-1",
                    "lines": [
                      {
                        "line": "final SSLContext sslContext = SSLContext.getInstance(\"TLSv1\");\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "final SSLContext sslContext = SSLContext.getInstance(\"TLSv1.2\");\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/igniterealtime/Openfire/commit/47edb369dea77bfae1cb8b9f82a9435edff8294d?diff=split#diff-080d3c608f037e44c81caac827efa48875f563dd5fefb634bb2b7e9e03b51e63L-1",
                    "lines": [
                      {
                        "line": "final SSLContext sslContext = SSLContext.getInstance(\"TLSv1\");\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "final SSLContext sslContext = SSLContext.getInstance(\"TLSv1.2\");\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-326"
                ]
              }
            },
            {
              "id": "java/HardcodedSecret/test",
              "name": "HardcodedSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "HardcodedSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/aberic/fabric-net-server/commit/963bb9fe026b454672fb83fd739f3d754b6844e1?diff=split#diff-9d304ac28cc0feb031d1bde8598ac8de9156b18f56406259c258d9620615fe8dL-1",
                    "lines": [
                      {
                        "line": "app.setPublicKey(\"pub1\");\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.setPrivateKey(\"pri1\");\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Key key = Utils.obtain().createECCDSAKeyPair(keyPath);\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (null == key) {\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return 0;\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.setPublicKey(key.getPublicKey());\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.setPrivateKey(key.getPrivateKey());\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Talend/tcommon-studio-se/commit/d95d058e7560d27ad58d43cf7d0be4731582230c?diff=split#diff-49b91a9d900560ad716dc4cb80065066261a7c13294cf8be280afc4c5125f69eL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            byte rawKeyData[] = RAWKEY.getBytes();\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            byte rawKeyData[] = StudioEncryption.getKeySource(StudioEncryption.EncryptionKeyName.MIGRATION.name(), false)\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "                    .getKey();\n",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "            DESKeySpec dks = new DESKeySpec(rawKeyData);\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bulktrade/SMSC/commit/a28a9bf2a975e27ad7ccecce47588fe1a57659f3?diff=split#diff-d61a5e31effad4932c402c2638bba72d6d72eda975f375bf21ce055846a911d9L-1",
                    "lines": [
                      {
                        "line": "Key key = new SecretKeySpec(KEY, \"AES\");\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Key key = new SecretKeySpec(secretKey.getBytes(), \"AES\");\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 26,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "kotlin/DisablesCSRFProtection",
              "name": "DisablesCSRFProtection",
              "shortDescription": {
                "text": "Cross-Site Request Forgery (CSRF)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\n## Best practices for prevention\n* Use development frameworks that defend against CSRF, using a nonce, hash, or some other security device to the URL and/or to forms.\n* Implement secure, unique, hidden tokens that are checked by the server each time to validate state-change requests.\n* Never assume that authentication tokens and session identifiers mean a request is legitimate.\n* Understand and implement other safe-cookie techniques, such as double submit cookies.\n* Terminate user sessions when not in use, including automatic timeout.\n* Ensure rigorous coding practices and defenses against other commonly exploited CWEs, since cross-site scripting (XSS), for example, can be used to bypass defenses against CSRF.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "kotlin",
                  "DisablesCSRFProtection",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "java/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "NoHardcodedCredentials",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "java/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "PT",
                  "Security",
                  "SourceResourceAccess",
                  "SourceArchive",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/hadoop/commit/1373e3d8ad60e4da721a292912cb69243bfdf470?diff=split#diff-66aa82c274f41b59e09661e4d60fbf9dcb3465c466c1af64ca9826876bbbcef4L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.OutputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.URI;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.UnknownHostException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Arrays;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Map;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Attributes;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.JarOutputStream;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Manifest;\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.GZIPInputStream;\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.collections.map.CaseInsensitiveMap;\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceAudience;\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceStability;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.conf.Configuration;\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsAction;\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsPermission;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.IOUtils;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.nativeio.NativeIO;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell.ShellCommandExecutor;\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.StringUtils;\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.Logger;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.LoggerFactory;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": " * A collection of file-processing util methods\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceAudience.Public\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceStability.Evolving\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final Logger LOG = LoggerFactory.getLogger(FileUtil.class);\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /* The error code is defined in winutils to indicate insufficient\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * privilege to create symbolic links. This value need to keep in\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * sync with the constant of the same name in:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \"src\\winutils\\common.h\"\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * */\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static final int SYMLINK_NO_PRIVILEGE = 2;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats) {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return null;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path[] ret = new Path[stats.length];\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i < stats.length; ++i) {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "      ret[i] = stats[i].getPath();\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ret;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path.\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If stats if null, return path\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param path\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          default path to return in stats is null\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats, Path path) {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new Path[]{path};\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stat2Paths(stats);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Register all files recursively to be deleted on exit.\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file File/directory to be deleted\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDeleteOnExit(final File file) {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "    file.deleteOnExit();\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (file.isDirectory()) {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] files = file.listFiles();\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File child : files) {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        fullyDeleteOnExit(child);\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir) {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDelete(dir, false);\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir the file or directory to be deleted\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions true if permissions should be modified to delete a file.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return true on success false on failure.\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir, boolean tryGrantPermissions) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // try to chmod +rwx the parent folder of the 'dir': \n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File parent = dir.getParentFile();\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(parent);\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteImpl(dir, false)) {\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // dir is (a) normal file, (b) symlink to a file, (c) empty directory or\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // (d) symlink to a directory\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // handle nonempty directory deletion\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!fullyDeleteContents(dir, tryGrantPermissions)) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deleteImpl(dir, true);\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns the target of the given symlink. Returns the empty string if\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * the given path does not refer to a symlink or there is an error\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * accessing the symlink.\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param f File representing the symbolic link.\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The target of the symbolic link, empty string on error or if not\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *         a symlink.\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String readLink(File f) {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /* NB: Use readSymbolicLink in java.nio.file.Path once available. Could\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * use getCanonicalPath in File to get the target of the symlink but that\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * does not indicate if the given path refers to a symlink.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return Shell.execCommand(\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Shell.getReadlinkCommand(f.toString())).trim();\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (IOException x) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return \"\";\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /*\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Pure-Java implementation of \"chmod +rwx f\".\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void grantPermissions(final File f) {\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setExecutable(f, true);\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setReadable(f, true);\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setWritable(f, true);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean deleteImpl(final File f, final boolean doLog) {\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f == null) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"null file argument.\");\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean wasDeleted = f.delete();\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (wasDeleted) {\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean ex = f.exists();\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (doLog && ex) {\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"Failed to delete file or dir [\"\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "          + f.getAbsolutePath() + \"]: it still exists.\");\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return !ex;\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir) {\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDeleteContents(dir, false);\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this \n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * and all the underlying directories before trying to delete their contents.\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir, final boolean tryGrantPermissions) {\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // to be able to list the dir and delete files from it\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // we must grant the dir rwx permissions: \n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(dir);\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean deletionSucceeded = true;\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final File[] contents = dir.listFiles();\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (contents != null) {\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!deleteImpl(contents[i], true)) {// normal file or symlink to another file\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue; // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Either directory or symlink to another directory.\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Try deleting the directory as this might be a symlink\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "          boolean b = false;\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "          b = deleteImpl(contents[i], false);\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (b){\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //this was indeed a symlink or an empty directory\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue;\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // if not an empty directory or symlink let\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // fullydelete handle it.\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!fullyDelete(contents[i], tryGrantPermissions)) {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deletionSucceeded;\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete a directory.\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param fs {@link FileSystem} on which the path is present\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir directory to recursively delete \n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @deprecated Use {@link FileSystem#delete(Path, boolean)}\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDelete(FileSystem fs, Path dir) \n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fs.delete(dir, true);\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // If the destination is a subdirectory of the source, then\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // generate exception\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void checkDependencies(FileSystem srcFS, \n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path src, \n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        FileSystem dstFS, \n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path dst)\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        throws IOException {\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcFS == dstFS) {\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String srcq = src.makeQualified(srcFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String dstq = dst.makeQualified(dstFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (dstq.startsWith(srcq)) {\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (srcq.length() == dstq.length()) {\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to itself.\");\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to its subdirectory \" +\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                dst);\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, src, dstFS, dst, deleteSource, true, conf);\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path[] srcs, \n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource, \n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite, Configuration conf)\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             throws IOException {\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean gotException = false;\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean returnVal = true;\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder exceptions = new StringBuilder();\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcs.length == 1)\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return copy(srcFS, srcs[0], dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Check if dest is directory\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!sdst.isDirectory()) \n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IOException(\"copying multiple files, but last argument `\" +\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              dst + \"' is not a directory\");\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "          \"`\" + dst + \"': specified destination directory \" +\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "              \"does not exist\", e);\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (Path src : srcs) {\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!copy(srcFS, src, dstFS, dst, deleteSource, overwrite, conf))\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "          returnVal = false;\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "        gotException = true;\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(e.getMessage());\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(\"\\n\");\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (gotException) {\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(exceptions.toString());\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return returnVal;\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus fileStatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, fileStatus, dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, overwrite);\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "      checkDependencies(srcFS, src, dstFS, dst);\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i], dstFS,\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new Path(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, overwrite, conf);\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in=null;\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out = null;\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = srcFS.open(src);\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst, overwrite);\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf, true);\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(out);\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(in);\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy all files in a directory to one output file (merge). */\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copyMerge(FileSystem srcFS, Path srcDir, \n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  FileSystem dstFS, Path dstFile, \n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  boolean deleteSource,\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  Configuration conf, String addString) throws IOException {\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dstFile = checkDest(srcDir.getName(), dstFS, dstFile, false);\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!srcFS.getFileStatus(srcDir).isDirectory())\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "   \n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OutputStream out = dstFS.create(dstFile);\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(srcDir);\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Arrays.sort(contents);\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "          InputStream in = srcFS.open(contents[i].getPath());\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "            IOUtils.copyBytes(in, out, conf, false);\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (addString!=null)\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "              out.write(addString.getBytes(\"UTF-8\"));\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } finally {\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "            in.close();\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } \n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "      out.close();\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(srcDir, true);\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }  \n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy local files to a FileSystem. */\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(File src,\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, false);\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (src.isDirectory()) {\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File contents[] = listFiles(src);\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(contents[i], dstFS, new Path(dst, contents[i].getName()),\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else if (src.isFile()) {\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = null;\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out =null;\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = new FileInputStream(src);\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst);\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf);\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( out );\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( in );\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(src.toString() + \n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            \": No such file or directory\");\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return FileUtil.fullyDelete(src);\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             File dst, boolean deleteSource,\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus filestatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, filestatus, dst, deleteSource, conf);\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              File dst, boolean deleteSource,\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              Configuration conf) throws IOException {\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dst.mkdirs()) {\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i],\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new File(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = srcFS.open(src);\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static Path checkDest(String srcName, FileSystem dstFS, Path dst,\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "      boolean overwrite) throws IOException {\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus sdst;\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = null;\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (null != sdst) {\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (sdst.isDirectory()) {\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (null == srcName) {\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new PathIsDirectoryException(dst.toString());\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return checkDest(null, dstFS, new Path(dst, srcName), overwrite);\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else if (!overwrite) {\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new PathExistsException(dst.toString(),\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \"Target \" + dst + \" already exists\");\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return dst;\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param filename The filename to convert\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(String filename) throws IOException {\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return filename;\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file) throws IOException {\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return makeShellPath(file, false);\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param makeCanonicalPath \n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          Whether to make canonical path for the file passed\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file, boolean makeCanonicalPath) \n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (makeCanonicalPath) {\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.getCanonicalPath());\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.toString());\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Takes an input dir and returns the du on that local directory. Very basic\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * implementation.\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          The input dir to get the disk space of this local dir\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The total disk space of the input local directory\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static long getDU(File dir) {\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "    long size = 0;\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.exists())\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return 0;\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.isDirectory()) {\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return dir.length();\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] allFiles = dir.listFiles();\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if(allFiles != null) {\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "         for (int i = 0; i < allFiles.length; i++) {\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "           boolean isSymLink;\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "           try {\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "           } catch(IOException ioe) {\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = true;\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "           if(!isSymLink) {\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "             size += getDU(allFiles[i]);\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "         }\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return size;\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Given a File input it will unzip the file in a the unzip directory\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * passed as the second parameter\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param inFile The zip file as input\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param unzipDir The unzip directory where to unzip the zip file.\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<? extends ZipEntry> entries;\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipFile zipFile = new ZipFile(inFile);\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n",
                        "lineNumber": 622,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "      entries = zipFile.entries();\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "      while (entries.hasMoreElements()) {\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!entry.isDirectory()) {\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 629,
                        "lineChange": "added"
                      },
                      {
                        "line": "          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n",
                        "lineNumber": 630,
                        "lineChange": "added"
                      },
                      {
                        "line": "            throw new IOException(\"expanding \" + entry.getName()\n",
                        "lineNumber": 631,
                        "lineChange": "added"
                      },
                      {
                        "line": "                + \" would create file outside of \" + unzipDir);\n",
                        "lineNumber": 632,
                        "lineChange": "added"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 633,
                        "lineChange": "added"
                      },
                      {
                        "line": "          InputStream in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!file.getParentFile().mkdirs()) {\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!file.getParentFile().isDirectory()) {\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throw new IOException(\"Mkdirs failed to create \" + \n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "                          file.getParentFile().toString());\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "OutputStream out = new FileOutputStream(file);\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mockingbot/react-native-zip-archive/commit/74da5ecb3c61e96374857e7aa77ff99948e34270?diff=split#diff-bd4e482df53115aae45520ce6a60abd8d76390dcd9ed817375e437b9c312a408L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.PrintWriter;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.StringWriter;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipInputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipOutputStream;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.exception.ZipException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.model.FileHeader;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.progress.ProgressMonitor;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class RNZipArchiveModule extends ReactContextBaseJavaModule {\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = RNZipArchiveModule.class.getSimpleName();\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final int BUFFER_SIZE = 4096;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String PROGRESS_EVENT_NAME = \"zipArchiveProgressEvent\";\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_FILENAME = \"filePath\";\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_PROGRESS = \"progress\";\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public RNZipArchiveModule(ReactApplicationContext reactContext) {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    super(reactContext);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getName() {\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return \"RNZipArchive\";\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void isPasswordProtected(final String zipFilePath, final Promise promise) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.resolve(zipFile.isEncrypted());\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (ZipException ex) {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.reject(null, String.format(\"Unable to check for encryption due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipWithPassword(final String zipFilePath, final String destDirectory,\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final String password, final Promise promise) {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "          net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (zipFile.isEncrypted()) {\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.setPassword(password);\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } else {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "            promise.reject(null, String.format(\"Zip file: %s is not password protected\", zipFilePath));\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List fileHeaderList = zipFile.getFileHeaders();\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List extractedFileNames = new ArrayList<>();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "          int totalFiles = fileHeaderList.size();\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "          for (int i = 0; i < totalFiles; i++) {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            FileHeader fileHeader = (FileHeader) fileHeaderList.get(i);\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.extractFile(fileHeader, destDirectory);\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fileHeader.isDirectory()) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "              extractedFileNames.add(fileHeader.getFileName());\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(i + 1, totalFiles, zipFilePath);\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(Arguments.fromList(extractedFileNames));\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (ZipException ex) {\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Failed to unzip file, due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzip(final String zipFilePath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Check the file exists\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileInputStream inputStream = null;\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "          inputStream = new FileInputStream(zipFilePath);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "          new File(zipFilePath);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (FileNotFoundException | NullPointerException e) {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (inputStream != null) {\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "              inputStream.close();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ignored) {\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Couldn't open file \" + zipFilePath + \". \");\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Find the total uncompressed size of every file in the zip, so we can\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // get an accurate progress measurement\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long totalUncompressedBytes = getUncompressedSize(zipFilePath);\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File destDir = new File(destDirectory);\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!destDir.exists()) {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destDir.mkdirs();\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // We use arrays here so we can update values\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // from inside the callback\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long[] extractedBytes = {0};\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final int[] lastPercentage = {0};\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final ZipFile zipFile = new ZipFile(zipFilePath);\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final Enumeration<? extends ZipEntry> entries = zipFile.entries();\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Log.d(TAG, \"Zip has \" + zipFile.size() + \" entries\");\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "          while (entries.hasMoreElements()) {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (entry.isDirectory()) continue;\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            StreamUtil.ProgressCallback cb = new StreamUtil.ProgressCallback() {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "              @Override\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "              public void onCopyProgress(long bytesRead) {\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                extractedBytes[0] += bytesRead;\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int lastTime = lastPercentage[0];\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int percentDone = (int) ((double) extractedBytes[0] * 100 / (double) totalUncompressedBytes);\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                // update at most once per percent.\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (percentDone > lastTime) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  lastPercentage[0] = percentDone;\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  updateProgress(extractedBytes[0], totalUncompressedBytes, zipFilePath);\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fout.exists()) {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "              (new File(fout.getParent())).mkdirs();\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "            InputStream in = null;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedOutputStream Bout = null;\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout = new BufferedOutputStream(new FileOutputStream(fout));\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "              StreamUtil.copy(in, Bout, cb);\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout.close();\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in.close();\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ex) {\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (in != null) {\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  in.close();\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (Bout != null) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  Bout.close();\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "          zipFile.close();\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(1, 1, zipFilePath); // force 100%\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(destDirectory);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (Exception ex) {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Failed to extract file \" + ex.getLocalizedMessage());\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a zip held in the assets directory.\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Note that the progress value isn't as accurate as when unzipping\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * from a file. When reading a zip from a stream, we can't\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * get accurate uncompressed sizes for files (ZipEntry#getCompressedSize() returns -1).\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Instead, we compare the number of bytes extracted to the size of the compressed zip file.\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * In most cases this means the progress 'stays on' 100% for a little bit (compressedSize < uncompressed size)\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipAssets(final String assetsPath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream assetsInputStream;\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final long size;\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "          assetsInputStream = getReactApplicationContext().getAssets().open(assetsPath);\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "          AssetFileDescriptor fileDescriptor = getReactApplicationContext().getAssets().openFd(assetsPath);\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "          size = fileDescriptor.getLength();\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (IOException e) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Asset file `%s` could not be opened\", assetsPath));\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File destDir = new File(destDirectory);\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!destDir.exists()) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "              destDir.mkdirs();\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipInputStream zipIn = new ZipInputStream(assetsInputStream);\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedInputStream bin = new BufferedInputStream(zipIn);\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipEntry entry;\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final long[] extractedBytes = {0};\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int[] lastPercentage = {0};\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(0, 1, assetsPath); // force 0%\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout;\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            while ((entry = zipIn.getNextEntry()) != null) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (entry.isDirectory()) continue;\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "              fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String destDirCanonicalPath = (new File(destDirectory)).getCanonicalPath();\n",
                        "lineNumber": 254,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String canonicalPath = fout.getCanonicalPath();\n",
                        "lineNumber": 255,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!canonicalPath.startsWith(destDirCanonicalPath)) {\n",
                        "lineNumber": 256,
                        "lineChange": "added"
                      },
                      {
                        "line": "                throw new Exception(String.format(\"Found Zip Path Traversal Vulnerability with %s\", canonicalPath));\n",
                        "lineNumber": 257,
                        "lineChange": "added"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 258,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 259,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!fout.exists()) {\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-7f1146763ff0eeee6320973b41ea444dd74b8bf7ee644cc135133047c1a430c6L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.charset.Charset;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.HashSet;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Properties;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Set;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.annotation.Nullable;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.tools.JavaFileObject;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Utilities for reading {@link com.google.devtools.j2objc.file.InputFile}s.\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": " *\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @author Tom Ball, Keith Stanger, Mike Thvedt, Tim Gao\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Set<String> tempDirs = new HashSet<>();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> sourcePathEntries = new ArrayList<>();\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> classPathEntries = new ArrayList<>();\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private File outputDirectory = new File(\".\");\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private String fileEncoding = System.getProperty(\"file.encoding\", \"UTF-8\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Charset charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setSourcePathEntries(List<String> sourcePathEntries) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.sourcePathEntries = sourcePathEntries;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getSourcePathEntries() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return sourcePathEntries;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void appendSourcePath(String entry) {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(entry);\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void insertSourcePath(int index, String entry) {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(index, entry);\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getClassPathEntries() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return classPathEntries;\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setOutputDirectory(File outputDirectory) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.outputDirectory = outputDirectory;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File getOutputDirectory() {\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!outputDirectory.exists()) {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "      outputDirectory.mkdirs();\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return outputDirectory;\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setFileEncoding(String fileEncoding) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.fileEncoding = fileEncoding;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getFileEncoding() {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fileEncoding;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Charset getCharset() {\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return charset;\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void addTempDir(String tempDir) {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tempDirs.add(tempDir);\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Set<String> getTempDirs() {\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tempDirs;\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(InputFile file) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = file.getBasename();\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(JavaFileObject file) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = file.getName();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = path.substring(path.lastIndexOf('/') + 1);\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static String removeFileSuffix(String basename) {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int end = basename.lastIndexOf(\".java\");\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (end == -1) {\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      end = basename.lastIndexOf(\".class\");\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return end != -1 ? basename.substring(0, end) : basename;\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getQualifiedMainTypeName(InputFile file, CompilationUnit unit) {\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String qualifiedName = getMainTypeName(file);\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PackageDeclaration packageDecl = unit.getPackage();\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (packageDecl != null) {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String packageName = packageDecl.getName().getFullyQualifiedName();\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "      qualifiedName = packageName + \".\" + qualifiedName;\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return qualifiedName;\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the source path,\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnSourcePath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, sourcePathEntries, \".java\");\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the class path,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnClassPath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, classPathEntries, \".class\");\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputFile findOnPaths(\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String qualifiedName, List<String> paths, String extension) throws IOException {\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String sourceFileName = qualifiedName.replace('.', File.separatorChar) + extension;\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Zip/jar files always use forward slashes.\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String jarEntryName = qualifiedName.replace('.', '/') + extension;\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (String pathEntry : paths) {\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File f = new File(pathEntry);\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (f.isDirectory()) {\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        RegularInputFile regularFile = new RegularInputFile(\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pathEntry + File.separatorChar + sourceFileName, sourceFileName);\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (regularFile.exists()) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return regularFile;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Assume it's a jar file\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        JarredInputFile jarFile = new JarredInputFile(pathEntry, jarEntryName);\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (jarFile.exists()) {\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return jarFile;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return null;\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String readFile(InputFile file) throws IOException {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return CharStreams.toString(file.openReader(charset));\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputStream streamForFile(String filename) throws IOException {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File f = new File(filename);\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f.exists()) {\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new FileInputStream(f);\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream stream = J2ObjC.class.getResourceAsStream(filename);\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (stream == null) {\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new FileNotFoundException(filename);\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stream;\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Reads the given properties file.\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(String resourceName) throws IOException {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return loadProperties(streamForFile(resourceName));\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(InputStream in) throws IOException {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Properties p = new Properties();\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "      p.load(in);\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return p;\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "      in.close();\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static File createTempDir(String dirname) throws IOException {\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File tmpDirectory = File.createTempFile(dirname, \".tmp\");\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.delete();\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!tmpDirectory.mkdir()) {\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\"Could not create tmp directory: \" + tmpDirectory.getPath());\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.deleteOnExit();\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tmpDirectory;\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete specified directory.\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void deleteTempDir(File dir) {\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO(cpovirk): try Directories.deleteRecursively if a c.g.c.unix dep is OK\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (dir != null && dir.exists()) {\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File f : dir.listFiles()) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (f.isDirectory()) {\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          deleteTempDir(f);\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "          f.delete();\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "      dir.delete();\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a ZipEntry to the specified directory.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File outputFile = new File(dir, entry.getName());\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File parentFile = outputFile.getParentFile();\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!parentFile.isDirectory() && !parentFile.mkdirs()) {\n",
                        "lineNumber": 245,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract file to \" + dir.getPath());\n",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)\n",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "        || (!parentFile.isDirectory() && !parentFile.mkdirs())) {\n",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());\n",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try (InputStream inputStream = zipFile.getInputStream(entry);\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 18,
                "cwe": [
                  "CWE-23"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "java/TooPermissiveHostnameVerifier",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "The verify method always returns true, which means that any hostname is accepted. Such behaviour is insecure.",
            "markdown": "The {0} method always returns {1}, which means that any hostname is accepted. Such behaviour is insecure.",
            "arguments": [
              "[verify](0)",
              "[true](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/SkipSslVerificationHttpRequestFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 18,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c273c2183023d2655de49e5d2b26d59724fec70a5c242e446dd9f748b443d558",
            "1": "cb724ed2.7703ba66.85365f17.e22980a8.0681ed2b.58c3080a.5b1ccecb.9c4228d3.cb724ed2.7703ba66.85365f17.e22980a8.0681ed2b.58c3080a.5b1ccecb.9c4228d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/SkipSslVerificationHttpRequestFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 18,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/SkipSslVerificationHttpRequestFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 11,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveCors",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "CORS policy \"*\" might be too permissive. This allows malicious code on other domains to communicate with the application, which is a security risk",
            "markdown": "{0} {1} might be too permissive. This allows malicious code on other domains to communicate with the application, which is a security risk",
            "arguments": [
              "[CORS policy](0)",
              "[\"*\"](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152,
                  "startColumn": 3,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6ebac3bcf0ee0d103aa201950e0100c7855b40f9b604856f9b03b3ae0f875172",
            "1": "19689298.77bdfc00.fc7d5400.e22980a8.0aeaf75d.c1ae4071.207e5c79.ae4e6f15.19689298.77bdfc00.fc7d5400.e22980a8.0aeaf75d.c1ae4071.207e5c79.ae4e6f15"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 3,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 38,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 302,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveCors",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "CORS policy \"*\" might be too permissive. This allows malicious code on other domains to communicate with the application, which is a security risk",
            "markdown": "{0} {1} might be too permissive. This allows malicious code on other domains to communicate with the application, which is a security risk",
            "arguments": [
              "[CORS policy](0)",
              "[\"*\"](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147,
                  "startColumn": 3,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "78e12c299ccf40a0d33a32f2ab894c64f2b3d3f4f42e27a258a9ad87887bc1ce",
            "1": "19689298.77bdfc00.fc7d5400.e22980a8.0aeaf75d.c1ae4071.207e5c79.ae4e6f15.19689298.77bdfc00.fc7d5400.e22980a8.0aeaf75d.c1ae4071.207e5c79.ae4e6f15"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 3,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 38,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 302,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-secure-custom/src/main/java/smoketest/web/secure/custom/SampleWebSecureCustomApplication.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 4,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a8be0baff38ade711d7a507f86c7adb8a482861229558e5b5b2a2dae7487f05c",
            "1": "b5099633.b1b899f8.13c31930.e22980a8.f2a5bca1.0d476878.7b4155dd.54d46e25.b5099633.b1b899f8.13c31930.32bd3632.f2a5bca1.0d476878.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-secure-custom/src/main/java/smoketest/web/secure/custom/SampleWebSecureCustomApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 4,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ShutdownSampleActuatorApplicationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 4,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "38b3b5726d0ef43909e2faad8863dfe5aca1251eae8a50ebaac4cf04f489f542",
            "1": "b5099633.b1b899f8.13c31930.e22980a8.f2a5bca1.0d476878.d6712bb3.54d46e25.b5099633.b1b899f8.13c31930.32bd3632.f2a5bca1.0d476878.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ShutdownSampleActuatorApplicationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 4,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-hazelcast/src/main/java/smoketest/session/hazelcast/SecurityConfiguration.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 3,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f21a8b79c36557bac257e3d84254c8808d95340e983c7c502da080c68e8dc8ba",
            "1": "b5099633.0268ef4f.13c31930.e22980a8.f2a5bca1.e9b03a32.e21af442.54d46e25.b5099633.0268ef4f.13c31930.32bd3632.f2a5bca1.2f2b5e39.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-hazelcast/src/main/java/smoketest/session/hazelcast/SecurityConfiguration.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-secure-jdbc/src/main/java/smoketest/web/secure/jdbc/SampleWebSecureJdbcApplication.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 4,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1315492bf17b2f79c4428105d3b5eb6156502107dc01a63cbf86e377b70e5224",
            "1": "b5099633.b1b899f8.13c31930.e22980a8.f2a5bca1.0d476878.7b4155dd.54d46e25.b5099633.b1b899f8.13c31930.32bd3632.f2a5bca1.0d476878.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-secure-jdbc/src/main/java/smoketest/web/secure/jdbc/SampleWebSecureJdbcApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 4,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-redis/src/main/java/smoketest/session/redis/SecurityConfiguration.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 3,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bd9ac474ad1471fa298d6742a82c2cd846f4d9942a7fa707379ac93658d4bd3f",
            "1": "b5099633.0268ef4f.13c31930.e22980a8.f2a5bca1.e9b03a32.e21af442.54d46e25.b5099633.0268ef4f.13c31930.32bd3632.f2a5bca1.2f2b5e39.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-redis/src/main/java/smoketest/session/redis/SecurityConfiguration.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-secure/src/test/java/smoketest/web/secure/SampleWebSecureApplicationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 4,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a3c389d8f2ae878c78f125b3b99c60f24777470c87b8a09753171bf4e0e824d0",
            "1": "b5099633.b1b899f8.13c31930.e22980a8.f2a5bca1.0d476878.7b4155dd.54d46e25.b5099633.b1b899f8.13c31930.32bd3632.f2a5bca1.0d476878.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-secure/src/test/java/smoketest/web/secure/SampleWebSecureApplicationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 4,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-mongo/src/main/java/smoketest/session/mongodb/SecurityConfiguration.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 3,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3149ab47c40b7e3ca8976d89c1a30971642a9fc3bc50bf18cb85007a4fd7ec9b",
            "1": "b5099633.0268ef4f.13c31930.e22980a8.f2a5bca1.e9b03a32.e21af442.54d46e25.b5099633.0268ef4f.13c31930.32bd3632.f2a5bca1.2f2b5e39.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-mongo/src/main/java/smoketest/session/mongodb/SecurityConfiguration.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/ManagementWebSecurityAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211,
                  "startColumn": 4,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "710c2eff883ce73d2225c83acab3be2ded71aab5b077ff53648fd07405048b40",
            "1": "9b8fafb9.b1b899f8.13c31930.e22980a8.f2a5bca1.e9b03a32.7b4155dd.54d46e25.9b8fafb9.b1b899f8.13c31930.32bd3632.f2a5bca1.2f2b5e39.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/servlet/ManagementWebSecurityAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 211,
                            "startColumn": 4,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-method-security/src/main/java/smoketest/security/method/SampleMethodSecurityApplication.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 4,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9e0ea1a054be9b6e2caae4e3c0aa229117735f9918ab3bfe8a46e0f532114cc1",
            "1": "b5099633.b1b899f8.13c31930.e22980a8.f2a5bca1.0d476878.7b4155dd.54d46e25.b5099633.b1b899f8.13c31930.32bd3632.f2a5bca1.0d476878.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-method-security/src/main/java/smoketest/security/method/SampleMethodSecurityApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 4,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-method-security/src/main/java/smoketest/security/method/SampleMethodSecurityApplication.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97,
                  "startColumn": 4,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "06893e647e86947d569751950ca0aefe65c1a4628c2eab761a2f1d3a0737b99a",
            "1": "b5099633.b1b899f8.13c31930.e22980a8.f2a5bca1.0d476878.d6712bb3.54d46e25.b5099633.b1b899f8.13c31930.32bd3632.f2a5bca1.0d476878.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-method-security/src/main/java/smoketest/security/method/SampleMethodSecurityApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 4,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/graphql/security/GraphQlWebFluxSecurityAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164,
                  "startColumn": 11,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "382bcd67ef597770039cc386247e8b2776e89d36adfba209c9382a1783e8d291",
            "1": "b5099633.0268ef4f.a224ef38.30877db4.f2a5bca1.0d476878.d6712bb3.54d46e25.b5099633.0268ef4f.b1578a41.30877db4.f54e7d72.0d476878.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/graphql/security/GraphQlWebFluxSecurityAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 164,
                            "endLine": 164,
                            "startColumn": 11,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-jdbc/src/main/java/smoketest/session/SecurityConfiguration.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 3,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "381d930eb7a01287503e1204eb1f2c6932d5323f779e0eae64f24997c34db13a",
            "1": "b5099633.0268ef4f.13c31930.e22980a8.f2a5bca1.e9b03a32.e21af442.54d46e25.b5099633.0268ef4f.13c31930.32bd3632.f2a5bca1.2f2b5e39.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-jdbc/src/main/java/smoketest/session/SecurityConfiguration.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-graphql/src/main/java/smoketest/graphql/SecurityConfig.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 10,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd3ec9af73910132db3b289aec7432c7212b0e3d313af644efe29de64747e2c8",
            "1": "b5099633.0268ef4f.13c31930.30877db4.f2a5bca1.0d476878.7b4155dd.54d46e25.b5099633.0268ef4f.13c31930.32bd3632.f2a5bca1.0d476878.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-graphql/src/main/java/smoketest/graphql/SecurityConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/graphql/security/GraphQlWebMvcSecurityAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 163,
                  "startColumn": 11,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ce10f907dccfa97a9b9b90f7857c15508f921b14f5a5da70e503b359ed604d00",
            "1": "99349e21.0268ef4f.a224ef38.30877db4.f2a5bca1.0d476878.7b4155dd.54d46e25.99349e21.98dbaec4.b1578a41.30877db4.f2a5bca1.0d476878.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/graphql/security/GraphQlWebMvcSecurityAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 11,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into org.springframework.util.FileCopyUtils.copy, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[org.springframework.util.FileCopyUtils.copy](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/spring-boot-server-tests-app/src/main/java/com/example/ResourceHandlingApplication.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 21,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c79bbaec7f3b59863902efe12e3e91dc595506cfeb732f9f68019336cc9c9e84",
            "1": "8df8fa68.8d55b20a.622565c7.6c52ae28.6bacdef5.0d476878.df7e59ba.203bd690.8df8fa68.7f413d6f.622565c7.af2aba3b.d31a8364.34c3b532.377b98a3.8da1dd01"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/spring-boot-server-tests-app/src/main/java/com/example/ResourceHandlingApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 45,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/spring-boot-server-tests-app/src/main/java/com/example/ResourceHandlingApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 45,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 33,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 33,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 4,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 11,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 19,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 8,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 40,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 4,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 368,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into org.springframework.util.FileCopyUtils.copy, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[org.springframework.util.FileCopyUtils.copy](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-devtools/src/intTest/java/com/example/DevToolsTestApplication.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "startColumn": 77,
                  "endColumn": 100
                }
              }
            }
          ],
          "fingerprints": {
            "0": "95f4ddb56d7b8351833e407938b6d2356a21922ffa24abfbc416605bbfbdce1e",
            "1": "8df8fa68.8d55b20a.622565c7.6c52ae28.6bacdef5.0d476878.df7e59ba.203bd690.8df8fa68.68936d96.4c4788d0.1243e009.025462d2.0d476878.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-devtools/src/intTest/java/com/example/DevToolsTestApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 101,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-devtools/src/intTest/java/com/example/DevToolsTestApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 101,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 33,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 33,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 4,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 11,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 19,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 8,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 40,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 4,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 368,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4)",
              "[mkdirs](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 7,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "688baef093808ac131ef5b2f797df9adada3565fe396eb9cbc7c3c5a6d9b75e9",
            "1": "19689298.83dbfe52.8828b72d.f9bdd8eb.75248ddf.41d8b89f.a204df5d.54d46e25.19689298.6b462316.2159a181.f9bdd8eb.d31a8364.7fda7c5e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 11,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 7,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 7,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[mkdirs](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95,
                  "startColumn": 7,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d3da17be052f565f02d8675546e0ae4e256edbc563b328ea34f5df7b63f605c6",
            "1": "19689298.83dbfe52.8828b72d.f9bdd8eb.75248ddf.41d8b89f.be04624c.54d46e25.19689298.6b462316.2159a181.f9bdd8eb.d31a8364.7fda7c5e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 11,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 7,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 7,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 7,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4)",
              "[mkdirs](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 192,
                  "endLine": 192,
                  "startColumn": 5,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "11ef72cfdea031f5649ae3b50d3c3f84aee5ee80002ba2817f367ae4f2ce8387",
            "1": "19689298.83dbfe52.8828b72d.f9bdd8eb.75248ddf.41d8b89f.a204df5d.54d46e25.3ab06a9f.2329d1ab.2159a181.f9bdd8eb.75248ddf.7fda7c5e.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 36,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 36,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 9,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 192,
                            "endLine": 192,
                            "startColumn": 5,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 192,
                            "endLine": 192,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[mkdirs](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 195,
                  "endLine": 195,
                  "startColumn": 5,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a47cda96324de4bbc7afadcc6e6f29e7f5c96edf98cbe18b05b915ff8dd8ec06",
            "1": "19689298.83dbfe52.8828b72d.f9bdd8eb.75248ddf.41d8b89f.be04624c.54d46e25.3ab06a9f.2329d1ab.2159a181.f9bdd8eb.d31a8364.7fda7c5e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 36,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 36,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 9,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 195,
                            "endLine": 195,
                            "startColumn": 5,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 195,
                            "endLine": 195,
                            "startColumn": 5,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 195,
                            "endLine": 195,
                            "startColumn": 5,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[mkdirs](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 4,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2e4c48ef5881c0aa5d65521c3252671661c5ca31905c8ba25111adef7c3c3a06",
            "1": "19689298.83dbfe52.8828b72d.e22980a8.34a0ab27.41d8b89f.6a5dff82.54d46e25.19689298.2329d1ab.2159a181.e22980a8.34a0ab27.41d8b89f.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 88,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 88,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 32,
                            "endColumn": 103
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 9,
                            "endColumn": 104
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 4,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 4,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 4,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4)",
              "[mkdirs](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 145,
                  "endLine": 145,
                  "startColumn": 5,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c0a7d54d0ed130ecf9d480a01eace219574b7e06395db6793c959e855a08686d",
            "1": "19689298.49b88d0d.8828b72d.a0ab803a.f1d9f854.d5b1cc4d.426249b0.54d46e25.19689298.ed6a38e6.df7f8d4d.a0ab803a.6a152aaf.d5b1cc4d.426249b0.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 43,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 43,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 9,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 5,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4)",
              "[mkdirs](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 5,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "162d1081a8b01200a4bab62ad9138a6ef0765731cd08b01df27c4b0cf05943b0",
            "1": "19689298.49b88d0d.8828b72d.a0ab803a.f1d9f854.d5b1cc4d.426249b0.54d46e25.19689298.ed6a38e6.df7f8d4d.2437b84f.6a152aaf.d5b1cc4d.426249b0.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 45,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 45,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 9,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 5,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[mkdirs](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "startColumn": 5,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "30d0f285088f447c8c808b077311c98fcd4653de564a636e5ec8c3a9c9494716",
            "1": "19689298.49b88d0d.8828b72d.a0ab803a.f1d9f854.d5b1cc4d.426249b0.54d46e25.19689298.ed6a38e6.df7f8d4d.2437b84f.6a152aaf.d5b1cc4d.426249b0.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 45,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 45,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 9,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 5,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 5,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4)",
              "[mkdirs](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 125,
                  "endLine": 125,
                  "startColumn": 5,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6931ec34d7d117ee5067522c342bfb2e4a45819dcd829a698532116be8f8ce18",
            "1": "19689298.49b88d0d.8828b72d.a0ab803a.f1d9f854.d5b1cc4d.426249b0.54d46e25.19689298.ed6a38e6.df7f8d4d.2437b84f.6a152aaf.d5b1cc4d.426249b0.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 45,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 45,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 9,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 5,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4)",
              "[mkdirs](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122,
                  "startColumn": 5,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bd6f55babf994d8d7f44f46b5ccd6e7e1b46b25799e8936d5f25b022bb6421e0",
            "1": "19689298.cae9adc0.8828b72d.e22980a8.f1d9f854.41d8b89f.19d480e2.54d46e25.19689298.2329d1ab.8828b72d.e22980a8.6a152aaf.41d8b89f.975192ff.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 9,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 122,
                            "endLine": 122,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 122,
                            "endLine": 122,
                            "startColumn": 5,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[java.io.FileOutputStream](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 42,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "887d9ca939fd8595140b5271a97b77c453c453f77d42a13ad95ef5af5181d9c0",
            "1": "19689298.4c67acc6.8828b72d.f9bdd8eb.75248ddf.41d8b89f.a204df5d.54d46e25.19689298.6b462316.2159a181.f9bdd8eb.d31a8364.7fda7c5e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 11,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 7,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 59,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-cli/src/intTest/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 42,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[java.io.FileOutputStream](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196,
                  "startColumn": 33,
                  "endColumn": 49
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0a99323e158092e4ad81a75fb167163d7df15f4211d7f03c32d3ea3dd488f436",
            "1": "19689298.83dbfe52.8828b72d.f9bdd8eb.75248ddf.41d8b89f.a204df5d.f82433aa.3ab06a9f.2329d1ab.2159a181.f9bdd8eb.75248ddf.7fda7c5e.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 36,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 36,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 9,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 195,
                            "endLine": 195,
                            "startColumn": 5,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 196,
                            "endLine": 196,
                            "startColumn": 50,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/build/EphemeralBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 196,
                            "endLine": 196,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[java.io.FileOutputStream](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 59,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7f3a0617a3fe4314c90ae88d900d1cd852eecebcaddb89661a00a461d9ca53d3",
            "1": "19689298.83dbfe52.8828b72d.c2655490.34a0ab27.41d8b89f.a204df5d.f82433aa.19689298.2329d1ab.bb993ef0.e22980a8.855504c3.41d8b89f.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 88,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 88,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 32,
                            "endColumn": 103
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 9,
                            "endColumn": 104
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 4,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 76,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 59,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4)",
              "[java.io.FileOutputStream](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 148,
                  "endLine": 148,
                  "startColumn": 50,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9713382b9b334cd41dd3e4326e1d7309f13c6767828277056181d724ddd38ae8",
            "1": "19689298.49b88d0d.8828b72d.a0ab803a.4a9c8cbc.d5b1cc4d.426249b0.54d46e25.19689298.ed6a38e6.df7f8d4d.a0ab803a.855504c3.d5b1cc4d.426249b0.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 43,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 43,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 9,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 67,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/IdeApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 50,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[java.io.FileOutputStream](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 50,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b6cd15564c70ac657d76c971e723c90178e6040ba4c9edfa60ff094d6a5973ca",
            "1": "19689298.49b88d0d.8828b72d.a0ab803a.4483622f.d5b1cc4d.426249b0.f82433aa.19689298.ed6a38e6.df7f8d4d.2437b84f.855504c3.d5b1cc4d.426249b0.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 45,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 45,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 9,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 67,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/ExplodedApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 50,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4)",
              "[java.io.FileOutputStream](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128,
                  "startColumn": 50,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ba14b7d7d2da8ec448f9409e7d952477fea5b6493a936cde7dd69cb6a618c769",
            "1": "19689298.49b88d0d.8828b72d.a0ab803a.4a9c8cbc.d5b1cc4d.426249b0.54d46e25.19689298.ed6a38e6.df7f8d4d.2437b84f.855504c3.d5b1cc4d.426249b0.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 45,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 45,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 9,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 128,
                            "endLine": 128,
                            "startColumn": 67,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-integration-tests/spring-boot-server-tests/src/intTest/java/org/springframework/boot/context/embedded/BootRunApplicationLauncher.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 128,
                            "endLine": 128,
                            "startColumn": 50,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4)",
              "[java.io.FileOutputStream](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 125,
                  "endLine": 125,
                  "startColumn": 59,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c8812cee90feb863cd5b9709803dac435e648c84287efcda7bf8f13f03fa0d9f",
            "1": "19689298.cae9adc0.8828b72d.6c52ae28.412f1aa1.41d8b89f.df7e59ba.54d46e25.19689298.2329d1ab.bb993ef0.e22980a8.855504c3.41d8b89f.975192ff.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 9,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 76,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 59,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[mkdir](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 5,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "56cace572e797900c1c6b2130a310f281d773b059af5c745520eecbe890a40d8",
            "1": "19689298.83dbfe52.8828b72d.e22980a8.34a0ab27.41d8b89f.a204df5d.54d46e25.19689298.2329d1ab.8828b72d.e22980a8.34a0ab27.41d8b89f.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 88,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 88,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 32,
                            "endColumn": 103
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 9,
                            "endColumn": 104
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 4,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 5,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into org.springframework.util.FileCopyUtils.copy, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[org.springframework.util.FileCopyUtils.copy](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 5,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7f3a0617a3fe4314c90ae88d900d1cd852eecebcaddb89661a00a461d9ca53d3",
            "1": "2d06e3d6.5efff463.bb993ef0.c2655490.2b515b97.f940a352.ecc58136.54d46e25.19689298.5efff463.bb993ef0.e22980a8.855504c3.41d8b89f.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 88,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 88,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 32,
                            "endColumn": 103
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 9,
                            "endColumn": 104
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 4,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 59,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 55,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 5,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into org.springframework.util.FileCopyUtils.copy, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[org.springframework.util.FileCopyUtils.copy](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 125,
                  "endLine": 125,
                  "startColumn": 5,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c8812cee90feb863cd5b9709803dac435e648c84287efcda7bf8f13f03fa0d9f",
            "1": "2d06e3d6.5efff463.bb993ef0.da1f12fe.2b515b97.f940a352.ecc58136.54d46e25.19689298.5efff463.bb993ef0.e22980a8.855504c3.41d8b89f.975192ff.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 9,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 59,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 55,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/AbstractExecutableArchiveLauncherTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 5,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveCors/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "CORS policy \"*\" might be too permissive. This allows malicious code on other domains to communicate with the application, which is a security risk",
            "markdown": "{0} {1} might be too permissive. This allows malicious code on other domains to communicate with the application, which is a security risk",
            "arguments": [
              "[CORS policy](0)",
              "[\"*\"](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-websocket-undertow/src/main/java/smoketest/websocket/undertow/SampleUndertowWebSocketsApplication.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 3,
                  "endColumn": 73
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bf6f95b7d7b2541db9dd3920d7a3dd5025834c72dd95308e200c09bb0e4e7a44",
            "1": "9a99886a.b1738d1b.fc7d5400.e22980a8.9f4dceef.a3e915f8.151cc078.54d46e25.9a99886a.b1738d1b.fc7d5400.e22980a8.9f4dceef.a3e915f8.151cc078.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-websocket-undertow/src/main/java/smoketest/websocket/undertow/SampleUndertowWebSocketsApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 3,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-websocket-undertow/src/main/java/smoketest/websocket/undertow/SampleUndertowWebSocketsApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 74,
                            "endColumn": 77
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveCors/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "CORS policy \"*\" might be too permissive. This allows malicious code on other domains to communicate with the application, which is a security risk",
            "markdown": "{0} {1} might be too permissive. This allows malicious code on other domains to communicate with the application, which is a security risk",
            "arguments": [
              "[CORS policy](0)",
              "[\"*\"](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-websocket-undertow/src/main/java/smoketest/websocket/undertow/SampleUndertowWebSocketsApplication.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 3,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f4b7cd7ea89758708919b2f386cf4be87e06f0f226c9c023d63f0de0138eb770",
            "1": "d1a9cd43.b1738d1b.fc7d5400.e22980a8.9f4dceef.a3b43c82.98af9304.54d46e25.d1a9cd43.b1738d1b.fc7d5400.e22980a8.9f4dceef.a3b43c82.98af9304.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-websocket-undertow/src/main/java/smoketest/websocket/undertow/SampleUndertowWebSocketsApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 3,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-websocket-undertow/src/main/java/smoketest/websocket/undertow/SampleUndertowWebSocketsApplication.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 76,
                            "endColumn": 79
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/lifecycle/TcpConnectServiceReadinessCheck.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 8,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2102ff329ea22f0b51c513e809528be4c179c527b3cb7e17ceecfe2fb0252d5a",
            "1": "bbbd7c96.c8c8034f.bb993ef0.58a2ef45.3fa0385b.85d83993.b192288b.bbbf61bc.3b542730.c8c8034f.bb993ef0.6c52ae28.3fa0385b.85d83993.b192288b.38ca3e7b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/lifecycle/TcpConnectServiceReadinessCheck.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 8,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/lifecycle/TcpConnectServiceReadinessCheck.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 8,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into openConnection, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15)",
              "[openConnection](16)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321,
                  "startColumn": 47,
                  "endColumn": 65
                }
              }
            }
          ],
          "fingerprints": {
            "0": "58293daf12dcf0a42f21671092995f1094eec9477eee34cdff81d69a5ce6133b",
            "1": "6d351a63.9a87848e.c4d2006b.c631c4d4.29a08097.4cb70bfe.5fb5de37.d5121e89.f133b6bb.9a87848e.c53d9f3d.c631c4d4.d31a8364.2796a02a.393e4431.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 32,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 20,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 301,
                            "endLine": 301,
                            "startColumn": 11,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 32,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 16,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 306,
                            "endLine": 306,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 307,
                            "endLine": 307,
                            "startColumn": 50,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 59,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 30,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 319,
                            "endLine": 319,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 319,
                            "endLine": 319,
                            "startColumn": 14,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 319,
                            "endLine": 319,
                            "startColumn": 8,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 47,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 47,
                            "endColumn": 65
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into openConnection, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[openConnection](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "endLine": 351,
                  "startColumn": 53,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a4223e73a53ec6bc631392a17954de72c42ca6db39e5bda0578affc9f27bce09",
            "1": "6d351a63.9a87848e.c4d2006b.c631c4d4.fa5f6fc4.4cb70bfe.32f32fac.d5121e89.f133b6bb.9a87848e.c53d9f3d.c631c4d4.d31a8364.2796a02a.393e4431.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 32,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 20,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 301,
                            "endLine": 301,
                            "startColumn": 11,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 339,
                            "endLine": 339,
                            "startColumn": 32,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 339,
                            "endLine": 339,
                            "startColumn": 16,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 340,
                            "endLine": 340,
                            "startColumn": 50,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 344,
                            "endLine": 344,
                            "startColumn": 64,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 344,
                            "endLine": 344,
                            "startColumn": 35,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 14,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 8,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 351,
                            "endLine": 351,
                            "startColumn": 53,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 351,
                            "endLine": 351,
                            "startColumn": 53,
                            "endColumn": 71
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into openConnection, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[openConnection](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 486,
                  "endLine": 486,
                  "startColumn": 70,
                  "endColumn": 88
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fdcff4e765933496bf09dd49a11dd54b42a5499506fda14562d1d24cfe938fba",
            "1": "19689298.9a87848e.bb993ef0.6c52ae28.29a08097.7f705fbf.32f32fac.54d46e25.fdd6be0b.9a87848e.c53d9f3d.c631c4d4.d31a8364.2796a02a.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 32,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 20,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 301,
                            "endLine": 301,
                            "startColumn": 11,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 483,
                            "endLine": 483,
                            "startColumn": 32,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 483,
                            "endLine": 483,
                            "startColumn": 16,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 484,
                            "endLine": 484,
                            "startColumn": 20,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 485,
                            "endLine": 485,
                            "startColumn": 33,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 485,
                            "endLine": 485,
                            "startColumn": 33,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 485,
                            "endLine": 485,
                            "startColumn": 33,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 485,
                            "endLine": 485,
                            "startColumn": 18,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 485,
                            "endLine": 485,
                            "startColumn": 8,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 486,
                            "endLine": 486,
                            "startColumn": 70,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 486,
                            "endLine": 486,
                            "startColumn": 70,
                            "endColumn": 88
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into openConnection, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[openConnection](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 544,
                  "endLine": 544,
                  "startColumn": 5,
                  "endColumn": 95
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e9de3d865ad29b1dc7d1941feaa76ee6341e8fbb50ff3da09526a65988f4dccf",
            "1": "e6fcc0e0.9a87848e.bb993ef0.788ea034.c41fd899.7f705fbf.f0e0ed1a.d5121e89.19689298.9a87848e.c53d9f3d.c631c4d4.c41fd899.7f705fbf.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 32,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 20,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 301,
                            "endLine": 301,
                            "startColumn": 11,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 542,
                            "endLine": 542,
                            "startColumn": 26,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 542,
                            "endLine": 542,
                            "startColumn": 17,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 543,
                            "endLine": 543,
                            "startColumn": 19,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 543,
                            "endLine": 543,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 543,
                            "endLine": 543,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 544,
                            "endLine": 544,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 544,
                            "endLine": 544,
                            "startColumn": 5,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 544,
                            "endLine": 544,
                            "startColumn": 5,
                            "endColumn": 95
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into openConnection, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[openConnection](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 548,
                  "endLine": 549,
                  "startColumn": 18,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9e9fa4704cf8834e5e7d952084be62e011abe9d1aa6058a0227f25f40e228258",
            "1": "e6fcc0e0.9a87848e.804da162.788ea034.8afeca56.7f705fbf.f0e0ed1a.d5121e89.19689298.9a87848e.c53d9f3d.c631c4d4.d31a8364.7f705fbf.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 32,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 20,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 301,
                            "endLine": 301,
                            "startColumn": 11,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 542,
                            "endLine": 542,
                            "startColumn": 26,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 542,
                            "endLine": 542,
                            "startColumn": 17,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 543,
                            "endLine": 543,
                            "startColumn": 19,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 543,
                            "endLine": 543,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 543,
                            "endLine": 543,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 548,
                            "endLine": 548,
                            "startColumn": 22,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 548,
                            "endLine": 548,
                            "startColumn": 18,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 548,
                            "endLine": 549,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a zip file flows into openStream, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[openStream](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 361,
                  "endLine": 361,
                  "startColumn": 35,
                  "endColumn": 49
                }
              }
            }
          ],
          "fingerprints": {
            "0": "50d6905f887842400d3b53c61ea81ce9ad92de4124f23f51a0fbfacfe5488881",
            "1": "6d351a63.14460e5c.481cbae6.c631c4d4.6dbefcdf.4cb70bfe.78adfa9a.5fb7678b.6d351a63.14460e5c.c53d9f3d.c631c4d4.d31a8364.caa7208d.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 58,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 32,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 20,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 301,
                            "endLine": 301,
                            "startColumn": 11,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 358,
                            "endLine": 358,
                            "startColumn": 32,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 358,
                            "endLine": 358,
                            "startColumn": 16,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 14,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 14,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 8,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 35,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 35,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitStreamConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 150,
                  "startColumn": 26,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7729db232df7917d77f7ac34265f16eb5668dd3bd01a502f96126abe126031c4",
            "1": "7830f6be.3b6bde42.00729ac0.ede9cf8e.4a9c8cbc.f0f4d39e.94b7b297.54d46e25.c3493b20.290d913b.e0d6f35d.e22980a8.c4578576.48d9167a.db2588b6.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitStreamConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 26,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitStreamConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161,
                  "startColumn": 26,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "401b1efa3795589a39b6d79aa1cf57a8fe89faaf5c945ae3afb46dad9d9afc52",
            "1": "7830f6be.3b6bde42.00729ac0.ede9cf8e.4a9c8cbc.f0f4d39e.94b7b297.54d46e25.19689298.290d913b.e0d6f35d.e22980a8.c4578576.48d9167a.db2588b6.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitStreamConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 26,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitPropertiesTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 193,
                  "endLine": 193,
                  "startColumn": 31,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8bdf6b9fb4fb1739d1b88b92e087476fd1c7477900ca4ec2be62947155a8563c",
            "1": "7830f6be.ff76257e.1b9a1d8e.ede9cf8e.f6d438cc.f0f4d39e.94b7b297.54d46e25.416089e6.4c7cb549.e0d6f35d.de031890.c4578576.ce109560.db2588b6.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitPropertiesTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 193,
                            "endLine": 193,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitPropertiesTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 199,
                  "endLine": 199,
                  "startColumn": 31,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ed833be82d725b416b1a2516e34d2252974eeb89dea5e5264be9944d45541f80",
            "1": "7830f6be.ff76257e.1b9a1d8e.ede9cf8e.f6d438cc.f0f4d39e.94b7b297.54d46e25.416089e6.290d913b.e0d6f35d.de031890.c4578576.ce109560.db2588b6.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitPropertiesTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/test/java/smoketest/data/couchbase/SecureCouchbaseContainer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 43,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b17c997f380a01d6b027223e7cc41f69f5e3607bb596c4a7ecab832486a9030c",
            "1": "3d8faa65.dd05ec30.1200a740.de031890.8b2d3351.ce109560.e4580e17.87dfd8cc.a736fbc1.dd05ec30.1200a740.de031890.b6cbe0be.ce109560.ef1a010c.87dfd8cc"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/test/java/smoketest/data/couchbase/SecureCouchbaseContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 43,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 161,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/HikariJdbcConnectionDetailsBeanPostProcessorTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 26,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3c9ae538ff6b025ed8c7cac0d34f9420b7415ebe1b903ea5553501e393087080",
            "1": "ac4e7c8b.97acdc08.e26d9a80.ede9cf8e.4a9c8cbc.f0f4d39e.5f600e00.54d46e25.7719ad1a.e8c02a15.fc7d5400.e22980a8.a3d271d9.935029da.5f600e00.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/HikariJdbcConnectionDetailsBeanPostProcessorTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 26,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167,
                  "startColumn": 46,
                  "endColumn": 53
                }
              }
            }
          ],
          "fingerprints": {
            "0": "30c3409845680f77ee6b51a3bcccca39c494e84477c5d25b7e073a00702d3873",
            "1": "161fb9b1.af83b745.56ee6225.b58a7fe2.4a9c8cbc.0ff18e94.94b7b297.54d46e25.161fb9b1.290d913b.56ee6225.e22980a8.c4578576.0ff18e94.db2588b6.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 167,
                            "endLine": 167,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177,
                  "startColumn": 30,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6896dae8e2cfdba6c9cf97b5fb16a53f708b33398eea059449c3e5ae89722828",
            "1": "161fb9b1.a8e14d34.56ee6225.ede9cf8e.4a9c8cbc.f0f4d39e.94b7b297.54d46e25.161fb9b1.e8c02a15.56ee6225.e22980a8.000ee9f1.160c3a7f.94b7b297.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 197,
                  "startColumn": 30,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4594b6e2a99ef21ed5720b6fac714592ecc2eaabe8e5bb32e4c6b55b86240d04",
            "1": "161fb9b1.a8e14d34.56ee6225.ede9cf8e.4a9c8cbc.f0f4d39e.94b7b297.54d46e25.161fb9b1.8b0cbd3b.56ee6225.e22980a8.000ee9f1.160c3a7f.94b7b297.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 197,
                            "endLine": 197,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/Dbcp2JdbcConnectionDetailsBeanPostProcessorTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 26,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fa23a45a2fa2c93107f34c81a20afa0c07126bdb912aefefb235d9c3138110b5",
            "1": "ac4e7c8b.97acdc08.e26d9a80.ede9cf8e.4a9c8cbc.f0f4d39e.5f600e00.54d46e25.5387ee68.e8c02a15.fc7d5400.e22980a8.a3d271d9.6dd3a073.5f600e00.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/Dbcp2JdbcConnectionDetailsBeanPostProcessorTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 26,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 31,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c6e5789fdc60adb7f112e43a3566b73d090ea44836d5736a4a3862924882d94d",
            "1": "ac4e7c8b.481b9a3e.1b9a1d8e.ede9cf8e.d20a7cce.f0f4d39e.94b7b297.54d46e25.4d269db2.290d913b.e0d6f35d.e22980a8.c4578576.82c00fb5.db2588b6.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 31,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dfee88d363c2cd53f262ecfaf788db2b9fd9a7935130e1611a0821b6789610e2",
            "1": "ac4e7c8b.481b9a3e.1b9a1d8e.ede9cf8e.d20a7cce.f0f4d39e.94b7b297.54d46e25.5387ee68.290d913b.e0d6f35d.e22980a8.c4578576.82c00fb5.db2588b6.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 31,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bc888099ecf32e107d31f0e8c0d3377e03ade2ec6a95d27c327284f59ff69e4f",
            "1": "ac4e7c8b.481b9a3e.1b9a1d8e.ede9cf8e.d20a7cce.f0f4d39e.94b7b297.54d46e25.5387ee68.290d913b.e0d6f35d.0bde8de0.a6264ed1.82c00fb5.db2588b6.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatJdbcConnectionDetailsBeanPostProcessorTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 26,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fa88ee0f2d1b2becf9d0eba5c73b8ae2d8a2072088a2017233b4e82ae6cb5fdc",
            "1": "ac4e7c8b.97acdc08.e26d9a80.ede9cf8e.4a9c8cbc.f0f4d39e.5f600e00.54d46e25.5387ee68.e8c02a15.fc7d5400.e22980a8.a3d271d9.6dd3a073.5f600e00.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatJdbcConnectionDetailsBeanPostProcessorTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 26,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 211,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Digest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 6,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ad5d7c55da2197dfff645094e1bb84c4820781c1924379649be5aaa11ab8d102",
            "1": "0d3ce3ed.32809f8c.c6fdbd29.6c52ae28.216229a3.ea25c240.78adfa9a.b8cb04f5.0d3ce3ed.32809f8c.c6fdbd29.6c52ae28.216229a3.ea25c240.78adfa9a.b8cb04f5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Digest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 32,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Digest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 6,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/Connection.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 150,
                  "startColumn": 33,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1ec4a656a36dc18193a2953ed547e2557931c955ac05e8bc63443138f7d3110c",
            "1": "19689298.1cbd3ff4.e99130b3.5e6ab657.bc071aa8.b70401ce.a7ce700b.54d46e25.19689298.1cbd3ff4.e99130b3.5e6ab657.bc071aa8.b70401ce.a7ce700b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/Connection.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 59,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/Connection.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 33,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134,
                  "startColumn": 13,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5e29c6441daf1bdedc3e782e4b836de1d31355c6e611f631689ca5253c96e6d6",
            "1": "ca9876a9.1cbd3ff4.33fa5dbe.e22980a8.3d2bca12.7fda7c5e.2a1a68a1.c4e81b6c.ca9876a9.1cbd3ff4.33fa5dbe.e22980a8.3d2bca12.7fda7c5e.df7e59ba.c4e81b6c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 39,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 13,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in org.springframework.util.DigestUtils.md5DigestAsHex) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[org.springframework.util.DigestUtils.md5DigestAsHex](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141,
                  "startColumn": 10,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6057605a0dff40b5be9a97fb3dc902cd73adc75863a2dec2aded0824f6c0f7f6",
            "1": "63c12074.74b5c6ce.ff7d7469.2f51736c.d96e584e.da2cda89.c19697c3.da76413e.63c12074.74b5c6ce.ff7d7469.2f51736c.d96e584e.da2cda89.c19697c3.da76413e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 10,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XXE",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "A file is loaded by parse, which allows expansion of external entity references. This may result in an XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "A file is loaded by {0}, which allows expansion of external entity references. This may result in an XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "buildSrc/src/main/java/org/springframework/boot/build/mavenplugin/MavenPluginPlugin.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 489,
                  "endLine": 489,
                  "startColumn": 27,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1f5e71d407c5f8c09c78aeed27f96e3fb5f18c27a2ea74a3f03fd8294459c2ad",
            "1": "19689298.ff76257e.481cbae6.6c52ae28.d31a8364.7fda7c5e.bae646e8.6f114b23.19689298.1cbd3ff4.e2658df2.e22980a8.a7b964d9.7fda7c5e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/org/springframework/boot/build/mavenplugin/MavenPluginPlugin.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 489,
                            "endLine": 489,
                            "startColumn": 13,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XXE",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "A file is loaded by parse, which allows expansion of external entity references. This may result in an XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "A file is loaded by {0}, which allows expansion of external entity references. This may result in an XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "buildSrc/src/main/java/org/springframework/boot/build/bom/BomExtension.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 471,
                  "endLine": 471,
                  "startColumn": 89,
                  "endColumn": 106
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b782601737ee100994230258f90e0e7647ba3ed06f7a36e0b7222a9ac2eae40b",
            "1": "b6a0c50d.fb13128e.33fa5dbe.e22980a8.b7dd2760.7fda7c5e.df7e59ba.54d46e25.19689298.fb13128e.33fa5dbe.de031890.8b2d3351.7fda7c5e.2ca9d778.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/org/springframework/boot/build/bom/BomExtension.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 471,
                            "endLine": 471,
                            "startColumn": 25,
                            "endColumn": 88
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XXE",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "A file is loaded by parse, which allows expansion of external entity references. This may result in an XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "A file is loaded by {0}, which allows expansion of external entity references. This may result in an XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "buildSrc/src/main/java/org/springframework/boot/build/mavenplugin/PluginXmlParser.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 80,
                  "endColumn": 89
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6b835d698dd79e3fd9176a92dcb41a44ad3fe7be57ebe35ccef4f0a3c6b7952b",
            "1": "ac4e7c8b.2dc1799a.a224ef38.30f244f3.b7dd2760.0d476878.df7e59ba.1b607abf.3110276f.0419690f.a224ef38.58d1faed.5b142b5c.7aa2efb8.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/org/springframework/boot/build/mavenplugin/PluginXmlParser.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 16,
                            "endColumn": 79
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XXE/test",
          "ruleIndex": 10,
          "level": "note",
          "message": {
            "text": "A file is loaded by parse, which allows expansion of external entity references. This may result in an XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "A file is loaded by {0}, which allows expansion of external entity references. This may result in an XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "buildSrc/src/test/java/org/springframework/boot/build/assertj/NodeAssert.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 46,
                  "endColumn": 53
                }
              }
            }
          ],
          "fingerprints": {
            "0": "26078af852c67743d7929d7d16dfe2780a22350dd7f9286f418cf383d9e35b92",
            "1": "b6a0c50d.fb13128e.a224ef38.02aee597.b7dd2760.0d476878.df7e59ba.e2a828ac.d6deb347.fb13128e.6fdbf58c.de031890.d31a8364.ce109560.bae646e8.e2a828ac"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/test/java/org/springframework/boot/build/assertj/NodeAssert.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 11,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidatorTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 272,
                  "endLine": 300,
                  "startColumn": 23,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f2ae2bd9c8ed6d6d5b9a34cb6a4d15e031334443860d369e8934f72a5259d414",
            "1": "19689298.83dbfe52.16258c58.3ef18931.daac50f4.177e232f.b5095675.54d46e25.19689298.83dbfe52.16258c58.3ef18931.daac50f4.177e232f.b5095675.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidatorTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 272,
                            "endLine": 300,
                            "startColumn": 23,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/TokenValidatorTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 239,
                  "startColumn": 23,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7630f4621d4a4e7b1318f4be2ff637c73cf617bd505c90f601ee1c1a82905029",
            "1": "19689298.83dbfe52.16258c58.3ef18931.daac50f4.177e232f.b5095675.54d46e25.19689298.83dbfe52.16258c58.3ef18931.daac50f4.177e232f.b5095675.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/TokenValidatorTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 239,
                            "startColumn": 23,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Reflection",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.lang.Class.forName, where it is used for Reflection. This may result in an Unsafe Reflection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used for Reflection. This may result in an Unsafe Reflection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.lang.Class.forName](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationAotProcessor.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 26,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0ad4181d79d633a4df23eadcb815c312178e9abeee47cb325e19ce30fdcc9bd1",
            "1": "682e2f2f.1cbd3ff4.67a1759f.acdec820.025462d2.117e971f.5676ece4.158cb1e6.e1d7cd7c.d6a1ebef.1999525b.de031890.0acd59f9.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationAotProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationAotProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationAotProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 26,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 301,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitStreamConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164,
                  "startColumn": 38,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "677dd96b782acbbd54daf0fe2dcd3efdaba78b7fd5f921960fb480eb7b8c1fd0",
            "1": "5387ee68.e8c02a15.d62a778a.ede9cf8e.4a9c8cbc.935029da.6a6e386d.fde7589e.5387ee68.e8c02a15.fc7d5400.e22980a8.f1d9f854.935029da.6a6e386d.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitStreamConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 164,
                            "endLine": 164,
                            "startColumn": 38,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitStreamConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167,
                  "startColumn": 35,
                  "endColumn": 49
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4450704cc1ed8774c82e1c4c169ed44451ddca4113e20fe2a552bc3375469a3d",
            "1": "ac4e7c8b.97acdc08.199e4660.ede9cf8e.dac70d29.6c649c98.a2aa5595.54d46e25.ca9876a9.50dc664e.199e4660.e22980a8.dac70d29.6c649c98.d41e48ea.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitStreamConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 167,
                            "endLine": 167,
                            "startColumn": 35,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitPropertiesTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 229,
                  "startColumn": 31,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "37dd076c617084af2118bb65820ff9a7e8dd2f202a5f04a7334f5618a6f52f0b",
            "1": "5387ee68.e8c02a15.3eba13dd.bf59c8fb.f6d438cc.935029da.6f4217dd.fde7589e.5387ee68.290d913b.e0d6f35d.de031890.c4578576.ce109560.db2588b6.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitPropertiesTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 31,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/HikariJdbcConnectionDetailsBeanPostProcessorTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 26,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c01dd823d9db54c539628874296580266b4e585d0d2793152fdd324061bd5d5d",
            "1": "5387ee68.e8c02a15.e26d9a80.ede9cf8e.4a9c8cbc.935029da.5f600e00.fde7589e.5387ee68.e8c02a15.fc7d5400.e22980a8.858cca03.935029da.5f600e00.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/HikariJdbcConnectionDetailsBeanPostProcessorTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 26,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168,
                  "startColumn": 46,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0cfffda2e53f9ad634d65df6eeaf8f9420d7394390604c4d5a85bb3de1630674",
            "1": "5387ee68.e8c02a15.6b0e2191.b58a7fe2.4a9c8cbc.0ff18e94.be04624c.fde7589e.5387ee68.e8c02a15.fc7d5400.e22980a8.f1d9f854.0ff18e94.6cf38cbb.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 168,
                            "endLine": 168,
                            "startColumn": 46,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 178,
                  "endLine": 178,
                  "startColumn": 30,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "427a5737a54ad65a205292f5a4e583ee77a95849757bf64e0b81d6df18707b5c",
            "1": "5387ee68.e8c02a15.f81d0e39.f087687a.4a9c8cbc.935029da.72a275ef.fde7589e.5387ee68.e8c02a15.79861a6d.e22980a8.e2f68b26.935029da.94b7b297.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/neo4j/Neo4jAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/Dbcp2JdbcConnectionDetailsBeanPostProcessorTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 26,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f21d1deb9223a9c6ed2b5ce108d25f6b8e0690bc6f0489b969267e32b71d0ab1",
            "1": "5387ee68.e8c02a15.e26d9a80.ede9cf8e.4a9c8cbc.935029da.5f600e00.fde7589e.5387ee68.e8c02a15.fc7d5400.e22980a8.f1d9f854.6dd3a073.5f600e00.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/Dbcp2JdbcConnectionDetailsBeanPostProcessorTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 26,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 31,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9e764e23a54dd1d3e6065149ca0d99a106f96458a8e44914a278568d9c7c7b01",
            "1": "5387ee68.481b9a3e.1b9a1d8e.ede9cf8e.d20a7cce.935029da.6f4217dd.fde7589e.4d269db2.481b9a3e.5ef54930.e22980a8.d20a7cce.82c00fb5.94b7b297.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 31,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5e8093ad4544f77215337d2a68eb8769ea92e0040322f2acc349dc4502180ab3",
            "1": "5387ee68.481b9a3e.1b9a1d8e.ede9cf8e.d20a7cce.935029da.6f4217dd.fde7589e.5387ee68.481b9a3e.5ef54930.e22980a8.d20a7cce.82c00fb5.94b7b297.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79,
                  "startColumn": 31,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c3211bf15e9d595bb35778297405ae544d7716ab77b62c3291c692e42027d740",
            "1": "5387ee68.481b9a3e.1b9a1d8e.ede9cf8e.d20a7cce.935029da.6f4217dd.fde7589e.5387ee68.481b9a3e.5ef54930.0bde8de0.a6264ed1.82c00fb5.94b7b297.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/PropertiesRedisConnectionDetailsTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatJdbcConnectionDetailsBeanPostProcessorTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 26,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "838e564162a8e221af14f3dc8dd2949b8a5a912824ff6d1bbbdcf923755c6324",
            "1": "5387ee68.e8c02a15.e26d9a80.ede9cf8e.4a9c8cbc.935029da.5f600e00.fde7589e.5387ee68.e8c02a15.fc7d5400.e22980a8.f1d9f854.6dd3a073.5f600e00.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatJdbcConnectionDetailsBeanPostProcessorTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 26,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveUserDetailsServiceAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 135,
                  "startColumn": 21,
                  "endColumn": 91
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3147fa9e1a1160a3820e44a1ce4ebc4ed0cf2c358c887c094f09fe157b97a48f",
            "1": "19689298.cfa7d647.71a71d19.bd0e4e78.bc6ac6aa.dd62fee0.15e6173d.54d46e25.19689298.cfa7d647.71a71d19.2fd0e4d9.75f548fa.dd62fee0.c41e2a02.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveUserDetailsServiceAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 21,
                            "endColumn": 91
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 369,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334,
                  "startColumn": 82,
                  "endColumn": 91
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e7726cbbc1b3b298458e7c770d04bee1dad800607e129d6cad7927ada1368e84",
            "1": "d3971bbf.97acdc08.3675d218.5659e6d4.58df5e9c.e09655a9.e7ff02d2.f03c397d.19689298.4e458bf0.958072f4.5659e6d4.820cde65.10383bbe.e7ff02d2.8c58aa3f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 334,
                            "endLine": 334,
                            "startColumn": 82,
                            "endColumn": 91
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 369,
                  "endLine": 369,
                  "startColumn": 14,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "37c6888e902505c9383c1c840309da997c74018273c2ed1866ea17e4bc7951c4",
            "1": "d3971bbf.97acdc08.3675d218.5659e6d4.58df5e9c.e09655a9.e7ff02d2.f03c397d.19689298.4e458bf0.958072f4.5659e6d4.820cde65.10383bbe.e7ff02d2.7dd62d8a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 369,
                            "endLine": 369,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 385,
                  "endLine": 385,
                  "startColumn": 78,
                  "endColumn": 87
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dca5366ac1f5e02309baaeb0241930ef041249bac3af56e215a7ca4baf4237a5",
            "1": "d3971bbf.97acdc08.3675d218.5659e6d4.58df5e9c.e09655a9.e7ff02d2.f03c397d.19689298.17655f21.958072f4.5659e6d4.820cde65.10383bbe.e7ff02d2.8c58aa3f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 385,
                            "endLine": 385,
                            "startColumn": 78,
                            "endColumn": 87
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 412,
                  "endLine": 412,
                  "startColumn": 82,
                  "endColumn": 91
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ec661ef98602b7974e43dacefe65246977c096c3f9d435ea3b0b8a0467ed29e3",
            "1": "d3971bbf.97acdc08.3675d218.5659e6d4.58df5e9c.e09655a9.e7ff02d2.f03c397d.19689298.4e458bf0.958072f4.5659e6d4.820cde65.10383bbe.e7ff02d2.8c58aa3f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 412,
                            "endLine": 412,
                            "startColumn": 82,
                            "endColumn": 91
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 425,
                  "endLine": 425,
                  "startColumn": 94,
                  "endColumn": 103
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3fe5cde4e6310f9e328fc56a7155e1a081ccb84d7f7597a5a23a52c4feec9e49",
            "1": "d3971bbf.97acdc08.3675d218.5659e6d4.58df5e9c.e09655a9.e7ff02d2.f03c397d.19689298.dbbc4f70.958072f4.5659e6d4.820cde65.10383bbe.e7ff02d2.8c58aa3f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 94,
                            "endColumn": 103
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 439,
                  "endLine": 439,
                  "startColumn": 14,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9f47f2f4cd6856134246531f949e4e9af9603d485cdcabfd87f3a4215fbe2ff8",
            "1": "ac4e7c8b.97acdc08.d62a778a.26bd3afd.820cde65.e09655a9.65b58e4c.843ff358.e1d7cd7c.1cbd3ff4.d62a778a.4d1392c1.f7b38e05.f940a352.65b58e4c.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DataSourceBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 439,
                            "endLine": 439,
                            "startColumn": 14,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/OracleUcpJdbcConnectionDetailsBeanPostProcessorTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 26,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "943adc676dd4ea583040e87db3b0e74ff400c4d019a75f2af2afecdca5206729",
            "1": "5387ee68.e8c02a15.e26d9a80.ede9cf8e.4a9c8cbc.935029da.5f600e00.fde7589e.5387ee68.e8c02a15.55612239.e22980a8.82a22756.6dd3a073.5f600e00.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/OracleUcpJdbcConnectionDetailsBeanPostProcessorTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 26,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 369,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 515,
                  "endLine": 515,
                  "startColumn": 71,
                  "endColumn": 83
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a832961097e9c66bba1d10103c8af758e49aa1dcc2bde7a7c53a02974ae95510",
            "1": "ca9876a9.1cbd3ff4.844a9583.ede9cf8e.260f35d0.f940a352.4238d478.96662fef.ca9876a9.1cbd3ff4.844a9583.42309021.260f35d0.4cb70bfe.4238d478.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 515,
                            "endLine": 515,
                            "startColumn": 71,
                            "endColumn": 83
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 532,
                  "endLine": 532,
                  "startColumn": 71,
                  "endColumn": 83
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0820c1ee7103452e310decac24321b786a93c61a4630a8a3ba4774b09590b2e2",
            "1": "ca9876a9.1cbd3ff4.844a9583.ede9cf8e.260f35d0.f940a352.4238d478.96662fef.ca9876a9.1cbd3ff4.844a9583.42309021.260f35d0.4cb70bfe.4238d478.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 532,
                            "endLine": 532,
                            "startColumn": 71,
                            "endColumn": 83
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/r2dbc/ConnectionFactoryBuilderTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115,
                  "startColumn": 14,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "76171a110941ca306b1e4bc92ebb386be02924625d142c8f3aa3850fbdd6d719",
            "1": "ac4e7c8b.97acdc08.47245e18.8ea81787.2a1c123b.e09655a9.b3f2ced1.d5ac31ff.57830140.4ab9ec19.39b5b56d.8ea81787.2a1c123b.5517e9a5.86fc013c.d5ac31ff"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/r2dbc/ConnectionFactoryBuilderTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 14,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 369,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfigurationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143,
                  "startColumn": 21,
                  "endColumn": 91
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dd49134c992e6af11b56324ef98a6af01d2f324518af77ef182c8bda656083a6",
            "1": "19689298.cfa7d647.71a71d19.bd0e4e78.bc6ac6aa.dd62fee0.15e6173d.54d46e25.19689298.cfa7d647.71a71d19.2fd0e4d9.75f548fa.dd62fee0.c41e2a02.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfigurationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 21,
                            "endColumn": 91
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 369,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/TestRestTemplateTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218,
                  "startColumn": 60,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "def1597ba416182d1261963505295d219e8772fa65dcf5f7573c6d9e627921ce",
            "1": "c90cb73f.f5162bbe.cd9fbd0f.58a2ef45.20801229.dd62fee0.5cd65e98.54d46e25.c90cb73f.7f413d6f.cd9fbd0f.3519ac88.20801229.dd62fee0.8c46c182.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/TestRestTemplateTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 218,
                            "endLine": 218,
                            "startColumn": 60,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 369,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: all clients are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all clients are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/SkipSslVerificationHttpRequestFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 15,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "78cecf571125df060626fe373ae6b2ec64e452e5b9f438fac74515a35a16e388",
            "1": "d3279c65.7f413d6f.b1ce14cf.e22980a8.f0e1baa5.58c3080a.7011a60a.1d874c72.d3279c65.7f413d6f.b1ce14cf.e22980a8.f0e1baa5.58c3080a.7011a60a.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/SkipSslVerificationHttpRequestFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 15,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: all servers are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all servers are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/SkipSslVerificationHttpRequestFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 15,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f7411ff8b45db04bc6538c7dc3d5a86773f69fe0c009b5153dd6ce6045d3b1b9",
            "1": "d3279c65.7f413d6f.b1ce14cf.e22980a8.f0e1baa5.58c3080a.7011a60a.1d874c72.d3279c65.7f413d6f.b1ce14cf.e22980a8.f0e1baa5.58c3080a.7011a60a.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/SkipSslVerificationHttpRequestFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 15,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/data/sql/h2webconsole/springsecurity/DevProfileSecurityConfiguration.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 3,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb596e2632baa349a97a44be08efefbd654ae4571d8a9ee862ee0294df60baf7",
            "1": "b5099633.b1b899f8.13c31930.70dcbc52.f2a5bca1.4bae721f.7b4155dd.54d46e25.b5099633.b1b899f8.13c31930.70dcbc52.f2a5bca1.4bae721f.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/data/sql/h2webconsole/springsecurity/DevProfileSecurityConfiguration.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/DisablesCSRFProtection",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevtoolsSecurityConfiguration.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 3,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "16ab15e8d78d0633efcb6ae278f30bdb4dff69756e631da0eeb003115b627d38",
            "1": "b5099633.b1b899f8.13c31930.e22980a8.f2a5bca1.e9b03a32.7b4155dd.54d46e25.b5099633.b1b899f8.13c31930.32bd3632.f2a5bca1.2f2b5e39.3953228b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevtoolsSecurityConfiguration.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UserControlledFormatString",
          "ruleIndex": 16,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment path variable flows into java.lang.String.format, where it is used as a format string. This could allow an attacker to trigger an IllegalFormatException.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a format string. This could allow an attacker to trigger an IllegalFormatException.",
            "arguments": [
              "[an environment path variable](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[java.lang.String.format](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 10,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "15bdd1b34070f1fb0b47018051c6c88c55d65bec414bcb9b5623008b51ae3a8d",
            "1": "6cd5d864.dd05ec30.5ef54930.de031890.8b2d3351.ce109560.bad6a97a.87dfd8cc.ac891029.c2b618fd.c5130315.7c2af270.d31a8364.7fda7c5e.c66d287d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 12,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 12,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 4,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 10,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 23,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 24,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/SimpleFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 10,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 301,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the HTTP request body flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the HTTP request body](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[here](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161,
                  "startColumn": 11,
                  "endColumn": 84
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a05ae26bebf59a49935f54684478ae6fd4592c12062dfa5184327e66650932eb",
            "1": "dc368d21.1cbd3ff4.fc7d5400.e22980a8.f1d9f854.bb79e7a3.40cdfdc2.1d874c72.e1d7cd7c.76771dc5.1f78ea81.2e7356d6.f0e1baa5.58c3080a.02b8e447.c47f8a97"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 30,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 30,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 59,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 59,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 45,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 11,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 11,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 11,
                            "endColumn": 84
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the HTTP request body flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the HTTP request body](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[here](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154,
                  "startColumn": 11,
                  "endColumn": 84
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0bd61aff3fb6f11eb3155f4be264376c1761890cb6a3875ca7c793624f1e3835",
            "1": "dc368d21.1cbd3ff4.fc7d5400.e22980a8.f1d9f854.bb79e7a3.40cdfdc2.1d874c72.e1d7cd7c.76771dc5.1f78ea81.2e7356d6.f0e1baa5.58c3080a.02b8e447.c47f8a97"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 153,
                            "endLine": 153,
                            "startColumn": 30,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 153,
                            "endLine": 153,
                            "startColumn": 30,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 59,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 59,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 45,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 11,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 11,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 11,
                            "endColumn": 84
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[here](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 10,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8b298c8cd59aa64b672e265eae6bd0157d33dd782a2d0da50991c538ea68e573",
            "1": "e6fcc0e0.ddeafd3e.fc7d5400.b63bb489.4946a3f0.f38c2ce0.a0250226.5273b05b.c90cb73f.c77643ca.33fa5dbe.de031890.3d52237b.7fda7c5e.a0250226.96f2b075"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 35,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 35,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 28,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 18,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 25,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 25,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 25,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 25,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 10,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 10,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 10,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-test/src/main/java/smoketest/test/web/UserVehicleController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 10,
                            "endColumn": 67
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[here](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController3.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 10,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bf1e08f98f064bc2cb4019c050b55d66826ad2db714906fd5c5361eae993aed7",
            "1": "cb724ed2.250f2ead.a224ef38.e22980a8.6e576732.f90bf5fe.9e58c73e.96f2b075.23aaf1d9.250f2ead.5a282ada.e22980a8.f0e1baa5.d58fd744.9e58c73e.96f2b075"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController3.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 22,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController3.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 22,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController3.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 10,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController3.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 10,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[here](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController2.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 10,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7d83f3e84eccdb16880ddd3490b0e789dcda81e8fee73b0e0b5dfbba26f17615",
            "1": "dc368d21.9c454c59.a224ef38.e22980a8.3d7b15b9.28ab3080.40cdfdc2.856ded69.dc368d21.53cc7ac0.a224ef38.e22980a8.3d7b15b9.28ab3080.40cdfdc2.856ded69"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController2.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 20,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController2.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 20,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController2.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController2.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 10,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/mockmvc/ExampleController2.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 10,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[here](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-custom-security/src/main/java/smoketest/actuator/customsecurity/ExampleRestControllerEndpoint.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 10,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "12d1aac5c78627592f5fe7d0069641ac1b4bc5b0f0aebeb51921b53efbea4f3d",
            "1": "6a8c73e9.1cbd3ff4.fc7d5400.4eb72e14.f1d9f854.1cd1af25.1921e5c5.1d874c72.e1d7cd7c.7f413d6f.d1b658f2.4eb72e14.f0e1baa5.5002925a.0779b355.545e9171"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-custom-security/src/main/java/smoketest/actuator/customsecurity/ExampleRestControllerEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 37,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-custom-security/src/main/java/smoketest/actuator/customsecurity/ExampleRestControllerEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 37,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-custom-security/src/main/java/smoketest/actuator/customsecurity/ExampleRestControllerEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 10,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-custom-security/src/main/java/smoketest/actuator/customsecurity/ExampleRestControllerEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 10,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-custom-security/src/main/java/smoketest/actuator/customsecurity/ExampleRestControllerEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 10,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/SpringCSRF/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The body parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "markdown": "The {0} parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "arguments": [
              "[body](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorControllerIntegrationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 438,
                  "endLine": 438,
                  "startColumn": 26,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e717f82f9670c1b5b08c1fa810a6ff3da37efcc2c6948c2f3424ea89109e3198",
            "1": "cb724ed2.8dc00fed.a224ef38.ea5db504.f0e1baa5.58c3080a.b39c58cd.69956d20.cb724ed2.8dc00fed.a224ef38.ea5db504.f0e1baa5.58c3080a.1a0c7c19.69956d20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorControllerIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 26,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/SpringCSRF/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The body parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "markdown": "The {0} parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "arguments": [
              "[body](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/web/servlet/WebMvcEndpointChildContextConfigurationIntegrationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 227,
                  "startColumn": 25,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5d8fc92c4e160f0d6ae0ce12ada036e2ffd94bf039507c0945c1cd70dec6f0b5",
            "1": "cb724ed2.fdf3e474.a224ef38.ea5db504.f0e1baa5.58c3080a.e742865e.bb7dc2c7.cb724ed2.fdf3e474.a224ef38.ea5db504.f0e1baa5.58c3080a.1a0c7c19.bb7dc2c7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/web/servlet/WebMvcEndpointChildContextConfigurationIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 227,
                            "endLine": 227,
                            "startColumn": 25,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/SpringCSRF/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The body parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "markdown": "The {0} parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "arguments": [
              "[body](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 631,
                  "endLine": 631,
                  "startColumn": 26,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0c401f999b72643c8fe77ec529a0722d4a922d156c892dd10cea034735d9c3fb",
            "1": "cb724ed2.fdf3e474.a224ef38.ea5db504.f0e1baa5.58c3080a.e742865e.e3b4b7ed.cb724ed2.fdf3e474.a224ef38.ea5db504.f0e1baa5.58c3080a.1a0c7c19.e3b4b7ed"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 631,
                            "endLine": 631,
                            "startColumn": 26,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/SpringCSRF/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The message parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "markdown": "The {0} parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "arguments": [
              "[message](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/mvc/MessageController.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 27,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d73b9944b2ba89ef5828e0bc31c1d9721b32260770775bcee1d5e04d79b699bc",
            "1": "df2e2740.7f413d6f.b29a2e2c.555a5f5f.f0e1baa5.58c3080a.a89a563e.145a4403.df2e2740.7f413d6f.b29a2e2c.555a5f5f.f0e1baa5.58c3080a.026eda45.145a4403"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-thymeleaf/src/main/java/smoketest/web/thymeleaf/mvc/MessageController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 27,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/SpringCSRF/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The message parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "markdown": "The {0} parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "arguments": [
              "[message](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-groovy-templates/src/main/java/smoketest/groovytemplates/mvc/MessageController.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 27,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df36c9c8d29905c12616590e829ec54ead5babedf6a15040b138b1c4462252b9",
            "1": "df2e2740.7f413d6f.b29a2e2c.3519ac88.f0e1baa5.58c3080a.a89a563e.145a4403.df2e2740.7f413d6f.b29a2e2c.3519ac88.f0e1baa5.58c3080a.026eda45.145a4403"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-web-groovy-templates/src/main/java/smoketest/groovytemplates/mvc/MessageController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 27,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/SpringCSRF/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The content parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "markdown": "The {0} parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "arguments": [
              "[content](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 160,
                  "endLine": 160,
                  "startColumn": 30,
                  "endColumn": 70
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e7376d37104f87d56fea87b68f02da06a85fccec3fb8073daaf7f316ed5cf32e",
            "1": "e1d7cd7c.7f413d6f.1f78ea81.3519ac88.f0e1baa5.58c3080a.40cdfdc2.87dfd8cc.e1d7cd7c.7f413d6f.1f78ea81.3519ac88.f0e1baa5.58c3080a.1a0c7c19.87dfd8cc"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 30,
                            "endColumn": 70
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/SpringCSRF/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "The content parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "markdown": "The {0} parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.",
            "arguments": [
              "[content](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 153,
                  "endLine": 153,
                  "startColumn": 30,
                  "endColumn": 70
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df592fa73f9a358fa12a92a1196c417284c018c3143b376e0637974fe0675f99",
            "1": "e1d7cd7c.7f413d6f.1f78ea81.3519ac88.f0e1baa5.58c3080a.40cdfdc2.87dfd8cc.e1d7cd7c.7f413d6f.1f78ea81.3519ac88.f0e1baa5.58c3080a.1a0c7c19.87dfd8cc"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingIntegrationTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 153,
                            "endLine": 153,
                            "startColumn": 30,
                            "endColumn": 70
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TLS",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/SkipSslVerificationHttpRequestFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 24,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "72e8fd2678493430d41b4751a2c2ab48be0d06efd5d817f200a4a8d3cebcbad1",
            "1": "19689298.1cbd3ff4.011b8e79.788ea034.8afeca56.afca3b91.82bd02e5.54d46e25.19689298.1cbd3ff4.011b8e79.788ea034.8afeca56.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/SkipSslVerificationHttpRequestFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 24,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TLS",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/ssl/SslContextFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 28,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7af6c98c6a4f0e45a0997afdd4bd47f7788a2acf9c6f32f584cee2965da5317a",
            "1": "19689298.1cbd3ff4.011b8e79.b2f7d106.178caa9c.67356b77.3d39ca0c.54d46e25.19689298.1cbd3ff4.011b8e79.b2f7d106.178caa9c.67356b77.3d39ca0c.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/ssl/SslContextFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 28,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedSecret/test",
          "ruleIndex": 20,
          "level": "note",
          "message": {
            "text": "Hardcoded value string is used as a cipher key. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "markdown": "Hardcoded value {0} is used as a {1}. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "arguments": [
              "[string](0)",
              "[cipher key](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ssl/PropertiesSslBundleTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 3,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "de54c9e8a554234da77a9edacf646dce1655af147235cc3a874b3c08608d66d8",
            "1": "087ae084.c3959464.fc7d5400.e22980a8.2753e2f6.16c2b278.d31f9940.54d46e25.087ae084.c3959464.fc7d5400.e22980a8.2753e2f6.16c2b278.d31f9940.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ssl/PropertiesSslBundleTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 42,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ssl/PropertiesSslBundleTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 3,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedSecret/test",
          "ruleIndex": 20,
          "level": "note",
          "message": {
            "text": "Hardcoded value string is used as a cipher key. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "markdown": "Hardcoded value {0} is used as a {1}. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "arguments": [
              "[string](0)",
              "[cipher key](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ssl/PropertiesSslBundleTests.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 52,
                  "startColumn": 3,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df31885eb0ebd64f7e27588d19b2b34ae6f00e6c11220b970e805ed5053d5f75",
            "1": "e274fe34.8b93f374.fc7d5400.e22980a8.f1d9f854.16c2b278.84bb7a7b.54d46e25.e274fe34.8b93f374.fc7d5400.e22980a8.f1d9f854.16c2b278.84bb7a7b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ssl/PropertiesSslBundleTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 19,
                            "endColumn": 89
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ssl/PropertiesSslBundleTests.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 52,
                            "startColumn": 3,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/DisablesCSRFProtection",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "CSRF protection is disabled by csrf. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[csrf](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-docs/src/main/kotlin/org/springframework/boot/docs/data/sql/h2webconsole/springsecurity/DevProfileSecurityConfiguration.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 36,
                  "startColumn": 10,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4f21277a4560aa77138a58f002f261c65aafddcbdddf145c24699723926ba4d6",
            "1": "2b79949e.75374b76.51725473.69bae326.b928c457.b1d66766.ca74a2f5.c32405cf.2b79949e.75374b76.51725473.69bae326.b928c457.b1d66766.ce0185b2.c32405cf"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-docs/src/main/kotlin/org/springframework/boot/docs/data/sql/h2webconsole/springsecurity/DevProfileSecurityConfiguration.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 36,
                            "startColumn": 10,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials",
          "ruleIndex": 22,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 28,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8e9b8e8b95a0fbcf245b492f751f7aa5e63a438bc80e1acab22e96ec04faba9a",
            "1": "ed115f97.92e378d2.5ef54930.de031890.8b2d3351.ce109560.6f4217dd.87dfd8cc.ed115f97.b9ab965a.4236f2fb.de031890.8b2d3351.ce109560.c66d287d.bd75b03c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 28,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 151,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.security.DigestInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[java.security.DigestInputStream](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 566,
                  "endLine": 566,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "91ca2efd2a0f04422ad25bbab242f97ef10ce7c6853e6c44410c95321c7bad55",
            "1": "dde87513.3e05ee58.140f65dc.0d9b7d6d.790903b3.0053cf28.df7e59ba.60cf4a57.af4153b6.11dce138.a048dfbb.e22980a8.928997d9.7fda7c5e.c12951bb.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 516,
                            "endLine": 516,
                            "startColumn": 30,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 516,
                            "endLine": 516,
                            "startColumn": 30,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 516,
                            "endLine": 516,
                            "startColumn": 11,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 564,
                            "endLine": 564,
                            "startColumn": 23,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 564,
                            "endLine": 564,
                            "startColumn": 23,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 564,
                            "endLine": 564,
                            "startColumn": 13,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 566,
                            "endLine": 566,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Packager.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 566,
                            "endLine": 566,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Digest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 21,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Digest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 63,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Digest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 63,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Digest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 45,
                            "endColumn": 62
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 507,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.nio.file.Files.delete, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[java.nio.file.Files.delete](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 317,
                  "endLine": 317,
                  "startColumn": 5,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "77891f9ccf0271add55ac390f0b293606f9dc8bfda1b111c11e89cffd1cb3916",
            "1": "19689298.61528139.6c4186e2.64e78e25.a1491c54.fc0e2c7e.df7e59ba.54d46e25.e1d7cd7c.1fa5d9ec.1f78ea81.fb426615.863c1642.fc0e2c7e.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 22,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 22,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 7,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 311,
                            "endLine": 311,
                            "startColumn": 41,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 311,
                            "endLine": 311,
                            "startColumn": 41,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 311,
                            "endLine": 311,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 312,
                            "endLine": 312,
                            "startColumn": 19,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 313,
                            "endLine": 313,
                            "startColumn": 17,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 313,
                            "endLine": 313,
                            "startColumn": 17,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 313,
                            "endLine": 313,
                            "startColumn": 10,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerApi.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 507,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.nio.file.Files.newOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41),(42),(43),(44),(45),(46),(47)",
              "[java.nio.file.Files.newOutputStream](48)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117,
                  "startColumn": 15,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "12654669b0773250df6c183d01860fd7f6f9289c782b28adba6680b74f9382ba",
            "1": "19689298.ff76257e.c53d9f3d.6c52ae28.939278a7.d328ff7c.df7e59ba.54d46e25.19689298.5efff463.c53d9f3d.e22980a8.939278a7.7fda7c5e.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 64,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 64,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 37,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 290,
                            "endLine": 290,
                            "startColumn": 10,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 22,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 12,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 24,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 3,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 10,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 10,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 36,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 28,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 22,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 162,
                            "endLine": 162,
                            "startColumn": 34,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 32,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 32,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 22,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 22,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 11,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 42,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 42,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 42,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 27,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 9,
                            "endColumn": 94
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 21,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 4,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 10,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 15,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 137,
                            "startColumn": 7,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 8,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 38,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 29,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 42,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 43,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 44,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 45,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 46,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 47,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 55,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 48,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 33,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.nio.file.Files.newOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41),(42),(43),(44),(45),(46),(47)",
              "[java.nio.file.Files.newOutputStream](48)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "startColumn": 14,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "59d135fae87d6858544500e6fe7eb158caf907a87cacef1972eb049d5ea25962",
            "1": "e176ed78.cb878c2b.a224ef38.0587c440.939278a7.0d476878.d6d49880.8f7204fd.19689298.45d65c94.33fa5dbe.e11e1d28.dd06b926.7fda7c5e.2ed7aa4c.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 17,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 17,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 10,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 7,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 11,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 11,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 4,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 8,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 38,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 29,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 24,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 3,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 10,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 10,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 36,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 28,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 22,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 162,
                            "endLine": 162,
                            "startColumn": 34,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 32,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 32,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 22,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 22,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 11,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 42,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 42,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 42,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 27,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 9,
                            "endColumn": 94
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 21,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 4,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 10,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 42,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 15,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 43,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 137,
                            "startColumn": 7,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 44,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 45,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 46,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 47,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 55,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 48,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 33,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.nio.file.Files.newOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15)",
              "[java.nio.file.Files.newOutputStream](16)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 163,
                  "startColumn": 33,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d0415ddb40b5288f4d460f2a8f815cc2209932639be7eb86ba5b1462cb1702b1",
            "1": "e7f0c877.d6e7929a.a224ef38.e11e1d28.a1491c54.a38198f5.c02162fe.29b093cb.e7f0c877.45d65c94.33fa5dbe.a3d10540.d31a8364.7fda7c5e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 17,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 17,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 10,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 7,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 11,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 11,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 4,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 8,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 38,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 55,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 33,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a zip file flows into deleteOnExit, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15)",
              "[deleteOnExit](16)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161,
                  "startColumn": 3,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6d15c88441fd5369651689328d40e2f4f50ae974b735db011b059baa96c2de4b",
            "1": "1df77116.cb878c2b.a224ef38.e22980a8.a1491c54.0d476878.be04624c.54d46e25.e7f0c877.45d65c94.33fa5dbe.a3d10540.dd06b926.7fda7c5e.2ed7aa4c.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 17,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 17,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 10,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 7,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 11,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 11,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 4,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 8,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 38,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 161,
                            "startColumn": 3,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.nio.file.Files.createFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15)",
              "[java.nio.file.Files.createFile](16)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 179,
                  "endLine": 179,
                  "startColumn": 3,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "63f909dae9f53b08c9e6647217e774f7bd250ac83ad2711147e8ef07c00b74a0",
            "1": "9317e816.89433194.8f415be7.a3d10540.7c3e9bb9.67b84943.df7e59ba.54d46e25.9317e816.45d65c94.8f415be7.a3d10540.df8f9187.7fda7c5e.cf9d622a.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 17,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 17,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 10,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 7,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 11,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 11,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 4,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 8,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 38,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 179,
                            "endLine": 179,
                            "startColumn": 44,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 179,
                            "endLine": 179,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 179,
                            "endLine": 179,
                            "startColumn": 3,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the HTTP request body flows into org.springframework.util.FileCopyUtils.copy, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[the HTTP request body](0)",
              "[flows](1)",
              "[org.springframework.util.FileCopyUtils.copy](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/remote/client/ClassPathChangeUploader.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111,
                  "startColumn": 6,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9665913caee5929d9e3af972608bb4f75cb03d0b64dbceddc68c8df1429e9044",
            "1": "2d06e3d6.1cbd3ff4.b95ad01e.31cb6f48.2b515b97.4450c44e.76a0da3b.54d46e25.19689298.2b7b4a4a.f7ad0f7d.e22980a8.d31a8364.4450c44e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/remote/client/ClassPathChangeUploader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 32,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/remote/client/ClassPathChangeUploader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 32,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/remote/client/ClassPathChangeUploader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 6,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 757,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Java",
            "files": 6870,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Ruby",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 298,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Kotlin",
            "files": 348,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": ".pom",
            "files": 5,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 17,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Java Server Pages",
            "files": 5,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 3,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "Java",
            "files": 2,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 50,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "XML",
            "files": 1,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

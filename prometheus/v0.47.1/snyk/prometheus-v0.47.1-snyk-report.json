{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "InTest",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/shaoshing/train/commit/10f251358766222f4211540c014fd74c6a32cf83?diff=split#diff-8b80bab7c379f59fe83cb4ee2d015ea7L9",
                    "lines": [
                      {
                        "line": ")",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Handler(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "  content := ReadAsset(r.URL.Path)",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Fprintf(w, content)",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  reader := strings.NewReader(content)",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "  io.Copy(w, reader)",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 14,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/alphagov/router/commit/1c0f502e99bafc95900f6d0c42dfb6c364430a7c?diff=split#diff-a2c8aae7faef01e89d82efda1da4f769L12",
                    "lines": [
                      {
                        "line": "func makeDebugServer(name string) http.HandlerFunc {",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var randSrc = &randomDataMaker{src: rand.NewSource(time.Now().UTC().UnixNano())}",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return func(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    randSrc.Lock()",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "    defer randSrc.Unlock()",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "w.Header().Set(\"Content-Type\", \"text/plain\")",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "fmt.Fprintln(w, name, \":\", r.URL.Path)",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "fmt.Fprintln(w)",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 44,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/aristanetworks/openconfigbeat/commit/d9f4424d7d6d442a95dc9860bf704745a4ce5cae?diff=split#diff-13c7e3ca9b985b0c964b3150b184b678L30",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "func dbJoin(ctx interface{}, w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  r.ParseForm()",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "  diagnose.DebugHTTPForm(r)",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "err := nDB.Join(strings.Split(r.Form[\"members\"][0], \",\"))",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Fprintf(w, \"%s error in the DB join %s\\n\", r.URL.Path, err)",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  rsp := diagnose.FailCommand(fmt.Errorf(\"%s error in the DB join %s\", r.URL.Path, err))",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "  log.WithError(err).Error(\"join cluster failed\")",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "  diagnose.HTTPReply(w, rsp, json)",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 57,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 288,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/shaoshing/train/commit/10f251358766222f4211540c014fd74c6a32cf83?diff=split#diff-8b80bab7c379f59fe83cb4ee2d015ea7L9",
                    "lines": [
                      {
                        "line": ")",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Handler(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "  content := ReadAsset(r.URL.Path)",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Fprintf(w, content)",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  reader := strings.NewReader(content)",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "  io.Copy(w, reader)",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 14,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/alphagov/router/commit/1c0f502e99bafc95900f6d0c42dfb6c364430a7c?diff=split#diff-a2c8aae7faef01e89d82efda1da4f769L12",
                    "lines": [
                      {
                        "line": "func makeDebugServer(name string) http.HandlerFunc {",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var randSrc = &randomDataMaker{src: rand.NewSource(time.Now().UTC().UnixNano())}",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return func(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    randSrc.Lock()",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "    defer randSrc.Unlock()",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "w.Header().Set(\"Content-Type\", \"text/plain\")",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "fmt.Fprintln(w, name, \":\", r.URL.Path)",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "fmt.Fprintln(w)",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 44,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/aristanetworks/openconfigbeat/commit/d9f4424d7d6d442a95dc9860bf704745a4ce5cae?diff=split#diff-13c7e3ca9b985b0c964b3150b184b678L30",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "func dbJoin(ctx interface{}, w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  r.ParseForm()",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "  diagnose.DebugHTTPForm(r)",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "err := nDB.Join(strings.Split(r.Form[\"members\"][0], \",\"))",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Fprintf(w, \"%s error in the DB join %s\\n\", r.URL.Path, err)",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  rsp := diagnose.FailCommand(fmt.Errorf(\"%s error in the DB join %s\", r.URL.Path, err))",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "  log.WithError(err).Error(\"join cluster failed\")",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "  diagnose.HTTPReply(w, rsp, json)",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 57,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 288,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "go/InsecureHash/test",
              "name": "InsecureHash/test",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/ErrorMessage",
              "name": "ErrorMessage",
              "shortDescription": {
                "text": "Generation of Error Message Containing Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen a command to your site or application fails, it should do so gracefully, meaning that the user is informed that there has been a problem, rather than experiencing erratic behavior, such as crashing, hanging, or returning a 404 or similar generic error page.\n\nIn some cases, developers include information in an error message to help pinpoint the source of an error; these may include username, password, application path, stack values, and other internal details. When this weakness is present, if these logs are accessible to an attacker, it may give them clues as to the inner workings of the app, helping them plan a focused attack. For example, clues revealing SQL database details may help plan an SQL injection attack.\n\n## Best practices for prevention\n* Keep error messages to the barest minimum of helpful information that users absolutely need to know.\n* Use consistent error messages that do not give attackers clues that they might be on the right track to a successful attack, such as \"File not found\" or \"User name does not exist\".\n* Ensure that debugging information is removed from code prior to release.\n* Create clear policy for the types of errors that must be logged, which messages will be displayed to users, and which details will be logged for later alerting and debugging.\n* When logging error details, never include sensitive information such as passwords.\n* Implement naming conventions that will help you flag and defend sensitive information.\n* Use dynamic (white box) test techniques to identify conditions that could cause errors and failures and test thoroughly to ensure that the code performs gracefully without revealing sensitive data under these stress conditions.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "ErrorMessage",
                  "Security",
                  "SourceStackTrace"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pingcap/dm/commit/ae69e0f0c2d63fd1ed6ecfea4a83e7b34d51899d?diff=split#diff-e36df0e4c06ecb8f4fd37373ef56e339L68",
                    "lines": [
                      {
                        "line": "// PrintLines adds a wrap to support `\\n` within `chzyer/readline`",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "func PrintLines(format string, a ...interface{}) {",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Println(fmt.Sprintf(format, a...))",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "s, err := marshResponseToString(resp)",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "  PrintLines(errors.ErrorStack(err))",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  PrintLines(\"%v\", err)",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Println(s)",
                        "lineNumber": 77,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/markelog/eclectica/commit/95135c35e2561aca0c9af6d77f4be114170a665d?diff=split#diff-df1faddfbda9cbba6402850bb26098b2L67",
                    "lines": [
                      {
                        "line": "if variables.IsDebug() {",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Println(errors.Wrap(err, 2).ErrorStack())",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  stderr.Println(errors.Wrap(err, 2).ErrorStack())",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 71,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dnanexus/dxfuse/commit/46456485408b62c27b551f37d70e95362638d3ce?diff=split#diff-0fc7be4d9b9b60f945b4762084c79c2eL76",
                    "lines": [
                      {
                        "line": "// when calling the database.",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func printErrorStack(err error) error {",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\tvar buf []byte",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\truntime.Stack(buf, false)",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  debug.PrintStack()",
                        "lineNumber": 78,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 103,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 119,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create table data_objects\")",
                        "lineNumber": 120,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "ON data_objects (id);",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 111,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 128,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create index id_index on table data_objects\")",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": ");",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 132,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 150,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create table namespace\")",
                        "lineNumber": 151,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "ON namespace (parent);",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 140,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 159,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create index parent_index on table namespace\")",
                        "lineNumber": 160,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "ON namespace (inode);",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 150,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 170,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create index inode_rev_index on table namespace\")",
                        "lineNumber": 171,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": ");",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 169,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 191,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create table directories\")",
                        "lineNumber": 192,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "  InodeRoot, \"\", \"\", boolToInt(false),",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "  time.Now().Unix(), time.Now().Unix())",
                        "lineNumber": 180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  nowSeconds, nowSeconds, dirReadOnlyMode)",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 182,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 206,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create root directory\")",
                        "lineNumber": 207,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    VALUES ('%s', '%s', '%d', '%d');`,",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \"\", \"/\", nsDirType, InodeRoot)",
                        "lineNumber": 188,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  rParent, rBase, nsDirType, InodeRoot)",
                        "lineNumber": 215,
                        "lineChange": "added"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 190,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 217,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create root inode (%d)\", InodeRoot)",
                        "lineNumber": 218,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "txn, err := fsys.db.Begin()",
                        "lineNumber": 202,
                        "lineChange": "removed"
                      },
                      {
                        "line": "txn, err := mdb.db.Begin()",
                        "lineNumber": 230,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 204,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 232,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not open transaction\")",
                        "lineNumber": 233,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err := fsys.metadataDbInitCore(txn); err != nil {",
                        "lineNumber": 207,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err := mdb.init2(txn); err != nil {",
                        "lineNumber": 236,
                        "lineChange": "added"
                      },
                      {
                        "line": "  txn.Rollback()",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 209,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 238,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not initialize database\")",
                        "lineNumber": 239,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err := txn.Commit(); err != nil {",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "  txn.Rollback()",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 214,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 244,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Error during commit\")",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fId)",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "rows, err := txn.Query(sqlStmt)",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return InodeInvalid, 0, printErrorStack(err)",
                        "lineNumber": 243,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 274,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return InodeInvalid, 0, false, fmt.Errorf(\"lookupDataObjectById fId=%s\", fId)",
                        "lineNumber": 275,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "  inode)",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "rows, err := fsys.db.Query(sqlStmt)",
                        "lineNumber": 278,
                        "lineChange": "removed"
                      },
                      {
                        "line": "rows, err := mdb.db.Query(sqlStmt)",
                        "lineNumber": 307,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "  panic(fmt.Sprintf(\"could not find data-object inode=%d dir=%s name=%s\",",
                        "lineNumber": 281,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    inode, dirFullName, oname))",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "rows, err := mdb.db.Query(sqlStmt)",
                        "lineNumber": 398,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 399,
                        "lineChange": "added"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 400,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return nil, false, fmt.Errorf(\"LookupByInode: error in query\")",
                        "lineNumber": 401,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 402,
                        "lineChange": "added"
                      },
                      {
                        "line": "var obj_type int",
                        "lineNumber": 405,
                        "lineChange": "added"
                      },
                      {
                        "line": "numRows := 0",
                        "lineNumber": 406,
                        "lineChange": "added"
                      },
                      {
                        "line": "for rows.Next() {",
                        "lineNumber": 407,
                        "lineChange": "added"
                      },
                      {
                        "line": "  rows.Scan(&parent, &name, &obj_type)",
                        "lineNumber": 408,
                        "lineChange": "added"
                      },
                      {
                        "line": "  numRows++",
                        "lineNumber": 409,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 410,
                        "lineChange": "added"
                      },
                      {
                        "line": "rows.Close()",
                        "lineNumber": 411,
                        "lineChange": "added"
                      },
                      {
                        "line": "switch numRows {",
                        "lineNumber": 413,
                        "lineChange": "added"
                      },
                      {
                        "line": "    `, dirFullName, nsDirType)",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "rows, err := fsys.db.Query(sqlStmt)",
                        "lineNumber": 330,
                        "lineChange": "removed"
                      },
                      {
                        "line": "rows, err := mdb.db.Query(sqlStmt)",
                        "lineNumber": 448,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nil, nil, printErrorStack(err)",
                        "lineNumber": 332,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Print(err.Error())",
                        "lineNumber": 450,
                        "lineChange": "added"
                      },
                      {
                        "line": "  log.Printf(\"Error in directories query\")",
                        "lineNumber": 451,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return nil, nil, err",
                        "lineNumber": 452,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "rows, err = fsys.db.Query(sqlStmt)",
                        "lineNumber": 364,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nil, nil, printErrorStack(err)",
                        "lineNumber": 366,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Find the files in the directory",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "files := make(map[string]File)",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "for rows.Next() {",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var f File",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "inode, nlink, err := fsys.lookupDataObjectInodeById(txn, objId)",
                        "lineNumber": 407,
                        "lineChange": "removed"
                      },
                      {
                        "line": "inode, nlink, ok, err := mdb.lookupDataObjectById(txn, objId)",
                        "lineNumber": 536,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return InodeInvalid, err",
                        "lineNumber": 409,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return 0, err",
                        "lineNumber": 538,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "VALUES ('%d', '%s', '%s', '%d', '%d', '%d', '%d', '%d', '%s');`,",
                        "lineNumber": 420,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kind, objId, projId, inode, size, ctime, mtime, 1, inlineData)",
                        "lineNumber": 421,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    VALUES ('%d', '%s', '%s', '%d', '%d', '%d', '%d', '%d', '%d', '%s');`,",
                        "lineNumber": 549,
                        "lineChange": "added"
                      },
                      {
                        "line": "    kind, objId, projId, inode, size, ctime, mtime, int(mode), 1, inlineData)",
                        "lineNumber": 550,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return 0, printErrorStack(err)",
                        "lineNumber": 423,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    log.Printf(err.Error())",
                        "lineNumber": 552,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.Printf(\"Error inserting into data objects table\")",
                        "lineNumber": 553,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return 0, err",
                        "lineNumber": 554,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "    WHERE id = '%s';`,",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "    nlink + 1, objId)",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return 0, printErrorStack(err)",
                        "lineNumber": 433,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    log.Printf(\"Error updating data_object table, incrementing the link number\")",
                        "lineNumber": 568,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return 0, err",
                        "lineNumber": 569,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "    VALUES ('%s', '%s', '%d', '%d');`,",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "  parentDir, fname, nsDataObjType, inode)",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return 0, printErrorStack(err)",
                        "lineNumber": 442,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"Error inserting %s/%s into the namespace table\", parentDir, fname)",
                        "lineNumber": 578,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return 0, err",
                        "lineNumber": 579,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "    VALUES ('%s', '%s', '%d', '%d');`,",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "  parentDir, basename, nsDirType,\tinode)",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return 0, printErrorStack(err)",
                        "lineNumber": 476,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"createEmptyDir: error inserting into namespace table %s/%s\",",
                        "lineNumber": 614,
                        "lineChange": "added"
                      },
                      {
                        "line": "    parentDir, basename)",
                        "lineNumber": 615,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return 0, err",
                        "lineNumber": 616,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "                   VALUES ('%d', '%s', '%s', '%d', '%d', '%d');`,",
                        "lineNumber": 482,
                        "lineChange": "removed"
                      },
                      {
                        "line": "inode, projId, projFolder, boolToInt(populated), ctime, mtime)",
                        "lineNumber": 483,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                     VALUES ('%d', '%s', '%s', '%d', '%d', '%d', '%d');`,",
                        "lineNumber": 623,
                        "lineChange": "added"
                      },
                      {
                        "line": "  inode, projId, projFolder, boolToInt(populated), ctime, mtime, int(mode))",
                        "lineNumber": 624,
                        "lineChange": "added"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return 0, printErrorStack(err)",
                        "lineNumber": 485,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"createEmptyDir: error inserting into directories table %d\",",
                        "lineNumber": 626,
                        "lineChange": "added"
                      },
                      {
                        "line": "    inode)",
                        "lineNumber": 627,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return 0, err",
                        "lineNumber": 628,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 629,
                        "lineChange": "none"
                      },
                      {
                        "line": "return inode, nil",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "              WHERE inode = '%d'`,",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "  dinode)",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 498,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"Error set directory %d to populated\", dinode)",
                        "lineNumber": 641,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 642,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 643,
                        "lineChange": "none"
                      },
                      {
                        "line": "return nil",
                        "lineNumber": 644,
                        "lineChange": "none"
                      },
                      {
                        "line": "dxDir, err := DxDescribeFolder(httpClient, &fsys.dxEnv, projId, projFolder)",
                        "lineNumber": 631,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fsys.httpClientPool <- httpClient",
                        "lineNumber": 632,
                        "lineChange": "removed"
                      },
                      {
                        "line": "dxDir, err := DxDescribeFolder(ctx, httpClient, &mdb.dxEnv, projId, projFolder, true)",
                        "lineNumber": 785,
                        "lineChange": "added"
                      },
                      {
                        "line": "mdb.httpClientPool <- httpClient",
                        "lineNumber": 786,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 787,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Printf(\"Describe error: %s\", err.Error())",
                        "lineNumber": 634,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  fmt.Printf(err.Error())",
                        "lineNumber": 788,
                        "lineChange": "added"
                      },
                      {
                        "line": "  fmt.Printf(\"reading directory frmo DNAx error\")",
                        "lineNumber": 789,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 790,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 791,
                        "lineChange": "none"
                      },
                      {
                        "line": "// very well mislead the user.",
                        "lineNumber": 812,
                        "lineChange": "none"
                      },
                      {
                        "line": "posixDir, err := PosixFixDir(fsys, dxDir)",
                        "lineNumber": 658,
                        "lineChange": "removed"
                      },
                      {
                        "line": "posixDir, err := PosixFixDir(mdb.options, dxDir)",
                        "lineNumber": 813,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 814,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 815,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 816,
                        "lineChange": "none"
                      },
                      {
                        "line": "txn, err := fsys.db.Begin()",
                        "lineNumber": 663,
                        "lineChange": "removed"
                      },
                      {
                        "line": "txn, err := mdb.db.Begin()",
                        "lineNumber": 818,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 819,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 665,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 820,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"directoryReadFromDNAx: error opening transaction\")",
                        "lineNumber": 821,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 822,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 849,
                        "lineChange": "none"
                      },
                      {
                        "line": "    txn.Rollback()",
                        "lineNumber": 850,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return printErrorStack(err)",
                        "lineNumber": 691,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    log.Printf(err.Error())",
                        "lineNumber": 851,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return fmt.Errorf(\"directoryReadFromDNAx: creating faux directory %s\", fauxDirPath)",
                        "lineNumber": 852,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 853,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var no_subdirs []string",
                        "lineNumber": 855,
                        "lineChange": "none"
                      },
                      {
                        "line": "  err = fsys.populateDir(",
                        "lineNumber": 695,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  err = mdb.populateDir(",
                        "lineNumber": 856,
                        "lineChange": "added"
                      },
                      {
                        "line": "    txn, fauxDirInode,",
                        "lineNumber": 857,
                        "lineChange": "none"
                      },
                      {
                        "line": "    projId, \"\",",
                        "lineNumber": 858,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ctimeApprox, mtimeApprox,",
                        "lineNumber": 859,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fauxDirPath, fauxFiles, no_subdirs)",
                        "lineNumber": 860,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 861,
                        "lineChange": "none"
                      },
                      {
                        "line": "    txn.Rollback()",
                        "lineNumber": 862,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return printErrorStack(err)",
                        "lineNumber": 702,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    log.Printf(err.Error())",
                        "lineNumber": 863,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return fmt.Errorf(\"directoryReadFromDNAx: populating faux directory %s\", fauxDirPath)",
                        "lineNumber": 864,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 865,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 866,
                        "lineChange": "none"
                      },
                      {
                        "line": "case nsDataObjType:",
                        "lineNumber": 959,
                        "lineChange": "none"
                      },
                      {
                        "line": "rows, err := fsys.db.Query(sqlStmt)",
                        "lineNumber": 1008,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1009,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return nil, printErrorStack(err)",
                        "lineNumber": 1010,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1011,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var dname string",
                        "lineNumber": 1015,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var objType int",
                        "lineNumber": 1016,
                        "lineChange": "removed"
                      },
                      {
                        "line": "for rows.Next() {",
                        "lineNumber": 1017,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  rows.Scan(&parent, &dname, &objType)",
                        "lineNumber": 1018,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  numRows++",
                        "lineNumber": 1019,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1020,
                        "lineChange": "removed"
                      },
                      {
                        "line": "rows.Close()",
                        "lineNumber": 1021,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if fsys.options.Verbose {",
                        "lineNumber": 1023,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  file, ok, err := mdb.lookupDataObjectByInode(dirOrFileName, inode)",
                        "lineNumber": 943,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if ok && err == nil {",
                        "lineNumber": 944,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.Printf(\"lookupDataObjectByInode: %v\", file)",
                        "lineNumber": 945,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.Printf(\"size: %d\", file.Size)",
                        "lineNumber": 946,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}",
                        "lineNumber": 1033,
                        "lineChange": "none"
                      },
                      {
                        "line": "return file, ok, err",
                        "lineNumber": 948,
                        "lineChange": "added"
                      },
                      {
                        "line": "default:",
                        "lineNumber": 1035,
                        "lineChange": "none"
                      },
                      {
                        "line": "panic(fmt.Sprintf(\"Invalid object type %d\", objType))",
                        "lineNumber": 950,
                        "lineChange": "added"
                      },
                      {
                        "line": "dirSkel, err := manifest.DirSkeleton()",
                        "lineNumber": 1063,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1064,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 1065,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1066,
                        "lineChange": "none"
                      },
                      {
                        "line": "txn, err := fsys.db.Begin()",
                        "lineNumber": 1071,
                        "lineChange": "removed"
                      },
                      {
                        "line": "txn, err := mdb.db.Begin()",
                        "lineNumber": 971,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1072,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 1073,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"PopulateRoot: Error opening transaction\")",
                        "lineNumber": 973,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 974,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1074,
                        "lineChange": "none"
                      },
                      {
                        "line": "// set the root to be populated",
                        "lineNumber": 1118,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err := fsys.setDirectoryToPopulated(txn, InodeRoot); err != nil {",
                        "lineNumber": 1119,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err := mdb.setDirectoryToPopulated(txn, InodeRoot); err != nil {",
                        "lineNumber": 1028,
                        "lineChange": "added"
                      },
                      {
                        "line": "  txn.Rollback()",
                        "lineNumber": 1120,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 1121,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"PopulateRoot: error setting root directory to populated\")",
                        "lineNumber": 1030,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 1031,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1122,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Check if the directory already contains [name].",
                        "lineNumber": 1149,
                        "lineChange": "removed"
                      },
                      {
                        "line": "_, err := fsys.MetadataDbLookupInDir(dir.FullPath, fname)",
                        "lineNumber": 1150,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err == nil {",
                        "lineNumber": 1151,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  // file already exists",
                        "lineNumber": 1152,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return nil, fuse.EEXIST",
                        "lineNumber": 1153,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1154,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err != fuse.ENOENT {",
                        "lineNumber": 1155,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  // An error occured. We are expecting the file to -not- exist.",
                        "lineNumber": 1156,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return nil, err",
                        "lineNumber": 1157,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1158,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  projId, fname, folder)",
                        "lineNumber": 1171,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fsys.httpClientPool <- httpClient",
                        "lineNumber": 1172,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1173,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return nil, err",
                        "lineNumber": 1174,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1175,
                        "lineChange": "none"
                      },
                      {
                        "line": "// 2. insert into the database",
                        "lineNumber": 1177,
                        "lineChange": "removed"
                      },
                      {
                        "line": "txn, err := fsys.db.Begin()",
                        "lineNumber": 1178,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// insert into the database",
                        "lineNumber": 1050,
                        "lineChange": "added"
                      },
                      {
                        "line": "txn, err := mdb.db.Begin()",
                        "lineNumber": 1051,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1179,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nil, printErrorStack(err)",
                        "lineNumber": 1180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 1053,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return File{}, fmt.Errorf(\"CreateFile error opening transaction\")",
                        "lineNumber": 1054,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1181,
                        "lineChange": "none"
                      },
                      {
                        "line": "nowSeconds := time.Now().Unix()",
                        "lineNumber": 1182,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fname,",
                        "lineNumber": 1192,
                        "lineChange": "none"
                      },
                      {
                        "line": "  localPath)",
                        "lineNumber": 1193,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  txn.Rollback()",
                        "lineNumber": 1195,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nil, printErrorStack(err)",
                        "lineNumber": 1196,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 1072,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return File{}, fmt.Errorf(\"CreateFile error creating data object\")",
                        "lineNumber": 1073,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1197,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err := txn.Commit(); err != nil {",
                        "lineNumber": 1198,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nil, err",
                        "lineNumber": 1199,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 1076,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return File{}, fmt.Errorf(\"CreateFile commit failed\")",
                        "lineNumber": 1077,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1200,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (fsys *Filesys) MetadataDbUpdateFile(f File, fInfo os.FileInfo) error {",
                        "lineNumber": 1219,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  txn, err := fsys.db.Begin()",
                        "lineNumber": 1220,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1221,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 1222,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1223,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 1232,
                        "lineChange": "none"
                      },
                      {
                        "line": "  txn.Rollback()",
                        "lineNumber": 1233,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 1234,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1235,
                        "lineChange": "none"
                      },
                      {
                        "line": "return txn.Commit()",
                        "lineNumber": 1236,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 3,
                "cwe": [
                  "CWE-209"
                ]
              }
            },
            {
              "id": "go/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/CommandInjection/test",
              "name": "CommandInjection/test",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "CommandInjection",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/kreuzwerker/envplate/commit/1f0aff0ab29404007f3b5bdee19c81b1455da153?diff=split#diff-e754576e5b32f216d432a1aca402036bL18",
                    "lines": [
                      {
                        "line": "flagArgs, execArgs := env.SplitArgs()",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "flagArgs, execArgs := doubledash.Args, doubledash.Xtra",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "os.Args = flagArgs",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "if len(execArgs) > 0 {",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if err := syscall.Exec(execArgs[0], execArgs, os.Environ()); err != nil {",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    env.Log(env.ERROR, \"Cannot exec '%v': %v\", execArgs, err)",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 46,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/creasty/rid/commit/245ac35e5001d6a17de03471e5dd5cf2c7a52546?diff=split#diff-2a66a49ce9a1ffa85b6805fbf4d82b6aL55",
                    "lines": [
                      {
                        "line": " }",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (c *CLI) run() error {",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  cmd := exec.Command(c.Args[0], c.Args[1:]...)",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (c *CLI) exec(name string, args ...string) error {",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "  cmd := exec.Command(name, args...)",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "  cmd.Dir = c.BaseDir",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  cmd.Stdin = os.Stdin",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (c *CLI) run() error {",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return c.exec(c.Args[0], c.Args[1:]...)",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 74,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mattatcha/remotectl/commit/fc2ac7b75bfc84c79e95420eac1b04eb5735b5db?diff=split#diff-7ddfb3e035b42cd70649cc33393fe32cR107",
                    "lines": [
                      {
                        "line": "fatalErr(err)",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "cmd := strings.Join(flag.Args(), \" \")",
                        "lineNumber": 106,
                        "lineChange": "added"
                      },
                      {
                        "line": "group := &sync.WaitGroup{}",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "for _, host := range hosts {",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Create an ssh session.",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "session, err := client.NewSession()",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "fatalErr(err)",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "defer session.Close()",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": " \tgo hostStreamer(host, errPipe, os.Stderr)",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // Run command that was passed into remotectl - doesn't belong here",
                        "lineNumber": 175,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  session.Run(strings.Join(flag.Args(), \" \"))",
                        "lineNumber": 176,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  session.Run(cmd)",
                        "lineNumber": 176,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 177,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 81,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "go/OR",
              "name": "OR",
              "shortDescription": {
                "text": "Open Redirect"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nAn open redirect attack takes place when a web application redirects the user to an unauthorized and untrusted site. In general, URL redirection refers to the ability of a website or application to redirect users to another site. This is often a benign and useful feature. For example, if a resource has moved to a new location, URL redirection can transfer the user to that location rather than displaying an error message.\nHowever, this ability can be exploited through social engineering, tricking the user into believing they are accessing one site when, in reality, they are being redirected to a dangerous site, such as a phishing site. Once there, the user may be further tricked into entering credentials or personally identifiable information (PII), believing they are still within the original, trusted domain. Attackers can then use these credentials to gain unauthorized access or leverage the user's PII for sale or ransom.\n\n## Best practices for prevention\n* When developing a site or web app, consider implementing a disclaimer page to remind users that they are leaving a secure site.\n* Adopt a zero-trust approach in which all input is treated with suspicion.\n* Validate all input against deny-lists to ensure it does not contain code to redirect the user. This method is good but inherently incomplete.\n* Be aware of all sources of untrusted input being sent to the server that could be used to redirect the user, such as cookies, URL components, filenames, query results, request headers, and more.\n* In particular, be aware of potential API calls that could send input indirectly to redirect the user.\n* To protect end users, use a firewall to block known malicious sites, train users to recognize basic signs of a phishing attack, and ensure that all network endpoints are patched with the most current updates.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "OR",
                  "Security",
                  "SourceServer",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/gost/server/commit/ce357668b723d53d99dbcc43e363f512bb2b80d3?diff=split#diff-4c2bb7d25bc63eb5a926b9394291cba1L60",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "func dashboardRedirector(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "  http.Redirect(w, r, r.URL.Host+\"/Dashboard/\", 302)",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  http.Redirect(w, r, fmt.Sprintf(\"%s/Dashboard/\", r.URL.Host), 301)",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 61,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/g-harel/npmfs/commit/6cafc43c5b3796f3f1e3c5c81df3f143b3c2f92d?diff=split#diff-7ddfb3e035b42cd70649cc33393fe32cL27",
                    "lines": [
                      {
                        "line": "func redirect(append string) http.Handler {",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func redirect(pre, post string) http.Handler {",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    http.Redirect(w, r, r.URL.Path+\"/\", http.StatusMovedPermanently)",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    http.Redirect(w, r, pre+r.URL.Path+post, http.StatusFound)",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "  })",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/google/skia-buildbot/commit/2bebf64780470bd4b45831e0e598ad1e9ef09170?diff=split#diff-69fabce6d86e797cc34bb0d1888909eaL459",
                    "lines": [
                      {
                        "line": "//",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "// to revoke any grants they make.",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "func LogoutHandler(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sklog.Infof(\"LogoutHandler\")",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "  setSkIDCookieValue(w, r, &Session{})",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "  http.Redirect(w, r, r.FormValue(\"redirect\"), 302)",
                        "lineNumber": 461,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  redirect := r.FormValue(\"redirect\")",
                        "lineNumber": 461,
                        "lineChange": "added"
                      },
                      {
                        "line": "  // The empty string for the redirect will just redirect back to the",
                        "lineNumber": 462,
                        "lineChange": "added"
                      },
                      {
                        "line": "  // LogoutHandler in an infinite loop, so fallback to \"/\".",
                        "lineNumber": 463,
                        "lineChange": "added"
                      },
                      {
                        "line": "    redirect = \"/\"",
                        "lineNumber": 465,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 466,
                        "lineChange": "added"
                      },
                      {
                        "line": "  http.Redirect(w, r, redirect, http.StatusFound)",
                        "lineNumber": 467,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 468,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 52,
                "cwe": [
                  "CWE-601"
                ]
              }
            },
            {
              "id": "javascript/PrototypePollution",
              "name": "PrototypePollution",
              "shortDescription": {
                "text": "Prototype Pollution"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n\n-   Property definition by path\n\n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>\n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \"path\", they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n\n-   Web server\n\n\n## Best practices for prevention\n\n1.  Freeze the prototype - use `Object.freeze (Object.prototype)`.\n\n2.  Require schema validation of JSON input.\n\n3.  Avoid using unsafe recursive merge functions.\n\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n\n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \"JavaScript prototype pollution attack in NodeJS application.\" GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "PrototypePollution",
                  "Security",
                  "SourceNonServer",
                  "SourceResourceAccess",
                  "SourceFile",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/angular/angular/commit/c5c6d84fe6bca821dee283cedd691a620a79e4e4?diff=split#diff-4bcfbf99e5f14ffe12cdd29f626ad1f94880e9b91ba2cf6c3829bcf6a07e120dL148",
                    "lines": [
                      {
                        "line": "const navMapItem = navMap[cleanedUrl] = navMap[cleanedUrl] || {};",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (!navMap.has(cleanedUrl)) {",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "  navMap.set(cleanedUrl, {});",
                        "lineNumber": 148,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 149,
                        "lineChange": "added"
                      },
                      {
                        "line": "const navMapItem = navMap.get(cleanedUrl)!;",
                        "lineNumber": 150,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/CommitAnalyzingService/CAS_Web/commit/ccf54ba197e7edb4feebdcd88ba7d133eb8e1901?diff=split#diff-7330bb3c5749d88d8a280c3e31de2b70c660bd02fc4cf46f82ab61126a72e298L118",
                    "lines": [
                      {
                        "line": "for(var i in commits) {",
                        "lineNumber": 117,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t",
                        "lineNumber": 118,
                        "lineChange": "removed"
                      },
                      {
                        "line": "for(var i = 0, l = commits.length; i < l; i++) {",
                        "lineNumber": 116,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// Parse each commit and update thresholds",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trepoMetrics.parseCommit(commits[i]);",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Now normalize the fileschanged",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcommits[i].fileschanged = commits[i].fileschanged",
                        "lineNumber": 123,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/VincentLoy/tweetParser.js/commit/31ccbf365abbb6398fb78705074c11458421cec6?diff=split#diff-343e9403c50c367c18f841170513c764a80c01c26a0d9c2746a5fd632febe770L19",
                    "lines": [
                      {
                        "line": "for (var i in datas) {",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var i;",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "for (i = 0; i < datas.length; i += 1) {",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (datas[i].contributions > 1) {",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "        datas[i].wording = \"contributions\";",
                        "lineNumber": 22,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 354,
                "cwe": [
                  "CWE-1321"
                ]
              }
            },
            {
              "id": "go/Ssrf",
              "name": "Ssrf",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "Ssrf",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-918"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into fmt.Fprint, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[fmt.Fprint](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "discovery/digitalocean/mock_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 3,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "763f0717146f486b29efb93a6f84e56e043c3c50463425a82ab950ddb89052f7",
            "1": "9cf53582.348ddf12.45df3e14.9692a5c1.7ed83494.57f89f2f.0873598c.37d4bff0.33737509.348ddf12.fd4eeae2.9692a5c1.6b6807dc.57f89f2f.2c50761c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 23,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 23,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 23,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 6,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 29,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 5,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 5,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 644,
                            "startColumn": 17,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 3,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/digitalocean/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 3,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 353,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into io.WriteString, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[io.WriteString](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "web/web.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 709,
                  "endLine": 709,
                  "startColumn": 2,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e6028da96a9a7d233576398d05f3f7afd8b0be2326456d4cde6615d386e98df2",
            "1": "28ebed4a.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.37d4bff0.203ed0a3.73eb5804.45df3e14.e22980a8.9958b0fe.57f89f2f.cf894c96.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "template/template.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 340,
                            "endLine": 340,
                            "startColumn": 12,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "template/template.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 340,
                            "endLine": 340,
                            "startColumn": 12,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "template/template.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 339,
                            "endLine": 341,
                            "startColumn": 18,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "template/template.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 339,
                            "endLine": 341,
                            "startColumn": 4,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "template/template.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 351,
                            "startColumn": 4,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "template/template.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 352,
                            "startColumn": 3,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "template/template.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 146,
                            "endLine": 354,
                            "startColumn": 10,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "template/template.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 146,
                            "endLine": 354,
                            "startColumn": 9,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 689,
                            "endLine": 689,
                            "startColumn": 10,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 689,
                            "endLine": 689,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 704,
                            "endLine": 704,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 704,
                            "endLine": 704,
                            "startColumn": 17,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 704,
                            "endLine": 704,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 709,
                            "endLine": 709,
                            "startColumn": 20,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 709,
                            "endLine": 709,
                            "startColumn": 2,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 709,
                            "endLine": 709,
                            "startColumn": 2,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in robotTestPassword.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[robotTestPassword](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "discovery/hetzner/mock_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 494,
                  "endLine": 494,
                  "startColumn": 2,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a2da2fe10cc07d3905e26426f8cbbceb05b507425c5eaa2bf8841e87a0cd3b08",
            "1": "8379f5e8.bcfb2782.eb185476.79502f34.1240d8b6.63a86890.fb9e89bc.1bff12d3.8379f5e8.bcfb2782.640379c9.79502f34.1240d8b6.63a86890.4e95a1b2.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/hetzner/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 494,
                            "endLine": 494,
                            "startColumn": 22,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/hetzner/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 494,
                            "endLine": 494,
                            "startColumn": 2,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in robotTestPassword.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[robotTestPassword](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "discovery/hetzner/mock_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 501,
                  "endLine": 501,
                  "startColumn": 51,
                  "endColumn": 68
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aec2390fa98e48b5b1fd702713b54a0629783e387563c97d69c7d217120e468b",
            "1": "8379f5e8.bcfb2782.eb185476.79502f34.1240d8b6.67ab4541.860c51ff.1bff12d3.2d06e3d6.bcfb2782.640379c9.79502f34.1240d8b6.67ab4541.0745cda3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/hetzner/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 494,
                            "endLine": 494,
                            "startColumn": 22,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/hetzner/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 51,
                            "endColumn": 68
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "scrape/target_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 217,
                  "endLine": 217,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "164c7f34f11be6c277b3d9c96366b5d58461e794cbd11da3acb8ac90ffe6fad6",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "scrape/target_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 217,
                            "endLine": 217,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "scrape/target_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 217,
                            "endLine": 217,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 170,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 486,
                  "endLine": 486,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c1e24288746c13fa72012f0c39b8e258985842da78227d1122b3c940066a0108",
            "1": "424eddda.ee795415.3d13e656.bfac11f0.6ee851a6.a282b368.8ee950b3.ff3d0695.424eddda.ee795415.3d13e656.bfac11f0.6ee851a6.a282b368.55797da7.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 486,
                            "endLine": 486,
                            "startColumn": 18,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 486,
                            "endLine": 486,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1095,
                  "endLine": 1095,
                  "startColumn": 62,
                  "endColumn": 70
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a51c80ee79ec71c0987ecc34b060c46874ce5a81cd64b7842f746be51f630a66",
            "1": "424eddda.98f0ff0f.3d13e656.97b559f3.6ee851a6.67752288.8ee950b3.ff3d0695.24890adb.98f0ff0f.3d13e656.97b559f3.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1095,
                            "endLine": 1095,
                            "startColumn": 72,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1095,
                            "endLine": 1095,
                            "startColumn": 62,
                            "endColumn": 70
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "notifier/notifier_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 155,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "538411550a8b942489d1e1d5c167cf052822aaeaf4e6a1d5bd970539460561ba",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "notifier/notifier_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 15,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "notifier/notifier_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f1e3f9bdd48a7b24c99f524369b1405c2d40bd1aa2664a0f8441f37018eb3a1e",
            "1": "424eddda.98f0ff0f.3d13e656.36dd9c92.6ee851a6.67752288.8ee950b3.ff3d0695.d0ed24fb.98f0ff0f.3d13e656.36dd9c92.79ea7c7e.b660d002.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "discovery/moby/mock_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 11,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aa73f909964d61b635ddaedb0185f1e56b15d38054515e082f678c33675a4dab",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "discovery/moby/mock_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 153,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/ErrorMessage",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Information exposure through error stack trace in fmt.Fprintf.",
            "markdown": "Information exposure through {0} in {1}.",
            "arguments": [
              "[error stack trace](0)",
              "[fmt.Fprintf](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "promql/parser/parse.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 335,
                  "endLine": 335,
                  "startColumn": 3,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "298e7a2aa7c199d27e5769f9e0bef774e5488df0ca1532b5b3afe6fd04c861d9",
            "1": "e2d452b0.73eb5804.734a90e3.b60f6fd2.78b40541.57f89f2f.981a2d61.1bff12d3.e2d452b0.73eb5804.734a90e3.b60f6fd2.01e837f2.57f89f2f.981a2d61.c3c9d664"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "promql/parser/parse.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 333,
                            "endLine": 333,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "promql/parser/parse.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 756,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/ErrorMessage",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Information exposure through error stack trace in fmt.Fprintln.",
            "markdown": "Information exposure through {0} in {1}.",
            "arguments": [
              "[error stack trace](0)",
              "[fmt.Fprintln](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/promtool/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 370,
                  "endLine": 370,
                  "startColumn": 11,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a69b2c1e871bbd14bfdbff602d2b83aa0fe696a8c1960ce058deb26d347cef2",
            "1": "84ddbcf4.8642ae5d.45df3e14.1e1956b3.7caea083.5b6ddae0.be8ec6d7.6988893c.d53e8a81.8642ae5d.45df3e14.1e1956b3.7caea083.57f89f2f.be8ec6d7.6988893c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/tsdb.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 274,
                            "endLine": 274,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/tsdb.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 667,
                            "endLine": 667,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 806,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/relabel/relabel.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 281,
                  "endLine": 281,
                  "startColumn": 11,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "78cb1181db2fa66dc95b14f901c9e669a2539fddd060f3b99135ac149dd7713a",
            "1": "ba4e4356.73eb5804.45df3e14.6f6e1432.db2bb079.67ab4541.0c728423.37d4bff0.ba4e4356.73eb5804.45df3e14.6f6e1432.db2bb079.67ab4541.0c728423.37d4bff0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "model/relabel/relabel.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 281,
                            "endLine": 281,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storage/remote/storage.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225,
                  "startColumn": 10,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "712a03d76e7f072c7356d92a8202ddc597f3bfd42f3ff99a10b1e709a775487f",
            "1": "94f34dc3.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.0c728423.1d874c72.94f34dc3.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.0c728423.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storage/remote/storage.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 10,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "03b2644da6529a915b10e14eef9d2c41db15861e595482536e8ac4c34d27cba1",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 485,
                  "endLine": 485,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "63acd3e528d78a910b9ffd95a4a5bb1eb75f9ec074f728fb3724810f48b3f233",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.ba197268.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 485,
                            "endLine": 485,
                            "startColumn": 18,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 485,
                            "endLine": 485,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 516,
                  "endLine": 516,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2d7414210bc7b465820bda22c12bfcbd4872058c5f6179b3a09febe213c40499",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.ba197268.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 516,
                            "endLine": 516,
                            "startColumn": 20,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 516,
                            "endLine": 516,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1095,
                  "endLine": 1095,
                  "startColumn": 42,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0c0180b237a00231840f5cef996f3869ef24b15ebcd06e2aa821a00754e37f4a",
            "1": "424eddda.98f0ff0f.3d13e656.97b559f3.6ee851a6.67752288.8ee950b3.ff3d0695.24890adb.98f0ff0f.3d13e656.97b559f3.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1095,
                            "endLine": 1095,
                            "startColumn": 52,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1095,
                            "endLine": 1095,
                            "startColumn": 42,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config/config_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1260,
                  "endLine": 1260,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c06a78dbcdcc7faf5026cb456cfcdd9f1216af0196316bb3417b595078988861",
            "1": "4dad368e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.93c7cb1a.98f0ff0f.07cbee33.457a62f8.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1260,
                            "endLine": 1260,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "config/config_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1260,
                            "endLine": 1260,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "notifier/notifier_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aad129ec99b0549128a1a3533e1fb5aaedd65905a3e25c6614b4a0546acf1cff",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.6ebbc1fe.d6ea03fe.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "notifier/notifier_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "notifier/notifier_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "98607baa6ead9c1b3812b4bdf48d52ca0b92ef3255067ebf1b015f056fb36139",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ab74e44e.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 220,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.Command](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/promtool/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 418,
                  "endLine": 418,
                  "startColumn": 14,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7b06bde3528b1c2d82ac59223b415d74bcab9be9a5e401727cef7354f7f4c47c",
            "1": "8379f5e8.348ddf12.45df3e14.9692a5c1.e5b9ba72.67ab4541.0873598c.ce19b64e.8379f5e8.348ddf12.45df3e14.9692a5c1.f1d9f854.67ab4541.0873598c.ce19b64e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 418,
                            "endLine": 418,
                            "startColumn": 27,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 418,
                            "endLine": 418,
                            "startColumn": 14,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.Command](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/prometheus/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 124,
                  "endLine": 124,
                  "startColumn": 10,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "271816ed47e14fbb272ae0ad36eeb718b9134309b0604142719feeba5c1e14d7",
            "1": "d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3.d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 10,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.Command](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/prometheus/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213,
                  "startColumn": 11,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "45f0b495b7f986bdde5bebd9e38e32894745394f0774822f2bac21745b082e0a",
            "1": "d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3.d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.Command](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/prometheus/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 259,
                  "startColumn": 11,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb9c20124225fd198391d922ad942480cdab43a6d61f02de7959d4879a32ee5a",
            "1": "d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3.d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 259,
                            "endLine": 259,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 259,
                            "endLine": 259,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.Command](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/prometheus/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 361,
                  "endLine": 361,
                  "startColumn": 10,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f06a96c785bab21848e5dfd71e8ce95082a8cc16342abe274c55506e6a7add28",
            "1": "d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3.d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 10,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.Command](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/prometheus/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 379,
                  "endLine": 379,
                  "startColumn": 10,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "db5bf75a65ee9d5131df112d7f99db958f09773a723a9c861dc07156be1252ef",
            "1": "d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3.d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 379,
                            "endLine": 379,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 379,
                            "endLine": 379,
                            "startColumn": 10,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.Command](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/prometheus/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 406,
                  "endLine": 406,
                  "startColumn": 10,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "be81d3e83f9eeff126d8384b33c66d8dd1c1d2944b7608dc3f043d1cf2b0b1ad",
            "1": "d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3.d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 406,
                            "endLine": 406,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 406,
                            "endLine": 406,
                            "startColumn": 10,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.Command](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/prometheus/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449,
                  "startColumn": 12,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9326a7d67c0eacd31c4f01668d4fabdf518130dfdb274c37081f6a5b8abb8c0a",
            "1": "d67f9a38.d3156d85.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.fb4af283.d67f9a38.d814d74f.45df3e14.9692a5c1.958653f9.67ab4541.0873598c.fb4af283"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 449,
                            "endLine": 449,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 449,
                            "endLine": 449,
                            "startColumn": 12,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.CommandContext, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.CommandContext](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/promtool/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 447,
                  "endLine": 447,
                  "startColumn": 9,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c988cf09d3c0c219c3d337a2b54d2872bc312b85cebe6507ff952e22f775a526",
            "1": "2d06e3d6.348ddf12.45df3e14.9692a5c1.e5b9ba72.75c1163d.0873598c.ce19b64e.2d06e3d6.348ddf12.45df3e14.9692a5c1.f1d9f854.75c1163d.0873598c.343de16d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 447,
                            "endLine": 447,
                            "startColumn": 34,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 447,
                            "endLine": 447,
                            "startColumn": 9,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.CommandContext, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.CommandContext](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/prometheus/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 495,
                  "endLine": 495,
                  "startColumn": 9,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1431427d126fde91d5e9a706d38b62a7be03f67b4e41c46e2ee51ddefa5d2f88",
            "1": "2d06e3d6.348ddf12.45df3e14.9692a5c1.91b7c08c.75c1163d.0873598c.fb4af283.2d06e3d6.d814d74f.45df3e14.9692a5c1.f1d9f854.75c1163d.0873598c.fb4af283"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 495,
                            "endLine": 495,
                            "startColumn": 34,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/prometheus/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 495,
                            "endLine": 495,
                            "startColumn": 9,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/OR",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from the request URL flows into net.http.Redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[net.http.Redirect](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "web/web.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "endLine": 500,
                  "startColumn": 3,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5b5c139d260fe5e2d3b4dc7007215d019e4519c5e0131c363d9919ecec1beb4f",
            "1": "7572e22a.f47edcf6.45df3e14.82b156fc.5ef953d3.57f89f2f.cf894c96.1bff12d3.033439eb.f47edcf6.4a1253c8.e22980a8.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 25,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 25,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 25,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/web.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 3,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/PrototypePollution",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from browser storage flows into a member access and is used to access a property of this object by name. This may allow a malicious user to pollute the Object.prototype and cause a crash, remote code execution or logic bypasses.",
            "markdown": "Unsanitized input from {0} {1} into a member access and is used to access a property of {2} by name. This may allow a malicious user to pollute the Object.prototype and cause a crash, remote code execution or logic bypasses.",
            "arguments": [
              "[browser storage](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29)",
              "[this object](30)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 174,
                  "endLine": 174,
                  "startColumn": 17,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57dca0433e3600172f82ffee54392a5f4f484a40313faadf74d8695cf0ece3f0",
            "1": "2eb4b9da.e5252f8f.8b18f948.d7919eeb.8d22f254.8f8dfe9d.850446f4.baf5b5d4.40c5fd92.e5252f8f.f19af348.d71fe02e.79a7d027.016e4432.ffd88d9b.6723ddeb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/hooks/useLocalStorage.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 29,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/hooks/useLocalStorage.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 29,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/hooks/useLocalStorage.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 10,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/hooks/useLocalStorage.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/hooks/useLocalStorage.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4,
                            "endLine": 4,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/hooks/useLocalStorage.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4,
                            "endLine": 4,
                            "startColumn": 10,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/hooks/useLocalStorage.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/hooks/useLocalStorage.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 44,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/hooks/useLocalStorage.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 11,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/hooks/useLocalStorage.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 10,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 31,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 10,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 42,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 9,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 11,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 7,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 43,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 43,
                            "endColumn": 89
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 29,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 11,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/ScrapePoolList.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/target.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 30,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/target.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 39,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/target.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 36,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/target.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 11,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/target.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 21,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/target.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/target.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/target.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 11,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/target.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 11,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "web/ui/react-app/src/pages/targets/target.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 5,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into net.http.Get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36)",
              "[net.http.Get](37)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/promtool/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1259,
                  "endLine": 1259,
                  "startColumn": 12,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e63ec6fabc138e3837b4601afeec0e5a2c6746f2ba182d53a25b6d673a9e53d7",
            "1": "424eddda.940077cb.45df3e14.39ac814b.6ee851a6.6c8feca2.8ee950b3.bbb79429.89c6b5ee.940077cb.c511e763.9692a5c1.85243e95.ab1fca1f.758ac2ac.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 35,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 35,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 21,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 9,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 18,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 19,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 22,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 22,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 22,
                            "endColumn": 104
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 22,
                            "endColumn": 113
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 2,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 23,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 22,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1258,
                            "endLine": 1258,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1260,
                            "endLine": 1260,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1260,
                            "endLine": 1260,
                            "startColumn": 3,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1259,
                            "endLine": 1263,
                            "startColumn": 23,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 38,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 32,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 11,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 4,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 31,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 609,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into net.http.Get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37)",
              "[net.http.Get](38)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/promtool/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1271,
                  "endLine": 1271,
                  "startColumn": 12,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1271170ed1a125e8d4544aee449b8f013c3d7d06248e9377ad14e4ff54d6ebe8",
            "1": "424eddda.940077cb.45df3e14.39ac814b.6ee851a6.6c8feca2.8ee950b3.bbb79429.89c6b5ee.940077cb.c511e763.9692a5c1.b6d1a706.ab1fca1f.758ac2ac.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 35,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 35,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 21,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 9,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 18,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 21,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 21,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 2,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 24,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 24,
                            "endColumn": 104
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 24,
                            "endColumn": 113
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 2,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 25,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1270,
                            "endLine": 1270,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1272,
                            "endLine": 1272,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1272,
                            "endLine": 1272,
                            "startColumn": 3,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1271,
                            "endLine": 1275,
                            "startColumn": 23,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 38,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 32,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 11,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 4,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 31,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 609,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into net.http.Get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38)",
              "[net.http.Get](39)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/promtool/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1283,
                  "endLine": 1283,
                  "startColumn": 12,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1da2338c3fc3735f068eef75a003c137c3a1db6c84913730c18e3c70fc3ee3a3",
            "1": "424eddda.940077cb.45df3e14.39ac814b.6ee851a6.6c8feca2.8ee950b3.bbb79429.89c6b5ee.940077cb.c511e763.9692a5c1.85243e95.ab1fca1f.509ddf53.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 35,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 35,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 21,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 9,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 18,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 21,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 17,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 20,
                            "endColumn": 110
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 20,
                            "endColumn": 119
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 2,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 355,
                            "endLine": 355,
                            "startColumn": 21,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 355,
                            "endLine": 355,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1282,
                            "endLine": 1282,
                            "startColumn": 15,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1284,
                            "endLine": 1284,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1284,
                            "endLine": 1284,
                            "startColumn": 3,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1283,
                            "endLine": 1287,
                            "startColumn": 23,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 38,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 32,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 11,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 4,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 31,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/promtool/debug.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 609,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 25,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Go",
            "files": 461,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "TypeScript",
            "files": 117,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 2,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 7,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

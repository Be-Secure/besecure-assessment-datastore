[
  {
    "number": 16,
    "created_at": "2025-06-23T11:15:51Z",
    "updated_at": "2025-06-23T11:15:51Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/16",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/16",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/actions/command-injection",
      "severity": "warning",
      "description": "Expression injection in Actions",
      "name": "js/actions/command-injection",
      "tags": ["actions","external/cwe/cwe-094","security"],
      "full_description": "Using user-controlled GitHub Actions contexts like `run:` or `script:` may allow a malicious user to inject code into the GitHub action.",
      "help": "# Expression injection in Actions\nUsing user-controlled input in GitHub Actions may lead to code injection in contexts like *run:* or *script:*.\n\nCode injection in GitHub Actions may allow an attacker to exfiltrate any secrets used in the workflow and the temporary GitHub repository authorization token. The token might have write access to the repository, allowing an attacker to use the token to make changes to the repository.\n\n\n## Recommendation\nThe best practice to avoid code injection vulnerabilities in GitHub workflows is to set the untrusted input value of the expression to an intermediate environment variable and then use the environment variable using the native syntax of the shell/script interpreter (that is, not *${{ env.VAR }}*).\n\nIt is also recommended to limit the permissions of any tokens used by a workflow such as the GITHUB_TOKEN.\n\n\n## Example\nThe following example lets a user inject an arbitrary shell command:\n\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n    - run: |\n        echo '${{ github.event.comment.body }}'\n```\nThe following example uses an environment variable, but **still allows the injection** because of the use of expression syntax:\n\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n    -  env:\n        BODY: ${{ github.event.issue.body }}\n      run: |\n        echo '${{ env.BODY }}'\n```\nThe following example uses shell syntax to read the environment variable and will prevent the attack:\n\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n    - env:\n        BODY: ${{ github.event.issue.body }}\n      run: |\n        echo \"$BODY\"\n\n```\n\n## References\n* GitHub Security Lab Research: [Keeping your GitHub Actions and workflows secure: Untrusted input](https://securitylab.github.com/research/github-actions-untrusted-input).\n* GitHub Docs: [Security hardening for GitHub Actions](https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions).\n* GitHub Docs: [Permissions for the GITHUB_TOKEN](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Potential injection from the ${{{{ github.event.pull_request.head.ref }}}}, which may be controlled by an external user."
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 205,
        "end_line": 229,
        "start_column": 14,
        "end_column": 14
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/16/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 15,
    "created_at": "2025-06-23T11:15:51Z",
    "updated_at": "2025-06-23T11:15:51Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/15",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/15",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/actions/command-injection",
      "severity": "warning",
      "description": "Expression injection in Actions",
      "name": "js/actions/command-injection",
      "tags": ["actions","external/cwe/cwe-094","security"],
      "full_description": "Using user-controlled GitHub Actions contexts like `run:` or `script:` may allow a malicious user to inject code into the GitHub action.",
      "help": "# Expression injection in Actions\nUsing user-controlled input in GitHub Actions may lead to code injection in contexts like *run:* or *script:*.\n\nCode injection in GitHub Actions may allow an attacker to exfiltrate any secrets used in the workflow and the temporary GitHub repository authorization token. The token might have write access to the repository, allowing an attacker to use the token to make changes to the repository.\n\n\n## Recommendation\nThe best practice to avoid code injection vulnerabilities in GitHub workflows is to set the untrusted input value of the expression to an intermediate environment variable and then use the environment variable using the native syntax of the shell/script interpreter (that is, not *${{ env.VAR }}*).\n\nIt is also recommended to limit the permissions of any tokens used by a workflow such as the GITHUB_TOKEN.\n\n\n## Example\nThe following example lets a user inject an arbitrary shell command:\n\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n    - run: |\n        echo '${{ github.event.comment.body }}'\n```\nThe following example uses an environment variable, but **still allows the injection** because of the use of expression syntax:\n\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n    -  env:\n        BODY: ${{ github.event.issue.body }}\n      run: |\n        echo '${{ env.BODY }}'\n```\nThe following example uses shell syntax to read the environment variable and will prevent the attack:\n\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n    - env:\n        BODY: ${{ github.event.issue.body }}\n      run: |\n        echo \"$BODY\"\n\n```\n\n## References\n* GitHub Security Lab Research: [Keeping your GitHub Actions and workflows secure: Untrusted input](https://securitylab.github.com/research/github-actions-untrusted-input).\n* GitHub Docs: [Security hardening for GitHub Actions](https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions).\n* GitHub Docs: [Permissions for the GITHUB_TOKEN](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Potential injection from the ${{{{ github.event.pull_request.head.ref }}}}, which may be controlled by an external user."
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 109,
        "end_line": 132,
        "start_column": 14,
        "end_column": 14
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/15/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 14,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/14",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/14",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/cache-poisoning/poisonable-step",
      "severity": "error",
      "description": "Cache Poisoning via execution of untrusted code",
      "name": "actions/cache-poisoning/poisonable-step",
      "tags": ["actions","external/cwe/cwe-349","security"],
      "full_description": "The cache can be poisoned by untrusted code, leading to a cache poisoning attack.",
      "help": "# Cache Poisoning in GitHub Actions\n\n## Description\n\nGitHub Actions cache poisoning is a technique that allows an attacker to inject malicious content into the Action's cache from unprivileged workflow, potentially leading to code execution in privileged workflows.\n\nAn attacker with the ability to run code in the context of the default branch (e.g. through Code Injection or Execution of Untrusted Code) can exploit this to:\n\n1. Steal the cache access token and URL.\n2. Overflow the cache to trigger eviction of legitimate entries.\n3. Poison cache entries with malicious payloads.\n4. Achieve code execution in privileged workflows that restore the poisoned cache.\n\nThis allows lateral movement from low-privileged to high-privileged workflows within a repository.\n\n### Cache Structure\n\nIn GitHub Actions, cache scopes are primarily determined by the branch structure. Branches are considered the main security boundary for GitHub Actions caching. This means that cache entries are generally scoped to specific branches.\n\n- **Access to Parent Branch Caches**: Feature branches (or child branches) created off of a parent branch (like `main` or `dev`) can access caches from the parent branch. For instance, a feature branch off of `main` will be able to access the cache from `main`.\n\n- **Sibling Branches**: Sibling branches, meaning branches that are created from the same parent but not from each other, do not share caches. For example, two branches created off of `main` will not be able to access each other’s caches directly.\n\nDue to the above design, if something is cached in the context of the default branch (e.g., `main`), it becomes accessible to any feature branch derived from `main`.\n\n## Recommendations\n\n1. Avoid using caching in workflows that handle sensitive operations like releases.\n2. If caching must be used:\n   - Validate restored cache contents before use.\n   - Use short-lived, workflow-specific cache keys.\n   - Clear caches regularly.\n3. Implement strict isolation between untrusted and privileged workflow execution.\n4. Never run untrusted code in the context of the default branch.\n5. Sign the cache value cryptographically and verify the signature before usage.\n\n## Examples\n\n### Incorrect Usage\n\nThe following workflow runs untrusted code in a non-privileged job but in the context of the default branch.\n\n```yaml\nname: Vulnerable Workflow\non:\n  pull_request_target:\n    branches: [main]\npermissions: {}\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Run tests\n        run: ./run_tests.sh\n```\n\n### Correct Usage\n\nThe following workflow runs untrusted code in a non-privileged job and the cache is scoped to the Pull Request branch.\n\n```yaml\nname: Secure Workflow\non:\n  pull_request:\n    branches: [main]\npermissions: {}\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Run tests\n        run: ./run_tests.sh\n```\n\n## References\n\n- [The Monsters in Your Build Cache – GitHub Actions Cache Poisoning](https://adnanthekhan.com/2024/05/06/the-monsters-in-your-build-cache-github-actions-cache-poisoning/)\n- [GitHub Actions Caching Documentation](https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows)\n- [Cache Poisoning in GitHub Actions](https://scribesecurity.com/blog/github-cache-poisoning/)\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Potential cache poisoning in the context of the default branch due to privilege checkout of untrusted code. (pull_request_target)."
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 66,
        "end_line": 70,
        "start_column": 9,
        "end_column": 7
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/14/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 13,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/13",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/13",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/cache-poisoning/poisonable-step",
      "severity": "error",
      "description": "Cache Poisoning via execution of untrusted code",
      "name": "actions/cache-poisoning/poisonable-step",
      "tags": ["actions","external/cwe/cwe-349","security"],
      "full_description": "The cache can be poisoned by untrusted code, leading to a cache poisoning attack.",
      "help": "# Cache Poisoning in GitHub Actions\n\n## Description\n\nGitHub Actions cache poisoning is a technique that allows an attacker to inject malicious content into the Action's cache from unprivileged workflow, potentially leading to code execution in privileged workflows.\n\nAn attacker with the ability to run code in the context of the default branch (e.g. through Code Injection or Execution of Untrusted Code) can exploit this to:\n\n1. Steal the cache access token and URL.\n2. Overflow the cache to trigger eviction of legitimate entries.\n3. Poison cache entries with malicious payloads.\n4. Achieve code execution in privileged workflows that restore the poisoned cache.\n\nThis allows lateral movement from low-privileged to high-privileged workflows within a repository.\n\n### Cache Structure\n\nIn GitHub Actions, cache scopes are primarily determined by the branch structure. Branches are considered the main security boundary for GitHub Actions caching. This means that cache entries are generally scoped to specific branches.\n\n- **Access to Parent Branch Caches**: Feature branches (or child branches) created off of a parent branch (like `main` or `dev`) can access caches from the parent branch. For instance, a feature branch off of `main` will be able to access the cache from `main`.\n\n- **Sibling Branches**: Sibling branches, meaning branches that are created from the same parent but not from each other, do not share caches. For example, two branches created off of `main` will not be able to access each other’s caches directly.\n\nDue to the above design, if something is cached in the context of the default branch (e.g., `main`), it becomes accessible to any feature branch derived from `main`.\n\n## Recommendations\n\n1. Avoid using caching in workflows that handle sensitive operations like releases.\n2. If caching must be used:\n   - Validate restored cache contents before use.\n   - Use short-lived, workflow-specific cache keys.\n   - Clear caches regularly.\n3. Implement strict isolation between untrusted and privileged workflow execution.\n4. Never run untrusted code in the context of the default branch.\n5. Sign the cache value cryptographically and verify the signature before usage.\n\n## Examples\n\n### Incorrect Usage\n\nThe following workflow runs untrusted code in a non-privileged job but in the context of the default branch.\n\n```yaml\nname: Vulnerable Workflow\non:\n  pull_request_target:\n    branches: [main]\npermissions: {}\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Run tests\n        run: ./run_tests.sh\n```\n\n### Correct Usage\n\nThe following workflow runs untrusted code in a non-privileged job and the cache is scoped to the Pull Request branch.\n\n```yaml\nname: Secure Workflow\non:\n  pull_request:\n    branches: [main]\npermissions: {}\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Run tests\n        run: ./run_tests.sh\n```\n\n## References\n\n- [The Monsters in Your Build Cache – GitHub Actions Cache Poisoning](https://adnanthekhan.com/2024/05/06/the-monsters-in-your-build-cache-github-actions-cache-poisoning/)\n- [GitHub Actions Caching Documentation](https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows)\n- [Cache Poisoning in GitHub Actions](https://scribesecurity.com/blog/github-cache-poisoning/)\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Potential cache poisoning in the context of the default branch due to privilege checkout of untrusted code. (pull_request_target)."
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 50,
        "end_line": 55,
        "start_column": 9,
        "end_column": 7
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/13/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 12,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/12",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/12",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/docker-ci.yml",
        "start_line": 77,
        "end_line": 124,
        "start_column": 5,
        "end_column": 30
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/12/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 11,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/11",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/11",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/docker-release.yml",
        "start_line": 19,
        "end_line": 81,
        "start_column": 5,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/11/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 10,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/10",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/10",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/docker-ci.yml",
        "start_line": 21,
        "end_line": 76,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/10/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 9,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/9",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/9",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 21,
        "end_line": 75,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/9/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 8,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/8",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/8",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/docker-cache-clean.yml",
        "start_line": 13,
        "end_line": 58,
        "start_column": 5,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/8/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 7,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/7",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/7",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/benchmarks.yml",
        "start_line": 10,
        "end_line": 73,
        "start_column": 5,
        "end_column": 48
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/7/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 6,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/6",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/6",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/untrusted-checkout/critical",
      "severity": "error",
      "description": "Checkout of untrusted code in a privileged context",
      "name": "actions/untrusted-checkout/critical",
      "tags": ["actions","external/cwe/cwe-829","security"],
      "full_description": "Privileged workflows have read/write access to the base repository and access to secrets. By explicitly checking out and running the build script from a fork the untrusted code is running in an environment that is able to push to the base repository and to access secrets.",
      "help": "# Execution of Untrusted Checked-out Code\n\n## Description\n\nGitHub workflows can be triggered through various repository events, including incoming pull requests (PRs) or comments on Issues/PRs. A potentially dangerous misuse of the triggers such as `pull_request_target` or `issue_comment` followed by an explicit checkout of untrusted code (Pull Request HEAD) may lead to repository compromise if untrusted code gets executed in a privileged job.\n\n## Recommendations\n\n- Avoid using `pull_request_target` unless necessary.\n- Employ unprivileged `pull_request` workflows followed by `workflow_run` for privileged operations.\n- Use labels like `safe to test` to vet PRs and manage the execution context appropriately.\n\nThe best practice is to handle the potentially untrusted pull request via the **pull_request** trigger so that it is isolated in an unprivileged environment. The workflow processing the pull request should then store any results like code coverage or failed/passed tests in artifacts and exit. A second privileged workflow with the access to repository secrets, triggered by the completion of the first workflow using `workflow_run` trigger event, downloads the artifacts and make any necessary modifications to the repository or interact with third party services that require repository secrets (e.g. API tokens).\n\nThe artifacts downloaded from the first workflow should be considered untrusted and must be verified.\n\n## Examples\n\n### Incorrect Usage\n\nThe following workflow checks-out untrusted code in a privileged context and runs user-controlled code (in this case package.json scripts) which will grant privileged access to the attacker:\n\n```yaml\non: pull_request_target\n\njobs:\n  build:\n    name: Build and test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n\n      - uses: actions/setup-node@v1\n      - run: |\n          npm install\n          npm build\n\n      - uses: completely/fakeaction@v2\n        with:\n          arg1: ${{ secrets.supersecret }}\n\n      - uses: fakerepo/comment-on-pr@v1\n        with:\n          message: |\n            Thank you!\n```\n\n### Correct Usage\n\nAn example shows how to use two workflows: one for processing the untrusted PR and the other for using the results in a safe context.\n\n**ReceivePR.yml** (untrusted PR handling with artifact creation):\n\n```yaml\nname: Receive PR\non:\n  pull_request:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: /bin/bash ./build.sh\n      - name: Save PR number\n        run: |\n          mkdir -p ./pr\n          echo ${{ github.event.number }} > ./pr/NR\n      - uses: actions/upload-artifact@v2\n        with:\n          name: pr\n          path: pr/\n```\n\n**CommentPR.yml** (processing artifacts with privileged access):\n\n```yaml\nname: Comment on the pull request\non:\n  workflow_run:\n    workflows: [\"Receive PR\"]\n    types:\n      - completed\njobs:\n  upload:\n    runs-on: ubuntu-latest\n    if: >\n      github.event.workflow_run.event == 'pull_request' &&\n      github.event.workflow_run.conclusion == 'success'\n    steps:\n      - name: \"Download artifact\"\n        uses: actions/github-script@v3.1.0\n        with:\n          script: |\n            var artifacts = await github.actions.listWorkflowRunArtifacts({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: ${{github.event.workflow_run.id }},\n            });\n            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {\n              return artifact.name == \"pr\";\n            })[0];\n            var download = await github.actions.downloadArtifact({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                artifact_id: matchArtifact.id,\n                archive_format: 'zip',\n            });\n            var fs = require('fs');\n            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));\n      - run: |\n          mkdir -p tmp\n          unzip -d tmp/ pr.zip\n      - name: \"Comment on PR\"\n        uses: actions/github-script@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            var fs = require('fs');\n            var issue_number = Number(fs.readFileSync('./tmp/NR'));\n            // Verify that the file contains a numeric value\n            const contains_numeric = /\\d/.test(issue_number);\n            if (contains_numeric) {\n                await github.issues.createComment({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  issue_number: issue_number,\n                  body: 'Everything is OK. Thank you for the PR!'\n                });\n            }\n```\n\n## References\n\n- [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Potential execution of untrusted code on a privileged workflow (pull_request_target)"
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 154,
        "end_line": 168,
        "start_column": 9,
        "end_column": 7
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/6/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 5,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/5",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/5",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/untrusted-checkout/critical",
      "severity": "error",
      "description": "Checkout of untrusted code in a privileged context",
      "name": "actions/untrusted-checkout/critical",
      "tags": ["actions","external/cwe/cwe-829","security"],
      "full_description": "Privileged workflows have read/write access to the base repository and access to secrets. By explicitly checking out and running the build script from a fork the untrusted code is running in an environment that is able to push to the base repository and to access secrets.",
      "help": "# Execution of Untrusted Checked-out Code\n\n## Description\n\nGitHub workflows can be triggered through various repository events, including incoming pull requests (PRs) or comments on Issues/PRs. A potentially dangerous misuse of the triggers such as `pull_request_target` or `issue_comment` followed by an explicit checkout of untrusted code (Pull Request HEAD) may lead to repository compromise if untrusted code gets executed in a privileged job.\n\n## Recommendations\n\n- Avoid using `pull_request_target` unless necessary.\n- Employ unprivileged `pull_request` workflows followed by `workflow_run` for privileged operations.\n- Use labels like `safe to test` to vet PRs and manage the execution context appropriately.\n\nThe best practice is to handle the potentially untrusted pull request via the **pull_request** trigger so that it is isolated in an unprivileged environment. The workflow processing the pull request should then store any results like code coverage or failed/passed tests in artifacts and exit. A second privileged workflow with the access to repository secrets, triggered by the completion of the first workflow using `workflow_run` trigger event, downloads the artifacts and make any necessary modifications to the repository or interact with third party services that require repository secrets (e.g. API tokens).\n\nThe artifacts downloaded from the first workflow should be considered untrusted and must be verified.\n\n## Examples\n\n### Incorrect Usage\n\nThe following workflow checks-out untrusted code in a privileged context and runs user-controlled code (in this case package.json scripts) which will grant privileged access to the attacker:\n\n```yaml\non: pull_request_target\n\njobs:\n  build:\n    name: Build and test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n\n      - uses: actions/setup-node@v1\n      - run: |\n          npm install\n          npm build\n\n      - uses: completely/fakeaction@v2\n        with:\n          arg1: ${{ secrets.supersecret }}\n\n      - uses: fakerepo/comment-on-pr@v1\n        with:\n          message: |\n            Thank you!\n```\n\n### Correct Usage\n\nAn example shows how to use two workflows: one for processing the untrusted PR and the other for using the results in a safe context.\n\n**ReceivePR.yml** (untrusted PR handling with artifact creation):\n\n```yaml\nname: Receive PR\non:\n  pull_request:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: /bin/bash ./build.sh\n      - name: Save PR number\n        run: |\n          mkdir -p ./pr\n          echo ${{ github.event.number }} > ./pr/NR\n      - uses: actions/upload-artifact@v2\n        with:\n          name: pr\n          path: pr/\n```\n\n**CommentPR.yml** (processing artifacts with privileged access):\n\n```yaml\nname: Comment on the pull request\non:\n  workflow_run:\n    workflows: [\"Receive PR\"]\n    types:\n      - completed\njobs:\n  upload:\n    runs-on: ubuntu-latest\n    if: >\n      github.event.workflow_run.event == 'pull_request' &&\n      github.event.workflow_run.conclusion == 'success'\n    steps:\n      - name: \"Download artifact\"\n        uses: actions/github-script@v3.1.0\n        with:\n          script: |\n            var artifacts = await github.actions.listWorkflowRunArtifacts({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: ${{github.event.workflow_run.id }},\n            });\n            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {\n              return artifact.name == \"pr\";\n            })[0];\n            var download = await github.actions.downloadArtifact({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                artifact_id: matchArtifact.id,\n                archive_format: 'zip',\n            });\n            var fs = require('fs');\n            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));\n      - run: |\n          mkdir -p tmp\n          unzip -d tmp/ pr.zip\n      - name: \"Comment on PR\"\n        uses: actions/github-script@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            var fs = require('fs');\n            var issue_number = Number(fs.readFileSync('./tmp/NR'));\n            // Verify that the file contains a numeric value\n            const contains_numeric = /\\d/.test(issue_number);\n            if (contains_numeric) {\n                await github.issues.createComment({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  issue_number: issue_number,\n                  body: 'Everything is OK. Thank you for the PR!'\n                });\n            }\n```\n\n## References\n\n- [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Potential execution of untrusted code on a privileged workflow (pull_request_target)"
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 149,
        "end_line": 154,
        "start_column": 9,
        "end_column": 7
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/5/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 4,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/4",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/4",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/untrusted-checkout/critical",
      "severity": "error",
      "description": "Checkout of untrusted code in a privileged context",
      "name": "actions/untrusted-checkout/critical",
      "tags": ["actions","external/cwe/cwe-829","security"],
      "full_description": "Privileged workflows have read/write access to the base repository and access to secrets. By explicitly checking out and running the build script from a fork the untrusted code is running in an environment that is able to push to the base repository and to access secrets.",
      "help": "# Execution of Untrusted Checked-out Code\n\n## Description\n\nGitHub workflows can be triggered through various repository events, including incoming pull requests (PRs) or comments on Issues/PRs. A potentially dangerous misuse of the triggers such as `pull_request_target` or `issue_comment` followed by an explicit checkout of untrusted code (Pull Request HEAD) may lead to repository compromise if untrusted code gets executed in a privileged job.\n\n## Recommendations\n\n- Avoid using `pull_request_target` unless necessary.\n- Employ unprivileged `pull_request` workflows followed by `workflow_run` for privileged operations.\n- Use labels like `safe to test` to vet PRs and manage the execution context appropriately.\n\nThe best practice is to handle the potentially untrusted pull request via the **pull_request** trigger so that it is isolated in an unprivileged environment. The workflow processing the pull request should then store any results like code coverage or failed/passed tests in artifacts and exit. A second privileged workflow with the access to repository secrets, triggered by the completion of the first workflow using `workflow_run` trigger event, downloads the artifacts and make any necessary modifications to the repository or interact with third party services that require repository secrets (e.g. API tokens).\n\nThe artifacts downloaded from the first workflow should be considered untrusted and must be verified.\n\n## Examples\n\n### Incorrect Usage\n\nThe following workflow checks-out untrusted code in a privileged context and runs user-controlled code (in this case package.json scripts) which will grant privileged access to the attacker:\n\n```yaml\non: pull_request_target\n\njobs:\n  build:\n    name: Build and test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n\n      - uses: actions/setup-node@v1\n      - run: |\n          npm install\n          npm build\n\n      - uses: completely/fakeaction@v2\n        with:\n          arg1: ${{ secrets.supersecret }}\n\n      - uses: fakerepo/comment-on-pr@v1\n        with:\n          message: |\n            Thank you!\n```\n\n### Correct Usage\n\nAn example shows how to use two workflows: one for processing the untrusted PR and the other for using the results in a safe context.\n\n**ReceivePR.yml** (untrusted PR handling with artifact creation):\n\n```yaml\nname: Receive PR\non:\n  pull_request:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: /bin/bash ./build.sh\n      - name: Save PR number\n        run: |\n          mkdir -p ./pr\n          echo ${{ github.event.number }} > ./pr/NR\n      - uses: actions/upload-artifact@v2\n        with:\n          name: pr\n          path: pr/\n```\n\n**CommentPR.yml** (processing artifacts with privileged access):\n\n```yaml\nname: Comment on the pull request\non:\n  workflow_run:\n    workflows: [\"Receive PR\"]\n    types:\n      - completed\njobs:\n  upload:\n    runs-on: ubuntu-latest\n    if: >\n      github.event.workflow_run.event == 'pull_request' &&\n      github.event.workflow_run.conclusion == 'success'\n    steps:\n      - name: \"Download artifact\"\n        uses: actions/github-script@v3.1.0\n        with:\n          script: |\n            var artifacts = await github.actions.listWorkflowRunArtifacts({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: ${{github.event.workflow_run.id }},\n            });\n            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {\n              return artifact.name == \"pr\";\n            })[0];\n            var download = await github.actions.downloadArtifact({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                artifact_id: matchArtifact.id,\n                archive_format: 'zip',\n            });\n            var fs = require('fs');\n            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));\n      - run: |\n          mkdir -p tmp\n          unzip -d tmp/ pr.zip\n      - name: \"Comment on PR\"\n        uses: actions/github-script@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            var fs = require('fs');\n            var issue_number = Number(fs.readFileSync('./tmp/NR'));\n            // Verify that the file contains a numeric value\n            const contains_numeric = /\\d/.test(issue_number);\n            if (contains_numeric) {\n                await github.issues.createComment({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  issue_number: issue_number,\n                  body: 'Everything is OK. Thank you for the PR!'\n                });\n            }\n```\n\n## References\n\n- [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Potential execution of untrusted code on a privileged workflow (pull_request_target)"
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 66,
        "end_line": 70,
        "start_column": 9,
        "end_column": 7
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/4/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 3,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/3",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/3",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/untrusted-checkout/critical",
      "severity": "error",
      "description": "Checkout of untrusted code in a privileged context",
      "name": "actions/untrusted-checkout/critical",
      "tags": ["actions","external/cwe/cwe-829","security"],
      "full_description": "Privileged workflows have read/write access to the base repository and access to secrets. By explicitly checking out and running the build script from a fork the untrusted code is running in an environment that is able to push to the base repository and to access secrets.",
      "help": "# Execution of Untrusted Checked-out Code\n\n## Description\n\nGitHub workflows can be triggered through various repository events, including incoming pull requests (PRs) or comments on Issues/PRs. A potentially dangerous misuse of the triggers such as `pull_request_target` or `issue_comment` followed by an explicit checkout of untrusted code (Pull Request HEAD) may lead to repository compromise if untrusted code gets executed in a privileged job.\n\n## Recommendations\n\n- Avoid using `pull_request_target` unless necessary.\n- Employ unprivileged `pull_request` workflows followed by `workflow_run` for privileged operations.\n- Use labels like `safe to test` to vet PRs and manage the execution context appropriately.\n\nThe best practice is to handle the potentially untrusted pull request via the **pull_request** trigger so that it is isolated in an unprivileged environment. The workflow processing the pull request should then store any results like code coverage or failed/passed tests in artifacts and exit. A second privileged workflow with the access to repository secrets, triggered by the completion of the first workflow using `workflow_run` trigger event, downloads the artifacts and make any necessary modifications to the repository or interact with third party services that require repository secrets (e.g. API tokens).\n\nThe artifacts downloaded from the first workflow should be considered untrusted and must be verified.\n\n## Examples\n\n### Incorrect Usage\n\nThe following workflow checks-out untrusted code in a privileged context and runs user-controlled code (in this case package.json scripts) which will grant privileged access to the attacker:\n\n```yaml\non: pull_request_target\n\njobs:\n  build:\n    name: Build and test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n\n      - uses: actions/setup-node@v1\n      - run: |\n          npm install\n          npm build\n\n      - uses: completely/fakeaction@v2\n        with:\n          arg1: ${{ secrets.supersecret }}\n\n      - uses: fakerepo/comment-on-pr@v1\n        with:\n          message: |\n            Thank you!\n```\n\n### Correct Usage\n\nAn example shows how to use two workflows: one for processing the untrusted PR and the other for using the results in a safe context.\n\n**ReceivePR.yml** (untrusted PR handling with artifact creation):\n\n```yaml\nname: Receive PR\non:\n  pull_request:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: /bin/bash ./build.sh\n      - name: Save PR number\n        run: |\n          mkdir -p ./pr\n          echo ${{ github.event.number }} > ./pr/NR\n      - uses: actions/upload-artifact@v2\n        with:\n          name: pr\n          path: pr/\n```\n\n**CommentPR.yml** (processing artifacts with privileged access):\n\n```yaml\nname: Comment on the pull request\non:\n  workflow_run:\n    workflows: [\"Receive PR\"]\n    types:\n      - completed\njobs:\n  upload:\n    runs-on: ubuntu-latest\n    if: >\n      github.event.workflow_run.event == 'pull_request' &&\n      github.event.workflow_run.conclusion == 'success'\n    steps:\n      - name: \"Download artifact\"\n        uses: actions/github-script@v3.1.0\n        with:\n          script: |\n            var artifacts = await github.actions.listWorkflowRunArtifacts({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: ${{github.event.workflow_run.id }},\n            });\n            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {\n              return artifact.name == \"pr\";\n            })[0];\n            var download = await github.actions.downloadArtifact({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                artifact_id: matchArtifact.id,\n                archive_format: 'zip',\n            });\n            var fs = require('fs');\n            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));\n      - run: |\n          mkdir -p tmp\n          unzip -d tmp/ pr.zip\n      - name: \"Comment on PR\"\n        uses: actions/github-script@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            var fs = require('fs');\n            var issue_number = Number(fs.readFileSync('./tmp/NR'));\n            // Verify that the file contains a numeric value\n            const contains_numeric = /\\d/.test(issue_number);\n            if (contains_numeric) {\n                await github.issues.createComment({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  issue_number: issue_number,\n                  body: 'Everything is OK. Thank you for the PR!'\n                });\n            }\n```\n\n## References\n\n- [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Potential execution of untrusted code on a privileged workflow (pull_request_target)"
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 50,
        "end_line": 55,
        "start_column": 9,
        "end_column": 7
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/3/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 2,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/2",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/2",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/code-injection/critical",
      "severity": "error",
      "description": "Code injection",
      "name": "actions/code-injection/critical",
      "tags": ["actions","external/cwe/cwe-094","external/cwe/cwe-095","external/cwe/cwe-116","security"],
      "full_description": "Interpreting unsanitized user input as code allows a malicious user to perform arbitrary code execution.",
      "help": "# Code Injection in GitHub Actions\n\n## Description\n\nUsing user-controlled input in GitHub Actions may lead to code injection in contexts like _run:_ or _script:_.\n\nCode injection in GitHub Actions may allow an attacker to exfiltrate any secrets used in the workflow and the temporary GitHub repository authorization token. The token may have write access to the repository, allowing an attacker to make changes to the repository.\n\n## Recommendations\n\nThe best practice to avoid code injection vulnerabilities in GitHub workflows is to set the untrusted input value of the expression to an intermediate environment variable and then use the environment variable using the native syntax of the shell/script interpreter (that is, not _${{ env.VAR }}_).\n\nIt is also recommended to limit the permissions of any tokens used by a workflow such as the GITHUB_TOKEN.\n\n## Examples\n\n### Incorrect Usage\n\nThe following example lets attackers inject an arbitrary shell command:\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n      - run: |\n          echo '${{ github.event.comment.body }}'\n```\n\nThe following example uses an environment variable, but **still allows the injection** because of the use of expression syntax:\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n    -  env:\n        BODY: ${{ github.event.issue.body }}\n      run: |\n        echo '${{ env.BODY }}'\n```\n\n### Correct Usage\n\nThe following example uses shell syntax to read the environment variable and will prevent the attack:\n\n```yaml\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n      - env:\n          BODY: ${{ github.event.issue.body }}\n        run: |\n          echo \"$BODY\"\n```\n\nThe following example uses `process.env` to read environment variables within JavaScript code.\n\n```yaml\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: uses: actions/github-script@v4\n        env:\n          BODY: ${{ github.event.issue.body }}\n        with:\n          script: |\n            const { BODY } = process.env\n            ...\n```\n\n## References\n\n- GitHub Security Lab Research: [Keeping your GitHub Actions and workflows secure: Untrusted input](https://securitylab.github.com/research/github-actions-untrusted-input).\n- GitHub Docs: [Security hardening for GitHub Actions](https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions).\n- GitHub Docs: [Permissions for the GITHUB_TOKEN](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Potential code injection in ${{ github.event.pull_request.head.ref }}, which may be controlled by an external user (pull_request_target)."
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 208,
        "end_line": 208,
        "start_column": 74,
        "end_column": 115
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/2/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 1,
    "created_at": "2025-06-23T11:15:35Z",
    "updated_at": "2025-06-23T11:15:35Z",
    "url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/1",
    "html_url": "https://github.com/Be-Secure/AutoGPT/security/code-scanning/1",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/code-injection/critical",
      "severity": "error",
      "description": "Code injection",
      "name": "actions/code-injection/critical",
      "tags": ["actions","external/cwe/cwe-094","external/cwe/cwe-095","external/cwe/cwe-116","security"],
      "full_description": "Interpreting unsanitized user input as code allows a malicious user to perform arbitrary code execution.",
      "help": "# Code Injection in GitHub Actions\n\n## Description\n\nUsing user-controlled input in GitHub Actions may lead to code injection in contexts like _run:_ or _script:_.\n\nCode injection in GitHub Actions may allow an attacker to exfiltrate any secrets used in the workflow and the temporary GitHub repository authorization token. The token may have write access to the repository, allowing an attacker to make changes to the repository.\n\n## Recommendations\n\nThe best practice to avoid code injection vulnerabilities in GitHub workflows is to set the untrusted input value of the expression to an intermediate environment variable and then use the environment variable using the native syntax of the shell/script interpreter (that is, not _${{ env.VAR }}_).\n\nIt is also recommended to limit the permissions of any tokens used by a workflow such as the GITHUB_TOKEN.\n\n## Examples\n\n### Incorrect Usage\n\nThe following example lets attackers inject an arbitrary shell command:\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n      - run: |\n          echo '${{ github.event.comment.body }}'\n```\n\nThe following example uses an environment variable, but **still allows the injection** because of the use of expression syntax:\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n    -  env:\n        BODY: ${{ github.event.issue.body }}\n      run: |\n        echo '${{ env.BODY }}'\n```\n\n### Correct Usage\n\nThe following example uses shell syntax to read the environment variable and will prevent the attack:\n\n```yaml\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n      - env:\n          BODY: ${{ github.event.issue.body }}\n        run: |\n          echo \"$BODY\"\n```\n\nThe following example uses `process.env` to read environment variables within JavaScript code.\n\n```yaml\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: uses: actions/github-script@v4\n        env:\n          BODY: ${{ github.event.issue.body }}\n        with:\n          script: |\n            const { BODY } = process.env\n            ...\n```\n\n## References\n\n- GitHub Security Lab Research: [Keeping your GitHub Actions and workflows secure: Untrusted input](https://securitylab.github.com/research/github-actions-untrusted-input).\n- GitHub Docs: [Security hardening for GitHub Actions](https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions).\n- GitHub Docs: [Permissions for the GITHUB_TOKEN](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-0.4.7",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "860455405ba93e42793881f154b0271770621538",
      "message": {
        "text": "Potential code injection in ${{ github.event.pull_request.head.ref }}, which may be controlled by an external user (pull_request_target)."
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 110,
        "end_line": 110,
        "start_column": 73,
        "end_column": 114
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/AutoGPT/code-scanning/alerts/1/instances",
    "dismissal_approved_by": null
  }
]
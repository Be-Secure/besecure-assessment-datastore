{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/AmadeusITGroup/kubervisor/commit/aaf3d1a6a90c6ba9d56fd44648734938d0970470?diff=split#diff-48a8d555a42b35d5bf1e8ae57f3f0d6c634b9b3d9060fd1935afa55f5dbd58c9L-1",
                    "lines": [
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/AbGuthrie/goquery/commit/0d5d3b2a65a571a0926591fe7674c133d0a06d14?diff=split#diff-8ffdbfea91b4887eb067076025ce572fc41c5f4de26ed4579f37938ee55116ecL-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config{\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: config.GetConfig().DebugEnabled,\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "},\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fsouza/go-dockerclient/commit/27840d3e50fc3505446b6195c3b1370003829cc0?diff=split#diff-4b667feae66c9d46b21b9ecc19e8958cf4472d162ce0a47ac3e8386af8bbd8cfL-1",
                    "lines": [
                      {
                        "line": "InsecureSkipVerify: true,\n",
                        "lineNumber": 187,
                        "lineChange": "removed"
                      },
                      {
                        "line": "InsecureSkipVerify: false,\n",
                        "lineNumber": 193,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 58,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/AmadeusITGroup/kubervisor/commit/aaf3d1a6a90c6ba9d56fd44648734938d0970470?diff=split#diff-48a8d555a42b35d5bf1e8ae57f3f0d6c634b9b3d9060fd1935afa55f5dbd58c9L-1",
                    "lines": [
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/AbGuthrie/goquery/commit/0d5d3b2a65a571a0926591fe7674c133d0a06d14?diff=split#diff-8ffdbfea91b4887eb067076025ce572fc41c5f4de26ed4579f37938ee55116ecL-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config{\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: config.GetConfig().DebugEnabled,\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "},\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fsouza/go-dockerclient/commit/27840d3e50fc3505446b6195c3b1370003829cc0?diff=split#diff-4b667feae66c9d46b21b9ecc19e8958cf4472d162ce0a47ac3e8386af8bbd8cfL-1",
                    "lines": [
                      {
                        "line": "InsecureSkipVerify: true,\n",
                        "lineNumber": 187,
                        "lineChange": "removed"
                      },
                      {
                        "line": "InsecureSkipVerify: false,\n",
                        "lineNumber": 193,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 58,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/imgproxy/imgproxy/commit/7f567216dd3993d2276092a47aa3ef3b7fe1dd10?diff=split#diff-d12d4526fdfb5d07e4694a3fcfa8953d98905d9284f9fde8e566d909abfece15L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha1\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/binary\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"fmt\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "var notModifiedErr = newError(304, \"Not modified\", \"Not modified\")\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "func calcETag(b []byte, po *processingOptions) string {\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfootprint := sha1.Sum(b)\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfootprint := sha256.Sum256(b)\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/89luca89/pakkero/commit/732106c7e9d633f5ec37122adfd4cd0c63b7a245?diff=split#diff-fd7871dcb081132c05fcb52820591141d6a0719419e2dcf81086f87a6f5731c0L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha512\"\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"io\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"io/ioutil\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "EncryptAESReversed Wrapper around AESGCM encryption\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "this will not only encrypt the payload but:\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "- generate a password using the randomized UPX Binary's md5sum\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "- cipher the payload with AESGCM using the generated password\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "- swap endianess on all the encrypted bytes\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "- reverse the complete payload\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "*/\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "func EncryptAESReversed(plaintext []byte, outfile string) (string, error) {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// generate a password using the randomized UPX Binary's md5sum\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t    the aes-256 psk is the md5sum of the whole executable\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t        this is also useful to protect against NOP attacks to the anti-debug\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t        features in the binary.\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t        This doubles also as anti-tamper measure.\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t*/\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tb, err := ioutil.ReadFile(outfile)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn \"\", err\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := md5.Sum(b)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t// use SHA512 (32byte) of the passphrase as key\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tkey := sha512.Sum512_256(b)\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blockcdn-go/exchange-sdk-go/commit/e2de2f88157a8e5335d75827f16d05ced01d98f5?diff=split#diff-7f9c4d2d8595ac7a5c209b4ec51b2d9af4d0e25f75d38571534c6032ba3cb1faL-1",
                    "lines": [
                      {
                        "line": "func sign(str, key string) string {\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tm := md5.New()\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tm.Write([]byte(key))\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tmkey := hex.EncodeToString(m.Sum(nil))\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\th := hmac.New(sha256.New, []byte(key))\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\th.Write([]byte(str))\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 89,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceResourceAccess",
                  "SourceFile",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/citrix/terraform-provider-citrixadc/commit/a4c0975006ef2020c0db505d69bdcec13f10915b?diff=split#diff-a9109e20e39687dfe49012120251229e209c76557bfef1ac646718448d8ca653L-1",
                    "lines": [
                      {
                        "line": "b, err := ioutil.ReadFile(inputFile)\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b, err := ioutil.ReadFile(filepath.Clean(inputFile))\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/MohawkTSDB/mohawk/commit/e4a68407d6e1f9a3ccfa1f0a320c04d693afe2a6?diff=split#diff-ffb4b68b82d9234bcba450c7ca14d76b3ea0eed74198d1811d802889c58252e5L-1",
                    "lines": [
                      {
                        "line": "\t// Check for \"..\" in the url path,\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// if we find \"..\" in the path we will not serve static files\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif strings.Contains(path, \"..\") {\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\ts.next.ServeHTTP(w, r)\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// Add index.html to path if it ends with /\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif path[len(path)-1:] == \"/\" {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"index.html\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Add /index.html to path if a directory\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif fi, err := os.Stat(path); err == nil && fi.IsDir() {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"/index.html\"\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// If file exist serve it\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file, err := ioutil.ReadFile(path); err == nil {\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/u-root/u-root/commit/?diff=split#diff-b2964e352f657fd0dbf5b5dc2f11b034b389e3ad9d60ef315dca58778612d468L-1",
                    "lines": [
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Clean(w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Join(\"/\", w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile, err := os.Open(path)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 28,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "SourceNonServer",
                  "SourceResourceAccess",
                  "SourceFile",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/citrix/terraform-provider-citrixadc/commit/a4c0975006ef2020c0db505d69bdcec13f10915b?diff=split#diff-a9109e20e39687dfe49012120251229e209c76557bfef1ac646718448d8ca653L-1",
                    "lines": [
                      {
                        "line": "b, err := ioutil.ReadFile(inputFile)\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b, err := ioutil.ReadFile(filepath.Clean(inputFile))\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/MohawkTSDB/mohawk/commit/e4a68407d6e1f9a3ccfa1f0a320c04d693afe2a6?diff=split#diff-ffb4b68b82d9234bcba450c7ca14d76b3ea0eed74198d1811d802889c58252e5L-1",
                    "lines": [
                      {
                        "line": "\t// Check for \"..\" in the url path,\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// if we find \"..\" in the path we will not serve static files\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif strings.Contains(path, \"..\") {\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\ts.next.ServeHTTP(w, r)\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// Add index.html to path if it ends with /\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif path[len(path)-1:] == \"/\" {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"index.html\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Add /index.html to path if a directory\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif fi, err := os.Stat(path); err == nil && fi.IsDir() {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"/index.html\"\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// If file exist serve it\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file, err := ioutil.ReadFile(path); err == nil {\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/u-root/u-root/commit/?diff=split#diff-b2964e352f657fd0dbf5b5dc2f11b034b389e3ad9d60ef315dca58778612d468L-1",
                    "lines": [
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Clean(w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Join(\"/\", w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile, err := os.Open(path)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 28,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/alfred-zhong/wserver/commit/bc7d33643368e16d9801ab88f7ba2dfdc49467af?diff=split#diff-005f9a0396b938d96245e8fc04dcd633d0716b5610fd4d90c09af361625fb74dL-1",
                    "lines": [
                      {
                        "line": "userID := \"476B40DD-DFE9-4CDE-AD4F-F0A53FE18FA5\"\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "userID := uuid.New().String()\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/k0kubun/sqldef/commit/5ac0feda25dfa3b4a3e2201c017425beec13a02d?diff=split#diff-ed17e21a49a7d3b117a41187ac6d384ef656de942120f74001fa9b057fde5688L-1",
                    "lines": [
                      {
                        "line": "user := \"postgres\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password := \"\"\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host := \"127.0.0.1:5432\"\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "user := config.User\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "password := config.Password\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "host := fmt.Sprintf(\"%s:%d\", config.Host, config.Port)\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fjukstad/kvik/commit/254d8dd1c34e017b1aac1493286a3f3b773ff40c?diff=split#diff-6a37a2c5ea8c5a951b2830b342cc07312e7cfa6eb69afdecc4b5bfce636f28e0L-1",
                    "lines": [
                      {
                        "line": "//addr := \"192.168.99.100:8004\"\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "addr := \"public.opencpu.org\"\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "username := \"user\"\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password := \"password\"\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "addr := \"localhost:8181\"\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "//addr := \"public.opencpu.org\"\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "username := \"\"\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "password := \"\"\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "InTest",
                  "SourceServer",
                  "SourceHttpBody",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/dimroc/urbanevents/commit/510d3e9647558b58c2623b46a700ed75bb3c13da?diff=split#diff-887f0b70ae2220890c02580912fc360f28a20c840c7b8874351543e3187e6f9eL-1",
                    "lines": [
                      {
                        "line": "\thttp.HandleFunc(\"/\", handler)\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thttp.ListenAndServe(\":8080\", nil)\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trouter := mux.NewRouter()\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tstdChain := alice.New(stdoutLoggingHandler, handlers.CompressHandler) //.Then(finalHandler)\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\trouter.Handle(\"/api/v1/settings\", stdChain.Then(http.HandlerFunc(Settings)))\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfmt.Println(\"Running server on port 8080\")\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "func Settings(w http.ResponseWriter, r *http.Request) {\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tw.Header().Set(\"Content-Type\", \"application/json; charset=UTF-8\")\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tw.WriteHeader(http.StatusOK)\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err := json.NewEncoder(w).Encode(settings); err != nil {\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tpanic(err)\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/junkurihara/dnscrypt-proxy-modns/commit/5d6f9358c943b66a1da1d96c2a7bf76341631996?diff=split#diff-f171c98f787f1f38ba8b010bab6cb42d2390de7be03702143063bf349a6a6d00L-1",
                    "lines": [
                      {
                        "line": "writer.Header().Set(\"Content-Type\", \"text/plain\")\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "writer.WriteHeader(400)\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "writer.Write([]byte(\"Unexpected Content-Type\\n\"))\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "proxy := handler.proxy\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "start := time.Now()\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "clientAddr, err := net.ResolveTCPAddr(\"tcp\", request.RemoteAddr)\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdlog.Errorf(\"Unable to get the client address: [%v]\", err)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "xClientAddr := net.Addr(clientAddr)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "packet, err := ioutil.ReadAll(request.Body)\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdlog.Warnf(\"No body in a local DoH query\")\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "response := proxy.processIncomingQuery(proxy.serversInfo.getOne(), \"local_doh\", proxy.mainProto, packet, &xClientAddr, nil, start)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "if len(response) == 0 {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twriter.WriteHeader(500)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "writer.Header().Set(\"Content-Type\", \"application/dns-message\")\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "writer.WriteHeader(200)\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "writer.Write(response)\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/brutella/hc/commit/bcb06972ac99bd1509b0c241a171f05f9e808d8e?diff=split#diff-3afd38f3098ada4796e704ce276b093111be09963697afd22d519a2648f4f0ebL-1",
                    "lines": [
                      {
                        "line": "    res, err = handler.controller.HandleGetCharacteristics(request.Form)\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    aid, cid, err := ParseAccessoryAndCharacterId(request.Form.Get(\"id\"))\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "    chars := handler.controller.HandleGetCharacteristics(aid, cid)\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "    result, err := json.Marshal(chars)\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if err != nil {\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "        fmt.Println(err)\n",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 41,
                        "lineChange": "added"
                      },
                      {
                        "line": "    var b bytes.Buffer\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "    b.Write(result)\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "    res = &b\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "case MethodPUT:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fmt.Println(\"PUT /characteristics\")\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // no response\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    res, err = handler.controller.HandlePutCharacteristics(request.Body)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "default:\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fmt.Println(\"Cannot handle HTTP method\", request.Method)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fmt.Println(err)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    response.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    bytes, _ := ioutil.ReadAll(res)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "fmt.Println(\"<-  JSON:\", string(bytes))\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "response.Write(bytes)\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 73,
                "cwe": [
                  "CWE-79"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/registryclient/client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "startColumn": 59,
                  "endColumn": 83
                }
              }
            }
          ],
          "fingerprints": {
            "0": "24065cbf979c7139b7b0911856da3ca1c40fddb056074bbd8dd20159d5f518a0",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/registryclient/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 59,
                            "endColumn": 83
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 353,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/registryclient/client.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 149,
                  "startColumn": 45,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b6c82ba09cc5f3146611bba887d5c4af3b0532dcfde6f38821fcd369de241b62",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/registryclient/client.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 45,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/validation/policy/generate.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "startColumn": 11,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0bca15b042ece3804c1bb3fb13ea5878768be12580f3beb593b6d200dc11a182",
            "1": "34950bd9.73eb5804.45df3e14.f24cd98e.f658f14a.67ab4541.0c728423.1d874c72.34950bd9.73eb5804.45df3e14.f24cd98e.f658f14a.67ab4541.0c728423.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/validation/policy/generate.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/utils/report/metadata.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152,
                  "startColumn": 10,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "318380f02dae7adfd9ecf90a13a6f7a512ec5b81fcb1c5aa17c36a68096033f3",
            "1": "34950bd9.73eb5804.45df3e14.f24cd98e.f658f14a.67ab4541.0c728423.1d874c72.34950bd9.73eb5804.45df3e14.f24cd98e.f658f14a.67ab4541.0c728423.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/utils/report/metadata.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 10,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4)",
              "[os.ReadDir](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "startColumn": 16,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3e92f5512899a671943652d202ad64ecc40973c1bd6f6a02cabe2a6d9a145dcc",
            "1": "8379f5e8.b1d760a0.45df3e14.89f13fa7.556f02b4.2f4e1548.df7e59ba.678b0e20.8da4b8b6.73eb5804.45df3e14.e22980a8.e8c00e77.9383b6fc.1bf4e01c.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4)",
              "[os.ReadDir](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "startColumn": 15,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c7a3ebc00d0da177d9ca146336721cf7eb1f95a4f3372f954013ca1b7a442233",
            "1": "8379f5e8.32e1fb1f.45df3e14.89f13fa7.556f02b4.67ab4541.860c51ff.678b0e20.ff872371.c55d47e1.45df3e14.e22980a8.556f02b4.67ab4541.860c51ff.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[os.ReadFile](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 26,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "390c37f4ba9ced2bd20e50c6948982957feebb01b12a2eaec8a83d9afa141ee5",
            "1": "2d06e3d6.882fa890.45df3e14.16fcbc3b.556f02b4.67ab4541.9e676de9.9925e872.2d06e3d6.c55d47e1.45df3e14.c6c7222d.56345938.67ab4541.8ee950b3.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 54,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 36,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[os.ReadFile](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 16,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a260ae0eccd4033e3129c8fe0e90c8a68116a2fcd70d8612eef630f65a3d5eac",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.2f4e1548.8ee950b3.678b0e20.424eddda.73eb5804.45df3e14.e22980a8.6ee851a6.67ab4541.8ee950b3.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 54,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 36,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/test/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.ReadDir](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182,
                  "startColumn": 17,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cd891c174ffab6c312ad595d62e6ae244b5692f58bbf0bf0a70f597b1c8e3cea",
            "1": "8379f5e8.4fedba53.45df3e14.edbd913d.84c49f13.d9c4bbd5.df7e59ba.0b3d1648.8da4b8b6.73eb5804.45df3e14.e22980a8.e8c00e77.9383b6fc.1bf4e01c.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 35,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 36,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 182,
                            "endLine": 182,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 182,
                            "endLine": 182,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 556,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.ReadDir](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 187,
                  "startColumn": 20,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1eabf8e54e809f3c4ea2259d177ff7bc89762d8c0d11ebab771cc2c9b10b8bf2",
            "1": "2d06e3d6.09d1e692.45df3e14.6483b32f.556f02b4.67ab4541.860c51ff.678b0e20.47d3c013.c55d47e1.4c9b5203.e22980a8.4f3767fc.67ab4541.860c51ff.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 35,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 36,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 182,
                            "endLine": 182,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/policy/load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 182,
                            "endLine": 182,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 556,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/engine/context/context_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dbd689452a23d849cb06d41adec31c4ad87a24a64f7122dff894fd8dea28bc46",
            "1": "424eddda.98f0ff0f.14bf060e.bfac11f0.6ee851a6.67752288.b33efcfd.ff3d0695.424eddda.98f0ff0f.14bf060e.bfac11f0.6ee851a6.2f4e1548.b33efcfd.efa5d744"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/context/context_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 13,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/context/context_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 421,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/cli/kubectl-kyverno/userinfo/userinfo_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "73089141984181455dd2fbab701fcf68b40c945d8a02dc07e3b419962c077abc",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/userinfo/userinfo_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 16,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/userinfo/userinfo_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/cli/kubectl-kyverno/userinfo/userinfo_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "55d70e559e2f709690389bc59a655e2df328f1b48309a5db575181a9b057cbd8",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/userinfo/userinfo_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 16,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cli/kubectl-kyverno/userinfo/userinfo_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/engine/utils/utils_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1972,
                  "endLine": 1972,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cb37d29c7dcddb08c29699523384a2a45b131652426b772dfac2b6f2ae7a7ea4",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.c7e83e31.8ee950b3.ff3d0695.424eddda.98f0ff0f.77db00ed.bfac11f0.6ee851a6.dd1939cd.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/utils/utils_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1972,
                            "endLine": 1972,
                            "startColumn": 14,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/utils/utils_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1972,
                            "endLine": 1972,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 421,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/engine/variables/variables_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "26099d9f7d6ddaededfb75b52cd9f0e17efc66dbe1217b7e405f59b618ff4273",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.25f4d443.98f0ff0f.3d13e656.bfac11f0.86c50f21.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/variables/variables_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/variables/variables_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/engine/variables/variables_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3531402b2ed5ae7e5c33e0f5f6f59eb6f3399d7046d67ac1a2ac8bb448e15d0d",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.25f4d443.98f0ff0f.3d13e656.bfac11f0.86c50f21.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/variables/variables_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/variables/variables_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/engine/variables/variables_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 238,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e42647bb39c78a6fd23846017ab86ae1f80a47f1468fd5533e59dbdbea25e65f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.25f4d443.98f0ff0f.3d13e656.bfac11f0.86c50f21.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/variables/variables_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 238,
                            "endLine": 238,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/variables/variables_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 238,
                            "endLine": 238,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7e79d84baa28ca3eb08f5ab2690c0f1d24f5fbdcbaaf36b6820a2c34bbebef4d",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.5a55bb7b.8ee950b3.9b0c8bdc.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.5a55bb7b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 13,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 178,
                  "endLine": 178,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f134609548a6141006267ec9c576b8fdb62f6f3a047b7825b00a3f774878d246",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.e256eee3.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 188,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "734dd1700cd9cc9ae7f177ed601976903d91f5281446f06eea76665c6e31103c",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.e256eee3.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b5592c8f74734ec9fc848998b175b0963f59ca5c4d9313249d8b105c3261f00c",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.e256eee3.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f71c43090b8faabdb24a1a8b13cd0befe10cf2eb39d1bc746d1866734194bd2d",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.e256eee3.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 229,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4095aeff338fa92072a203c147615a58f69d700e1dd72f79e467ed66208faa37",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.d9c01c16.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.d9c01c16.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 242,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ae943283ed03b9af7cb6e32ae6e10fd089c7f741f605760608c22ace41d2f486",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.d9c01c16.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.d9c01c16.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 15,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a899ef9d6ff97b01451426e55c1ee8ef5d65dbfc932c397e5c5779b3a0c53079",
            "1": "424eddda.98f0ff0f.721d3299.3d1cc6fe.6ee851a6.f4aac139.8ee950b3.80446830.94ebc78e.98f0ff0f.721d3299.3d1cc6fe.6ee851a6.257ad09d.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 255,
                            "endLine": 255,
                            "startColumn": 15,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 255,
                            "endLine": 255,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c8f2978fd5df3e2222551f33278d06d5bf7aea9acbac12bb6df843cb37d774a0",
            "1": "424eddda.2ca3dd98.3d13e656.1d79cf64.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.2ca3dd98.3d13e656.1d79cf64.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 268,
                            "endLine": 268,
                            "startColumn": 15,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 268,
                            "endLine": 268,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 281,
                  "endLine": 281,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a294b17b51f5ba9ecda6d64bd0a080c53a78b9b2871da9d8cf61e1b62c1f09a5",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.d3b6af86.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.85f21ddc.2f4e1548.d3b6af86.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 281,
                            "endLine": 281,
                            "startColumn": 15,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 281,
                            "endLine": 281,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9c3433040d313c36fd2bf193e2f89eeaf3119b3b49afaed76c8cd927d1254e62",
            "1": "424eddda.2ca3dd98.3d13e656.1d79cf64.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.2ca3dd98.3d13e656.1d79cf64.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 15,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 312,
                  "endLine": 312,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "52a6cd8377b56f142367118706582a1bb2e1d4d7389531d50b171368a19e6a07",
            "1": "424eddda.2ca3dd98.3d13e656.1d79cf64.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.2ca3dd98.3d13e656.1d79cf64.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 312,
                            "endLine": 312,
                            "startColumn": 15,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 312,
                            "endLine": 312,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 362,
                  "endLine": 362,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cab0e87852a8325591131914bf66d3e07ef57937752231f71652f0122cd13c19",
            "1": "14af749f.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.14af749f.98f0ff0f.3d13e656.bfac11f0.52f5d362.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 362,
                            "endLine": 362,
                            "startColumn": 13,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 362,
                            "endLine": 362,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 509,
                  "endLine": 509,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9b3dea3252d06fb868963bd20a2fdd20a1e469ffc4e171f808f616c405c09cee",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.5a55bb7b.8ee950b3.9b0c8bdc.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.5a55bb7b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 509,
                            "endLine": 509,
                            "startColumn": 16,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 509,
                            "endLine": 509,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 523,
                  "endLine": 523,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d3675b529229def1f30d27078842b9dde91bbcd147ffd17a3b0970a88ffdd254",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.5a55bb7b.8ee950b3.9b0c8bdc.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.5a55bb7b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 523,
                            "endLine": 523,
                            "startColumn": 16,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 523,
                            "endLine": 523,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 534,
                  "endLine": 534,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "869cefab8e281e8e4b7c42e24f4534580b81b2e109071852ab127d2431ac47ca",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.5a55bb7b.8ee950b3.9b0c8bdc.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.5a55bb7b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 534,
                            "endLine": 534,
                            "startColumn": 16,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 534,
                            "endLine": 534,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 547,
                  "endLine": 547,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "34020d5f89a67fd13179f2f8d0644691be81ab363df389300e0cdc456e9a2507",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.5a55bb7b.8ee950b3.9b0c8bdc.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.5a55bb7b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 547,
                            "endLine": 547,
                            "startColumn": 16,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 547,
                            "endLine": 547,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 584,
                  "endLine": 584,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57ee2f5b1efcc3da70097b74d3c0e493672e3816a8dcbbce7f9cab6e9ebc8d05",
            "1": "14af749f.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.14af749f.98f0ff0f.3d13e656.bfac11f0.52f5d362.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 16,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/userinfo/roleRef_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 680,
                  "endLine": 680,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "491ef8aea12543314aafa8b69c750b81ee8835bd840fe5ce92abb7645d6959b5",
            "1": "14af749f.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.14af749f.98f0ff0f.3d13e656.bfac11f0.52f5d362.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 16,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/userinfo/roleRef_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 471,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4)",
              "[Write](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/engine/apicall/apiCall_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 4,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b2ceb30f631022bbf3e7ca12e8449c08ce1f4a78bbe33f2263aa9f76c4029537",
            "1": "ba4e4356.73eb5804.45df3e14.53ab846b.771b0f00.57f89f2f.df7e59ba.bda788af.38552e76.f75a6a44.45df3e14.e22980a8.6b6807dc.57f89f2f.a145879e.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/apicall/apiCall_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 26,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/apicall/apiCall_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 26,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/apicall/apiCall_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/apicall/apiCall_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/apicall/apiCall_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/engine/apicall/apiCall_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 4,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 353,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Go",
            "files": 1390,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 10,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}

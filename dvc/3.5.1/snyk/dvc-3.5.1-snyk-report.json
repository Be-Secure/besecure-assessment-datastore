{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "HardcodedNonCryptoSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/devjones/PyEtherpadLite/commit/ffd6855a403edc475b6f7504a7e1eb241703562f?diff=split#diff-808e8b4d690175761cb0bac5bb3ed0a1L18",
                    "lines": [
                      {
                        "line": "TIMEOUT = 20",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "apiKey = \"EtherKey54\"",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "apiKey = \"\"",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "baseUrl = \"http://localhost:9001/api\"",
                        "lineNumber": 18,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mongodb-labs/mongo-web-shell/commit/d6de15427d22298f3baae4197d96e5b9fd83b5e5?diff=split#diff-716c96263f9764c99aac36887f0a2d0fL18",
                    "lines": [
                      {
                        "line": "# flask.config settings.",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "DEBUG = True",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "SECRET_KEY = 'A0gjhsd3678HK'",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = 'foo'",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "# Misc settings.",
                        "lineNumber": 19,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/wepay/Python-SDK/commit/c3dedacbea2a555afe7a1b75fc940572fc7064f4?diff=split#diff-973a3e450a782166ba326d95a36fe25bL6",
                    "lines": [
                      {
                        "line": " from wepay import WePay",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "CLIENT_ID = '33518'",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CLIENT_SECRET = '9c7a077b7e'",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CLIENT_ID = ''",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "CLIENT_SECRET = ''",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "IN_PRODUCTION = False",
                        "lineNumber": 6,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 253,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "python/InsecureHash/test",
              "name": "InsecureHash/test",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureHash",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "python/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-916"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/fs/test_s3.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 9,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7af6db516c0f0a9e6f543ef646cf8add35c28c6e45f67ecff6a9279f32a42978",
            "1": "ccf510fb.c88767d0.7dc6970d.8d8eebdf.25ac000c.a5d7f69f.081ac3f4.7285c15d.ccf510fb.c88767d0.7dc6970d.8d8eebdf.25ac000c.a5d7f69f.081ac3f4.7285c15d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/fs/test_s3.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/fs/test_s3.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 390,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/remote/test_oss.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6,
                  "startColumn": 1,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5bc93f73cff47a54f1feb28240e527658a2cef66d92e80b813510dc3d6df5099",
            "1": "16691f08.2a2ae467.e49126a7.bdd86d42.8126d801.87714edb.25ca586c.7285c15d.16691f08.2a2ae467.e49126a7.bdd86d42.8126d801.87714edb.25ca586c.7285c15d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/remote/test_oss.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6,
                            "endLine": 6,
                            "startColumn": 14,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/remote/test_oss.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6,
                            "endLine": 6,
                            "startColumn": 1,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 390,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/func/test_diff.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 12,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4afd4801fa11e4e208d2e66bab4abdb87a0f35341dd16c80d0d4cbad83271290",
            "1": "220bd578.60c4068b.db6521be.139c59a8.f0a37620.ba14daf2.427d1609.742d9b21.220bd578.60c4068b.db6521be.139c59a8.f0a37620.ba14daf2.427d1609.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/func/test_diff.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 170,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dvc/repo/__init__.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 590,
                  "endLine": 590,
                  "startColumn": 22,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "63289a7b19e76333141efcd82e7f739b5dd5ac395902e668ddaab2526dafc57f",
            "1": "a2db85fa.2dd6d7a6.79e62dc9.139c59a8.bab9de6f.3ef73f20.081ac3f4.ebed174f.97da360b.2dd6d7a6.f04405c4.139c59a8.e26e24d8.3ef73f20.65068a99.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dvc/repo/__init__.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 190,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dvc/lock.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 193,
                  "endLine": 193,
                  "startColumn": 24,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "775f2ee26f62a19a8fde361c5cb46af8e76476f87951b41053065bb7532ffd40",
            "1": "a2db85fa.f8545116.79e62dc9.139c59a8.3a605997.57d888ee.763f1615.2c77ce57.97da360b.f8545116.f04405c4.139c59a8.3a605997.ba14daf2.65068a99.2c77ce57"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dvc/lock.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 22,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 190,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Python",
            "files": 486,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}

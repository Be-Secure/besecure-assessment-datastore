{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/Sqli/test",
              "name": "Sqli/test",
              "shortDescription": {
                "text": "SQL Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nIn an SQL injection attack, the user can submit an SQL query directly to the database, gaining access without providing appropriate credentials. Attackers can then view, export, modify, and delete confidential information; change passwords and other authentication information; and possibly gain access to other systems within the network. This is one of the most commonly exploited categories of vulnerability, but can largely be avoided through good coding practices.\n\n## Best practices for prevention\n* Avoid passing user-entered parameters directly to the SQL server.\n* Avoid using string concatenation to build SQL queries from user-entered parameters.\n* When coding, define SQL code first, then pass in parameters. Use prepared statements with parameterized queries. Examples include `SqlCommand()` in .NET and `bindParam()` in PHP.\n* Use strong typing for all parameters so unexpected user data will be rejected.\n* Where direct user input cannot be avoided for performance reasons, validate input against a very strict allowlist of permitted characters, avoiding special characters such as `? & / < > ; - ' \" \\` and spaces. Use a vendor-supplied escaping routine if possible.\n* Develop your application in an environment and/or using libraries that provide protection against SQL injection.\n* Harden your entire environment around a least-privilege model, ideally with isolated accounts with privileges only for particular tasks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Sqli",
                  "Security",
                  "InTest",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/crawsome/PyRPG_Mini/commit/71c4c4a244b955f9bda7386663c00c0313f87152?diff=split#diff-e1aa5a4797d0be9ed6ab5ec2783036d4ae4ba84b1d5ad7fc70c95a6c0c51c57dL-1",
                    "lines": [
                      {
                        "line": "conn.execute('SELECT * FROM weapons where level = ' + str(ourHero.level) + ';')\n",
                        "lineNumber": 139,
                        "lineChange": "removed"
                      },
                      {
                        "line": "conn.execute('SELECT * FROM weapons WHERE \"level\" = ? AND \"class\" = ? ;',\n",
                        "lineNumber": 139,
                        "lineChange": "added"
                      },
                      {
                        "line": "             (str(ourHero.level), str(ourHero.ourclass),))\n",
                        "lineNumber": 140,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rembo10/headphones/commit/cc5b8b48b19a507ebc2ad38b8a0b03e14f0f602a?diff=split#diff-3db2dde6ee987239df8409d8d2ec588a609d9629f5004fd90cd82c68dd5a9cfeL-1",
                    "lines": [
                      {
                        "line": "c.execute('''SELECT TrackTitle from have WHERE ArtistName like \"%s\" AND AlbumTitle like \"%s\" AND TrackTitle like \"%s\"''' % (results[i][1], results[i][2], results[i][3]))\n",
                        "lineNumber": 169,
                        "lineChange": "removed"
                      },
                      {
                        "line": "c.execute('''SELECT TrackTitle from have WHERE ArtistName like ? AND AlbumTitle like ? AND TrackTitle like ?''', (results[i][1], results[i][2], results[i][3]))\n",
                        "lineNumber": 169,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/UFAL-DSG/alex/commit/bd87cd9f530ea4ca790283ef4c73ca87a3c9dc01?diff=split#diff-b1b25f09e4831253c143469c3a6ddea04c7d5e2754e8e224d49188f9cb8c1f49L-1",
                    "lines": [
                      {
                        "line": "c.execute((\"SELECT * FROM results WHERE \"\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "           \"dataset='test' AND exp='%s' AND lm='%s' AND lm_w=%s\"\n",
                        "lineNumber": 163,
                        "lineChange": "removed"
                      },
                      {
                        "line": "           % (exp, lm, lm_w)))\n",
                        "lineNumber": 164,
                        "lineChange": "removed"
                      },
                      {
                        "line": "d.append(c.fetchone())  # there should be only one row\n",
                        "lineNumber": 165,
                        "lineChange": "removed"
                      },
                      {
                        "line": "           \"dataset='test' AND exp=? AND lm=? AND lm_w=?\"),\n",
                        "lineNumber": 164,
                        "lineChange": "added"
                      },
                      {
                        "line": "          (exp, lm, lm_w))\n",
                        "lineNumber": 165,
                        "lineChange": "added"
                      },
                      {
                        "line": "x = c.fetchall()\n",
                        "lineNumber": 166,
                        "lineChange": "added"
                      },
                      {
                        "line": "assert (len(x) == 1), \"One row should be extracted.\"\n",
                        "lineNumber": 167,
                        "lineChange": "added"
                      },
                      {
                        "line": "d.append(x)\n",
                        "lineNumber": 168,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 51,
                "cwe": [
                  "CWE-89"
                ]
              }
            },
            {
              "id": "python/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/mozilla/addons-server/commit/f16c9db594f57b19f56e1595904981361cec5698?diff=split#diff-6297075105baf87db5ad6add1140ca71a9ddf860b01b80cfe68b7097c299d49aL-1",
                    "lines": [
                      {
                        "line": "return hashlib.md5(force_bytes(key)).hexdigest()\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return hashlib.sha256(force_bytes(key)).hexdigest()\n",
                        "lineNumber": 289,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nicolargo/glances/commit/472b4c501ba10cb28c7b3823a0c42821cf4b99bc?diff=split#diff-021559e37a34e202717cc325fc63cb015642a70324b324a10c92743925517180L-1",
                    "lines": [
                      {
                        "line": "password_confirm = hashlib.md5(getpass.getpass(_(\"Password (confirm): \"))).hexdigest()\n",
                        "lineNumber": 119,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password_confirm = hashlib.sha256(getpass.getpass(_(\"Password (confirm): \"))).hexdigest()\n",
                        "lineNumber": 119,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/paperswithcode/torchbench/commit/f6fbd8eaaa7606c774c307f22c9f5980f4f89a0a?diff=split#diff-46d7c7c17fbbe4af058448007cc5e4963baa69c00ded297a2450a14c0dcf1896L-1",
                    "lines": [
                      {
                        "line": "m = hashlib.md5()\n",
                        "lineNumber": 132,
                        "lineChange": "removed"
                      },
                      {
                        "line": "m = hashlib.sha256()\n",
                        "lineNumber": 132,
                        "lineChange": "added"
                      },
                      {
                        "line": "m.update(str(hash_list).encode('utf-8'))\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "return m.hexdigest()\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 35,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "python/NoHardcodedPasswords",
              "name": "NoHardcodedPasswords",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "NoHardcodedPasswords",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/mspreitz/MobileSandbox/commit/da3b1805cb2e01c82d4b378aec004bfced7b1d55?diff=split#diff-09b135b0d5f0b0ad094858769db9b537a805fe47de372187ae2fc4b96f05d30dL-1",
                    "lines": [
                      {
                        "line": "conn = psycopg2.connect(dbname='ms_db', user='ms_user', password=\"2HmUKLvf\")\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "conn = psycopg2.connect(dbname=misc_config.SQL_DB, user=misc_config.SQL_USER, password=misc_config.SQL_PASSWORD)\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Mirantis/kqueen/commit/8d3fb4d8130b5abff6212f20b0034e03c4438d69?diff=split#diff-6a14ec1b3250d541ae942ee17c1a7d14dd843407c914649113212972c0a95c07L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    # DEMO LOGIN\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    app.config.update(dict(\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        USERNAME='admin',\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        PASSWORD='default',\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        SECRET_KEY='secret'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    ))\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    loaded = app.config.from_pyfile('config.py', silent=True)\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if not loaded:\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "        logging.warning('Config file kqueen.cfg could not be loaded.')\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/video-annotation-project/video-annotation-tool/commit/7e5a129f1c0d09024c218bf22108e2f2c09871a8?diff=split#diff-4ad690c280f2ca6c899cbbf7dd0cb9f619287ebb25fdd2ff5ccfdaa456b819deL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "# DO NOT PUSH PASSWORD \n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "#DB_PASSWORD = os.getenv(\"DB_PASSWORD\")\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DB_PASSWORD = '2yG5$A#LkJkvnWh*'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DB_PASSWORD = os.getenv(\"DB_PASSWORD\")\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 50,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "python/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "PT",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/malept/gmusicprocurator/commit/0df7be3ef3ca89b42331939d88ca9919944295c9?diff=split#diff-9e23a9ffa43e64422973783e9021248781e0732c50d02ec8b7b1ac680b56c173L-1",
                    "lines": [
                      {
                        "line": "from flask import abort, request, Response, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask import abort, request, Response, safe_join, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "from flask.json import jsonify\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import os\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import requests\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from shutil import copyfileobj\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "from tempfile import NamedTemporaryFile\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "from xspf import Xspf\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..app import app, music\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..id3 import MP3\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "JSON_TYPE = 'application/json'\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "XSPF_TYPE = 'application/xspf+xml'\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Mapping: Google : Mutagen EasyID3\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "METADATA_FIELDS = {\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'artist': 'artist',\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'title': 'title',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'album': 'album',\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'albumArtist': 'albumartistsort',\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'composer': 'composer',\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'trackNumber': 'tracknumber',\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'discNumber': 'discnumber',\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'genre': 'genre',\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'year': 'date',\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'durationMillis': 'length',\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "if app.config['GMP_EMBED_ALBUM_ART']:\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    METADATA_FIELDS['albumArtRef'] = 'albumart'\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def mp3ify(resp):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Sets MIME Type and Content-Disposition header suitable for MP3s.'''\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.mimetype = 'audio/mpeg'\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.headers.add('Content-Disposition', 'inline', filename='song.mp3')\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return resp\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "def send_song(filename):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Generates a Flask response for an MP3 on the filesystem.'''\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return mp3ify(send_file(filename))\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "def gmusic_playlist_to_xspf(playlist_id, playlist):\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Converts a playlist from gmusicapi into an XSPF playlist.\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :type playlist: dict\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return: XSPF (XML), UTF-8 encoded\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :rtype: str\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_ts = int(playlist['creationTimestamp']) / 1000000.0\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_iso = datetime.utcfromtimestamp(create_ts).isoformat()\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    p_url = url_for('get_playlist', _external=True, playlist_id=playlist_id)\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xspf = Xspf(title=playlist['name'], creator=playlist['ownerName'],\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                date=create_iso, location=p_url)\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for track in playlist['tracks']:\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if 'track' not in track:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tmd = track['track']\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = url_for('get_song', _external=True, song_id=tmd['storeId'])\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        metadata = {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'location': url,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': tmd['title'],\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'creator': tmd['artist'],\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'album': tmd['album'],\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'trackNum': str(tmd['trackNumber']),\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'duration': tmd['durationMillis'],\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        album_art = tmd.get('albumArtRef', [])\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if album_art:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "            metadata['image'] = album_art[0]['url']\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xspf.add_track(metadata)\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return xspf.toXml()\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/songs/<song_id>')\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_song(song_id):\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Retrieves the MP3 for a given ID.'''\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cached_fname = os.path.join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cached_fname = safe_join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # rather than \"application/x-rar\"\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # check file type via mime type\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "        file_type = magic.from_file(filepath, mime=True)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if file_type != 'application/x-rar' and file_type != 'application/x-gzip' and file_type != 'application/zip':\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            os.remove(filepath)\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 7,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "python/Ssrf",
              "name": "Ssrf",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Ssrf",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers/commit/23ad832af741f0354949a72e6c6f799eb9d2bace?diff=split#diff-7efee2ee97af01f846ed5818e84c955c51bd8efe06588e0dfa341c68966d945fL-1",
                    "lines": [
                      {
                        "line": "    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description=\"Downloads and unpacks assets\")\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    parser.add_argument(\"zip_url\", action=\"store\", type=str, help=\"URL of the assets package\")\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    args = parser.parse_args()\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    url = \"https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers/releases/download/v1.1.2/scenes.zip\"\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        request = requests.get(args.zip_url, stream=True)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        request = requests.get(url, stream=True)\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yask123/Instant-Movie-Streamer/commit/0b66df24286da3df144b8874cb40db4c6ddf5c6c?diff=split#diff-92c6c2b7103c0f894cf5a1c09b289b8251c1c260eb20cb9027189a2a0eee5d99L-1",
                    "lines": [
                      {
                        "line": "def get_magnet_link(movie_name = 'harry potter'):\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "    URL = 'https://www.skytorrents.in/search/all/ed/1/?q='+movie_name.replace(' ', '+')\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_torrent_url(search_url):\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \"\"\"Grabs the best matched torrent URL from the search results.\"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    search_request_response = requests.get(search_url, verify=False)\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    soup = BeautifulSoup(search_request_response.text, 'html.parser')\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    movie_page = 'https://kat.cr' + (soup.find_all(\"a\", class_=\"cellMainLink\")[0].get('href'))\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resp = requests.get(URL)\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "    soup = BeautifulSoup(resp.text, 'html.parser')\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hacktoolkit/django-htk/commit/01df728743a36721d7659247a3e3b9907133ffee?diff=split#diff-eec36e337287f60f4a26ec5ed80b77d0234217d0de7dab8846fe3a39048cef9fL-1",
                    "lines": [
                      {
                        "line": "GOOGLE_GEOCODING_API_BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/%(format)s?sensor=%(sensor)s&'\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_GEOCODE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'address=%(address)s'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_REVERSE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'latlng=%(latlng)s'\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from htk.utils import htk_setting\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json'\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/%(format)s?sensor=%(sensor)s&'\n",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_GEOCODE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'address=%(address)s'\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_REVERSE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'latlng=%(latlng)s'\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "class Usage(Exception):\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, msg):\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.msg = msg\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "def main(argv = None):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OPT_STR = 'hgr'\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OPT_LIST = [\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'help',\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'geocode',\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'resolve',\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ]\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    is_geocode = True\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if argv is None:\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        argv = sys.argv\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "            progname = argv[0]\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            opts, args = getopt.getopt(argv[1:],\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       OPT_STR,\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       OPT_LIST)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except getopt.error, msg:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "             raise Usage(msg)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # process options\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for o, a in opts:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if o in ('-h', '--help'):\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "                print __doc__\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "                sys.exit(0)\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif o in ('-g', '--geocode'):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "                is_geocode = True\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif o in ('-r', '--resolve'):\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                is_geocode = False\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if is_geocode and len(args) == 1:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            address = args[0]\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "            latitude, longitude = get_latlng(address)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "            print '%s,%s' % (latitude, longitude,)\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        elif not is_geocode and len(args) == 2:\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "            latitude = args[0]\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "            longitude = args[1]\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            address = reverse_geocode(latitude, longitude)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            print address\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            raise Usage('Incorrect arguments')\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except Usage, err:\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print >> sys.stderr, err.msg\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print >> sys.stderr, \"for help use --help\"\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return 3.14159\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_latlng(address):\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    address_query = urllib.quote(address, '')\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    values = {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'format' : 'json',\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "'sensor' : 'false',\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "'address' : address_query,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    url = GOOGLE_GEOCODING_API_GEOCODE_URL % values\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    response = requests.get(url)\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    key = htk_setting('HTK_GOOGLE_GEOCODING_API_KEY', None)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if key:\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "        params['key'] = key\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "    response = requests.get(GOOGLE_GEOCODING_API_URL, params=params)\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 4,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "python/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/yevhenradchenko/bamboohr-parser/commit/2d5ebed54b630c461ecde9db1ca8a880e1080d4f?diff=split#diff-51d19aaaff78dcc4e5e0629e5998f79377b1f71ee550e8525987b5a585e8c379L-1",
                    "lines": [
                      {
                        "line": "import config\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "import requests\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import json\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "Base = declarative_base()\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "class EmployeeData(Base):\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    __tablename__ = 'employee_data'\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    id = Column(Integer, primary_key=True)\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    name = Column(String(120))\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    department = Column(String(120))\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    jobTitle = Column(String(120))\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    email = Column(String(120))\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mobilePhone = Column(String(120))\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, name, department, jobTitle, email, id, mobilePhone):\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.name = name\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.department = department\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.jobTitle = jobTitle\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.email = email\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.id = id\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.mobilePhone = mobilePhone\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "engine = create_engine('sqlite:///employee_db.db')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "connection = engine.connect()\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "Base.metadata.create_all(engine)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "api_key = 'YOURS_BAMBOOHR_APIKEY'\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "url = 'https://' + api_key + ':x@api.bamboohr.com/api/gateway.php/DOMAIN_NAME/v1/employees/directory'\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "url = 'https://' + config.API_KEY + ':x@api.bamboohr.com/api/gateway.php/' + config.DOMAIN +'/v1/employees/directory'\n",
                        "lineNumber": 39,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/abersheeran/websocks/commit/76cd2cf07b5b1c63994c4627474e4efa4d8e8de8?diff=split#diff-2eaea93a04442331f03fc1e80b20e85bffe9f8479a3c196b7da91c4f33ccef93L-1",
                    "lines": [
                      {
                        "line": "username = \"abersheeran\"\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password = \"websocks\"\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "username = os.environ['WEBSOCKS_USER']\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "password = os.environ['WEBSOCKS_PASS']\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blacknbunny/CVE-2018-10933/commit/f6c74445263d37af575ab3aee65e163f3c95e6b8?diff=split#diff-35181191f6c2da1b4aece960ff86f898381798d12642710da4ce8793deb4aa59L-1",
                    "lines": [
                      {
                        "line": "import sys, paramiko, logging\n",
                        "lineNumber": 0,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "new_auth_accept = paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_USERAUTH_SUCCESS]\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "def auth_accept(*args, **kwargs): return new_auth_accept(*args, **kwargs)\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": " \n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "paramiko.auth_handler.AuthHandler._handler_table.update({paramiko.common.MSG_USERAUTH_REQUEST: auth_accept,})\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "client = paramiko.SSHClient()\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "client.set_missing_host_key_policy(paramiko.WarningPolicy())\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "client.connect(\"127.0.0.1\", port=2222, username=\"root\", password=\"\", pkey=None, key_filename=\"fake.key\")\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "client.connect(sys.argv[1], port=int(sys.argv[2]), username=sys.argv[3], password=\"\", pkey=None, key_filename=sys.argv[4])\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "command = sys.argv[5]\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 42,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "python/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "HardcodedNonCryptoSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ortoloco/ortoloco/commit/2bdc2a18ae07478b6b2ad481e6ad8ee43d99dd11?diff=split#diff-2c4d0fc3f973ca45b5be1e050f542f3fdf9f879073895c1ff6c8a127f9311b67L-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "    General Settings\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "DEBUG = os.environ.get(\"JUNTAGRICO_DEBUG\", \"True\") == \"True\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "ALLOWED_HOSTS = ['my.ortoloco.ch']\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "DATA_UPLOAD_MAX_NUMBER_FIELDS = None\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "FILE_UPLOAD_PERMISSIONS = 0o444\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "ROOT_URLCONF = 'ortoloco.urls'\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "SITE_ID = 1\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "LOGIN_REDIRECT_URL = \"/my/home\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Python dotted path to the WSGI application used by Django's runserver.\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "WSGI_APPLICATION = 'ortoloco.wsgi.application'\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Make this unique, and don't share it with anybody.\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = 'd3w=vyfqpqmcj#&ge1d0$ch#ff7$qt#6z)lzqt=9pg8wg%d^%s'\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = os.environ.get('JUNTAGRICO_SECRET_KEY')\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/kirstykitto/CLAtoolkit/commit/57b0252012fd2bee6671734f8a598c47106dcb3c?diff=split#diff-fb10e8b863c0b9b7a10271f5cda36dbf1e7e3fe75586870b7547050c7e2e77fdL-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "from apiclient.discovery import build\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "CLIENT_ID = '775313004373-6nt8n91ih4g5qku95us9ceskbdlb6ure.apps.googleusercontent.com'\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "CLIENT_SECRET = 'MJHbk5HdDWmqyptU_ZZtBQNP'\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "SCOPE_YOUTUBE = 'https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtubepartner'\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "REDIRECT_URI = 'http://127.0.0.1:8000/dataintegration/ytAuthCallback'\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_YT_VIDEO_BASE_URL = \"https://www.youtube.com/watch?v=\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_YT_CHANNEL_BASE_URL = \"https://www.youtube.com/channel/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_PLATFORM_NAME_YOUTUBE = \"YouTube\"\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_PLATFORM_URL_YOUTUBE = \"https://www.youtube.com\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_OBJ_TYPE_VIDEO = 'Video'\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "# For YouTube OAuth authentication\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "FLOW_YOUTUBE = OAuth2WebServerFlow(\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    client_id=CLIENT_ID,\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    client_secret=CLIENT_SECRET,\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    client_id=os.environ.get(\"YOUTUBE_CLIENT_ID\"),\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "    client_secret=os.environ.get(\"YOUTUBE_CLIENT_SECRET\"),\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hartwork/jawanndenn/commit/18eebc346ded81b839b1b2d38caf19927255afca?diff=split#diff-dd637aba286a0661c1b974283e708ce762bb3d24a707054e5b81495c1b7ab2b6L-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "from jawanndenn import DEFAULT_MAX_POLLS, DEFAULT_MAX_VOTES_PER_POLL\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Quick-start development settings - unsuitable for production\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "# SECURITY WARNING: keep the secret key used in production secret!\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "SECRET_KEY = 'ou@c@e2(9oh4*z9+tu0!)zf)j=_($#vmu36iflgy@g19+bkp-m'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = os.environ['JAWANNDENN_SECRET_KEY']\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 109,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "python/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "NoHardcodedCredentials",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/yevhenradchenko/bamboohr-parser/commit/2d5ebed54b630c461ecde9db1ca8a880e1080d4f?diff=split#diff-51d19aaaff78dcc4e5e0629e5998f79377b1f71ee550e8525987b5a585e8c379L-1",
                    "lines": [
                      {
                        "line": "import config\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "import requests\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import json\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "Base = declarative_base()\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "class EmployeeData(Base):\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    __tablename__ = 'employee_data'\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    id = Column(Integer, primary_key=True)\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    name = Column(String(120))\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    department = Column(String(120))\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    jobTitle = Column(String(120))\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    email = Column(String(120))\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mobilePhone = Column(String(120))\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, name, department, jobTitle, email, id, mobilePhone):\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.name = name\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.department = department\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.jobTitle = jobTitle\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.email = email\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.id = id\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.mobilePhone = mobilePhone\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "engine = create_engine('sqlite:///employee_db.db')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "connection = engine.connect()\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "Base.metadata.create_all(engine)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "api_key = 'YOURS_BAMBOOHR_APIKEY'\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "url = 'https://' + api_key + ':x@api.bamboohr.com/api/gateway.php/DOMAIN_NAME/v1/employees/directory'\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "url = 'https://' + config.API_KEY + ':x@api.bamboohr.com/api/gateway.php/' + config.DOMAIN +'/v1/employees/directory'\n",
                        "lineNumber": 39,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/abersheeran/websocks/commit/76cd2cf07b5b1c63994c4627474e4efa4d8e8de8?diff=split#diff-2eaea93a04442331f03fc1e80b20e85bffe9f8479a3c196b7da91c4f33ccef93L-1",
                    "lines": [
                      {
                        "line": "username = \"abersheeran\"\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password = \"websocks\"\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "username = os.environ['WEBSOCKS_USER']\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "password = os.environ['WEBSOCKS_PASS']\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blacknbunny/CVE-2018-10933/commit/f6c74445263d37af575ab3aee65e163f3c95e6b8?diff=split#diff-35181191f6c2da1b4aece960ff86f898381798d12642710da4ce8793deb4aa59L-1",
                    "lines": [
                      {
                        "line": "import sys, paramiko, logging\n",
                        "lineNumber": 0,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "new_auth_accept = paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_USERAUTH_SUCCESS]\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "def auth_accept(*args, **kwargs): return new_auth_accept(*args, **kwargs)\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": " \n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "paramiko.auth_handler.AuthHandler._handler_table.update({paramiko.common.MSG_USERAUTH_REQUEST: auth_accept,})\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "client = paramiko.SSHClient()\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "client.set_missing_host_key_policy(paramiko.WarningPolicy())\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "client.connect(\"127.0.0.1\", port=2222, username=\"root\", password=\"\", pkey=None, key_filename=\"fake.key\")\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "client.connect(sys.argv[1], port=int(sys.argv[2]), username=sys.argv[3], password=\"\", pkey=None, key_filename=sys.argv[4])\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "command = sys.argv[5]\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 42,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "python/Jinja2AutoEscapeFalse",
              "name": "Jinja2AutoEscapeFalse",
              "shortDescription": {
                "text": "Jinja auto-escape is set to false."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nJinja2 is a python templating library that can be configured to escape values and avoid XSS vulnerabilities. However, the library by default sets the autoescaping to false.\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Jinja2AutoEscapeFalse",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/checktheroads/hyperglass/commit/d67dec47a909c7cf3708e82290a306ebf999fe89?diff=split#diff-0bd1912758bddf940a185954e437176ec2bf96420e66e67a76242d2ace77837dL-1",
                    "lines": [
                      {
                        "line": "jinja2.Environment(loader=jinja2.BaseLoader)\n",
                        "lineNumber": 138,
                        "lineChange": "removed"
                      },
                      {
                        "line": "jinja2.Environment(\n",
                        "lineNumber": 140,
                        "lineChange": "added"
                      },
                      {
                        "line": "    loader=jinja2.BaseLoader,\n",
                        "lineNumber": 141,
                        "lineChange": "added"
                      },
                      {
                        "line": "    autoescape=True,\n",
                        "lineNumber": 142,
                        "lineChange": "added"
                      },
                      {
                        "line": "    extensions=[\"jinja2.ext.autoescape\"],\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 144,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/GoogleCloudPlatform/titan/commit/0bf5c35ddc04b1020a14ed910af41e9ae37b1c1b?diff=split#diff-a15bcaffa09467d5024e540fee708e1b024eecad4ae85121885de69ef88c666dL-1",
                    "lines": [
                      {
                        "line": "jinja_environment = jinja2.Environment(\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)))\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)), autoescape=True)\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nexB/aboutcode-toolkit/commit/537f3516b6bee96c0c5efebac7f576102b4047c8?diff=split#diff-a9f80dbb2d6d8fe6525586938ee43531107d524ffede93ea1236cf3f44c908aaL-1",
                    "lines": [
                      {
                        "line": "template = jinja2.Template(template_text)\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "template = jinja2.Template(template_text, autoescape=True)\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 44,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "python/InsecureXmlParser",
              "name": "InsecureXmlParser",
              "shortDescription": {
                "text": "Insecure Xml Parser"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nFor convenience, XML documents can use system identifiers to enable access to stored content, whether local or remote. The XML processor then uses the system identifier to access the resource rather than using the URI. When this weakness exists, the application permits user-supplied data, which could include the address of an XML external identity, to be passed directly to the XML parser. The application will then attempt to retrieve documents from outside of secure, controlled areas.\n\nAttackers can exploit this weakness to expose sensitive data, execute port scanning on the server side, or launch a denial-of-service attack (DoS) such as Billion Laughs.\n\n## Best practices for prevention\n* Avoid using vulnerable APIs\n* When possible, disable loading of data from external entities. The method of doing this will vary based on the language and XML parser being used.\n* Use a local, static document type definitions (DTDs) and ensure that external DTDs are disallowed entirely.\n* If user input cannot be avoided, perform validation against an allowlist of possible data sources. However, as long as external DTDs are allowed, XML code remains inherently vulnerable to attacks exploiting this weakness.\n\n\n## References\n* [XML vulnerabilities](https://docs.python.org/3/library/xml.html#xml-vulnerabilities)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureXmlParser",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/archerysec/archerysec/commit/73c2ef30d96ad8abcca11886ba96b9c9bc6a7289?diff=split#diff-fa2a8a9395a6042f369c987ec4ff5fe39f6a8b8ce5a551402de875938e03afb1L-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import defusedxml.ElementTree as ET\n",
                        "lineNumber": 30,
                        "lineChange": "added"
                      },
                      {
                        "line": "from scanners.scanner_parser.web_scanner import zap_xml_parser, \\\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    arachni_xml_parser, netsparker_xml_parser, webinspect_xml_parser\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "from rest_framework.response import Response\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "from rest_framework.views import APIView\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "from rest_framework.parsers import MultiPartParser, FormParser\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "class WebScan(generics.ListCreateAPIView):\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = zap_scans_db.objects.all()\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = WebScanSerializer\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self, request, format=None, **kwargs):\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "            GET List all scans and check status.\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        all_scans = zap_scans_db.objects.all()\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serialized_scans = WebScanSerializer(all_scans, many=True)\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serialized_scans.data)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Launch scans using this api\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = WebScanSerializer(data=request.data)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_id = uuid.uuid4()\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scanner = request.data.get('scanner')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "            target_url = request.data.get('scan_url', )\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_id = request.data.get('project_id', )\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "            rescanid = None\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            rescan = 'No'\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if scanner == 'zap_scan':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # run_s = launch_zap_scan\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "                thread = threading.Thread(target=launch_zap_scan, args=(target_url, project_id, rescanid, rescan))\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "                thread.daemon = True\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "                thread.start()\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif scanner == 'burp_scan':\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "                date_time = datetime.datetime.now()\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "                scan_dump = burp_scan_db(scan_id=scan_id,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         project_id=project_id,\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         url=target_url,\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         date_time=date_time)\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "                scan_dump.save()\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # do_scan = burp_plugin.burp_scans(project_id, target_url, scan_id)\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # # o = ()\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # thread = threading.Thread(target=do_scan.scan_launch(), args=(project_id, target_url, scan_id))\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # thread.daemon = True\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # thread.start()\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try:\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    do_scan = burp_plugin.burp_scans(\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        project_id,\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        target_url,\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        scan_id)\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # do_scan.scan_lauch(project_id,\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    #                    target,\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    #                    scan_id)\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    thread = threading.Thread(\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        target=do_scan.scan_launch,\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    )\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    thread.daemon = True\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    thread.start()\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # time.sleep(5)\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "                except Exception as e:\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    print e\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not target_url:\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Response({\"error\": \"No name passed\"})\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response({\"message\": \"Scan Launched\", \"scanid\": scan_id})\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "class NetworkScan(generics.ListCreateAPIView):\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Network Scan API call to perform scan.\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = scan_save_db.objects.all()\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = NetworkScanSerializer\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self, request, format=None, **kwargs):\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Returns a list of all **Network Scans** in the system.\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        all_scans = scan_save_db.objects.all()\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serialized_scans = NetworkScanSerializer(all_scans, many=True)\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serialized_scans.data)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "           Current user's identity endpoint.\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = NetworkScanSerializer(data=request.data)\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            target_ip = request.data.get('scan_ip', )\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_id = request.data.get('project_id', )\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "            profile = None\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # views.openvas_scanner(target_ip, project_id, profile)\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            thread = threading.Thread(\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "                target=views.openvas_scanner,\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "                args=(target_ip, project_id, profile)\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            )\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "            thread.daemon = True\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "            thread.start()\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # time.sleep(5)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not target_ip:\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Response({\"error\": \"No name passed\"})\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response({\"message\": \"Scan Started\"})\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "class Project(generics.CreateAPIView):\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = project_db.objects.all()\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = ProjectDataSerializers\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self, request, format=None, **kwargs):\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Returns a list of all **Network Scans** in the system.\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "        all_scans = project_db.objects.all()\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serialized_scans = ProjectDataSerializers(all_scans, many=True)\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serialized_scans.data)\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "           Current user's identity endpoint.\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = ProjectDataSerializers(data=request.data)\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_id = uuid.uuid4()\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_name = request.data.get(\"project_name\", )\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_start = request.data.get(\"project_start\", )\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_end = request.data.get(\"project_end\", )\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_owner = request.data.get(\"project_owner\", )\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_disc = request.data.get(\"project_disc\", )\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            save_project = project_db(project_name=project_name, project_id=project_id,\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                      project_start=project_start, project_end=project_end,\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                      project_owner=project_owner, project_disc=project_disc, )\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "            save_project.save()\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not project_name:\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Response({\"error\": \"No name passed\"})\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response({\"message\": \"Project Created\"})\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "class WebScanResult(generics.ListCreateAPIView):\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = zap_scan_results_db.objects.all()\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = WebScanResultSerializer\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Post request to get all vulnerability Data.\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = WebScanResultSerializer(data=request.data)\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_id = request.data.get('scan_id', )\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # project_id = request.data.get('project_id',)\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zap_scan = zap_scan_results_db.objects.filter(scan_id=scan_id)\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "            burp_scan = burp_scan_result_db.objects.filter(scan_id=scan_id)\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "            all_scans = chain(zap_scan, burp_scan)\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "            serialized_scans = WebScanResultSerializer(all_scans, many=True)\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response(serialized_scans.data)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "class NetworkScanResult(generics.ListCreateAPIView):\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = ov_scan_result_db.objects.all()\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = NetworkScanResultSerializer\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Post request to get all vulnerability Data.\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = NetworkScanResultSerializer(data=request.data)\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_id = request.data.get('scan_id', )\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "            all_scans = ov_scan_result_db.objects.filter(scan_id=scan_id)\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "            serialized_scans = NetworkScanResultSerializer(all_scans, many=True)\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response(serialized_scans.data)\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "class UpladScanResult(APIView):\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parser_classes = (MultiPartParser,)\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None):\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "        project_id = request.data.get(\"project_id\")\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scanner = request.data.get(\"scanner\")\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xml_file = request.data.get(\"filename\")\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scan_url = request.data.get(\"scan_url\")\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scan_id = uuid.uuid4()\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scan_status = \"100\"\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print xml_file\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if scanner == \"zap_scan\":\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "            date_time = datetime.datetime.now()\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_dump = zap_scans_db(scan_url=scan_url,\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     scan_scanid=scan_id,\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     date_time=date_time,\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     project_id=project_id,\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     vul_status=scan_status,\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     rescan='No')\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_dump.save()\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "            tree = ET.parse(xml_file)\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/arvvoid/plugin.video.hbogoeu/commit/b3025809c78d3fe0f7d5cca06047acce6a6f91c1?diff=split#diff-04e77ef21fb1644dd424e853cfeb8a66d3c7fd5982f201c7c7985fd87e84858cL-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import defusedxml.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome import Random\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Cipher import AES\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Util import Padding\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "except ImportError:\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # no Cryptodome gracefully fail with an informative message\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    msg = xbmcaddon.Addon().getLocalizedString(30694)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmc.log(\"[\" + str(xbmcaddon.Addon().getAddonInfo('id')) + \"] MISSING Cryptodome dependency...exiting...\" + traceback.format_exc(), xbmc.LOGDEBUG)\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmcgui.Dialog().ok(xbmcaddon.Addon().getAddonInfo('name') + \" ERROR\", msg)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sys.exit()\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "class HbogoHandler(object):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    UA = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_SW_VERSION = '4.7.4'\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_REQUIRED_PLATFORM = 'CHBR'  # emulate chrome\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ACCEPT_LANGUAGE = 'en-us,en;q=0.8'\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, handle, base_url):\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon = xbmcaddon.Addon()\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon_id = self.addon.getAddonInfo('id')\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.language = self.addon.getLocalizedString\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_url = base_url\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.handle = handle\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.DEBUG_ID_STRING = \"[\" + str(self.addon_id) + \"] \"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.SESSION_VALIDITY = 0.5  # stored session valid for half hour\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_addon_cat=\"\"\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = \"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.search_string = urllib.unquote_plus(self.addon.getSetting('lastsearch'))\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginFanart(self.handle, image=self.get_resource(\"fanart.jpg\"))\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # LABELS\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_DESC = self.language(30700).encode('utf-8')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_NORES = self.language(30701).encode('utf-8')\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_ERROR = self.language(30702).encode('utf-8')\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_INFO = self.language(30713).encode('utf-8')\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SUCESS = self.language(30727).encode('utf-8')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE_UNTILL = self.language(30703).encode('utf-8')\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_FILM_UNTILL = self.language(30704).encode('utf-8')\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE = self.language(30705).encode('utf-8')\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEASON = self.language(30706).encode('utf-8')\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_MYPLAYLIST = self.language(30707).encode('utf-8')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NOLOGIN = self.language(30708).encode('utf-8')\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_LOGIN_ERROR = self.language(30709).encode('utf-8')\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NO_OPERATOR = self.language(30710).encode('utf-8')\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH = self.language(30711).encode('utf-8')\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.use_content_type = \"episodes\"\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_original_names = self.addon.getSetting('origtitles')\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_original_names == \"true\":\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = True\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = False\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_scraper_names = self.addon.getSetting('forcescrap')\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_scraper_names == \"true\":\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = True\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = False\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.sensitive_debug = self.addon.getSetting('sensitivedebug')\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug == \"true\":\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = True\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = False\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.lograwdata = self.addon.getSetting('lograwdata')\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.lograwdata == \"true\":\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = True\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug:\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ret = xbmcgui.Dialog().yesno(self.LB_INFO, self.language(30712).encode('utf-8'), self.language(30714).encode('utf-8'), self.language(30715).encode('utf-8'))\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not ret:\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "                sys.exit()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.loggedin_headers = None  #DEFINE IN SPECIFIC HANDLER\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.API_PLATFORM = 'COMP'\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_resource(file):\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/'+file).decode('utf-8')\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_media_resource(file):\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/media/'+file).decode('utf-8')\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def log(self, msg, level=xbmc.LOGDEBUG):\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmc.log(self.DEBUG_ID_STRING + msg, level)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def setDispCat(self, cur_loc):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginCategory(self.handle, cur_loc)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = cur_loc\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def send_login_hbogo(self, url, headers, data, response_format='json'):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN URL: \" + url)\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN RESPONSE FORMAT: \" + response_format)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            r = requests.post(url, headers=headers, data=data)\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"SEND LOGIN RETURNED STATUS: \" + str(r.status_code))\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.sensitive_debug:\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self.log(\"SEND LOGIN RETURNED RAW: \" + r.text.encode('utf-8'))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if response_format == 'json':\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return r.json()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif response_format == 'xml':\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return ET.fromstring(r.text.encode('utf-8'))\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/arvvoid/plugin.video.hbogoeu/commit/b3025809c78d3fe0f7d5cca06047acce6a6f91c1?diff=split#diff-04e77ef21fb1644dd424e853cfeb8a66d3c7fd5982f201c7c7985fd87e84858cL-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import defusedxml.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome import Random\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Cipher import AES\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Util import Padding\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "except ImportError:\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # no Cryptodome gracefully fail with an informative message\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    msg = xbmcaddon.Addon().getLocalizedString(30694)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmc.log(\"[\" + str(xbmcaddon.Addon().getAddonInfo('id')) + \"] MISSING Cryptodome dependency...exiting...\" + traceback.format_exc(), xbmc.LOGDEBUG)\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmcgui.Dialog().ok(xbmcaddon.Addon().getAddonInfo('name') + \" ERROR\", msg)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sys.exit()\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "class HbogoHandler(object):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    UA = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_SW_VERSION = '4.7.4'\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_REQUIRED_PLATFORM = 'CHBR'  # emulate chrome\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ACCEPT_LANGUAGE = 'en-us,en;q=0.8'\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, handle, base_url):\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon = xbmcaddon.Addon()\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon_id = self.addon.getAddonInfo('id')\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.language = self.addon.getLocalizedString\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_url = base_url\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.handle = handle\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.DEBUG_ID_STRING = \"[\" + str(self.addon_id) + \"] \"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.SESSION_VALIDITY = 0.5  # stored session valid for half hour\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_addon_cat=\"\"\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = \"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.search_string = urllib.unquote_plus(self.addon.getSetting('lastsearch'))\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginFanart(self.handle, image=self.get_resource(\"fanart.jpg\"))\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # LABELS\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_DESC = self.language(30700).encode('utf-8')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_NORES = self.language(30701).encode('utf-8')\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_ERROR = self.language(30702).encode('utf-8')\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_INFO = self.language(30713).encode('utf-8')\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SUCESS = self.language(30727).encode('utf-8')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE_UNTILL = self.language(30703).encode('utf-8')\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_FILM_UNTILL = self.language(30704).encode('utf-8')\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE = self.language(30705).encode('utf-8')\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEASON = self.language(30706).encode('utf-8')\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_MYPLAYLIST = self.language(30707).encode('utf-8')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NOLOGIN = self.language(30708).encode('utf-8')\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_LOGIN_ERROR = self.language(30709).encode('utf-8')\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NO_OPERATOR = self.language(30710).encode('utf-8')\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH = self.language(30711).encode('utf-8')\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.use_content_type = \"episodes\"\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_original_names = self.addon.getSetting('origtitles')\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_original_names == \"true\":\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = True\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = False\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_scraper_names = self.addon.getSetting('forcescrap')\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_scraper_names == \"true\":\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = True\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = False\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.sensitive_debug = self.addon.getSetting('sensitivedebug')\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug == \"true\":\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = True\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = False\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.lograwdata = self.addon.getSetting('lograwdata')\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.lograwdata == \"true\":\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = True\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug:\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ret = xbmcgui.Dialog().yesno(self.LB_INFO, self.language(30712).encode('utf-8'), self.language(30714).encode('utf-8'), self.language(30715).encode('utf-8'))\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not ret:\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "                sys.exit()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.loggedin_headers = None  #DEFINE IN SPECIFIC HANDLER\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.API_PLATFORM = 'COMP'\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_resource(file):\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/'+file).decode('utf-8')\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_media_resource(file):\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/media/'+file).decode('utf-8')\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def log(self, msg, level=xbmc.LOGDEBUG):\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmc.log(self.DEBUG_ID_STRING + msg, level)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def setDispCat(self, cur_loc):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginCategory(self.handle, cur_loc)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = cur_loc\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def send_login_hbogo(self, url, headers, data, response_format='json'):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN URL: \" + url)\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN RESPONSE FORMAT: \" + response_format)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            r = requests.post(url, headers=headers, data=data)\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"SEND LOGIN RETURNED STATUS: \" + str(r.status_code))\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.sensitive_debug:\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self.log(\"SEND LOGIN RETURNED RAW: \" + r.text.encode('utf-8'))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if response_format == 'json':\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return r.json()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif response_format == 'xml':\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return ET.fromstring(r.text.encode('utf-8'))\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except requests.RequestException as e:\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"SEND LOGIN ERROR: \" + repr(e))\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "            resp = {\"Data\": {\"ErrorMessage\": \"SEND LOGIN ERROR\"}, \"ErrorMessage\": \"SEND LOGIN ERROR\"}\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return resp\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_from_hbogo(self, url, response_format='json'):\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"GET FROM HBO URL: \" + url)\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"GET FROM HBO RESPONSE FORMAT: \" + response_format)\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            r = requests.get(url, headers=self.loggedin_headers)\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"GET FROM HBO STATUS: \" + str(r.status_code))\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if response_format == 'json':\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return r.json()\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif response_format == 'xml':\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return ET.fromstring(r.text.encode('utf-8'))\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 23,
                "cwe": [
                  "CWE-611"
                ]
              }
            },
            {
              "id": "javascript/HardcodedNonCryptoSecret",
              "name": "HardcodedNonCryptoSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "HardcodedNonCryptoSecret",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/DanielMil/Authentication-Server/commit/310ce5500e9e751ee2fd9f3018bf772e9aae8364?diff=split#diff-dcdc3e0b3362edb8fec2a51d3fa51f8fb8af8f70247e06d9887fa934834c9122L-1",
                    "lines": [
                      {
                        "line": "// Set environment variables\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "const sessionSecret: any = process.env.SESSION_SECRET;\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "const dbConnection: any = process.env.MONGO_URI; \n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Mongo config\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "const DB_CONNECTION: any = process.env.MONGO_URI; \n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "mongoose.connect(DB_CONNECTION, { useNewUrlParser: true })\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": " .then(() => console.log(\"Succesfully connected to MongoDB.\"))\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": " .catch((err: mongoose.Error) => console.error(err));\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "const MongoStore = mongoStore(session); \n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "const db: any  = mongoose.connection;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": " \n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Fix mongo deprecation warnings\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "mongoose.set('useNewUrlParser', true);\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "mongoose.set('useFindAndModify', false);\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "mongoose.set('useCreateIndex', true);\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Configure express session\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(cookieParser());\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(session({\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "    secret: \"secret\",\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    secret: sessionSecret,\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/virena-app/virena/commit/8058527e8ef71bfa81f0cb0fb35eb80d00e08fdb?diff=split#diff-186488e26aa960d29fec244ac086f15e024c5a84df47eeba233d9b8d2525de2dL-1",
                    "lines": [
                      {
                        "line": "client_id: '8fcf3e5c2d3d5dd78188',\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "client_secret: '0e102c56021e1aa28005b469b3c83ef7cb7e5b0e'\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "client_id: process.env.GITINIT,\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "client_secret: process.env.GITSEE\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nemtech/nem2-library-js/commit/dd101718759035849eeb9d4a388656acdb5bf6d9?diff=split#diff-59ccc41578f07869060f7aea9ceca193a407696cce3de9f7219f98187f65c5b7L-1",
                    "lines": [
                      {
                        "line": "const hash = sha3_512.create();\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hash.update('secret');\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const hash = new Ripemd160().update(Buffer.from('Test Hash 160')).digest('Hex');\t\t\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "const secretLockTransaction = {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdeadline: deadline(),\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tmosaicId: [3646934825, 3576016193],\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tmosaicAmount: uint64.fromUint(10000000),\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tduration: uint64.fromUint(100),\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thashAlgorithm: 0,\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tsecret: '225fe6d12b73a7d51f2992ce82951dbf8c173fa4',\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thashAlgorithm: HashAlgorithm.RIPEMD_160,\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tsecret: hash,\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 68,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "python/Ssrf/test",
              "name": "Ssrf/test",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Ssrf",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers/commit/23ad832af741f0354949a72e6c6f799eb9d2bace?diff=split#diff-7efee2ee97af01f846ed5818e84c955c51bd8efe06588e0dfa341c68966d945fL-1",
                    "lines": [
                      {
                        "line": "    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description=\"Downloads and unpacks assets\")\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    parser.add_argument(\"zip_url\", action=\"store\", type=str, help=\"URL of the assets package\")\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    args = parser.parse_args()\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    url = \"https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers/releases/download/v1.1.2/scenes.zip\"\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        request = requests.get(args.zip_url, stream=True)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        request = requests.get(url, stream=True)\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yask123/Instant-Movie-Streamer/commit/0b66df24286da3df144b8874cb40db4c6ddf5c6c?diff=split#diff-92c6c2b7103c0f894cf5a1c09b289b8251c1c260eb20cb9027189a2a0eee5d99L-1",
                    "lines": [
                      {
                        "line": "def get_magnet_link(movie_name = 'harry potter'):\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "    URL = 'https://www.skytorrents.in/search/all/ed/1/?q='+movie_name.replace(' ', '+')\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_torrent_url(search_url):\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \"\"\"Grabs the best matched torrent URL from the search results.\"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    search_request_response = requests.get(search_url, verify=False)\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    soup = BeautifulSoup(search_request_response.text, 'html.parser')\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    movie_page = 'https://kat.cr' + (soup.find_all(\"a\", class_=\"cellMainLink\")[0].get('href'))\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resp = requests.get(URL)\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "    soup = BeautifulSoup(resp.text, 'html.parser')\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hacktoolkit/django-htk/commit/01df728743a36721d7659247a3e3b9907133ffee?diff=split#diff-eec36e337287f60f4a26ec5ed80b77d0234217d0de7dab8846fe3a39048cef9fL-1",
                    "lines": [
                      {
                        "line": "GOOGLE_GEOCODING_API_BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/%(format)s?sensor=%(sensor)s&'\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_GEOCODE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'address=%(address)s'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_REVERSE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'latlng=%(latlng)s'\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from htk.utils import htk_setting\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json'\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/%(format)s?sensor=%(sensor)s&'\n",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_GEOCODE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'address=%(address)s'\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_REVERSE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'latlng=%(latlng)s'\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "class Usage(Exception):\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, msg):\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.msg = msg\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "def main(argv = None):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OPT_STR = 'hgr'\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OPT_LIST = [\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'help',\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'geocode',\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'resolve',\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ]\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    is_geocode = True\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if argv is None:\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        argv = sys.argv\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "            progname = argv[0]\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            opts, args = getopt.getopt(argv[1:],\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       OPT_STR,\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       OPT_LIST)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except getopt.error, msg:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "             raise Usage(msg)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # process options\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for o, a in opts:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if o in ('-h', '--help'):\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "                print __doc__\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "                sys.exit(0)\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif o in ('-g', '--geocode'):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "                is_geocode = True\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif o in ('-r', '--resolve'):\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                is_geocode = False\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if is_geocode and len(args) == 1:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            address = args[0]\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "            latitude, longitude = get_latlng(address)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "            print '%s,%s' % (latitude, longitude,)\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        elif not is_geocode and len(args) == 2:\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "            latitude = args[0]\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "            longitude = args[1]\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            address = reverse_geocode(latitude, longitude)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            print address\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            raise Usage('Incorrect arguments')\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except Usage, err:\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print >> sys.stderr, err.msg\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print >> sys.stderr, \"for help use --help\"\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return 3.14159\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_latlng(address):\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    address_query = urllib.quote(address, '')\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    values = {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'format' : 'json',\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "'sensor' : 'false',\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "'address' : address_query,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    url = GOOGLE_GEOCODING_API_GEOCODE_URL % values\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    response = requests.get(url)\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    key = htk_setting('HTK_GOOGLE_GEOCODING_API_KEY', None)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if key:\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "        params['key'] = key\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "    response = requests.get(GOOGLE_GEOCODING_API_URL, params=params)\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 4,
                "cwe": [
                  "CWE-918"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/Sqli/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an environment variable flows into query, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17)",
              "[query](18)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 9,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b8988fdce814940bca75695e4e17179b67bd179f39b14a3eabb080178998d7fd",
            "1": "0ddb072c.8c76941a.2683ade8.139c59a8.671c2eb5.ba14daf2.a2237efa.f46ed94e.3aaab275.277c621c.0ad7d336.8557cfb5.25ac000c.7c5ce74f.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 7,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 7,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 1,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 13,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 17,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 66,
                            "startColumn": 5,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 25,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 19,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 37,
                            "startColumn": 5,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 18,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 9,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 35,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 35,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 21,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_neo4jvector.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/langchain/langchain/embeddings/cache.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "startColumn": 18,
                  "endColumn": 70
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e45874f84e4e09358e997ddcffa2f5872a76abbc6d32644e7cf41610203264cd",
            "1": "3371853d.9041e278.79e62dc9.139c59a8.bab9de6f.ba14daf2.081ac3f4.ebed174f.97da360b.59b34bce.c2b6f7fb.139c59a8.e26e24d8.ba14daf2.4836399a.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/langchain/langchain/embeddings/cache.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 18,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/vectorstores/starrocks.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261,
                  "startColumn": 23,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "802c369d5be2755c9184799fb3c9d7aee125fcbeb94117569cc73473ceb494b8",
            "1": "9d86e1a1.2dd6d7a6.79e62dc9.cc98b6f9.075a0498.ba14daf2.33882eee.06384376.9d86e1a1.2dd6d7a6.79e62dc9.cc98b6f9.075a0498.ba14daf2.33882eee.06384376"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/vectorstores/starrocks.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 261,
                            "endLine": 261,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/callbacks/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 93,
                  "startColumn": 12,
                  "endColumn": 53
                }
              }
            }
          ],
          "fingerprints": {
            "0": "42c2f637228cbcd20316bd62954e2e94e1a01c4ad506a614e4b3bec7d4a6835e",
            "1": "4161ca83.2dd6d7a6.2683ade8.139c59a8.14c41a85.ba14daf2.0a7337bb.ebed174f.4161ca83.59b34bce.c2b6f7fb.139c59a8.e26e24d8.ba14daf2.4836399a.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/callbacks/utils.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 12,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/vectorstores/clickhouse.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 258,
                  "startColumn": 23,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57013a9ba28c2796b130535cab2d45492d200da3723b401a08a0491b7a1f2958",
            "1": "9d86e1a1.2dd6d7a6.79e62dc9.cc98b6f9.075a0498.ba14daf2.33882eee.06384376.9d86e1a1.2dd6d7a6.79e62dc9.cc98b6f9.075a0498.ba14daf2.33882eee.06384376"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/vectorstores/clickhouse.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/vectorstores/alibabacloud_opensearch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183,
                  "startColumn": 20,
                  "endColumn": 53
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5661c295e650872d2bba1b175bf34fa6629819f69d45cf1b275f9306f3b7493e",
            "1": "9d86e1a1.4f9c419d.be92983e.139c59a8.075a0498.ba14daf2.33882eee.ebed174f.9d86e1a1.4f9c419d.be92983e.139c59a8.075a0498.ba14daf2.33882eee.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/vectorstores/alibabacloud_opensearch.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 183,
                            "endLine": 183,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 420,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/vectorstores/alibabacloud_opensearch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 418,
                  "endLine": 418,
                  "startColumn": 20,
                  "endColumn": 53
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3806a8c3300708aa9dece2c1d64f63149e2c4b873b97fe26751192f82c276c56",
            "1": "9d86e1a1.4f9c419d.be92983e.139c59a8.075a0498.ba14daf2.33882eee.ebed174f.9d86e1a1.4f9c419d.be92983e.139c59a8.075a0498.ba14daf2.33882eee.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/vectorstores/alibabacloud_opensearch.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 418,
                            "endLine": 418,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 420,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/langchain/langchain/indexes/_api.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 18,
                  "endColumn": 70
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b53d23b622cc75c91891ce699b84bde9815aa6c6a2533d2d80e16e47282eb25b",
            "1": "3371853d.9041e278.79e62dc9.139c59a8.bab9de6f.ba14daf2.081ac3f4.ebed174f.97da360b.59b34bce.c2b6f7fb.139c59a8.e26e24d8.ba14daf2.4836399a.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/langchain/langchain/indexes/_api.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 18,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 420,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/langchain/langchain/indexes/_api.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 18,
                  "endColumn": 73
                }
              }
            }
          ],
          "fingerprints": {
            "0": "34501af533b5bc270ca023b8a537260e67ddd5e4da4e12ce284d945c14fede65",
            "1": "3371853d.9041e278.79e62dc9.139c59a8.bab9de6f.ba14daf2.406008f6.ebed174f.97da360b.59b34bce.c2b6f7fb.139c59a8.e26e24d8.ba14daf2.4836399a.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/langchain/langchain/indexes/_api.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 18,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 420,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/vectorstores/myscale.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243,
                  "startColumn": 23,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7887b993e8b7c6ee0aaff0275bb4e35bd82569b32a405af8c9a7e0e15c34aa2a",
            "1": "9d86e1a1.2dd6d7a6.79e62dc9.cc98b6f9.075a0498.ba14daf2.33882eee.06384376.9d86e1a1.2dd6d7a6.79e62dc9.cc98b6f9.075a0498.ba14daf2.33882eee.06384376"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/vectorstores/myscale.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 243,
                            "endLine": 243,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/evernote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 36,
                  "endColumn": 77
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3cb36e4bffa18e1d72b44caf141aa15da2a84d120ebb1d8c1bc78088fa0ddf5e",
            "1": "a6b41d6e.2dd6d7a6.79e62dc9.139c59a8.1d07cee4.ba14daf2.a2237efa.f46ed94e.a6b41d6e.2dd6d7a6.f04405c4.139c59a8.1d07cee4.ba14daf2.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/evernote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 36,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/vectorstores/vectara.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 283,
                  "endLine": 283,
                  "startColumn": 18,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5de16c87ca46464bbbd00791b6681b6b5013dbd2958b3670539dd560ff2e15d6",
            "1": "16691f08.2dd6d7a6.79e62dc9.a810e9a0.bab9de6f.57d888ee.b69c6615.0990edd8.7a303d8e.2dd6d7a6.f04405c4.a810e9a0.bab9de6f.57d888ee.b69c6615.0990edd8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/vectorstores/vectara.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 20,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/docugami.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 125,
                  "endLine": 125,
                  "startColumn": 26,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "deee04f726e110bcbfbf5d3c9e663fbb2c77700aa40d02fef45ba7202e85914d",
            "1": "e4aaec67.e68eb375.79e62dc9.139c59a8.bab9de6f.ba14daf2.9b3216db.0990edd8.97da360b.e68eb375.f04405c4.139c59a8.e26e24d8.ba14daf2.9b3216db.0990edd8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/docugami.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 26,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/cache.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "startColumn": 12,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c90a99ae2b550b349e038faa7a7bd5971333fbe6f3993d6a99d9f55af49c4089",
            "1": "03e3b2bd.577bab1d.0fe6034a.7415f64e.690df665.ba14daf2.df943c64.340cbf56.97da360b.577bab1d.0fe6034a.7415f64e.690df665.ba14daf2.df943c64.340cbf56"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/cache.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 420,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/cache.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1242,
                  "endLine": 1242,
                  "startColumn": 16,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "61147c8c55510b8f950669322af29fc5573295428bf6f0d2b73b5b66c63bb7e0",
            "1": "1230a466.577bab1d.1515d80d.c037b872.bab9de6f.d1a0582d.d38f3744.b042f8fb.97da360b.577bab1d.f04405c4.c037b872.e26e24d8.d1a0582d.d38f3744.b042f8fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/cache.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1242,
                            "endLine": 1242,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 420,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/chat_models/baichuan.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 12,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "78777527160356eecd5768d84b357d01c2772f734b37bfbaa577e64dc077e171",
            "1": "89c8a29a.fe1a319f.79e62dc9.1cd1aaab.bab9de6f.ba14daf2.0a7337bb.69dc60f8.89c8a29a.fe1a319f.f04405c4.1cd1aaab.e26e24d8.ba14daf2.65068a99.69dc60f8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/chat_models/baichuan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 11,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in a dictionary key.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in a dictionary key.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/llms/watsonxllm.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109,
                  "startColumn": 13,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ed233c15960e4b2541634b503683dcd54f8f83f049224ffb6d9069c87bb1a2c",
            "1": "1f97d6e2.c7d1bd68.6f7cd3b3.b43a2b6b.c30b6c48.3df0c333.99049dae.03cfff60.1f97d6e2.a3de60c8.a4a86735.b43a2b6b.c30b6c48.3df0c333.99049dae.91057b05"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/llms/watsonxllm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 25,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in a dictionary key.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in a dictionary key.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/llms/gigachat.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 13,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2e22f7ec4166f896b3b92cc5659f78a73061fc1c2f93fa034582e25c15ae4483",
            "1": "8a30cfc6.049fd6d6.af73f06a.9943093e.bfb4c07f.10273d8f.0a7337bb.23c5376a.8a30cfc6.a3de60c8.af73f06a.55f164c8.ff6c2f52.10273d8f.0a7337bb.23c5376a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/llms/gigachat.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 25,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into os.walk, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[os.walk](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "docs/scripts/generate_api_reference_links.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 27,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "182886f950a05f330f94ebb22bc309eea7f032bfef31cebfb1467e9bbf36c615",
            "1": "29d1c8e0.5b46cdac.2683ade8.139c59a8.7e6d1235.ba14daf2.cb317a58.6aac30d8.7bacb01d.e3d9b656.e6e72a62.9cd2dfe0.7e6d1235.0a892d8d.f6dc7859.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 5,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 28,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into os.walk, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[os.walk](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "docs/scripts/generate_api_reference_links.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66,
                  "startColumn": 17,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "239fa302befc63ab456c4b1fff7ea864eeb11fecde0fe9650c3db6c98e92b6e3",
            "1": "29d1c8e0.e3d9b656.eee8f6c1.b5f6ec27.ae312ddb.ba14daf2.cb317a58.742d9b21.7bacb01d.e3d9b656.b19066ef.9cd2dfe0.a5fb405f.addfbd48.f6dc7859.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 5,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 28,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/scripts/generate_api_reference_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into pymongo.MongoClient, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3)",
              "[pymongo.MongoClient](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "templates/rag-mongo/ingest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "startColumn": 10,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ff47349e0b8bc9ef462db82bf7255504c3aba47c86c6c427567c89def396562c",
            "1": "61d44453.8d6debe4.9f1e597e.7ad4d338.57b5e069.ba14daf2.a2237efa.5e53900b.61d44453.71de1367.9f1e597e.7ad4d338.c2f53157.48e1de78.22a8b49e.5e53900b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/rag-mongo/ingest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/rag-mongo/ingest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 13,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/rag-mongo/ingest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 1,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/rag-mongo/ingest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/rag-mongo/ingest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 10,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into pymongo.MongoClient, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3)",
              "[pymongo.MongoClient](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "templates/mongo-parent-document-retrieval/ingest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 10,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "533a812f85f59eb44ef3e0b8bb734bfcdb294f3872691d7d59a9c60caa374cb1",
            "1": "61d44453.8d6debe4.9f1e597e.139c59a8.57b5e069.ba14daf2.a2237efa.5e53900b.61d44453.1753a8be.9f1e597e.a8679b3a.989605ea.48e1de78.a2237efa.5e53900b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/mongo-parent-document-retrieval/ingest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/mongo-parent-document-retrieval/ingest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 13,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/mongo-parent-document-retrieval/ingest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 1,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/mongo-parent-document-retrieval/ingest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/mongo-parent-document-retrieval/ingest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 10,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into pymongo.MongoClient, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3)",
              "[pymongo.MongoClient](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "templates/mongo-parent-document-retrieval/mongo_parent_document_retrieval/chain.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 10,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "12d8895770564788a73c2c57e4db9fda661de80083b0bd326035aeb700961689",
            "1": "61d44453.96d0190f.9f1e597e.139c59a8.57b5e069.ba14daf2.8609edfa.5e53900b.61d44453.1753a8be.9f1e597e.139c59a8.c2f53157.48e1de78.22a8b49e.5e53900b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/mongo-parent-document-retrieval/mongo_parent_document_retrieval/chain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/mongo-parent-document-retrieval/mongo_parent_document_retrieval/chain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 13,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/mongo-parent-document-retrieval/mongo_parent_document_retrieval/chain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 1,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/mongo-parent-document-retrieval/mongo_parent_document_retrieval/chain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/mongo-parent-document-retrieval/mongo_parent_document_retrieval/chain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 10,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into pymongo.MongoClient, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3)",
              "[pymongo.MongoClient](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "templates/rag-mongo/rag_mongo/chain.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "startColumn": 10,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a1469bbc4c8315a42d3c696b37a00966f60c44a6f331421aa879d4331210f251",
            "1": "61d44453.23623efe.9f1e597e.7ad4d338.57b5e069.ba14daf2.a2237efa.5e53900b.61d44453.71de1367.9f1e597e.7ad4d338.c2f53157.48e1de78.22a8b49e.5e53900b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/rag-mongo/rag_mongo/chain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/rag-mongo/rag_mongo/chain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 13,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/rag-mongo/rag_mongo/chain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 1,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/rag-mongo/rag_mongo/chain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/rag-mongo/rag_mongo/chain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 10,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34)",
              "[requests.get](35)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90,
                  "startColumn": 28,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e3dedce185f6d4b0a165406c0493896dcbacfd87ac6756cfd32976f026c5510e",
            "1": "a6b41d6e.2da3d253.ef7ad415.139c59a8.df8f6a96.05a1d16e.a2237efa.f46ed94e.215cb88d.637f0805.ed825002.fc1ad390.4608c58f.8e1fbbc0.cc914b1e.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 13,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 13,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 22,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 33,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 174,
                            "startColumn": 13,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 33,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 33,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 40,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 30,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 13,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 135,
                            "startColumn": 16,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 62,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 54,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 28,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 17,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 25,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 17,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 29,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 41,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 35,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 35,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 21,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 41,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 28,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40)",
              "[requests.get](41)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 41,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "473dbd7773625caf7c38b9ca61500908f51981e90c30ee93dbcc32faba964734",
            "1": "a6b41d6e.2da3d253.7be166b0.139c59a8.d4247619.786f7372.a2237efa.f46ed94e.215cb88d.637f0805.ed825002.fc1ad390.4608c58f.8e1fbbc0.cc914b1e.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 13,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 13,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 22,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 33,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 174,
                            "startColumn": 13,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 33,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 33,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 40,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 30,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 13,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 135,
                            "startColumn": 16,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 62,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 54,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 28,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 17,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 25,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 17,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 29,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 29,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 31,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 21,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 64,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 33,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 61,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 51,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 23,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 9,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 33,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 20,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40)",
              "[requests.get](41)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 20,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "40f1ed7615fa73a38f2d86a107966a018cc2566d77dd88a221ba3aa354df4fb5",
            "1": "2b627c13.2da3d253.ef7ad415.139c59a8.df8f6a96.786f7372.75d4ed92.595430d1.215cb88d.7544781f.ed825002.fc1ad390.4608c58f.8e1fbbc0.cc914b1e.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 13,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 34,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 13,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 22,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 33,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 174,
                            "startColumn": 13,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 33,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 33,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 40,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 30,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 13,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 135,
                            "startColumn": 16,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 62,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 54,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 28,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 17,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 25,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 17,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 29,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 29,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 31,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 21,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 64,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 33,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 61,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 51,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 23,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 9,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 33,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 20,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8)",
              "[requests.get](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 24,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "902a7fc3124096bcc7d0ce8ae43acc1feef7089c576030d37f5974323139e662",
            "1": "2b627c13.2da3d253.ef7ad415.139c59a8.f4f10911.786f7372.2382270a.b60afa86.6d843c37.2da3d253.c2a938c6.cc98b6f9.25ac000c.36729883.cc914b1e.36100b92"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 24,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 24,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 20,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 93,
                            "startColumn": 17,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 94,
                            "startColumn": 13,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 37,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[requests.get](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/core/langchain_core/utils/loading.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0d6d27394660370efe39ddba1dd7f75e9577b77f2fc0e7935347dbc17cc74858",
            "1": "bb5c1e87.ecc4e7fd.3b7b86da.139c59a8.48cc7afd.ba14daf2.cc3ac808.b60afa86.101172a8.ecc4e7fd.3b7b86da.1699c68d.48cc7afd.48e1de78.cc914b1e.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 15,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 1,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 31,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 5,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 44,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 40,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 24,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 5,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/utils/loading.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8)",
              "[requests.get](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "startColumn": 24,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "da27c1f5e32e77249c84bcfea00c26981faba4901b88cb3424ee279dbb719630",
            "1": "2b627c13.2da3d253.ef7ad415.139c59a8.f4f10911.786f7372.75d4ed92.b60afa86.6d843c37.2da3d253.c2a938c6.d730359b.480a137c.ba902360.cc914b1e.8efe609c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 82,
                            "startColumn": 13,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 83,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 37,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8)",
              "[requests.get](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107,
                  "startColumn": 24,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3b4b2234dd38ddf34a6d10abfd6107c19f6aa5c82b99134b89f240848ae1a4de",
            "1": "2b627c13.2da3d253.ef7ad415.139c59a8.f4f10911.786f7372.75d4ed92.b60afa86.6d843c37.2da3d253.5a0a93dc.cc98b6f9.25ac000c.36729883.cc914b1e.36100b92"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 66,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 103,
                            "startColumn": 13,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 104,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 37,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8)",
              "[requests.get](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122,
                  "startColumn": 24,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2d4559df8e3fb83b7d4d2e784bff2e8df65ec780ebe5e0398f5d5192c4609e97",
            "1": "2b627c13.2da3d253.ef7ad415.139c59a8.f4f10911.786f7372.75d4ed92.b60afa86.6d843c37.2da3d253.c2a938c6.d730359b.480a137c.ba902360.cc914b1e.8efe609c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 41,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 118,
                            "startColumn": 13,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 119,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 122,
                            "endLine": 122,
                            "startColumn": 37,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 122,
                            "endLine": 122,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8)",
              "[requests.get](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 145,
                  "endLine": 145,
                  "startColumn": 24,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a219a10743a150e8507cf2a1ca18fe978e0cf99f5c37970a9f96661a54d6d2fd",
            "1": "5dd00441.2da3d253.ef7ad415.139c59a8.f4f10911.786f7372.75d4ed92.b60afa86.6d843c37.2da3d253.c2a938c6.d730359b.480a137c.ba902360.cc914b1e.8efe609c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 41,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 141,
                            "startColumn": 13,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 142,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 37,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8)",
              "[requests.get](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168,
                  "startColumn": 24,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c2b2beaa21e923e2966cfd2e5d7cde04e799bdfebb91f99b9c6a8c2dcd476663",
            "1": "2b627c13.2da3d253.ef7ad415.139c59a8.f4f10911.3be61a23.75d4ed92.92889833.6d843c37.2da3d253.c2a938c6.d730359b.480a137c.ba902360.cc914b1e.8efe609c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 164,
                            "endLine": 164,
                            "startColumn": 41,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 161,
                            "endLine": 164,
                            "startColumn": 13,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 165,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 168,
                            "endLine": 168,
                            "startColumn": 37,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 168,
                            "endLine": 168,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8)",
              "[requests.get](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 191,
                  "endLine": 191,
                  "startColumn": 24,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "779603ecd84300cd83a5e727b090e56480b1908a6227611b4bbf8f0faf2f8031",
            "1": "2b627c13.2da3d253.ef7ad415.139c59a8.f4f10911.786f7372.75d4ed92.b60afa86.6d843c37.2da3d253.c2a938c6.d730359b.480a137c.ba902360.cc914b1e.8efe609c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 24,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 41,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 184,
                            "endLine": 187,
                            "startColumn": 13,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 183,
                            "endLine": 188,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 191,
                            "endLine": 191,
                            "startColumn": 37,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/langchain_community/document_loaders/etherscan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 191,
                            "endLine": 191,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/graphs/test_nebulagraph.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 25,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4672f3f547168293f3c0a8aff84d0ac3aa97668f960f887ff8d732acf1cbb1d4",
            "1": "3d73bd83.577bab1d.79e62dc9.98569367.b0e4b9f9.01046d07.b69c6615.ebed174f.3d73bd83.577bab1d.79e62dc9.8b365ddd.b0e4b9f9.01046d07.b69c6615.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/graphs/test_nebulagraph.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 25,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/graphs/test_nebulagraph.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 359,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/graphs/test_hugegraph.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 25,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8cd93353f27f5ffae6b3f8d1845e0f667a06672d1b4fd6553ad678a472033458",
            "1": "3d73bd83.577bab1d.79e62dc9.8b365ddd.b0e4b9f9.01046d07.b69c6615.ebed174f.3d73bd83.577bab1d.79e62dc9.8b365ddd.e3ac6c19.01046d07.b69c6615.8edeb101"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/graphs/test_hugegraph.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 25,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/graphs/test_hugegraph.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 359,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in here.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in here.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_rspace_loader.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 5,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8112bf2999b9f48ae3e99c82045ea23f37ede400f5d65dd8bed199b0627f2e80",
            "1": "c75dd949.a394845d.c0011ed2.8b365ddd.cd06d91e.b1d75873.c822da05.9d610a4d.c75dd949.a394845d.c0011ed2.8b365ddd.cd06d91e.b1d75873.c822da05.9d610a4d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_rspace_loader.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 359,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in here.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in here.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/vectorstores/test_clarifai.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 5,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "db9bc99a542bf07f88b87054689f05221b7e5107e2e5b7b765fcb6bd700d95bb",
            "1": "40e60066.5d384f29.79e62dc9.562c0938.144a36ec.47524276.feb07afb.c2729f9c.40e60066.5d384f29.79e62dc9.562c0938.144a36ec.47524276.feb07afb.c2729f9c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_clarifai.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in here.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in here.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/vectorstores/test_clarifai.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "startColumn": 5,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "481ca67526167a2be5f69f9c5e624919035dc117e17a2b7f654ea0df4c48b458",
            "1": "40e60066.750f4992.79e62dc9.562c0938.0eb6de4a.96cddcbb.feb07afb.c2729f9c.40e60066.750f4992.79e62dc9.562c0938.0eb6de4a.96cddcbb.feb07afb.c2729f9c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_clarifai.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in here.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in here.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/vectorstores/test_clarifai.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "startColumn": 5,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "96363eb284d113491600c9cedae0d23df3aad89034520ec1e3423216ff11a30d",
            "1": "40e60066.750f4992.79e62dc9.562c0938.0eb6de4a.47524276.feb07afb.c2729f9c.40e60066.750f4992.79e62dc9.562c0938.0eb6de4a.47524276.feb07afb.c2729f9c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_clarifai.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in here.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in here.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/vectorstores/test_clarifai.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 5,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8f8cf6b77b3c6ef7b92e223f2200440f4250cd0929c56b90afd9f858a8abcfc0",
            "1": "40e60066.750f4992.79e62dc9.562c0938.0eb6de4a.47524276.25860ebb.c2729f9c.40e60066.750f4992.79e62dc9.562c0938.0eb6de4a.47524276.25860ebb.c2729f9c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_clarifai.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/langchain/tests/unit_tests/load/test_dump.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 16,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6e390fc69952523cbd3858471f01afc6ededeb7ce46a457e170af0c8211e5463",
            "1": "c370910a.0dc744d2.79e62dc9.2719a13b.5c31b17a.ba14daf2.081ac3f4.deb4acf5.c370910a.0dc744d2.79e62dc9.2719a13b.5c31b17a.ba14daf2.081ac3f4.deb4acf5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/langchain/tests/unit_tests/load/test_dump.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 16,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/langchain/tests/unit_tests/load/test_dump.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 16,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/langchain/tests/unit_tests/load/test_dump.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "startColumn": 21,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "59a7de279f1aa6e6a34139828a34b16e384a6383d34398f986f2b2fb50f5a417",
            "1": "4e3e62dc.8ec1247f.989c8de0.2719a13b.5c31b17a.ba14daf2.081ac3f4.ebed174f.4e3e62dc.8ec1247f.989c8de0.2719a13b.5c31b17a.ba14daf2.081ac3f4.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/langchain/tests/unit_tests/load/test_dump.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/langchain/tests/unit_tests/load/test_dump.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/langchain/tests/unit_tests/load/test_dump.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164,
                  "startColumn": 21,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "63604229bf15d3193056b89aa3be2e6b17b1517179c186c9f45b9f9e083ce1f4",
            "1": "4e3e62dc.8ec1247f.989c8de0.2719a13b.5c31b17a.ba14daf2.081ac3f4.ebed174f.4e3e62dc.8ec1247f.989c8de0.2719a13b.5c31b17a.ba14daf2.081ac3f4.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/langchain/tests/unit_tests/load/test_dump.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 164,
                            "endLine": 164,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/langchain/tests/unit_tests/load/test_dump.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 164,
                            "endLine": 164,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "startColumn": 34,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "72a100247024da14c5a174ad6bcf0056cf99641e9e05129f46aca15257b9aeed",
            "1": "b2dd68c0.577bab1d.2683ade8.139c59a8.9bd64ee0.ba14daf2.081ac3f4.4c681309.8c7e204f.577bab1d.bb8b5287.60c2b8f6.7f835236.196b6e9b.dce00b2d.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 34,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 34,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 13,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6d664a537d2ae636d1db9327b2a66e5eb9470214b0975c1681c76c4926cf3770",
            "1": "9413327b.577bab1d.2683ade8.139c59a8.1bfbe7e1.ba14daf2.081ac3f4.ebed174f.8c7e204f.577bab1d.bb8b5287.60c2b8f6.1bfbe7e1.196b6e9b.dce00b2d.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 27,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fbff553c2cb3b12c5ed4f6a3eaca8ba468012a7c93c6879fa5c52fc2c9771f71",
            "1": "3ef39331.577bab1d.79e62dc9.139c59a8.9bd64ee0.ba14daf2.081ac3f4.4c681309.3ef39331.577bab1d.bb8b5287.60c2b8f6.7f835236.196b6e9b.dce00b2d.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 27,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 27,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128,
                  "startColumn": 27,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9cc33f14b580f87699fde1ef0cfb8764dc3e6fe2eaebb850768f04716198610a",
            "1": "3ef39331.577bab1d.79e62dc9.139c59a8.9bd64ee0.ba14daf2.081ac3f4.4c681309.3ef39331.577bab1d.bb8b5287.60c2b8f6.7f835236.196b6e9b.dce00b2d.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 128,
                            "endLine": 128,
                            "startColumn": 27,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_quip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 128,
                            "endLine": 128,
                            "startColumn": 27,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/document_loaders/test_blockchain.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 5,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "34333c5e8035c790dc063d4bf34e9b366171c4b07e0945ecb691d6475580fa22",
            "1": "eaddba7c.becd01c2.79e62dc9.faa2aa99.781f6d85.01046d07.b69c6615.e54b7c32.eaddba7c.becd01c2.79e62dc9.faa2aa99.781f6d85.01046d07.b69c6615.e54b7c32"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 18,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_blockchain.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 389,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/chat_models/test_baichuan.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128,
                  "startColumn": 42,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f0f9d5a18bde6cabf796b1804f32c45316e6dc677a165ec4fe6592b3e68e1b33",
            "1": "b9abbdb6.8e973d9c.82ba0467.d3d8a1b8.32dceb38.ba14daf2.081ac3f4.b9817d9e.b9abbdb6.8e973d9c.82ba0467.d3d8a1b8.32dceb38.ba14daf2.081ac3f4.b9817d9e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/chat_models/test_baichuan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 128,
                            "endLine": 128,
                            "startColumn": 42,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/chat_models/test_baichuan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 128,
                            "endLine": 128,
                            "startColumn": 42,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/chat_models/test_baichuan.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143,
                  "startColumn": 42,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b66e6f1222fa0f42376af362e51929cf4952d3f82cc73d1ec461f501b5620d89",
            "1": "b9abbdb6.8e973d9c.82ba0467.d3d8a1b8.32dceb38.ba14daf2.081ac3f4.b9817d9e.b9abbdb6.8e973d9c.82ba0467.d3d8a1b8.32dceb38.ba14daf2.081ac3f4.b9817d9e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/chat_models/test_baichuan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 42,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/chat_models/test_baichuan.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 42,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c6e9d0402b32d556e3c3fd3d6346e8a8baeb784e55fdad39f11886415694c215",
            "1": "2e0baa01.1fdc9f03.90f852ff.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f.2e0baa01.1fdc9f03.90f852ff.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "357a625e1848331267c3b3b428c6cae5a406c47061f90aa4764db02f86521883",
            "1": "2e0baa01.1fdc9f03.90f852ff.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f.2e0baa01.1fdc9f03.90f852ff.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 52,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fc25def34f538dac3aa424fe9d327b25102d99739ce9c06a0947754044696c01",
            "1": "e06468b8.1fdc9f03.79e62dc9.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f.e06468b8.1fdc9f03.79e62dc9.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 52,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 52,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "40c94210ca5733ef52f6558f1bf086274c2084bc7213c7e09364813b986965b9",
            "1": "2e0baa01.1fdc9f03.90f852ff.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f.2e0baa01.1fdc9f03.90f852ff.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "10667c398238b400234d20723a95d902952085ae179f168b268bd100000d702b",
            "1": "2e0baa01.1fdc9f03.90f852ff.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f.2e0baa01.1fdc9f03.90f852ff.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 124,
                  "endLine": 124,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8bf68bd244320ad76e1bf11066b5037bc5506306cf1aadefb49abbb9381a0f0d",
            "1": "2e0baa01.1fdc9f03.90f852ff.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f.2e0baa01.1fdc9f03.90f852ff.4310aad6.b1663cf6.ba14daf2.d1c167d0.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 135,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "05234db36153dc5253b7ebc396e8e76970796836c021b71b93250d4986d6fe4c",
            "1": "2e0baa01.1fdc9f03.79e62dc9.f42fd28e.b1663cf6.ba14daf2.d1c167d0.bb6b0a7c.2e0baa01.1fdc9f03.79e62dc9.f42fd28e.b1663cf6.ba14daf2.d1c167d0.bb6b0a7c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7e1b29bf87b0effdd50e43a067e823440cd771ffb59ed57973dfbed8871e712c",
            "1": "2e0baa01.1fdc9f03.79e62dc9.f42fd28e.b1663cf6.ba14daf2.d1c167d0.bb6b0a7c.2e0baa01.1fdc9f03.79e62dc9.f42fd28e.b1663cf6.ba14daf2.d1c167d0.bb6b0a7c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e545dc51877e1a5173258b902b2eb78b0bf7e00f7058ae00704bf5dd6ff48574",
            "1": "2e0baa01.1fdc9f03.79e62dc9.4310aad6.b1663cf6.ba14daf2.10818ef2.ea8ebd15.2e0baa01.1fdc9f03.79e62dc9.4310aad6.b1663cf6.ba14daf2.10818ef2.ea8ebd15"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_onenote.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/embeddings/test_gradient_ai.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 1,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "559c876f4cd575692685fc4d798ad2a793f493f95f3a597bdfd631bc04a84ed3",
            "1": "78e80c9f.92af81a8.79e62dc9.a0a7db4a.7632e533.a5d7f69f.25ca586c.742d9b21.78e80c9f.92af81a8.79e62dc9.a0a7db4a.7632e533.a5d7f69f.25ca586c.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/embeddings/test_gradient_ai.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 20,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/embeddings/test_gradient_ai.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 1,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 389,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/document_loaders/test_fauna.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "startColumn": 13,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "25ff2934991fd78f0db6c30d9348b01edfe6c9fca7d57aeabbc306024f511150",
            "1": "2e0baa01.577bab1d.f2c069d6.139c59a8.eaba7ba9.ba14daf2.081ac3f4.ebed174f.3d73bd83.577bab1d.f2c069d6.139c59a8.eaba7ba9.958d19dd.081ac3f4.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_fauna.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 13,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/document_loaders/test_fauna.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 13,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 389,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_lakefs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88,
                  "startColumn": 13,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "79d9908ba7b3fef4d68af9eebf1be38cbb5d459e0f4d3cb4d7209edba27feef0",
            "1": "2e0baa01.1fdc9f03.79e62dc9.04a69a1f.df6c9131.ba14daf2.9669d63a.701a33e9.2e0baa01.1fdc9f03.79e62dc9.04a69a1f.df6c9131.ba14daf2.9669d63a.701a33e9"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_lakefs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_lakefs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 389,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 46,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "79039ef42cb834547db36feb71208bea4345eca47c8e168081eed5595fc9e848",
            "1": "2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f.2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 46,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 46,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6e66cc84d9ccef57811527e9b73df983226d420dc6041bb45d04bf815816a6e6",
            "1": "2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f.2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 46,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "82b5854b1a2857918907e55b8e7b8d3befc50ce9196d35e8fd135692e8bfe563",
            "1": "2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f.2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 46,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 46,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 46,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d122bdc39a6d34b9026393122fed18ed463f0011f72c480b7f5c6ef07c350b1",
            "1": "2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f.2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 46,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 46,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 46,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "836b0a998d6716b45b8a983c7d5cb77a47fdc0c0e77b0fae2cd1657fd751391a",
            "1": "2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f.2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 46,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 46,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "startColumn": 22,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a1f70e7cdadcd05d980b29476a5b3b18222ce62f3d28ceb349e45cd0945b9528",
            "1": "2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f.2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 22,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 22,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "199f46247f30ce4b5a8a11eed524d1de663bf6727501b1590ef6a4149c050f5c",
            "1": "2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f.2e0baa01.1fdc9f03.6745dcfc.99405ec2.7f1fa41e.ba14daf2.081ac3f4.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/document_loaders/test_github.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 439,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/unit_tests/llms/test_gradient_ai.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 1,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d447ca63b8bb7abb69c689228e8558c5117729d9c5d5f691b995abcd5ef37d74",
            "1": "78e80c9f.92af81a8.79e62dc9.a0a7db4a.7632e533.a1632d4f.25ca586c.b60afa86.78e80c9f.92af81a8.79e62dc9.a0a7db4a.7632e533.a1632d4f.25ca586c.b60afa86"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/llms/test_gradient_ai.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 20,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/unit_tests/llms/test_gradient_ai.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 1,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 389,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedCredentials",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in here.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in here.",
            "arguments": [
              "[hardcoded](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "templates/neo4j-vector-memory/main.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4,
                  "startColumn": 5,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "04904966d32830a1cf3ace0dfc63aa7b3f57826996e6f17c4c2d052a880bd65c",
            "1": "774a92a4.a7c2e55c.79e62dc9.dcee323f.1d07cee4.04b0121a.fa70f57c.b458ff22.774a92a4.a7c2e55c.79e62dc9.dcee323f.1d07cee4.04b0121a.fa70f57c.b458ff22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "templates/neo4j-vector-memory/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4,
                            "endLine": 4,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "jinja2.Environment is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Environment](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/core/langchain_core/prompts/string.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 11,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a65f9e080036045722ca6ad11a2507cd128cc5752fce87b235ef029f3cc624e1",
            "1": "1ba848e8.99c0327a.79e62dc9.4c71cda2.8e08d857.98983cf0.377543a1.ebed174f.1ba848e8.99c0327a.79e62dc9.4c71cda2.8e08d857.98983cf0.377543a1.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/prompts/string.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 11,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "xml.etree.ElementTree.fromstring is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.ElementTree.fromstring](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/core/langchain_core/output_parsers/xml.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 20,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "21976a1194ecda8d51b6c35227527cd60599037c0fa1be5c1e64467c6b7a5644",
            "1": "8a30cfc6.993139d5.79e62dc9.139c59a8.424999a1.ba14daf2.0a7337bb.836922f7.8a30cfc6.993139d5.79e62dc9.139c59a8.424999a1.ba14daf2.0a7337bb.836922f7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/core/langchain_core/output_parsers/xml.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 20,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/HardcodedNonCryptoSecret",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "docs/docusaurus.config.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 312,
                  "endLine": 312,
                  "startColumn": 9,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cdc733cb47498ea2c3283dd3fa3bf11af8e12de3cb5133d5275a23856eab8ed1",
            "1": "d1dec88a.3f481afb.dc7ff3b1.e052b9a9.79a7d027.fcf3002d.1b938f07.e0f43150.4f07f754.3f481afb.7b72d6b9.e052b9a9.89e97cd0.0ef37289.9866eb98.87e1a947"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/docusaurus.config.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 312,
                            "endLine": 312,
                            "startColumn": 17,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "docs/docusaurus.config.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 312,
                            "endLine": 312,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an environment variable flows into pymongo.MongoClient, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3)",
              "[pymongo.MongoClient](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/vectorstores/test_mongodb_atlas.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 32,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "95588e8ecde5c52df2d87c7eae15941af6c5ad2f82ccec27f3e8ac7664038580",
            "1": "c5166c59.e59887ac.9f1e597e.4c6f6d1c.813a85bb.ba14daf2.081ac3f4.70d2e234.295292f7.a1d976eb.9f1e597e.4c6f6d1c.813a85bb.48e1de78.22a8b49e.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_mongodb_atlas.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 21,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_mongodb_atlas.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 21,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_mongodb_atlas.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 1,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_mongodb_atlas.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 44,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_mongodb_atlas.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 32,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 353,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an environment variable flows into pymongo.MongoClient, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3)",
              "[pymongo.MongoClient](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libs/community/tests/integration_tests/vectorstores/test_azure_cosmos_db.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 32,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "575846a7c6b638faae5c255c8eb7c96b29bb4334ee2d70870e7e7bf8e8843d1c",
            "1": "c5166c59.ed9af44b.9f1e597e.4c6f6d1c.1a0abf6d.ba14daf2.081ac3f4.f4d3b043.a6b41d6e.0f00f377.9f1e597e.4c6f6d1c.63ddc1f6.05a1d16e.bd52492f.c4e99eec"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_azure_cosmos_db.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 26,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_azure_cosmos_db.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 26,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_azure_cosmos_db.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 1,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_azure_cosmos_db.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 44,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "libs/community/tests/integration_tests/vectorstores/test_azure_cosmos_db.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 32,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 353,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 14,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 14,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 3665,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 14,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 4,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

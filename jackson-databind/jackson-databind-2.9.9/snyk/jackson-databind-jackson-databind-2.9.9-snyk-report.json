{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "java/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/hadoop/commit/1373e3d8ad60e4da721a292912cb69243bfdf470?diff=split#diff-66aa82c274f41b59e09661e4d60fbf9dcb3465c466c1af64ca9826876bbbcef4L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.OutputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.URI;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.UnknownHostException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Arrays;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Map;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Attributes;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.JarOutputStream;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Manifest;\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.GZIPInputStream;\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.collections.map.CaseInsensitiveMap;\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceAudience;\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceStability;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.conf.Configuration;\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsAction;\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsPermission;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.IOUtils;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.nativeio.NativeIO;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell.ShellCommandExecutor;\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.StringUtils;\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.Logger;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.LoggerFactory;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": " * A collection of file-processing util methods\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceAudience.Public\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceStability.Evolving\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final Logger LOG = LoggerFactory.getLogger(FileUtil.class);\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /* The error code is defined in winutils to indicate insufficient\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * privilege to create symbolic links. This value need to keep in\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * sync with the constant of the same name in:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \"src\\winutils\\common.h\"\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * */\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static final int SYMLINK_NO_PRIVILEGE = 2;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats) {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return null;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path[] ret = new Path[stats.length];\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i < stats.length; ++i) {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "      ret[i] = stats[i].getPath();\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ret;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path.\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If stats if null, return path\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param path\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          default path to return in stats is null\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats, Path path) {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new Path[]{path};\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stat2Paths(stats);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Register all files recursively to be deleted on exit.\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file File/directory to be deleted\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDeleteOnExit(final File file) {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "    file.deleteOnExit();\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (file.isDirectory()) {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] files = file.listFiles();\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File child : files) {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        fullyDeleteOnExit(child);\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir) {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDelete(dir, false);\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir the file or directory to be deleted\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions true if permissions should be modified to delete a file.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return true on success false on failure.\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir, boolean tryGrantPermissions) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // try to chmod +rwx the parent folder of the 'dir': \n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File parent = dir.getParentFile();\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(parent);\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteImpl(dir, false)) {\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // dir is (a) normal file, (b) symlink to a file, (c) empty directory or\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // (d) symlink to a directory\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // handle nonempty directory deletion\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!fullyDeleteContents(dir, tryGrantPermissions)) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deleteImpl(dir, true);\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns the target of the given symlink. Returns the empty string if\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * the given path does not refer to a symlink or there is an error\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * accessing the symlink.\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param f File representing the symbolic link.\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The target of the symbolic link, empty string on error or if not\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *         a symlink.\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String readLink(File f) {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /* NB: Use readSymbolicLink in java.nio.file.Path once available. Could\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * use getCanonicalPath in File to get the target of the symlink but that\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * does not indicate if the given path refers to a symlink.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return Shell.execCommand(\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Shell.getReadlinkCommand(f.toString())).trim();\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (IOException x) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return \"\";\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /*\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Pure-Java implementation of \"chmod +rwx f\".\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void grantPermissions(final File f) {\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setExecutable(f, true);\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setReadable(f, true);\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setWritable(f, true);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean deleteImpl(final File f, final boolean doLog) {\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f == null) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"null file argument.\");\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean wasDeleted = f.delete();\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (wasDeleted) {\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean ex = f.exists();\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (doLog && ex) {\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"Failed to delete file or dir [\"\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "          + f.getAbsolutePath() + \"]: it still exists.\");\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return !ex;\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir) {\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDeleteContents(dir, false);\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this \n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * and all the underlying directories before trying to delete their contents.\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir, final boolean tryGrantPermissions) {\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // to be able to list the dir and delete files from it\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // we must grant the dir rwx permissions: \n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(dir);\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean deletionSucceeded = true;\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final File[] contents = dir.listFiles();\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (contents != null) {\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!deleteImpl(contents[i], true)) {// normal file or symlink to another file\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue; // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Either directory or symlink to another directory.\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Try deleting the directory as this might be a symlink\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "          boolean b = false;\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "          b = deleteImpl(contents[i], false);\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (b){\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //this was indeed a symlink or an empty directory\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue;\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // if not an empty directory or symlink let\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // fullydelete handle it.\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!fullyDelete(contents[i], tryGrantPermissions)) {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deletionSucceeded;\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete a directory.\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param fs {@link FileSystem} on which the path is present\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir directory to recursively delete \n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @deprecated Use {@link FileSystem#delete(Path, boolean)}\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDelete(FileSystem fs, Path dir) \n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fs.delete(dir, true);\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // If the destination is a subdirectory of the source, then\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // generate exception\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void checkDependencies(FileSystem srcFS, \n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path src, \n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        FileSystem dstFS, \n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path dst)\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        throws IOException {\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcFS == dstFS) {\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String srcq = src.makeQualified(srcFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String dstq = dst.makeQualified(dstFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (dstq.startsWith(srcq)) {\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (srcq.length() == dstq.length()) {\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to itself.\");\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to its subdirectory \" +\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                dst);\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, src, dstFS, dst, deleteSource, true, conf);\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path[] srcs, \n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource, \n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite, Configuration conf)\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             throws IOException {\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean gotException = false;\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean returnVal = true;\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder exceptions = new StringBuilder();\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcs.length == 1)\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return copy(srcFS, srcs[0], dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Check if dest is directory\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!sdst.isDirectory()) \n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IOException(\"copying multiple files, but last argument `\" +\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              dst + \"' is not a directory\");\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "          \"`\" + dst + \"': specified destination directory \" +\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "              \"does not exist\", e);\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (Path src : srcs) {\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!copy(srcFS, src, dstFS, dst, deleteSource, overwrite, conf))\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "          returnVal = false;\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "        gotException = true;\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(e.getMessage());\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(\"\\n\");\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (gotException) {\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(exceptions.toString());\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return returnVal;\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus fileStatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, fileStatus, dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, overwrite);\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "      checkDependencies(srcFS, src, dstFS, dst);\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i], dstFS,\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new Path(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, overwrite, conf);\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in=null;\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out = null;\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = srcFS.open(src);\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst, overwrite);\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf, true);\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(out);\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(in);\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy all files in a directory to one output file (merge). */\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copyMerge(FileSystem srcFS, Path srcDir, \n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  FileSystem dstFS, Path dstFile, \n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  boolean deleteSource,\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  Configuration conf, String addString) throws IOException {\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dstFile = checkDest(srcDir.getName(), dstFS, dstFile, false);\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!srcFS.getFileStatus(srcDir).isDirectory())\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "   \n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OutputStream out = dstFS.create(dstFile);\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(srcDir);\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Arrays.sort(contents);\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "          InputStream in = srcFS.open(contents[i].getPath());\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "            IOUtils.copyBytes(in, out, conf, false);\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (addString!=null)\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "              out.write(addString.getBytes(\"UTF-8\"));\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } finally {\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "            in.close();\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } \n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "      out.close();\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(srcDir, true);\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }  \n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy local files to a FileSystem. */\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(File src,\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, false);\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (src.isDirectory()) {\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File contents[] = listFiles(src);\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(contents[i], dstFS, new Path(dst, contents[i].getName()),\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else if (src.isFile()) {\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = null;\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out =null;\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = new FileInputStream(src);\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst);\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf);\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( out );\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( in );\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(src.toString() + \n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            \": No such file or directory\");\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return FileUtil.fullyDelete(src);\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             File dst, boolean deleteSource,\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus filestatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, filestatus, dst, deleteSource, conf);\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              File dst, boolean deleteSource,\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              Configuration conf) throws IOException {\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dst.mkdirs()) {\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i],\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new File(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = srcFS.open(src);\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static Path checkDest(String srcName, FileSystem dstFS, Path dst,\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "      boolean overwrite) throws IOException {\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus sdst;\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = null;\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (null != sdst) {\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (sdst.isDirectory()) {\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (null == srcName) {\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new PathIsDirectoryException(dst.toString());\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return checkDest(null, dstFS, new Path(dst, srcName), overwrite);\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else if (!overwrite) {\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new PathExistsException(dst.toString(),\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \"Target \" + dst + \" already exists\");\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return dst;\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param filename The filename to convert\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(String filename) throws IOException {\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return filename;\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file) throws IOException {\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return makeShellPath(file, false);\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param makeCanonicalPath \n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          Whether to make canonical path for the file passed\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file, boolean makeCanonicalPath) \n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (makeCanonicalPath) {\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.getCanonicalPath());\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.toString());\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Takes an input dir and returns the du on that local directory. Very basic\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * implementation.\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          The input dir to get the disk space of this local dir\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The total disk space of the input local directory\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static long getDU(File dir) {\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "    long size = 0;\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.exists())\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return 0;\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.isDirectory()) {\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return dir.length();\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] allFiles = dir.listFiles();\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if(allFiles != null) {\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "         for (int i = 0; i < allFiles.length; i++) {\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "           boolean isSymLink;\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "           try {\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "           } catch(IOException ioe) {\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = true;\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "           if(!isSymLink) {\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "             size += getDU(allFiles[i]);\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "         }\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return size;\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Given a File input it will unzip the file in a the unzip directory\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * passed as the second parameter\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param inFile The zip file as input\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param unzipDir The unzip directory where to unzip the zip file.\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<? extends ZipEntry> entries;\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipFile zipFile = new ZipFile(inFile);\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n",
                        "lineNumber": 622,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "      entries = zipFile.entries();\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "      while (entries.hasMoreElements()) {\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!entry.isDirectory()) {\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 629,
                        "lineChange": "added"
                      },
                      {
                        "line": "          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n",
                        "lineNumber": 630,
                        "lineChange": "added"
                      },
                      {
                        "line": "            throw new IOException(\"expanding \" + entry.getName()\n",
                        "lineNumber": 631,
                        "lineChange": "added"
                      },
                      {
                        "line": "                + \" would create file outside of \" + unzipDir);\n",
                        "lineNumber": 632,
                        "lineChange": "added"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 633,
                        "lineChange": "added"
                      },
                      {
                        "line": "          InputStream in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!file.getParentFile().mkdirs()) {\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!file.getParentFile().isDirectory()) {\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throw new IOException(\"Mkdirs failed to create \" + \n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "                          file.getParentFile().toString());\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "OutputStream out = new FileOutputStream(file);\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mockingbot/react-native-zip-archive/commit/74da5ecb3c61e96374857e7aa77ff99948e34270?diff=split#diff-bd4e482df53115aae45520ce6a60abd8d76390dcd9ed817375e437b9c312a408L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.PrintWriter;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.StringWriter;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipInputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipOutputStream;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.exception.ZipException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.model.FileHeader;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.progress.ProgressMonitor;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class RNZipArchiveModule extends ReactContextBaseJavaModule {\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = RNZipArchiveModule.class.getSimpleName();\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final int BUFFER_SIZE = 4096;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String PROGRESS_EVENT_NAME = \"zipArchiveProgressEvent\";\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_FILENAME = \"filePath\";\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_PROGRESS = \"progress\";\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public RNZipArchiveModule(ReactApplicationContext reactContext) {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    super(reactContext);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getName() {\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return \"RNZipArchive\";\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void isPasswordProtected(final String zipFilePath, final Promise promise) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.resolve(zipFile.isEncrypted());\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (ZipException ex) {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.reject(null, String.format(\"Unable to check for encryption due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipWithPassword(final String zipFilePath, final String destDirectory,\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final String password, final Promise promise) {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "          net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (zipFile.isEncrypted()) {\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.setPassword(password);\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } else {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "            promise.reject(null, String.format(\"Zip file: %s is not password protected\", zipFilePath));\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List fileHeaderList = zipFile.getFileHeaders();\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List extractedFileNames = new ArrayList<>();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "          int totalFiles = fileHeaderList.size();\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "          for (int i = 0; i < totalFiles; i++) {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            FileHeader fileHeader = (FileHeader) fileHeaderList.get(i);\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.extractFile(fileHeader, destDirectory);\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fileHeader.isDirectory()) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "              extractedFileNames.add(fileHeader.getFileName());\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(i + 1, totalFiles, zipFilePath);\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(Arguments.fromList(extractedFileNames));\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (ZipException ex) {\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Failed to unzip file, due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzip(final String zipFilePath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Check the file exists\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileInputStream inputStream = null;\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "          inputStream = new FileInputStream(zipFilePath);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "          new File(zipFilePath);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (FileNotFoundException | NullPointerException e) {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (inputStream != null) {\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "              inputStream.close();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ignored) {\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Couldn't open file \" + zipFilePath + \". \");\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Find the total uncompressed size of every file in the zip, so we can\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // get an accurate progress measurement\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long totalUncompressedBytes = getUncompressedSize(zipFilePath);\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File destDir = new File(destDirectory);\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!destDir.exists()) {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destDir.mkdirs();\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // We use arrays here so we can update values\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // from inside the callback\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long[] extractedBytes = {0};\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final int[] lastPercentage = {0};\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final ZipFile zipFile = new ZipFile(zipFilePath);\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final Enumeration<? extends ZipEntry> entries = zipFile.entries();\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Log.d(TAG, \"Zip has \" + zipFile.size() + \" entries\");\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "          while (entries.hasMoreElements()) {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (entry.isDirectory()) continue;\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            StreamUtil.ProgressCallback cb = new StreamUtil.ProgressCallback() {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "              @Override\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "              public void onCopyProgress(long bytesRead) {\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                extractedBytes[0] += bytesRead;\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int lastTime = lastPercentage[0];\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int percentDone = (int) ((double) extractedBytes[0] * 100 / (double) totalUncompressedBytes);\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                // update at most once per percent.\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (percentDone > lastTime) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  lastPercentage[0] = percentDone;\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  updateProgress(extractedBytes[0], totalUncompressedBytes, zipFilePath);\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fout.exists()) {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "              (new File(fout.getParent())).mkdirs();\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "            InputStream in = null;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedOutputStream Bout = null;\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout = new BufferedOutputStream(new FileOutputStream(fout));\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "              StreamUtil.copy(in, Bout, cb);\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout.close();\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in.close();\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ex) {\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (in != null) {\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  in.close();\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (Bout != null) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  Bout.close();\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "          zipFile.close();\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(1, 1, zipFilePath); // force 100%\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(destDirectory);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (Exception ex) {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Failed to extract file \" + ex.getLocalizedMessage());\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a zip held in the assets directory.\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Note that the progress value isn't as accurate as when unzipping\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * from a file. When reading a zip from a stream, we can't\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * get accurate uncompressed sizes for files (ZipEntry#getCompressedSize() returns -1).\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Instead, we compare the number of bytes extracted to the size of the compressed zip file.\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * In most cases this means the progress 'stays on' 100% for a little bit (compressedSize < uncompressed size)\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipAssets(final String assetsPath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream assetsInputStream;\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final long size;\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "          assetsInputStream = getReactApplicationContext().getAssets().open(assetsPath);\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "          AssetFileDescriptor fileDescriptor = getReactApplicationContext().getAssets().openFd(assetsPath);\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "          size = fileDescriptor.getLength();\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (IOException e) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Asset file `%s` could not be opened\", assetsPath));\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File destDir = new File(destDirectory);\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!destDir.exists()) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "              destDir.mkdirs();\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipInputStream zipIn = new ZipInputStream(assetsInputStream);\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedInputStream bin = new BufferedInputStream(zipIn);\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipEntry entry;\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final long[] extractedBytes = {0};\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int[] lastPercentage = {0};\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(0, 1, assetsPath); // force 0%\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout;\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            while ((entry = zipIn.getNextEntry()) != null) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (entry.isDirectory()) continue;\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "              fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String destDirCanonicalPath = (new File(destDirectory)).getCanonicalPath();\n",
                        "lineNumber": 254,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String canonicalPath = fout.getCanonicalPath();\n",
                        "lineNumber": 255,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!canonicalPath.startsWith(destDirCanonicalPath)) {\n",
                        "lineNumber": 256,
                        "lineChange": "added"
                      },
                      {
                        "line": "                throw new Exception(String.format(\"Found Zip Path Traversal Vulnerability with %s\", canonicalPath));\n",
                        "lineNumber": 257,
                        "lineChange": "added"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 258,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 259,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!fout.exists()) {\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-7f1146763ff0eeee6320973b41ea444dd74b8bf7ee644cc135133047c1a430c6L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.charset.Charset;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.HashSet;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Properties;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Set;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.annotation.Nullable;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.tools.JavaFileObject;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Utilities for reading {@link com.google.devtools.j2objc.file.InputFile}s.\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": " *\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @author Tom Ball, Keith Stanger, Mike Thvedt, Tim Gao\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Set<String> tempDirs = new HashSet<>();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> sourcePathEntries = new ArrayList<>();\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> classPathEntries = new ArrayList<>();\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private File outputDirectory = new File(\".\");\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private String fileEncoding = System.getProperty(\"file.encoding\", \"UTF-8\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Charset charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setSourcePathEntries(List<String> sourcePathEntries) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.sourcePathEntries = sourcePathEntries;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getSourcePathEntries() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return sourcePathEntries;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void appendSourcePath(String entry) {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(entry);\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void insertSourcePath(int index, String entry) {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(index, entry);\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getClassPathEntries() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return classPathEntries;\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setOutputDirectory(File outputDirectory) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.outputDirectory = outputDirectory;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File getOutputDirectory() {\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!outputDirectory.exists()) {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "      outputDirectory.mkdirs();\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return outputDirectory;\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setFileEncoding(String fileEncoding) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.fileEncoding = fileEncoding;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getFileEncoding() {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fileEncoding;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Charset getCharset() {\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return charset;\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void addTempDir(String tempDir) {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tempDirs.add(tempDir);\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Set<String> getTempDirs() {\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tempDirs;\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(InputFile file) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = file.getBasename();\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(JavaFileObject file) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = file.getName();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = path.substring(path.lastIndexOf('/') + 1);\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static String removeFileSuffix(String basename) {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int end = basename.lastIndexOf(\".java\");\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (end == -1) {\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      end = basename.lastIndexOf(\".class\");\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return end != -1 ? basename.substring(0, end) : basename;\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getQualifiedMainTypeName(InputFile file, CompilationUnit unit) {\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String qualifiedName = getMainTypeName(file);\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PackageDeclaration packageDecl = unit.getPackage();\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (packageDecl != null) {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String packageName = packageDecl.getName().getFullyQualifiedName();\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "      qualifiedName = packageName + \".\" + qualifiedName;\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return qualifiedName;\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the source path,\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnSourcePath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, sourcePathEntries, \".java\");\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the class path,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnClassPath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, classPathEntries, \".class\");\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputFile findOnPaths(\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String qualifiedName, List<String> paths, String extension) throws IOException {\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String sourceFileName = qualifiedName.replace('.', File.separatorChar) + extension;\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Zip/jar files always use forward slashes.\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String jarEntryName = qualifiedName.replace('.', '/') + extension;\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (String pathEntry : paths) {\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File f = new File(pathEntry);\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (f.isDirectory()) {\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        RegularInputFile regularFile = new RegularInputFile(\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pathEntry + File.separatorChar + sourceFileName, sourceFileName);\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (regularFile.exists()) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return regularFile;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Assume it's a jar file\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        JarredInputFile jarFile = new JarredInputFile(pathEntry, jarEntryName);\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (jarFile.exists()) {\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return jarFile;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return null;\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String readFile(InputFile file) throws IOException {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return CharStreams.toString(file.openReader(charset));\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputStream streamForFile(String filename) throws IOException {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File f = new File(filename);\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f.exists()) {\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new FileInputStream(f);\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream stream = J2ObjC.class.getResourceAsStream(filename);\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (stream == null) {\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new FileNotFoundException(filename);\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stream;\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Reads the given properties file.\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(String resourceName) throws IOException {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return loadProperties(streamForFile(resourceName));\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(InputStream in) throws IOException {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Properties p = new Properties();\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "      p.load(in);\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return p;\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "      in.close();\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static File createTempDir(String dirname) throws IOException {\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File tmpDirectory = File.createTempFile(dirname, \".tmp\");\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.delete();\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!tmpDirectory.mkdir()) {\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\"Could not create tmp directory: \" + tmpDirectory.getPath());\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.deleteOnExit();\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tmpDirectory;\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete specified directory.\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void deleteTempDir(File dir) {\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO(cpovirk): try Directories.deleteRecursively if a c.g.c.unix dep is OK\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (dir != null && dir.exists()) {\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File f : dir.listFiles()) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (f.isDirectory()) {\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          deleteTempDir(f);\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "          f.delete();\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "      dir.delete();\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a ZipEntry to the specified directory.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File outputFile = new File(dir, entry.getName());\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File parentFile = outputFile.getParentFile();\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!parentFile.isDirectory() && !parentFile.mkdirs()) {\n",
                        "lineNumber": 245,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract file to \" + dir.getPath());\n",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)\n",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "        || (!parentFile.isDirectory() && !parentFile.mkdirs())) {\n",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());\n",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try (InputStream inputStream = zipFile.getInputStream(entry);\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 18,
                "cwe": [
                  "CWE-23"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[java.io.FileInputStream](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/test/java/perf/ManualReadPerfUntypedReader.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 23,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "80b8663fc08b7c234e9995a29a57298303ec914a36c022ae4eb73e3c7fae7cf5",
            "1": "eb2e4dd9.1cbd3ff4.1b9a1d8e.9873842e.c79ed9b7.117e971f.df7e59ba.c5b28e25.8df8fa68.7f413d6f.622565c7.e22980a8.025462d2.730a5695.377b98a3.03e447a5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ManualReadPerfUntypedReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ManualReadPerfUntypedReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 227,
                            "endLine": 227,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 14,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 230,
                            "endLine": 230,
                            "startColumn": 71,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 50,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 34,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 450,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[java.io.FileInputStream](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/test/java/perf/ManualReadPerfUntypedStream.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 23,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f805634841fbe16b43d5c83d661468adc7596fc4ce8cf44ba49f45fadabd8215",
            "1": "eb2e4dd9.1cbd3ff4.1b9a1d8e.9873842e.c79ed9b7.117e971f.df7e59ba.c5b28e25.8df8fa68.7f413d6f.1bc6f6b2.e22980a8.025462d2.730a5695.377b98a3.03e447a5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ManualReadPerfUntypedStream.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ManualReadPerfUntypedStream.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 227,
                            "endLine": 227,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 14,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 230,
                            "endLine": 230,
                            "startColumn": 71,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 50,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 34,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 450,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[java.io.FileInputStream](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/test/java/perf/ManualReadPerfUntyped.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 23,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9f875506001f26e59a8994a47c4198bc3e754eff2c5b202a11dfb63e8331f82c",
            "1": "eb2e4dd9.1cbd3ff4.1b9a1d8e.9873842e.c79ed9b7.117e971f.df7e59ba.c5b28e25.8df8fa68.7f413d6f.622565c7.e22980a8.025462d2.730a5695.377b98a3.03e447a5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ManualReadPerfUntyped.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ManualReadPerfUntyped.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 227,
                            "endLine": 227,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 14,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 230,
                            "endLine": 230,
                            "startColumn": 71,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 50,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/test/java/perf/ObjectReaderTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 34,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 450,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Java",
            "files": 1137,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 15,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}

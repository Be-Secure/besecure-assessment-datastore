[

{
    "key": "AYYl2A1Ir7fAu_Yd3bR2",
    "component": {
      "key": "owlviewer:owlviewer-backend/src/main/java/at/michaelgrath/owlviewer/backend/api/OntologyController.java",
      "qualifier": "FIL",
      "name": "OntologyController.java",
      "longName": "owlviewer-backend/src/main/java/at/michaelgrath/owlviewer/backend/api/OntologyController.java",
      "path": "owlviewer-backend/src/main/java/at/michaelgrath/owlviewer/backend/api/OntologyController.java"
    },
    "project": {
      "key": "owlviewer",
      "qualifier": "TRK",
      "name": "owlviewer",
      "longName": "owlviewer"
    },
    "rule": {
      "key": "java:S5122",
      "name": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
      "securityCategory": "insecure-conf",
      "vulnerabilityProbability": "LOW",
      "riskDescription": "<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\">CVE-2018-0269</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n",
      "vulnerabilityDescription": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You donâ€™t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\"><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p>Java servlet framework:</p>\n<pre>\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    resp.setHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\n    resp.setHeader(\"Access-Control-Allow-Origin\", \"*\"); // Sensitive\n    resp.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n    resp.setHeader(\"Access-Control-Allow-Methods\", \"GET\");\n    resp.getWriter().write(\"response\");\n}\n</pre>\n<p>Spring MVC framework:</p>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html\">CrossOrigin</a>\n  </li>\n</ul>\n<pre>\n@CrossOrigin // Sensitive\n@RequestMapping(\"\")\npublic class TestController {\n    public String home(ModelMap model) {\n        model.addAttribute(\"message\", \"ok \");\n        return \"view\";\n    }\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html\">cors.CorsConfiguration</a> </li>\n</ul>\n<pre>\nCorsConfiguration config = new CorsConfiguration();\nconfig.addAllowedOrigin(\"*\"); // Sensitive\nconfig.applyPermitDefaultValues(); // Sensitive\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html\">servlet.config.annotation.CorsConfiguration</a> </li>\n</ul>\n<pre>\nclass Insecure implements WebMvcConfigurer {\n  @Override\n  public void addCorsMappings(CorsRegistry registry) {\n    registry.addMapping(\"/**\")\n      .allowedOrigins(\"*\"); // Sensitive\n  }\n}\n</pre>\n<p>User-controlled origin:</p>\n<pre>\npublic ResponseEntity&lt;String&gt; userControlledOrigin(@RequestHeader(\"Origin\") String origin) {\n  HttpHeaders responseHeaders = new HttpHeaders();\n  responseHeaders.add(\"Access-Control-Allow-Origin\", origin); // Sensitive\n\n  return new ResponseEntity&lt;&gt;(\"content\", responseHeaders, HttpStatus.CREATED);\n}\n</pre>\n",
      "fixRecommendations": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Compliant Solution</h2>\n<p>Java Servlet framework:</p>\n<pre>\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    resp.setHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\n    resp.setHeader(\"Access-Control-Allow-Origin\", \"trustedwebsite.com\"); // Compliant\n    resp.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n    resp.setHeader(\"Access-Control-Allow-Methods\", \"GET\");\n    resp.getWriter().write(\"response\");\n}\n</pre>\n<p>Spring MVC framework:</p>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html\">CrossOrigin</a>\n  </li>\n</ul>\n<pre>\n@CrossOrigin(\"trustedwebsite.com\") // Compliant\n@RequestMapping(\"\")\npublic class TestController {\n    public String home(ModelMap model) {\n        model.addAttribute(\"message\", \"ok \");\n        return \"view\";\n    }\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html\">cors.CorsConfiguration</a> </li>\n</ul>\n<pre>\nCorsConfiguration config = new CorsConfiguration();\nconfig.addAllowedOrigin(\"http://domain2.com\"); // Compliant\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html\">servlet.config.annotation.CorsConfiguration</a> </li>\n</ul>\n<pre>\nclass Safe implements WebMvcConfigurer {\n  @Override\n  public void addCorsMappings(CorsRegistry registry) {\n    registry.addMapping(\"/**\")\n      .allowedOrigins(\"safe.com\"); // Compliant\n  }\n}\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\npublic ResponseEntity&lt;String&gt; userControlledOrigin(@RequestHeader(\"Origin\") String origin) {\n  HttpHeaders responseHeaders = new HttpHeaders();\n  if (trustedOrigins.contains(origin)) {\n    responseHeaders.add(\"Access-Control-Allow-Origin\", origin);\n  }\n\n  return new ResponseEntity&lt;&gt;(\"content\", responseHeaders, HttpStatus.CREATED);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/346\">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/942\">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>"
    },
    "status": "TO_REVIEW",
    "line": 29,
    "hash": "4ab79e8dec84526632c7b12e31227be4",
    "message": "Make sure that enabling CORS is safe here.",
    "author": "office@itmatters.at",
    "creationDate": "2021-04-19T15:13:27+0530",
    "updateDate": "2023-02-06T13:59:05+0530",
    "textRange": {
      "startLine": 29,
      "endLine": 29,
      "startOffset": 1,
      "endOffset": 12
    },
    "changelog": [],
    "comment": [],
    "users": [],
    "canChangeStatus": true,
    "flows": [],
    "messageFormattings": []
  },
  {
    "key": "AYYl2A1Jr7fAu_Yd3bR8",
    "component": {
      "key": "owlviewer:owlviewer-backend/src/main/java/at/michaelgrath/owlviewer/backend/api/OntologyController.java",
      "qualifier": "FIL",
      "name": "OntologyController.java",
      "longName": "owlviewer-backend/src/main/java/at/michaelgrath/owlviewer/backend/api/OntologyController.java",
      "path": "owlviewer-backend/src/main/java/at/michaelgrath/owlviewer/backend/api/OntologyController.java"
    },
    "project": {
      "key": "owlviewer",
      "qualifier": "TRK",
      "name": "owlviewer",
      "longName": "owlviewer"
    },
    "rule": {
      "key": "java:S4507",
      "name": "Delivering code in production with debug features activated is security-sensitive",
      "securityCategory": "insecure-conf",
      "vulnerabilityProbability": "LOW",
      "riskDescription": "<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007\">CVE-2018-1999007</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306\">CVE-2015-5306</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006\">CVE-2013-2006</a> </li>\n</ul>\n<p>An applicationâ€™s debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users.</p>\n",
      "vulnerabilityDescription": "<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code or configuration enabling the application debug features is deployed on production servers or distributed to end users. </li>\n  <li> the application runs by default with debug features activated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p><code>Throwable.printStackTrace(...)</code> prints a Throwable and its stack trace to <code>System.Err</code> (by default) which is not easily\nparseable and can expose sensitive information:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace(); // Sensitive\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>true</code> enables debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = true) // Sensitive\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<p><a\nhref=\"https://developer.android.com/reference/android/webkit/WebView#setWebContentsDebuggingEnabled(boolean)\">WebView.setWebContentsDebuggingEnabled(true)</a>\nfor Android enables debugging support:</p>\n<pre>\nimport android.webkit.WebView;\n\nWebView.setWebContentsDebuggingEnabled(true); // Sensitive\nWebView.getFactory().getStatics().setWebContentsDebuggingEnabled(true); // Sensitive\n</pre>\n",
      "fixRecommendations": "<h2>Recommended Secure Coding Practices</h2>\n<p>Do not enable debug features on production servers or applications distributed to end users.</p>\n<h2>Compliant Solution</h2>\n<p>Loggers should be used (instead of <code>printStackTrace</code>) to print throwables:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>false</code> disables debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false)\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<p><a\nhref=\"https://developer.android.com/reference/android/webkit/WebView#setWebContentsDebuggingEnabled(boolean)\">WebView.setWebContentsDebuggingEnabled(false)</a>\nfor Android disables debugging support:</p>\n<pre>\nimport android.webkit.WebView;\n\nWebView.setWebContentsDebuggingEnabled(false);\nWebView.getFactory().getStatics().setWebContentsDebuggingEnabled(false);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Active Debug Code </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/215\">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>\n</ul>"
    },
    "status": "TO_REVIEW",
    "line": 92,
    "hash": "2dc1665d31b37f9aa7408939a0365027",
    "message": "Make sure this debug feature is deactivated before delivering the code in production.",
    "author": "office@itmatters.at",
    "creationDate": "2021-04-19T15:13:27+0530",
    "updateDate": "2023-02-06T13:59:05+0530",
    "textRange": {
      "startLine": 92,
      "endLine": 92,
      "startOffset": 14,
      "endOffset": 29
    },
    "changelog": [],
    "comment": [],
    "users": [],
    "canChangeStatus": true,
    "flows": [],
    "messageFormattings": []
  }
]

{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/Ssti",
              "name": "Ssti",
              "shortDescription": {
                "text": "Improper Neutralization of Directives in Statically Saved Code"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nAn attacker exploits this weakness by indirectly controlling the contents of an executable server-side file (such as `.php` or `.aspx`) to trick the server into accessing sensitive data, providing authentication, or even executing shell commands. This weakness is sometimes also known as **Server-Side Template Injection (SSTI)**, since templates are one of the most common types of resources that suffer from this weakness.\nThese types of attacks differ from cross-site scripting (XSS) attacks, which take place on the client side and are generally more easily detected. However, code that is vulnerable to XSS attacks may also be vulnerable to SSTI attacks, since they arise through similar design flaws. And similar to XSS and other injection-type attacks, SSTI attacks are relatively preventable through proactive planning and design during development.\n\n## Best practices for prevention\n* Take a preventative, zero-trust approach and implement safer methods of processing user-controllable input on pages issuing directives to the server.\n* Never pass incoming data directly to the server. Instead, sanitize and validate all incoming data from the client side, ideally checking it against an allowlist of valid actions and destinations (instead of just parsing for banned characters).\n* Select template engines that use sandboxing or allowlists to defend against the possibility of SSTI. However, keep in mind that these may have intrinsic weaknesses.\n* Test applications using lists of publicly available template expression test strings and problematic payloads for your PHP template engine.\n* Given the fallibility of parsing approaches and sandboxing, consider implementing complementary protection methods, such as kernel hardening and read-only filesystems.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Ssti",
                  "Security",
                  "SourceResourceAccess",
                  "SourceDatabase",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/machinalis/django-template-previewer/commit/17b240783bcc26e73db2c99133098259fb19a1cd?diff=split#diff-0d7bb026e28ffd5c4636763c883e895f77dc4c0a1893ac482b6b3cab558a2e03L-1",
                    "lines": [
                      {
                        "line": "from django.template import Template, Context, loader\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from django.template import Template, Context, loader, TemplateDoesNotExist\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "from template_previewer.forms import RenderForm, ParseForm\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "from template_previewer.template_parser.context import get_context\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render(request):\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"This is the actually preview, rendered on an <iframe>\"\"\"\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if request.method != \"POST\":\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return HttpResponseBadRequest()\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "form = RenderForm(request.POST)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "if form.is_valid():\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    template_name = form.cleaned_data['template']\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "    template = loader.get_template(template_name)\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    context = json.loads(form.cleaned_data['context'])\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "c = Context(context)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "print template, c\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return HttpResponse(template.render(c))\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return HttpResponseBadRequest()\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "def parse(request):\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    This is an AJAX utility to get the needed context variables given a\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    template name\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if request.method != \"POST\":\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return HttpResponseBadRequest()\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form = ParseForm(request.POST)\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "if form.is_valid():\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    template_name = form.cleaned_data['template']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    template = Template(template_name)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    c = get_context(template)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return HttpResponse(json.dumps(c))\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        template = loader.get_template(template_name)\n",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "    except TemplateDoesNotExist:\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return HttpResponse(json.dumps({\"error\": u\"Could not load template '%s'\" % template_name}), mimetype=\"application/json\")\n",
                        "lineNumber": 93,
                        "lineChange": "added"
                      },
                      {
                        "line": "    tree = []\n",
                        "lineNumber": 94,
                        "lineChange": "added"
                      },
                      {
                        "line": "    for path in get_context(template):\n",
                        "lineNumber": 95,
                        "lineChange": "added"
                      },
                      {
                        "line": "        _extend(tree, path)\n",
                        "lineNumber": 96,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return HttpResponse(json.dumps(tree), mimetype=\"application/json\")\n",
                        "lineNumber": 97,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/andreasjansson/envtpl/commit/150d8bb245fa67685bfab3605e11d6eaa6fb7f35?diff=split#diff-94c505993002cdbb848521fd0a06c7334401169ede91bba9d85ba1a1f3c4aa78L-1",
                    "lines": [
                      {
                        "line": "def _render(source, template, variables, undefined):\n",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if template is None:\n",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            template = jinja2.Template(source, undefined=undefined)\n",
                        "lineNumber": 103,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        except jinja2.TemplateSyntaxError as e:\n",
                        "lineNumber": 104,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            raise Fatal('Syntax error on line %d: %s' % (e.lineno, e.message))\n",
                        "lineNumber": 105,
                        "lineChange": "removed"
                      },
                      {
                        "line": "def _render_string(string, variables, undefined):\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "    template_name = 'template_name'\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "    loader = jinja2.DictLoader({template_name: string})\n",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return _render(template_name, loader, variables, undefined)\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "added"
                      },
                      {
                        "line": "def _render_file(filename, variables, undefined):\n",
                        "lineNumber": 94,
                        "lineChange": "added"
                      },
                      {
                        "line": "    dirname = os.path.dirname(filename)\n",
                        "lineNumber": 95,
                        "lineChange": "added"
                      },
                      {
                        "line": "    loader = jinja2.FileSystemLoader(dirname)\n",
                        "lineNumber": 96,
                        "lineChange": "added"
                      },
                      {
                        "line": "    relpath = os.path.relpath(filename, dirname)\n",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return _render(relpath, loader, variables, undefined)\n",
                        "lineNumber": 98,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "def _render(template_name, loader, variables, undefined):\n",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "    env = jinja2.Environment(loader=loader, undefined=undefined)\n",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "    env.filters['from_json'] = from_json\n",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "    template = env.get_template(template_name)\n",
                        "lineNumber": 104,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/DLR-SC/F2x/commit/21b2428d40ad7f175e0793f70ac95fce21625dbf?diff=split#diff-ceda1d234bd64d566a692f5100c054d886a6ca98639083af063a2d37f53e3ab2L-1",
                    "lines": [
                      {
                        "line": "    args = argp.parse_args(argv)\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    start = time.time()\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "    for mod, filename, filepath, suffix in templates:\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "        log.debug(u\"* Loading template from {0}...\".format(filename))\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "        template_loader = jinja2.FileSystemLoader(template_path)\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "        template_env = jinja2.Environment(loader=template_loader, extensions=['jinja2.ext.do'])\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return args\n",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "            template = template_loader.load(template_env, filename)\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "        except IOError:\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "            with open(filepath, 'r') as template_file:\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "                template = template_env.from_string(template_file.read())\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "        loaded_templates.append((template, suffix))\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 11,
                "cwe": [
                  "CWE-96"
                ]
              }
            },
            {
              "id": "python/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "XSS",
                  "Security",
                  "SourceResourceAccess",
                  "SourceDatabase",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/HyperGAN/HyperGAN/commit/1a57b783a54852bb12252ea6bcf8cfbbda7df7c8?diff=split#diff-e22532c211806d798625b985d418a75db69b4e458f95b7b1c600c3a41a33e532L-1",
                    "lines": [
                      {
                        "line": "return gws.sample_base64('x.png', x)\n",
                        "lineNumber": 228,
                        "lineChange": "removed"
                      },
                      {
                        "line": "gws.sample_base64('x.png', x)\n",
                        "lineNumber": 228,
                        "lineChange": "added"
                      },
                      {
                        "line": "return send_file('x.png', mimetype='image/png')\n",
                        "lineNumber": 229,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/botfront/rasa-for-botfront/commit/bff1ca8f7a35aaaf8981e4be6d96ef6537c028fb?diff=split#diff-dee32f6aa11f210e9b1170787e9f7f116024ffadbeb16058950854a439e7aed2L-1",
                    "lines": [
                      {
                        "line": "self.agent.tracker_store.save(tracker)\n",
                        "lineNumber": 327,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return json.dumps(tracker.current_state(should_include_events=True))\n",
                        "lineNumber": 328,
                        "lineChange": "removed"
                      },
                      {
                        "line": "agent().tracker_store.save(tracker)\n",
                        "lineNumber": 294,
                        "lineChange": "added"
                      },
                      {
                        "line": "return jsonify(tracker.current_state(should_include_events=True))\n",
                        "lineNumber": 295,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/botfront/rasa-for-botfront/commit/bff1ca8f7a35aaaf8981e4be6d96ef6537c028fb?diff=split#diff-dee32f6aa11f210e9b1170787e9f7f116024ffadbeb16058950854a439e7aed2L-1",
                    "lines": [
                      {
                        "line": "return json.dumps(state)\n",
                        "lineNumber": 309,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return jsonify(state)\n",
                        "lineNumber": 278,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 50,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "python/NoHardcodedPasswords/test",
              "name": "NoHardcodedPasswords/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "NoHardcodedPasswords",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/mspreitz/MobileSandbox/commit/da3b1805cb2e01c82d4b378aec004bfced7b1d55?diff=split#diff-09b135b0d5f0b0ad094858769db9b537a805fe47de372187ae2fc4b96f05d30dL-1",
                    "lines": [
                      {
                        "line": "conn = psycopg2.connect(dbname='ms_db', user='ms_user', password=\"2HmUKLvf\")\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "conn = psycopg2.connect(dbname=misc_config.SQL_DB, user=misc_config.SQL_USER, password=misc_config.SQL_PASSWORD)\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Mirantis/kqueen/commit/8d3fb4d8130b5abff6212f20b0034e03c4438d69?diff=split#diff-6a14ec1b3250d541ae942ee17c1a7d14dd843407c914649113212972c0a95c07L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    # DEMO LOGIN\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    app.config.update(dict(\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        USERNAME='admin',\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        PASSWORD='default',\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        SECRET_KEY='secret'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    ))\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    loaded = app.config.from_pyfile('config.py', silent=True)\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if not loaded:\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "        logging.warning('Config file kqueen.cfg could not be loaded.')\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/video-annotation-project/video-annotation-tool/commit/7e5a129f1c0d09024c218bf22108e2f2c09871a8?diff=split#diff-4ad690c280f2ca6c899cbbf7dd0cb9f619287ebb25fdd2ff5ccfdaa456b819deL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "# DO NOT PUSH PASSWORD \n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "#DB_PASSWORD = os.getenv(\"DB_PASSWORD\")\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DB_PASSWORD = '2yG5$A#LkJkvnWh*'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DB_PASSWORD = os.getenv(\"DB_PASSWORD\")\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 50,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "python/OR",
              "name": "OR",
              "shortDescription": {
                "text": "Open Redirect"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nAn open redirect attack takes place when a web application redirects the user to an unauthorized and untrusted site. In general, URL redirection refers to the ability of a website or application to redirect users to another site. This is often a benign and useful feature. For example, if a resource has moved to a new location, URL redirection can transfer the user to that location rather than displaying an error message.\nHowever, this ability can be exploited through social engineering, tricking the user into believing they are accessing one site when, in reality, they are being redirected to a dangerous site, such as a phishing site. Once there, the user may be further tricked into entering credentials or personally identifiable information (PII), believing they are still within the original, trusted domain. Attackers can then use these credentials to gain unauthorized access or leverage the user's PII for sale or ransom.\n\n## Best practices for prevention\n* When developing a site or web app, consider implementing a disclaimer page to remind users that they are leaving a secure site.\n* Adopt a zero-trust approach in which all input is treated with suspicion.\n* Validate all input against deny-lists to ensure it does not contain code to redirect the user. This method is good but inherently incomplete.\n* Be aware of all sources of untrusted input being sent to the server that could be used to redirect the user, such as cookies, URL components, filenames, query results, request headers, and more.\n* In particular, be aware of potential API calls that could send input indirectly to redirect the user.\n* To protect end users, use a firewall to block known malicious sites, train users to recognize basic signs of a phishing attack, and ensure that all network endpoints are patched with the most current updates.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "OR",
                  "Security",
                  "SourceNonServer",
                  "SourceResourceAccess",
                  "SourceDatabase",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/inveniosoftware/invenio/commit/20edecca740c36a80b65678fce66c5d453281dd0?diff=split#diff-a435900ae3a37c2eccbd13c640c6802a13ca9c983c1ed743588001f1cb878fa0L-1",
                    "lines": [
                      {
                        "line": "def get_session_next_url(remote_app):\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return session.get(\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"%s_%s\" % (token_session_key(remote_app), \"next_url\")\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "def set_session_next_url(remote_app, url):\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "    session[\"%s_%s\" % (token_session_key(remote_app), \"next_url\")] = \\\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        url\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "def token_session_key(remote_app):\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Generate a session key used to store the token for a remote app.\"\"\"\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return '%s_%s' % (cfg['OAUTHCLIENT_SESSION_KEY_PREFIX'], remote_app)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "def response_token_setter(remote, resp):\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Extract token from response and set it for the user.\"\"\"\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if resp is None:\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise OAuthRejectedRequestError(\"User rejected request.\", remote, resp)\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if 'access_token' in resp:\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return oauth2_token_setter(remote, resp)\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        elif 'oauth_token' in resp and 'oauth_token_secret' in resp:\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return oauth1_token_setter(remote, resp)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        elif 'error' in resp:\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Only OAuth2 specifies how to send error messages\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            raise OAuthClientError(\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "                'Authorization with remote service failed.', remote, resp,\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            )\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    raise OAuthResponseError(\"Bad OAuth authorized request\", remote, resp)\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "def oauth1_token_setter(remote, resp, token_type='', extra_data=None):\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Set an OAuth1 token.\"\"\"\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return token_setter(\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        remote,\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp['oauth_token'],\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        secret=resp['oauth_token_secret'],\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        extra_data=extra_data,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        token_type=token_type,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "def oauth2_token_setter(remote, resp, token_type='', extra_data=None):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Set an OAuth2 token.\"\"\"\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return token_setter(\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        remote,\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp['access_token'],\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        secret='',\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        token_type=token_type,\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        extra_data=extra_data,\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "def token_setter(remote, token, secret='', token_type='', extra_data=None):\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Set token for user.\"\"\"\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    session[token_session_key(remote.name)] = (token, secret)\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Save token if used is authenticated\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if current_user.is_authenticated():\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        uid = current_user.get_id()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        cid = remote.consumer_key\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Check for already existing token\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "        t = RemoteToken.get(uid, cid, token_type=token_type)\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if t:\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "            t.update_token(token, secret)\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            t = RemoteToken.create(\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "                uid, cid, token, secret,\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "                token_type=token_type, extra_data=extra_data\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "            )\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return t\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return None\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "def token_getter(remote, token=''):\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Retrieve OAuth access token.\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Ued by flask-oauthlib to get the access token when making requests.\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param token: Type of token to get. Data passed from ``oauth.request()`` to\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "         identify which token to retrieve.\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "    session_key = token_session_key(remote.name)\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if session_key not in session and current_user.is_authenticated():\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Fetch key from token store if user is authenticated, and the key\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # isn't already cached in the session.\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "        remote_token = RemoteToken.get(\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "            current_user.get_id(),\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "            remote.consumer_key,\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            token_type=token,\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "        )\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if remote_token is None:\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Store token and secret in session\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        session[session_key] = remote_token.token()\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return session.get(session_key, None)\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "def token_delete(remote, token=''):\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Remove OAuth access tokens from session.\"\"\"\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "    session_key = token_session_key(remote.name)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return session.pop(session_key, None)\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "#\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Error handling decorators\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "#\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "def oauth_error_handler(f):\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Decorator to handle exceptions.\"\"\"\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @wraps(f)\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def inner(*args, **kwargs):\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # OAuthErrors should not happen, so they are not caught here. Hence\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # they will result in a 500 Internal Server Error which is what we\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # are interested in.\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return f(*args, **kwargs)\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except OAuthClientError as e:\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "            current_app.logger.warning(e.message, exc_info=True)\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return oauth2_handle_error(\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "                e.remote, e.response, e.code, e.uri, e.description\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            )\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except OAuthRejectedRequestError:\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            flash(\"You rejected the authentication request.\")\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect('/')\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return inner\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "#\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Handlers\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "#\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "@oauth_error_handler\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "def authorized_default_handler(resp, remote, *args, **kwargs):\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Store access token in session.\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Default authorized handler.\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    response_token_setter(remote, resp)\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return redirect('/')\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "@oauth_error_handler\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "def authorized_signup_handler(resp, remote, *args, **kwargs):\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Handle sign-in/up functionality.\"\"\"\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Remove any previously stored auto register session key\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "    session.pop(token_session_key(remote.name) + '_autoregister', None)\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Store token in session\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # ----------------------\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Set token in session - token object only returned if\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # current_user.is_autenticated().\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "    token = response_token_setter(remote, resp)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "    handlers = signup_handlers[remote.name]\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Sign-in/up user\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # ---------------\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not current_user.is_authenticated():\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "        account_info = handlers['info'](resp)\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "        user = oauth_get_user(\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "            remote.consumer_key,\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "            account_info=account_info,\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "            access_token=token_getter(remote)[0],\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "        )\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if user is None:\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Auto sign-up if user not found\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "            user = oauth_register(account_info)\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if user is None:\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # Auto sign-up requires extra information\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "                session[\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    token_session_key(remote.name) + '_autoregister'] = True\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "                session[token_session_key(remote.name) +\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        \"_account_info\"] = account_info\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return redirect(url_for(\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    \".signup\",\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    remote_app=remote.name,\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    next=request.args.get('next', '/')\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ))\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Authenticate user\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not oauth_authenticate(remote.consumer_key, user,\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  require_existing_link=False,\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  remember=cfg['OAUTHCLIENT_REMOTE_APPS']\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  [remote.name].get('remember', False)):\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return current_app.login_manager.unauthorized()\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Link account\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # ------------\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Need to store token in database instead of only the session when\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # called first time.\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "        token = response_token_setter(remote, resp)\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Setup account\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # -------------\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not token.remote_account.extra_data and \\\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "       remote.name in signup_handlers:\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "        handlers['setup'](token)\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Redirect to next\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if request.args.get('next', None):\n",
                        "lineNumber": 238,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return redirect(request.args.get('next'))\n",
                        "lineNumber": 239,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    next_url = get_session_next_url(remote.name)\n",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if next_url:\n",
                        "lineNumber": 249,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return redirect(next_url)\n",
                        "lineNumber": 250,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/flask-admin/flask-admin/commit/4ec6473a720fc01a35ee4314cd41540f842fbf09?diff=split#diff-81459308eab181f696582f7b64e36fb5616b7106eeeae2d2284535d632106789L-1",
                    "lines": [
                      {
                        "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit, get_redirect_target\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "from flask.ext.admin.tools import rec_getattr\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "from flask.ext.admin._backwards import ObsoleteAttr\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "from flask.ext.admin._compat import iteritems, as_unicode\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "from .helpers import prettify_name, get_mdict_item_or_list\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "from .ajax import AjaxModelLoader\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from collections import OrderedDict\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "except ImportError:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Bare-bones OrderedDict implementation for Python2.6 compatibility\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    class OrderedDict(dict):\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __init__(self, *args, **kwargs):\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "            dict.__init__(self, *args, **kwargs)\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.ordered_keys = []\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __setitem__(self, key, value):\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.ordered_keys.append(key)\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            dict.__setitem__(self, key, value)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __iter__(self):\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return (k for k in self.ordered_keys)\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def iteritems(self):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return ((k, self[k]) for k in self.ordered_keys)\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def items(self):\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return list(self.iteritems())\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "class BaseModelView(BaseView, ActionsMixin):\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Base model view.\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        This view does not make any assumptions on how models are stored or managed, but expects the following:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "            1. The provided model is an object\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            2. The model contains properties\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "            3. Each model contains an attribute which uniquely identifies it (i.e. a primary key for a database model)\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "            4. It is possible to retrieve a list of sorted models with pagination applied from a data source\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "            5. You can get one model by its identifier from the data source\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Essentially, if you want to support a new data store, all you have to do is:\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "            1. Derive from the `BaseModelView` class\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "            2. Implement various data-related methods (`get_list`, `get_one`, `create_model`, etc)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            3. Implement automatic form generation from the model representation (`scaffold_form`)\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Permissions\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_create = True\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model creation allowed\"\"\"\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_edit = True\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model editing allowed\"\"\"\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_delete = True\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model deletion allowed\"\"\"\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Templates\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    list_template = 'admin/model/list.html'\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default list view template\"\"\"\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    edit_template = 'admin/model/edit.html'\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default edit template\"\"\"\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_template = 'admin/model/create.html'\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default create template\"\"\"\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Customizations\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_list = ObsoleteAttr('column_list', 'list_columns', None)\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the model field names for the list view.\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If set to `None`, will get them from the model.\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_list = ('name', 'last_name', 'email')\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_exclude_list = ObsoleteAttr('column_exclude_list',\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       'excluded_list_columns', None)\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of excluded list column names.\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_exclude_list = ('last_name', 'email')\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_formatters = ObsoleteAttr('column_formatters', 'list_formatters', dict())\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of list view column formatters.\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example, if you want to show price multiplied by\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        two, you can do something like this::\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_formatters = dict(price=lambda v, c, m, p: m.price*2)\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "        or using Jinja2 `macro` in template::\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.model.template import macro\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_formatters = dict(price=macro('render_price'))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # in template\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {% macro render_price(model, column) %}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {{ model.price * 2 }}\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {% endmacro %}\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "        The Callback function has the prototype::\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def formatter(view, context, model, name):\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `view` is current administrative view\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `context` is instance of jinja2.runtime.Context\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `model` is model instance\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `name` is property name\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "                pass\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_type_formatters = ObsoleteAttr('column_type_formatters', 'list_type_formatters', None)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of value type formatters to be used in the list view.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "        By default, two types are formatted:\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "        1. ``None`` will be displayed as an empty string\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        2. ``bool`` will be displayed as a checkmark if it is ``True``\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you don't like the default behavior and don't want any type formatters\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        applied, just override this property with an empty dictionary::\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_type_formatters = dict()\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you want to display `NULL` instead of an empty string, you can do\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "        something like this::\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.model import typefmt\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "            MY_DEFAULT_FORMATTERS = dict(typefmt.BASE_FORMATTERS)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "            MY_DEFAULT_FORMATTERS.update({\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    type(None): typefmt.null_formatter\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_type_formatters = MY_DEFAULT_FORMATTERS\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Type formatters have lower priority than list column formatters.\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        The callback function has following prototype::\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def type_formatter(view, value):\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `view` is current administrative view\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `value` value to format\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "                pass\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_labels = ObsoleteAttr('column_labels', 'rename_columns', None)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary where key is column name and value is string to display.\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_labels = dict(name='Name', last_name='Last Name')\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_descriptions = None\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary where key is column name and\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "        value is description for `list view` column or add/edit form field.\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_descriptions = dict(\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    full_name='First and Last name'\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                )\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_sortable_list = ObsoleteAttr('column_sortable_list',\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        'sortable_columns',\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        None)\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the sortable columns for the list view.\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If set to `None`, will get them from the model.\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', 'last_name')\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you want to explicitly specify field/column to be used while\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sorting, you can use a tuple::\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', ('user', 'user.username'))\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "        When using SQLAlchemy models, model attributes can be used instead\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of strings::\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', ('user', User.username))\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_default_sort = None\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Default sort column if no sorting is applied.\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_default_sort = 'user'\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "        You can use tuple to control ascending descending order. In following example, items\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        will be sorted in descending order::\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_default_sort = ('user', True)\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_searchable_list = ObsoleteAttr('column_searchable_list',\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          'searchable_columns',\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          None)\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "        A collection of the searchable columns. It is assumed that only\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "        text-only fields are searchable, but it is up to the model\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "        implementation to decide.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_searchable_list = ('name', 'email')\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_choices = None\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Map choices to columns in list view\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_choices = {\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'my_column': [\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        ('db_value', 'display_value'),\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ]\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_filters = None\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the column filters.\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Can contain either field names or instances of :class:`~flask.ext.admin.model.filters.BaseFilter` classes.\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_filters = ('user', 'email')\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "    named_filter_urls = False\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Set to True to use human-readable names for filters in URL parameters.\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "        False by default so as to be robust across translations.\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Changing this parameter will break any existing URLs.\n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Override unique_filter_label() if you want to change the default format\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of filter urls. This parameter only controls the default method.\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_display_pk = ObsoleteAttr('column_display_pk',\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     'list_display_pk',\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     False)\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Controls if the primary key should be displayed in the list view.\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form = None\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Form class. Override if you want to use custom form for your model.\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Will completely disable form scaffolding functionality.\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyForm(Form):\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "                name = TextField('Name')\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form = MyForm\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_base_class = BaseForm\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Base form class. Will be used by form scaffolding function when creating model form.\n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Useful if you want to have custom contructor or override some fields.\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyBaseForm(Form):\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "                def do_something(self):\n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    pass\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_base_class = MyBaseForm\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_args = None\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form field arguments. Refer to WTForms documentation for\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "        list of possible options.\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_args = dict(\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    name=dict(label='First Name', validators=[required()])\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "                )\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_columns = None\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the model field names for the form. If set to `None` will\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "        get them from the model.\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_columns = ('name', 'email')\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_excluded_columns = ObsoleteAttr('form_excluded_columns',\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         'excluded_form_columns',\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         None)\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of excluded form field names.\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_excluded_columns = ('last_name', 'email')\n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_overrides = None\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form column overrides.\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_overrides = dict(name=wtf.FileField)\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_widget_args = None\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form widget rendering arguments.\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Use this to customize how widget is rendered without using custom template.\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_widget_args = {\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'description': {\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'rows': 10,\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'style': 'color: black'\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    }\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_extra_fields = None\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of additional fields.\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_extra_fields = {\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    password: PasswordField('Password')\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "        You can control order of form fields using ``form_columns`` property. For example::\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_columns = ('name', 'email', 'password', 'secret')\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_extra_fields = {\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    password: PasswordField('Password')\n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "        In this case, password field will be put between email and secret fields that are autogenerated.\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_ajax_refs = None\n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Use AJAX for foreign key model loading.\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Should contain dictionary, where key is field name and value is either a dictionary which\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "        configures AJAX lookups or backend-specific `AjaxModelLoader` class instance.\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example, it can look like::\n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_ajax_refs = {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'user': {\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'fields': ('first_name', 'last_name', 'email')\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'page_size': 10\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    }\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Or with SQLAlchemy backend like this::\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_ajax_refs = {\n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'user': QueryAjaxModelLoader('user', db.session, User, fields=['email'], page_size=10)\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you need custom loading functionality, you can implement your custom loading behavior\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in your `AjaxModelLoader` class.\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_rules = None\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "        List of rendering rules for model creation form.\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "        This property changed default form rendering behavior and makes possible to rearrange order\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of rendered fields, add some text between fields, group them, etc. If not set, will use\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "        default Flask-Admin form rendering logic.\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Here's simple example which illustrates how to use::\n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.form import rules\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(ModelView):\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_rules = [\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # Define field set with header text and four fields\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.FieldSet(('first_name', 'last_name', 'email', 'phone'), 'User'),\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # ... and it is just shortcut for:\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Header('User'),\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Field('first_name'),\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Field('last_name'),\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # ...\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # It is possible to create custom rule blocks:\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    MyBlock('Hello World'),\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # It is possible to call macros from current context\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Macro('my_macro', foobar='baz')\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ]\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_edit_rules = None\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Customized rules for the edit form. Override `form_rules` if present.\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_create_rules = None\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Customized rules for the create form. Override `form_rules` if present.\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Actions\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "    action_disallowed_list = ObsoleteAttr('action_disallowed_list',\n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          'disallowed_actions',\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          [])\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Set of disallowed action names. For example, if you want to disable\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "        mass model deletion, do something like this:\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "                action_disallowed_list = ['delete']\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Various settings\n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "    page_size = 20\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Default page size for pagination.\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, model,\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 name=None, category=None, endpoint=None, url=None):\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Constructor.\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model class\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View name. If not provided, will use the model class name\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param category:\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View category\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param endpoint:\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Base endpoint. If not provided, will use the model name + 'view'.\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "                For example if model name was 'User', endpoint will be\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "                'userview'\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param url:\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Base URL. If not provided, will use endpoint as a URL.\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param debug:\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Enable debugging mode. Won't catch exceptions on model\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "                save failures.\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # If name not provided, it is model name\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if name is None:\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "            name = '%s' % self._prettify_class_name(model.__name__)\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # If endpoint not provided, it is model name + 'view'\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if endpoint is None:\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "            endpoint = ('%sview' % model.__name__).lower()\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "        super(BaseModelView, self).__init__(name, category, endpoint, url)\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.model = model\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Actions\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.init_actions()\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Scaffolding\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._refresh_cache()\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Caching\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _refresh_cache(self):\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Refresh various cached variables.\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # List view\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._list_columns = self.get_list_columns()\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._sortable_columns = self.get_sortable_columns()\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Labels\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_labels is None:\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_labels = {}\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Forms\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._form_ajax_refs = self._process_ajax_references()\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_widget_args is None:\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.form_widget_args = {}\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._create_form_class = self.get_create_form()\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._edit_form_class = self.get_edit_form()\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Search\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._search_supported = self.init_search()\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Choices\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_choices:\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._column_choices_map = dict([\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "                (column, dict(choices))\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "                for column, choices in self.column_choices.items()\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ])\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_choices = self._column_choices_map = dict()\n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Filters\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._filters = self.get_filters()\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Type formatters\n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_type_formatters is None:\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_type_formatters = dict(typefmt.BASE_FORMATTERS)\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_descriptions is None:\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_descriptions = dict()\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self._filters:\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._flattened_filters_by_group = OrderedDict()\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for flt in self._filters:\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if flt.name not in self._flattened_filters_by_group:\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    self._flattened_filters_by_group[flt.name] = []\n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "                group = self._flattened_filters_by_group[flt.name]\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "                group.append({'name': flt.name,\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'label': self.unique_filter_label(flt),\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'operation': flt.operation(),\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'options': flt.get_options(self) or None,\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'data_type': flt.data_type})\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._flattened_filters_by_group = None\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Form rendering rules\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_create_rules:\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_create_rules = rules.RuleSet(self, self.form_create_rules)\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_create_rules = None\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_edit_rules:\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_edit_rules = rules.RuleSet(self, self.form_edit_rules)\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_edit_rules = None\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_rules:\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "            form_rules = rules.RuleSet(self, self.form_rules)\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not self._form_create_rules:\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self._form_create_rules = form_rules\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not self._form_edit_rules:\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self._form_edit_rules = form_rules\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Primary key\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_pk_value(self, model):\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return PK value from a model object.\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # List view\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_list_columns(self):\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return list of the model field names. Must be implemented in\n",
                        "lineNumber": 622,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the child class.\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Expected return format is list of tuples with field name and\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "            display text. For example::\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ['name', 'first_name', 'last_name']\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 629,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_list_columns method')\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 631,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_column_name(self, field):\n",
                        "lineNumber": 632,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 633,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a human-readable column name.\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param field:\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model field name.\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_labels and field in self.column_labels:\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.column_labels[field]\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._prettify_name(field)\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 643,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list_columns(self):\n",
                        "lineNumber": 644,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 645,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a list of the model field names. If `column_list` was\n",
                        "lineNumber": 646,
                        "lineChange": "none"
                      },
                      {
                        "line": "            set, returns it. Otherwise calls `scaffold_list_columns`\n",
                        "lineNumber": 647,
                        "lineChange": "none"
                      },
                      {
                        "line": "            to generate the list from the model.\n",
                        "lineNumber": 648,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 649,
                        "lineChange": "none"
                      },
                      {
                        "line": "        columns = self.column_list\n",
                        "lineNumber": 650,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 651,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if columns is None:\n",
                        "lineNumber": 652,
                        "lineChange": "none"
                      },
                      {
                        "line": "            columns = self.scaffold_list_columns()\n",
                        "lineNumber": 653,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 654,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Filter excluded columns\n",
                        "lineNumber": 655,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.column_exclude_list:\n",
                        "lineNumber": 656,
                        "lineChange": "none"
                      },
                      {
                        "line": "                columns = [c for c in columns if c not in self.column_exclude_list]\n",
                        "lineNumber": 657,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 658,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return [(c, self.get_column_name(c)) for c in columns]\n",
                        "lineNumber": 659,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 660,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_sortable_columns(self):\n",
                        "lineNumber": 661,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 662,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns dictionary of sortable columns. Must be implemented in\n",
                        "lineNumber": 663,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the child class.\n",
                        "lineNumber": 664,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 665,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Expected return format is a dictionary, where keys are field names and\n",
                        "lineNumber": 666,
                        "lineChange": "none"
                      },
                      {
                        "line": "            values are property names.\n",
                        "lineNumber": 667,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 668,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_sortable_columns method')\n",
                        "lineNumber": 669,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 670,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_sortable_columns(self):\n",
                        "lineNumber": 671,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 672,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a dictionary of the sortable columns. Key is a model\n",
                        "lineNumber": 673,
                        "lineChange": "none"
                      },
                      {
                        "line": "            field name and value is sort column (for example - attribute).\n",
                        "lineNumber": 674,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 675,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If `column_sortable_list` is set, will use it. Otherwise, will call\n",
                        "lineNumber": 676,
                        "lineChange": "none"
                      },
                      {
                        "line": "            `scaffold_sortable_columns` to get them from the model.\n",
                        "lineNumber": 677,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 678,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_sortable_list is None:\n",
                        "lineNumber": 679,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.scaffold_sortable_columns() or dict()\n",
                        "lineNumber": 680,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 681,
                        "lineChange": "none"
                      },
                      {
                        "line": "            result = dict()\n",
                        "lineNumber": 682,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 683,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for c in self.column_sortable_list:\n",
                        "lineNumber": 684,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if isinstance(c, tuple):\n",
                        "lineNumber": 685,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[c[0]] = c[1]\n",
                        "lineNumber": 686,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 687,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[c] = c\n",
                        "lineNumber": 688,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 689,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return result\n",
                        "lineNumber": 690,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 691,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def init_search(self):\n",
                        "lineNumber": 692,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 693,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Initialize search. If data provider does not support search,\n",
                        "lineNumber": 694,
                        "lineChange": "none"
                      },
                      {
                        "line": "            `init_search` will return `False`.\n",
                        "lineNumber": 695,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 696,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return False\n",
                        "lineNumber": 697,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 698,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_filters(self, name):\n",
                        "lineNumber": 699,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 700,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Generate filter object for the given name\n",
                        "lineNumber": 701,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 702,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 703,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Name of the field\n",
                        "lineNumber": 704,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 705,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return None\n",
                        "lineNumber": 706,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 707,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_valid_filter(self, filter):\n",
                        "lineNumber": 708,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 709,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Verify that the provided filter object is valid.\n",
                        "lineNumber": 710,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 711,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override in model backend implementation to verify if\n",
                        "lineNumber": 712,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the provided filter type is allowed.\n",
                        "lineNumber": 713,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 714,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filter:\n",
                        "lineNumber": 715,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Filter object to verify.\n",
                        "lineNumber": 716,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 717,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return isinstance(filter, filters.BaseFilter)\n",
                        "lineNumber": 718,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 719,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_filters(self):\n",
                        "lineNumber": 720,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 721,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a list of filter objects.\n",
                        "lineNumber": 722,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 723,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If your model backend implementation does not support filters,\n",
                        "lineNumber": 724,
                        "lineChange": "none"
                      },
                      {
                        "line": "            override this method and return `None`.\n",
                        "lineNumber": 725,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 726,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_filters:\n",
                        "lineNumber": 727,
                        "lineChange": "none"
                      },
                      {
                        "line": "            collection = []\n",
                        "lineNumber": 728,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 729,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for n in self.column_filters:\n",
                        "lineNumber": 730,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if self.is_valid_filter(n):\n",
                        "lineNumber": 731,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    collection.append(n)\n",
                        "lineNumber": 732,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 733,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flt = self.scaffold_filters(n)\n",
                        "lineNumber": 734,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    if flt:\n",
                        "lineNumber": 735,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        collection.extend(flt)\n",
                        "lineNumber": 736,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    else:\n",
                        "lineNumber": 737,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        raise Exception('Unsupported filter type %s' % n)\n",
                        "lineNumber": 738,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return collection\n",
                        "lineNumber": 739,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 740,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 741,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 742,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_form(self):\n",
                        "lineNumber": 743,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 744,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create `form.BaseForm` inherited class from the model. Must be\n",
                        "lineNumber": 745,
                        "lineChange": "none"
                      },
                      {
                        "line": "            implemented in the child class.\n",
                        "lineNumber": 746,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 747,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_form method')\n",
                        "lineNumber": 748,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 749,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_form(self):\n",
                        "lineNumber": 750,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 751,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Get form class.\n",
                        "lineNumber": 752,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 753,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If ``self.form`` is set, will return it and will call\n",
                        "lineNumber": 754,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ``self.scaffold_form`` otherwise.\n",
                        "lineNumber": 755,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 756,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 757,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 758,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form is not None:\n",
                        "lineNumber": 759,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.form\n",
                        "lineNumber": 760,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 761,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.scaffold_form()\n",
                        "lineNumber": 762,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 763,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_create_form(self):\n",
                        "lineNumber": 764,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 765,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create form class for model creation view.\n",
                        "lineNumber": 766,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 767,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 768,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 769,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.get_form()\n",
                        "lineNumber": 770,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 771,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_edit_form(self):\n",
                        "lineNumber": 772,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 773,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create form class for model editing view.\n",
                        "lineNumber": 774,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 775,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 776,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 777,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.get_form()\n",
                        "lineNumber": 778,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 779,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_form(self, obj=None):\n",
                        "lineNumber": 780,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 781,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Instantiate model creation form and return it.\n",
                        "lineNumber": 782,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 783,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement custom behavior.\n",
                        "lineNumber": 784,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 785,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._create_form_class(get_form_data(), obj=obj)\n",
                        "lineNumber": 786,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 787,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def edit_form(self, obj=None):\n",
                        "lineNumber": 788,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 789,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Instantiate model editing form and return it.\n",
                        "lineNumber": 790,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 791,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement custom behavior.\n",
                        "lineNumber": 792,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 793,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._edit_form_class(get_form_data(), obj=obj)\n",
                        "lineNumber": 794,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 795,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Helpers\n",
                        "lineNumber": 796,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_sortable(self, name):\n",
                        "lineNumber": 797,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 798,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Verify if column is sortable.\n",
                        "lineNumber": 799,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 800,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 801,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Column name.\n",
                        "lineNumber": 802,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 803,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name in self._sortable_columns\n",
                        "lineNumber": 804,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 805,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_column_by_idx(self, idx):\n",
                        "lineNumber": 806,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 807,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return column index by\n",
                        "lineNumber": 808,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 809,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if idx is None or idx < 0 or idx >= len(self._list_columns):\n",
                        "lineNumber": 810,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 811,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 812,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._list_columns[idx]\n",
                        "lineNumber": 813,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 814,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_default_order(self):\n",
                        "lineNumber": 815,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 816,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return default sort order\n",
                        "lineNumber": 817,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 818,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_default_sort:\n",
                        "lineNumber": 819,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if isinstance(self.column_default_sort, tuple):\n",
                        "lineNumber": 820,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return self.column_default_sort\n",
                        "lineNumber": 821,
                        "lineChange": "none"
                      },
                      {
                        "line": "            else:\n",
                        "lineNumber": 822,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return self.column_default_sort, False\n",
                        "lineNumber": 823,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 824,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return None\n",
                        "lineNumber": 825,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 826,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Database-related API\n",
                        "lineNumber": 827,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list(self, page, sort_field, sort_desc, search, filters):\n",
                        "lineNumber": 828,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 829,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a paginated and sorted list of models from the data source.\n",
                        "lineNumber": 830,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 831,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 832,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 833,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param page:\n",
                        "lineNumber": 834,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Page number, 0 based. Can be set to None if it is first page.\n",
                        "lineNumber": 835,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_field:\n",
                        "lineNumber": 836,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Sort column name or None.\n",
                        "lineNumber": 837,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_desc:\n",
                        "lineNumber": 838,
                        "lineChange": "none"
                      },
                      {
                        "line": "                If set to True, sorting is in descending order.\n",
                        "lineNumber": 839,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param search:\n",
                        "lineNumber": 840,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Search query\n",
                        "lineNumber": 841,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filters:\n",
                        "lineNumber": 842,
                        "lineChange": "none"
                      },
                      {
                        "line": "                List of filter tuples. First value in a tuple is a search\n",
                        "lineNumber": 843,
                        "lineChange": "none"
                      },
                      {
                        "line": "                index, second value is a search value.\n",
                        "lineNumber": 844,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 845,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement get_list method')\n",
                        "lineNumber": 846,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 847,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_one(self, id):\n",
                        "lineNumber": 848,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 849,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return one model by its id.\n",
                        "lineNumber": 850,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 851,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 852,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 853,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param id:\n",
                        "lineNumber": 854,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model id\n",
                        "lineNumber": 855,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 856,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement get_one method')\n",
                        "lineNumber": 857,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 858,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Model event handlers\n",
                        "lineNumber": 859,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def on_model_change(self, form, model, is_created):\n",
                        "lineNumber": 860,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 861,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions after a model is created or updated.\n",
                        "lineNumber": 862,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 863,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from create_model and update_model in the same transaction\n",
                        "lineNumber": 864,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (if it has any meaning for a store backend).\n",
                        "lineNumber": 865,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 866,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default does nothing.\n",
                        "lineNumber": 867,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 868,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 869,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form used to create/update model\n",
                        "lineNumber": 870,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 871,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model that will be created/updated\n",
                        "lineNumber": 872,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param is_created:\n",
                        "lineNumber": 873,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Will be set to True if model was created and to False if edited\n",
                        "lineNumber": 874,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 875,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 876,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 877,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _on_model_change(self, form, model, is_created):\n",
                        "lineNumber": 878,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 879,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Compatibility helper.\n",
                        "lineNumber": 880,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 881,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 882,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.on_model_change(form, model, is_created)\n",
                        "lineNumber": 883,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except TypeError:\n",
                        "lineNumber": 884,
                        "lineChange": "none"
                      },
                      {
                        "line": "            msg = ('%s.on_model_change() now accepts third ' +\n",
                        "lineNumber": 885,
                        "lineChange": "none"
                      },
                      {
                        "line": "                   'parameter is_created. Please update your code') % self.model\n",
                        "lineNumber": 886,
                        "lineChange": "none"
                      },
                      {
                        "line": "            warnings.warn(msg)\n",
                        "lineNumber": 887,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 888,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.on_model_change(form, model)\n",
                        "lineNumber": 889,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 890,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def after_model_change(self, form, model, is_created):\n",
                        "lineNumber": 891,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 892,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions after a model was created or updated and\n",
                        "lineNumber": 893,
                        "lineChange": "none"
                      },
                      {
                        "line": "            committed to the database.\n",
                        "lineNumber": 894,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 895,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from create_model after successful database commit.\n",
                        "lineNumber": 896,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 897,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default does nothing.\n",
                        "lineNumber": 898,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 899,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 900,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form used to create/update model\n",
                        "lineNumber": 901,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 902,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model that was created/updated\n",
                        "lineNumber": 903,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param is_created:\n",
                        "lineNumber": 904,
                        "lineChange": "none"
                      },
                      {
                        "line": "                True if model was created, False if model was updated\n",
                        "lineNumber": 905,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 906,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 907,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 908,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def on_model_delete(self, model):\n",
                        "lineNumber": 909,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 910,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions before a model is deleted.\n",
                        "lineNumber": 911,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 912,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from delete_model in the same transaction\n",
                        "lineNumber": 913,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (if it has any meaning for a store backend).\n",
                        "lineNumber": 914,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 915,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default do nothing.\n",
                        "lineNumber": 916,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 917,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 918,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 919,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_model(self, form):\n",
                        "lineNumber": 920,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 921,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create model from the form.\n",
                        "lineNumber": 922,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 923,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 924,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 925,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 926,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 927,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 928,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form instance\n",
                        "lineNumber": 929,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 930,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 931,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 932,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def update_model(self, form, model):\n",
                        "lineNumber": 933,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 934,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Update model from the form.\n",
                        "lineNumber": 935,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 936,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 937,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 938,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 939,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 940,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 941,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form instance\n",
                        "lineNumber": 942,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 943,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 944,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 945,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 946,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 947,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def delete_model(self, model):\n",
                        "lineNumber": 948,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 949,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Delete model.\n",
                        "lineNumber": 950,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 951,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 952,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 953,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 954,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 955,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 956,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 957,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 958,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 959,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 960,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Various helpers\n",
                        "lineNumber": 961,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _prettify_name(self, name):\n",
                        "lineNumber": 962,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 963,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Prettify pythonic variable name.\n",
                        "lineNumber": 964,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 965,
                        "lineChange": "none"
                      },
                      {
                        "line": "            For example, 'hello_world' will be converted to 'Hello World'\n",
                        "lineNumber": 966,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 967,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 968,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Name to prettify\n",
                        "lineNumber": 969,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 970,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return prettify_name(name)\n",
                        "lineNumber": 971,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 972,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_empty_list_message(self):\n",
                        "lineNumber": 973,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return gettext('There are no items in the table.')\n",
                        "lineNumber": 974,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 975,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def unique_filter_label(self, flt):\n",
                        "lineNumber": 976,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 977,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Given a filter `flt`, return a unique name for that filter in\n",
                        "lineNumber": 978,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this view.\n",
                        "lineNumber": 979,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 980,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default, returns a numeric index or a human-readable filter name\n",
                        "lineNumber": 981,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 982,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Does not include the `flt[n]_` portion of the filter name.\n",
                        "lineNumber": 983,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 984,
                        "lineChange": "none"
                      },
                      {
                        "line": "            To use custom names, override this function, eg\n",
                        "lineNumber": 985,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def unique_filter_label(self, flt):\n",
                        "lineNumber": 986,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return flt.name + flt.__class__.__name__\n",
                        "lineNumber": 987,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 988,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Be aware that if you override this method, the default URL format\n",
                        "lineNumber": 989,
                        "lineChange": "none"
                      },
                      {
                        "line": "            will no longer work.\n",
                        "lineNumber": 990,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 991,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.named_filter_urls:\n",
                        "lineNumber": 992,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return re.sub('\\W', '_', u'{name}_{operation}'.format(name=flt.name, operation=flt.operation())).lower()\n",
                        "lineNumber": 993,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 994,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return str(self._filters.index(flt))\n",
                        "lineNumber": 995,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 996,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_filter_args(self):\n",
                        "lineNumber": 997,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 998,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Retrieve and parse filter parameters from the request URL.\n",
                        "lineNumber": 999,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1000,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a list of 2-tuples in the format [(idx, value), ...],\n",
                        "lineNumber": 1001,
                        "lineChange": "none"
                      },
                      {
                        "line": "            where idx is the index into the list returned by get_filters().\n",
                        "lineNumber": 1002,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1003,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override this method to provide your own URL filter format.\n",
                        "lineNumber": 1004,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1005,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self._filters:\n",
                        "lineNumber": 1006,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 1007,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1008,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filter_idx_by_label = dict((self.unique_filter_label(flt), i) for i, flt in enumerate(self._filters))\n",
                        "lineNumber": 1009,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 1010,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sfilters = []\n",
                        "lineNumber": 1011,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1012,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for n in request.args:\n",
                        "lineNumber": 1013,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not n.startswith('flt'):\n",
                        "lineNumber": 1014,
                        "lineChange": "none"
                      },
                      {
                        "line": "                continue\n",
                        "lineNumber": 1015,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if '_' not in n:\n",
                        "lineNumber": 1016,
                        "lineChange": "none"
                      },
                      {
                        "line": "                continue\n",
                        "lineNumber": 1017,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1018,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pos, filter_label = n[3:].split('_', 1)\n",
                        "lineNumber": 1019,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1020,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # If pos not specified, just add incrementally to the list.\n",
                        "lineNumber": 1021,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pos = int(pos) if pos else len(sfilters)\n",
                        "lineNumber": 1022,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1023,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try:\n",
                        "lineNumber": 1024,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # See if filter is numeric\n",
                        "lineNumber": 1025,
                        "lineChange": "none"
                      },
                      {
                        "line": "                idx = int(filter_label)\n",
                        "lineNumber": 1026,
                        "lineChange": "none"
                      },
                      {
                        "line": "            except ValueError:\n",
                        "lineNumber": 1027,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # If non-numeric, look filter up by name\n",
                        "lineNumber": 1028,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try:\n",
                        "lineNumber": 1029,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    idx = filter_idx_by_label[filter_label]\n",
                        "lineNumber": 1030,
                        "lineChange": "none"
                      },
                      {
                        "line": "                except KeyError:\n",
                        "lineNumber": 1031,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # No matching filter name\n",
                        "lineNumber": 1032,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    continue\n",
                        "lineNumber": 1033,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1034,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if 0 <= idx < len(self._filters):\n",
                        "lineNumber": 1035,
                        "lineChange": "none"
                      },
                      {
                        "line": "                flt = self._filters[idx]\n",
                        "lineNumber": 1036,
                        "lineChange": "none"
                      },
                      {
                        "line": "                value = request.args[n]\n",
                        "lineNumber": 1037,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if flt.validate(value):\n",
                        "lineNumber": 1038,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    sfilters.append((pos, (idx, flt.clean(value))))\n",
                        "lineNumber": 1039,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1040,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return [v[1] for v in sorted(sfilters, key=lambda n: n[0])]\n",
                        "lineNumber": 1041,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1042,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_listing_args(self):\n",
                        "lineNumber": 1043,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1044,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return generic list view arguments from query string.\n",
                        "lineNumber": 1045,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1046,
                        "lineChange": "none"
                      },
                      {
                        "line": "        page = request.args.get('page', 0, type=int)\n",
                        "lineNumber": 1047,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort = request.args.get('sort', None, type=int)\n",
                        "lineNumber": 1048,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort_desc = request.args.get('desc', None, type=int)\n",
                        "lineNumber": 1049,
                        "lineChange": "none"
                      },
                      {
                        "line": "        search = request.args.get('search', None)\n",
                        "lineNumber": 1050,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return page, sort, sort_desc, search\n",
                        "lineNumber": 1051,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1052,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_url(self, view=None, page=None, sort=None, sort_desc=None,\n",
                        "lineNumber": 1053,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 search=None, filters=None):\n",
                        "lineNumber": 1054,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1055,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Generate page URL with current page, sort column and\n",
                        "lineNumber": 1056,
                        "lineChange": "none"
                      },
                      {
                        "line": "            other parameters.\n",
                        "lineNumber": 1057,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1058,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param view:\n",
                        "lineNumber": 1059,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View name\n",
                        "lineNumber": 1060,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param page:\n",
                        "lineNumber": 1061,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Page number\n",
                        "lineNumber": 1062,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort:\n",
                        "lineNumber": 1063,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Sort column index\n",
                        "lineNumber": 1064,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_desc:\n",
                        "lineNumber": 1065,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Use descending sorting order\n",
                        "lineNumber": 1066,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param search:\n",
                        "lineNumber": 1067,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Search query\n",
                        "lineNumber": 1068,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filters:\n",
                        "lineNumber": 1069,
                        "lineChange": "none"
                      },
                      {
                        "line": "                List of active filters\n",
                        "lineNumber": 1070,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1071,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not search:\n",
                        "lineNumber": 1072,
                        "lineChange": "none"
                      },
                      {
                        "line": "            search = None\n",
                        "lineNumber": 1073,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1074,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not page:\n",
                        "lineNumber": 1075,
                        "lineChange": "none"
                      },
                      {
                        "line": "            page = None\n",
                        "lineNumber": 1076,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1077,
                        "lineChange": "none"
                      },
                      {
                        "line": "        kwargs = dict(page=page, sort=sort, desc=sort_desc, search=search)\n",
                        "lineNumber": 1078,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1079,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if filters:\n",
                        "lineNumber": 1080,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for flt in filters:\n",
                        "lineNumber": 1081,
                        "lineChange": "none"
                      },
                      {
                        "line": "                key = 'flt_%s' % self.unique_filter_label(self._filters[flt[0]])\n",
                        "lineNumber": 1082,
                        "lineChange": "none"
                      },
                      {
                        "line": "                kwargs[key] = flt[1]\n",
                        "lineNumber": 1083,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1084,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return url_for(view, **kwargs)\n",
                        "lineNumber": 1085,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 1086,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_action_allowed(self, name):\n",
                        "lineNumber": 1087,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1088,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override this method to allow or disallow actions based\n",
                        "lineNumber": 1089,
                        "lineChange": "none"
                      },
                      {
                        "line": "            on some condition.\n",
                        "lineNumber": 1090,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1091,
                        "lineChange": "none"
                      },
                      {
                        "line": "            The default implementation only checks if the particular action\n",
                        "lineNumber": 1092,
                        "lineChange": "none"
                      },
                      {
                        "line": "            is not in `action_disallowed_list`.\n",
                        "lineNumber": 1093,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1094,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name not in self.action_disallowed_list\n",
                        "lineNumber": 1095,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1096,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_field_value(self, model, name):\n",
                        "lineNumber": 1097,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1098,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Get unformatted field value from the model\n",
                        "lineNumber": 1099,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1100,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return rec_getattr(model, name)\n",
                        "lineNumber": 1101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def filters_by_label(self):\n",
                        "lineNumber": 1103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1104,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Flattened dict of all filters, indexed by their label.\n",
                        "lineNumber": 1105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1106,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return dict((self.unique_filter_label(flt), flt) for flt in self._filters)\n",
                        "lineNumber": 1107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @contextfunction\n",
                        "lineNumber": 1109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list_value(self, context, model, name):\n",
                        "lineNumber": 1110,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns the value to be displayed in the list view\n",
                        "lineNumber": 1112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1113,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param context:\n",
                        "lineNumber": 1114,
                        "lineChange": "none"
                      },
                      {
                        "line": "                :py:class:`jinja2.runtime.Context`\n",
                        "lineNumber": 1115,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 1116,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 1117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 1118,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Field name\n",
                        "lineNumber": 1119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        column_fmt = self.column_formatters.get(name)\n",
                        "lineNumber": 1121,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if column_fmt is not None:\n",
                        "lineNumber": 1122,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return column_fmt(self, context, model, name)\n",
                        "lineNumber": 1123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1124,
                        "lineChange": "none"
                      },
                      {
                        "line": "            value = self._get_field_value(model, name)\n",
                        "lineNumber": 1125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        choices_map = self._column_choices_map.get(name, {})\n",
                        "lineNumber": 1127,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if choices_map:\n",
                        "lineNumber": 1128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return choices_map.get(value) or value\n",
                        "lineNumber": 1129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        type_fmt = self.column_type_formatters.get(type(value))\n",
                        "lineNumber": 1131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if type_fmt is not None:\n",
                        "lineNumber": 1132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            value = type_fmt(self, value)\n",
                        "lineNumber": 1133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return value\n",
                        "lineNumber": 1135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1136,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # AJAX references\n",
                        "lineNumber": 1137,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _process_ajax_references(self):\n",
                        "lineNumber": 1138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1139,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Process `form_ajax_refs` and generate model loaders that\n",
                        "lineNumber": 1140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            will be used by the `ajax_lookup` view.\n",
                        "lineNumber": 1141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        result = {}\n",
                        "lineNumber": 1143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1144,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_ajax_refs:\n",
                        "lineNumber": 1145,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for name, options in iteritems(self.form_ajax_refs):\n",
                        "lineNumber": 1146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if isinstance(options, dict):\n",
                        "lineNumber": 1147,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[name] = self._create_ajax_loader(name, options)\n",
                        "lineNumber": 1148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                elif isinstance(options, AjaxModelLoader):\n",
                        "lineNumber": 1149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[name] = options\n",
                        "lineNumber": 1150,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    raise ValueError('%s.form_ajax_refs can not handle %s types' % (self, type(options)))\n",
                        "lineNumber": 1152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1153,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return result\n",
                        "lineNumber": 1154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _create_ajax_loader(self, name, options):\n",
                        "lineNumber": 1156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Model backend will override this to implement AJAX model loading.\n",
                        "lineNumber": 1158,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1159,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 1160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Views\n",
                        "lineNumber": 1162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/')\n",
                        "lineNumber": 1163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def index_view(self):\n",
                        "lineNumber": 1164,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1165,
                        "lineChange": "none"
                      },
                      {
                        "line": "            List view\n",
                        "lineNumber": 1166,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Grab parameters from URL\n",
                        "lineNumber": 1168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        page, sort_idx, sort_desc, search = self._get_listing_args()\n",
                        "lineNumber": 1169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filters = self.get_filter_args()\n",
                        "lineNumber": 1170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Map column index to column name\n",
                        "lineNumber": 1172,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort_column = self._get_column_by_idx(sort_idx)\n",
                        "lineNumber": 1173,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if sort_column is not None:\n",
                        "lineNumber": 1174,
                        "lineChange": "none"
                      },
                      {
                        "line": "            sort_column = sort_column[0]\n",
                        "lineNumber": 1175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1176,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Get count and data\n",
                        "lineNumber": 1177,
                        "lineChange": "none"
                      },
                      {
                        "line": "        count, data = self.get_list(page, sort_column, sort_desc,\n",
                        "lineNumber": 1178,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                    search, filters)\n",
                        "lineNumber": 1179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1180,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Calculate number of pages\n",
                        "lineNumber": 1181,
                        "lineChange": "none"
                      },
                      {
                        "line": "        num_pages = count // self.page_size\n",
                        "lineNumber": 1182,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if count % self.page_size != 0:\n",
                        "lineNumber": 1183,
                        "lineChange": "none"
                      },
                      {
                        "line": "            num_pages += 1\n",
                        "lineNumber": 1184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1185,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Various URL generation helpers\n",
                        "lineNumber": 1186,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def pager_url(p):\n",
                        "lineNumber": 1187,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Do not add page number if it is first page\n",
                        "lineNumber": 1188,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if p == 0:\n",
                        "lineNumber": 1189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                p = None\n",
                        "lineNumber": 1190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._get_url('.index_view', p, sort_idx, sort_desc,\n",
                        "lineNumber": 1192,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 search, filters)\n",
                        "lineNumber": 1193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1194,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def sort_url(column, invert=False):\n",
                        "lineNumber": 1195,
                        "lineChange": "none"
                      },
                      {
                        "line": "            desc = None\n",
                        "lineNumber": 1196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1197,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if invert and not sort_desc:\n",
                        "lineNumber": 1198,
                        "lineChange": "none"
                      },
                      {
                        "line": "                desc = 1\n",
                        "lineNumber": 1199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1200,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._get_url('.index_view', page, column, desc,\n",
                        "lineNumber": 1201,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 search, filters)\n",
                        "lineNumber": 1202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1203,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Actions\n",
                        "lineNumber": 1204,
                        "lineChange": "none"
                      },
                      {
                        "line": "        actions, actions_confirmation = self.get_actions_list()\n",
                        "lineNumber": 1205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1206,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.list_template,\n",
                        "lineNumber": 1207,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               data=data,\n",
                        "lineNumber": 1208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # List\n",
                        "lineNumber": 1209,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               list_columns=self._list_columns,\n",
                        "lineNumber": 1210,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sortable_columns=self._sortable_columns,\n",
                        "lineNumber": 1211,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Stuff\n",
                        "lineNumber": 1212,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               enumerate=enumerate,\n",
                        "lineNumber": 1213,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               get_pk_value=self.get_pk_value,\n",
                        "lineNumber": 1214,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               get_value=self.get_list_value,\n",
                        "lineNumber": 1215,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               return_url=self._get_url('.index_view',\n",
                        "lineNumber": 1216,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        page,\n",
                        "lineNumber": 1217,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        sort_idx,\n",
                        "lineNumber": 1218,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        sort_desc,\n",
                        "lineNumber": 1219,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        search,\n",
                        "lineNumber": 1220,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        filters),\n",
                        "lineNumber": 1221,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Pagination\n",
                        "lineNumber": 1222,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               count=count,\n",
                        "lineNumber": 1223,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               pager_url=pager_url,\n",
                        "lineNumber": 1224,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               num_pages=num_pages,\n",
                        "lineNumber": 1225,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               page=page,\n",
                        "lineNumber": 1226,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Sorting\n",
                        "lineNumber": 1227,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_column=sort_idx,\n",
                        "lineNumber": 1228,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_desc=sort_desc,\n",
                        "lineNumber": 1229,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_url=sort_url,\n",
                        "lineNumber": 1230,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Search\n",
                        "lineNumber": 1231,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               search_supported=self._search_supported,\n",
                        "lineNumber": 1232,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               clear_search_url=self._get_url('.index_view',\n",
                        "lineNumber": 1233,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              None,\n",
                        "lineNumber": 1234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              sort_idx,\n",
                        "lineNumber": 1235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              sort_desc),\n",
                        "lineNumber": 1236,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               search=search,\n",
                        "lineNumber": 1237,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Filters\n",
                        "lineNumber": 1238,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               filters=self._filters,\n",
                        "lineNumber": 1239,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               filter_groups=self._flattened_filters_by_group,\n",
                        "lineNumber": 1240,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               active_filters=filters,\n",
                        "lineNumber": 1241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1242,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Actions\n",
                        "lineNumber": 1243,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               actions=actions,\n",
                        "lineNumber": 1244,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               actions_confirmation=actions_confirmation)\n",
                        "lineNumber": 1245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1246,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/new/', methods=('GET', 'POST'))\n",
                        "lineNumber": 1247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_view(self):\n",
                        "lineNumber": 1248,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create model view\n",
                        "lineNumber": 1250,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1251,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1253,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_create:\n",
                        "lineNumber": 1254,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1255,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1256,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form = self.create_form()\n",
                        "lineNumber": 1257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1258,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if validate_form_on_submit(form):\n",
                        "lineNumber": 1259,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.create_model(form):\n",
                        "lineNumber": 1260,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if '_add_another' in request.form:\n",
                        "lineNumber": 1261,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flash(gettext('Model was successfully created.'))\n",
                        "lineNumber": 1262,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(url_for('.create_view', url=return_url))\n",
                        "lineNumber": 1263,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1264,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(return_url)\n",
                        "lineNumber": 1265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1266,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                        "lineNumber": 1267,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             form_rules=self._form_create_rules)\n",
                        "lineNumber": 1268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1269,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.create_template,\n",
                        "lineNumber": 1270,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form=form,\n",
                        "lineNumber": 1271,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form_opts=form_opts,\n",
                        "lineNumber": 1272,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           return_url=return_url)\n",
                        "lineNumber": 1273,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1274,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/edit/', methods=('GET', 'POST'))\n",
                        "lineNumber": 1275,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def edit_view(self):\n",
                        "lineNumber": 1276,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1277,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Edit model view\n",
                        "lineNumber": 1278,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1279,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1280,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1281,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_edit:\n",
                        "lineNumber": 1282,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1284,
                        "lineChange": "none"
                      },
                      {
                        "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                        "lineNumber": 1285,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if id is None:\n",
                        "lineNumber": 1286,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1288,
                        "lineChange": "none"
                      },
                      {
                        "line": "        model = self.get_one(id)\n",
                        "lineNumber": 1289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1290,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if model is None:\n",
                        "lineNumber": 1291,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1292,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1293,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form = self.edit_form(obj=model)\n",
                        "lineNumber": 1294,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1295,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if validate_form_on_submit(form):\n",
                        "lineNumber": 1296,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.update_model(form, model):\n",
                        "lineNumber": 1297,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if '_continue_editing' in request.form:\n",
                        "lineNumber": 1298,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flash(gettext('Model was successfully saved.'))\n",
                        "lineNumber": 1299,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(request.url)\n",
                        "lineNumber": 1300,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(return_url)\n",
                        "lineNumber": 1302,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1303,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                        "lineNumber": 1304,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             form_rules=self._form_create_rules)\n",
                        "lineNumber": 1305,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1306,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.edit_template,\n",
                        "lineNumber": 1307,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           model=model,\n",
                        "lineNumber": 1308,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form=form,\n",
                        "lineNumber": 1309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form_opts=form_opts,\n",
                        "lineNumber": 1310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           return_url=return_url)\n",
                        "lineNumber": 1311,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/delete/', methods=('POST',))\n",
                        "lineNumber": 1313,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def delete_view(self):\n",
                        "lineNumber": 1314,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1315,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Delete model view. Only POST method is allowed.\n",
                        "lineNumber": 1316,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1317,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1318,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return_url = get_redirect_target() or url_for('.index_view')\n",
                        "lineNumber": 1318,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1319,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # TODO: Use post\n",
                        "lineNumber": 1320,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_delete:\n",
                        "lineNumber": 1321,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1322,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1323,
                        "lineChange": "none"
                      },
                      {
                        "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                        "lineNumber": 1324,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if id is None:\n",
                        "lineNumber": 1325,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1326,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1327,
                        "lineChange": "none"
                      },
                      {
                        "line": "        model = self.get_one(id)\n",
                        "lineNumber": 1328,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1329,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if model:\n",
                        "lineNumber": 1330,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.delete_model(model)\n",
                        "lineNumber": 1331,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1332,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return redirect(return_url)\n",
                        "lineNumber": 1333,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/flask-admin/flask-admin/commit/4ec6473a720fc01a35ee4314cd41540f842fbf09?diff=split#diff-81459308eab181f696582f7b64e36fb5616b7106eeeae2d2284535d632106789L-1",
                    "lines": [
                      {
                        "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit, get_redirect_target\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "from flask.ext.admin.tools import rec_getattr\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "from flask.ext.admin._backwards import ObsoleteAttr\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "from flask.ext.admin._compat import iteritems, as_unicode\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "from .helpers import prettify_name, get_mdict_item_or_list\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "from .ajax import AjaxModelLoader\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from collections import OrderedDict\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "except ImportError:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Bare-bones OrderedDict implementation for Python2.6 compatibility\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    class OrderedDict(dict):\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __init__(self, *args, **kwargs):\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "            dict.__init__(self, *args, **kwargs)\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.ordered_keys = []\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __setitem__(self, key, value):\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.ordered_keys.append(key)\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            dict.__setitem__(self, key, value)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __iter__(self):\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return (k for k in self.ordered_keys)\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def iteritems(self):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return ((k, self[k]) for k in self.ordered_keys)\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def items(self):\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return list(self.iteritems())\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "class BaseModelView(BaseView, ActionsMixin):\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Base model view.\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        This view does not make any assumptions on how models are stored or managed, but expects the following:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "            1. The provided model is an object\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            2. The model contains properties\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "            3. Each model contains an attribute which uniquely identifies it (i.e. a primary key for a database model)\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "            4. It is possible to retrieve a list of sorted models with pagination applied from a data source\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "            5. You can get one model by its identifier from the data source\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Essentially, if you want to support a new data store, all you have to do is:\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "            1. Derive from the `BaseModelView` class\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "            2. Implement various data-related methods (`get_list`, `get_one`, `create_model`, etc)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            3. Implement automatic form generation from the model representation (`scaffold_form`)\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Permissions\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_create = True\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model creation allowed\"\"\"\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_edit = True\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model editing allowed\"\"\"\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_delete = True\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model deletion allowed\"\"\"\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Templates\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    list_template = 'admin/model/list.html'\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default list view template\"\"\"\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    edit_template = 'admin/model/edit.html'\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default edit template\"\"\"\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_template = 'admin/model/create.html'\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default create template\"\"\"\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Customizations\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_list = ObsoleteAttr('column_list', 'list_columns', None)\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the model field names for the list view.\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If set to `None`, will get them from the model.\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_list = ('name', 'last_name', 'email')\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_exclude_list = ObsoleteAttr('column_exclude_list',\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       'excluded_list_columns', None)\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of excluded list column names.\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_exclude_list = ('last_name', 'email')\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_formatters = ObsoleteAttr('column_formatters', 'list_formatters', dict())\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of list view column formatters.\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example, if you want to show price multiplied by\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        two, you can do something like this::\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_formatters = dict(price=lambda v, c, m, p: m.price*2)\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "        or using Jinja2 `macro` in template::\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.model.template import macro\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_formatters = dict(price=macro('render_price'))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # in template\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {% macro render_price(model, column) %}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {{ model.price * 2 }}\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {% endmacro %}\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "        The Callback function has the prototype::\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def formatter(view, context, model, name):\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `view` is current administrative view\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `context` is instance of jinja2.runtime.Context\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `model` is model instance\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `name` is property name\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "                pass\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_type_formatters = ObsoleteAttr('column_type_formatters', 'list_type_formatters', None)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of value type formatters to be used in the list view.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "        By default, two types are formatted:\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "        1. ``None`` will be displayed as an empty string\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        2. ``bool`` will be displayed as a checkmark if it is ``True``\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you don't like the default behavior and don't want any type formatters\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        applied, just override this property with an empty dictionary::\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_type_formatters = dict()\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you want to display `NULL` instead of an empty string, you can do\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "        something like this::\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.model import typefmt\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "            MY_DEFAULT_FORMATTERS = dict(typefmt.BASE_FORMATTERS)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "            MY_DEFAULT_FORMATTERS.update({\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    type(None): typefmt.null_formatter\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_type_formatters = MY_DEFAULT_FORMATTERS\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Type formatters have lower priority than list column formatters.\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        The callback function has following prototype::\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def type_formatter(view, value):\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `view` is current administrative view\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `value` value to format\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "                pass\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_labels = ObsoleteAttr('column_labels', 'rename_columns', None)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary where key is column name and value is string to display.\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_labels = dict(name='Name', last_name='Last Name')\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_descriptions = None\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary where key is column name and\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "        value is description for `list view` column or add/edit form field.\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_descriptions = dict(\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    full_name='First and Last name'\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                )\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_sortable_list = ObsoleteAttr('column_sortable_list',\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        'sortable_columns',\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        None)\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the sortable columns for the list view.\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If set to `None`, will get them from the model.\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', 'last_name')\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you want to explicitly specify field/column to be used while\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sorting, you can use a tuple::\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', ('user', 'user.username'))\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "        When using SQLAlchemy models, model attributes can be used instead\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of strings::\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', ('user', User.username))\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_default_sort = None\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Default sort column if no sorting is applied.\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_default_sort = 'user'\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "        You can use tuple to control ascending descending order. In following example, items\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        will be sorted in descending order::\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_default_sort = ('user', True)\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_searchable_list = ObsoleteAttr('column_searchable_list',\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          'searchable_columns',\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          None)\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "        A collection of the searchable columns. It is assumed that only\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "        text-only fields are searchable, but it is up to the model\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "        implementation to decide.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_searchable_list = ('name', 'email')\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_choices = None\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Map choices to columns in list view\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_choices = {\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'my_column': [\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        ('db_value', 'display_value'),\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ]\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_filters = None\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the column filters.\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Can contain either field names or instances of :class:`~flask.ext.admin.model.filters.BaseFilter` classes.\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_filters = ('user', 'email')\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "    named_filter_urls = False\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Set to True to use human-readable names for filters in URL parameters.\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "        False by default so as to be robust across translations.\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Changing this parameter will break any existing URLs.\n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Override unique_filter_label() if you want to change the default format\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of filter urls. This parameter only controls the default method.\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_display_pk = ObsoleteAttr('column_display_pk',\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     'list_display_pk',\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     False)\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Controls if the primary key should be displayed in the list view.\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form = None\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Form class. Override if you want to use custom form for your model.\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Will completely disable form scaffolding functionality.\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyForm(Form):\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "                name = TextField('Name')\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form = MyForm\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_base_class = BaseForm\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Base form class. Will be used by form scaffolding function when creating model form.\n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Useful if you want to have custom contructor or override some fields.\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyBaseForm(Form):\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "                def do_something(self):\n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    pass\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_base_class = MyBaseForm\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_args = None\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form field arguments. Refer to WTForms documentation for\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "        list of possible options.\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_args = dict(\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    name=dict(label='First Name', validators=[required()])\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "                )\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_columns = None\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the model field names for the form. If set to `None` will\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "        get them from the model.\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_columns = ('name', 'email')\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_excluded_columns = ObsoleteAttr('form_excluded_columns',\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         'excluded_form_columns',\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         None)\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of excluded form field names.\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_excluded_columns = ('last_name', 'email')\n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_overrides = None\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form column overrides.\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_overrides = dict(name=wtf.FileField)\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_widget_args = None\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form widget rendering arguments.\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Use this to customize how widget is rendered without using custom template.\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_widget_args = {\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'description': {\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'rows': 10,\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'style': 'color: black'\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    }\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_extra_fields = None\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of additional fields.\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_extra_fields = {\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    password: PasswordField('Password')\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "        You can control order of form fields using ``form_columns`` property. For example::\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_columns = ('name', 'email', 'password', 'secret')\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_extra_fields = {\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    password: PasswordField('Password')\n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "        In this case, password field will be put between email and secret fields that are autogenerated.\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_ajax_refs = None\n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Use AJAX for foreign key model loading.\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Should contain dictionary, where key is field name and value is either a dictionary which\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "        configures AJAX lookups or backend-specific `AjaxModelLoader` class instance.\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example, it can look like::\n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_ajax_refs = {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'user': {\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'fields': ('first_name', 'last_name', 'email')\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'page_size': 10\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    }\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Or with SQLAlchemy backend like this::\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_ajax_refs = {\n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'user': QueryAjaxModelLoader('user', db.session, User, fields=['email'], page_size=10)\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you need custom loading functionality, you can implement your custom loading behavior\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in your `AjaxModelLoader` class.\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_rules = None\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "        List of rendering rules for model creation form.\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "        This property changed default form rendering behavior and makes possible to rearrange order\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of rendered fields, add some text between fields, group them, etc. If not set, will use\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "        default Flask-Admin form rendering logic.\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Here's simple example which illustrates how to use::\n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.form import rules\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(ModelView):\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_rules = [\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # Define field set with header text and four fields\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.FieldSet(('first_name', 'last_name', 'email', 'phone'), 'User'),\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # ... and it is just shortcut for:\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Header('User'),\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Field('first_name'),\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Field('last_name'),\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # ...\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # It is possible to create custom rule blocks:\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    MyBlock('Hello World'),\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # It is possible to call macros from current context\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Macro('my_macro', foobar='baz')\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ]\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_edit_rules = None\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Customized rules for the edit form. Override `form_rules` if present.\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_create_rules = None\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Customized rules for the create form. Override `form_rules` if present.\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Actions\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "    action_disallowed_list = ObsoleteAttr('action_disallowed_list',\n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          'disallowed_actions',\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          [])\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Set of disallowed action names. For example, if you want to disable\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "        mass model deletion, do something like this:\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "                action_disallowed_list = ['delete']\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Various settings\n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "    page_size = 20\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Default page size for pagination.\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, model,\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 name=None, category=None, endpoint=None, url=None):\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Constructor.\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model class\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View name. If not provided, will use the model class name\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param category:\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View category\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param endpoint:\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Base endpoint. If not provided, will use the model name + 'view'.\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "                For example if model name was 'User', endpoint will be\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "                'userview'\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param url:\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Base URL. If not provided, will use endpoint as a URL.\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param debug:\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Enable debugging mode. Won't catch exceptions on model\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "                save failures.\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # If name not provided, it is model name\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if name is None:\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "            name = '%s' % self._prettify_class_name(model.__name__)\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # If endpoint not provided, it is model name + 'view'\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if endpoint is None:\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "            endpoint = ('%sview' % model.__name__).lower()\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "        super(BaseModelView, self).__init__(name, category, endpoint, url)\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.model = model\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Actions\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.init_actions()\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Scaffolding\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._refresh_cache()\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Caching\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _refresh_cache(self):\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Refresh various cached variables.\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # List view\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._list_columns = self.get_list_columns()\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._sortable_columns = self.get_sortable_columns()\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Labels\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_labels is None:\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_labels = {}\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Forms\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._form_ajax_refs = self._process_ajax_references()\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_widget_args is None:\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.form_widget_args = {}\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._create_form_class = self.get_create_form()\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._edit_form_class = self.get_edit_form()\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Search\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._search_supported = self.init_search()\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Choices\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_choices:\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._column_choices_map = dict([\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "                (column, dict(choices))\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "                for column, choices in self.column_choices.items()\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ])\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_choices = self._column_choices_map = dict()\n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Filters\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._filters = self.get_filters()\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Type formatters\n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_type_formatters is None:\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_type_formatters = dict(typefmt.BASE_FORMATTERS)\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_descriptions is None:\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_descriptions = dict()\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self._filters:\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._flattened_filters_by_group = OrderedDict()\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for flt in self._filters:\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if flt.name not in self._flattened_filters_by_group:\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    self._flattened_filters_by_group[flt.name] = []\n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "                group = self._flattened_filters_by_group[flt.name]\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "                group.append({'name': flt.name,\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'label': self.unique_filter_label(flt),\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'operation': flt.operation(),\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'options': flt.get_options(self) or None,\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'data_type': flt.data_type})\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._flattened_filters_by_group = None\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Form rendering rules\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_create_rules:\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_create_rules = rules.RuleSet(self, self.form_create_rules)\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_create_rules = None\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_edit_rules:\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_edit_rules = rules.RuleSet(self, self.form_edit_rules)\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_edit_rules = None\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_rules:\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "            form_rules = rules.RuleSet(self, self.form_rules)\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not self._form_create_rules:\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self._form_create_rules = form_rules\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not self._form_edit_rules:\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self._form_edit_rules = form_rules\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Primary key\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_pk_value(self, model):\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return PK value from a model object.\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # List view\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_list_columns(self):\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return list of the model field names. Must be implemented in\n",
                        "lineNumber": 622,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the child class.\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Expected return format is list of tuples with field name and\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "            display text. For example::\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ['name', 'first_name', 'last_name']\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 629,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_list_columns method')\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 631,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_column_name(self, field):\n",
                        "lineNumber": 632,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 633,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a human-readable column name.\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param field:\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model field name.\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_labels and field in self.column_labels:\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.column_labels[field]\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._prettify_name(field)\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 643,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list_columns(self):\n",
                        "lineNumber": 644,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 645,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a list of the model field names. If `column_list` was\n",
                        "lineNumber": 646,
                        "lineChange": "none"
                      },
                      {
                        "line": "            set, returns it. Otherwise calls `scaffold_list_columns`\n",
                        "lineNumber": 647,
                        "lineChange": "none"
                      },
                      {
                        "line": "            to generate the list from the model.\n",
                        "lineNumber": 648,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 649,
                        "lineChange": "none"
                      },
                      {
                        "line": "        columns = self.column_list\n",
                        "lineNumber": 650,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 651,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if columns is None:\n",
                        "lineNumber": 652,
                        "lineChange": "none"
                      },
                      {
                        "line": "            columns = self.scaffold_list_columns()\n",
                        "lineNumber": 653,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 654,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Filter excluded columns\n",
                        "lineNumber": 655,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.column_exclude_list:\n",
                        "lineNumber": 656,
                        "lineChange": "none"
                      },
                      {
                        "line": "                columns = [c for c in columns if c not in self.column_exclude_list]\n",
                        "lineNumber": 657,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 658,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return [(c, self.get_column_name(c)) for c in columns]\n",
                        "lineNumber": 659,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 660,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_sortable_columns(self):\n",
                        "lineNumber": 661,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 662,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns dictionary of sortable columns. Must be implemented in\n",
                        "lineNumber": 663,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the child class.\n",
                        "lineNumber": 664,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 665,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Expected return format is a dictionary, where keys are field names and\n",
                        "lineNumber": 666,
                        "lineChange": "none"
                      },
                      {
                        "line": "            values are property names.\n",
                        "lineNumber": 667,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 668,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_sortable_columns method')\n",
                        "lineNumber": 669,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 670,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_sortable_columns(self):\n",
                        "lineNumber": 671,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 672,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a dictionary of the sortable columns. Key is a model\n",
                        "lineNumber": 673,
                        "lineChange": "none"
                      },
                      {
                        "line": "            field name and value is sort column (for example - attribute).\n",
                        "lineNumber": 674,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 675,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If `column_sortable_list` is set, will use it. Otherwise, will call\n",
                        "lineNumber": 676,
                        "lineChange": "none"
                      },
                      {
                        "line": "            `scaffold_sortable_columns` to get them from the model.\n",
                        "lineNumber": 677,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 678,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_sortable_list is None:\n",
                        "lineNumber": 679,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.scaffold_sortable_columns() or dict()\n",
                        "lineNumber": 680,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 681,
                        "lineChange": "none"
                      },
                      {
                        "line": "            result = dict()\n",
                        "lineNumber": 682,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 683,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for c in self.column_sortable_list:\n",
                        "lineNumber": 684,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if isinstance(c, tuple):\n",
                        "lineNumber": 685,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[c[0]] = c[1]\n",
                        "lineNumber": 686,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 687,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[c] = c\n",
                        "lineNumber": 688,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 689,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return result\n",
                        "lineNumber": 690,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 691,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def init_search(self):\n",
                        "lineNumber": 692,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 693,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Initialize search. If data provider does not support search,\n",
                        "lineNumber": 694,
                        "lineChange": "none"
                      },
                      {
                        "line": "            `init_search` will return `False`.\n",
                        "lineNumber": 695,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 696,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return False\n",
                        "lineNumber": 697,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 698,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_filters(self, name):\n",
                        "lineNumber": 699,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 700,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Generate filter object for the given name\n",
                        "lineNumber": 701,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 702,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 703,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Name of the field\n",
                        "lineNumber": 704,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 705,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return None\n",
                        "lineNumber": 706,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 707,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_valid_filter(self, filter):\n",
                        "lineNumber": 708,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 709,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Verify that the provided filter object is valid.\n",
                        "lineNumber": 710,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 711,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override in model backend implementation to verify if\n",
                        "lineNumber": 712,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the provided filter type is allowed.\n",
                        "lineNumber": 713,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 714,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filter:\n",
                        "lineNumber": 715,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Filter object to verify.\n",
                        "lineNumber": 716,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 717,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return isinstance(filter, filters.BaseFilter)\n",
                        "lineNumber": 718,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 719,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_filters(self):\n",
                        "lineNumber": 720,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 721,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a list of filter objects.\n",
                        "lineNumber": 722,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 723,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If your model backend implementation does not support filters,\n",
                        "lineNumber": 724,
                        "lineChange": "none"
                      },
                      {
                        "line": "            override this method and return `None`.\n",
                        "lineNumber": 725,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 726,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_filters:\n",
                        "lineNumber": 727,
                        "lineChange": "none"
                      },
                      {
                        "line": "            collection = []\n",
                        "lineNumber": 728,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 729,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for n in self.column_filters:\n",
                        "lineNumber": 730,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if self.is_valid_filter(n):\n",
                        "lineNumber": 731,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    collection.append(n)\n",
                        "lineNumber": 732,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 733,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flt = self.scaffold_filters(n)\n",
                        "lineNumber": 734,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    if flt:\n",
                        "lineNumber": 735,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        collection.extend(flt)\n",
                        "lineNumber": 736,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    else:\n",
                        "lineNumber": 737,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        raise Exception('Unsupported filter type %s' % n)\n",
                        "lineNumber": 738,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return collection\n",
                        "lineNumber": 739,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 740,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 741,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 742,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_form(self):\n",
                        "lineNumber": 743,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 744,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create `form.BaseForm` inherited class from the model. Must be\n",
                        "lineNumber": 745,
                        "lineChange": "none"
                      },
                      {
                        "line": "            implemented in the child class.\n",
                        "lineNumber": 746,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 747,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_form method')\n",
                        "lineNumber": 748,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 749,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_form(self):\n",
                        "lineNumber": 750,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 751,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Get form class.\n",
                        "lineNumber": 752,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 753,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If ``self.form`` is set, will return it and will call\n",
                        "lineNumber": 754,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ``self.scaffold_form`` otherwise.\n",
                        "lineNumber": 755,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 756,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 757,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 758,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form is not None:\n",
                        "lineNumber": 759,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.form\n",
                        "lineNumber": 760,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 761,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.scaffold_form()\n",
                        "lineNumber": 762,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 763,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_create_form(self):\n",
                        "lineNumber": 764,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 765,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create form class for model creation view.\n",
                        "lineNumber": 766,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 767,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 768,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 769,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.get_form()\n",
                        "lineNumber": 770,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 771,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_edit_form(self):\n",
                        "lineNumber": 772,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 773,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create form class for model editing view.\n",
                        "lineNumber": 774,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 775,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 776,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 777,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.get_form()\n",
                        "lineNumber": 778,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 779,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_form(self, obj=None):\n",
                        "lineNumber": 780,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 781,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Instantiate model creation form and return it.\n",
                        "lineNumber": 782,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 783,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement custom behavior.\n",
                        "lineNumber": 784,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 785,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._create_form_class(get_form_data(), obj=obj)\n",
                        "lineNumber": 786,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 787,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def edit_form(self, obj=None):\n",
                        "lineNumber": 788,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 789,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Instantiate model editing form and return it.\n",
                        "lineNumber": 790,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 791,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement custom behavior.\n",
                        "lineNumber": 792,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 793,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._edit_form_class(get_form_data(), obj=obj)\n",
                        "lineNumber": 794,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 795,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Helpers\n",
                        "lineNumber": 796,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_sortable(self, name):\n",
                        "lineNumber": 797,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 798,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Verify if column is sortable.\n",
                        "lineNumber": 799,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 800,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 801,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Column name.\n",
                        "lineNumber": 802,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 803,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name in self._sortable_columns\n",
                        "lineNumber": 804,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 805,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_column_by_idx(self, idx):\n",
                        "lineNumber": 806,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 807,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return column index by\n",
                        "lineNumber": 808,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 809,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if idx is None or idx < 0 or idx >= len(self._list_columns):\n",
                        "lineNumber": 810,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 811,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 812,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._list_columns[idx]\n",
                        "lineNumber": 813,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 814,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_default_order(self):\n",
                        "lineNumber": 815,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 816,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return default sort order\n",
                        "lineNumber": 817,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 818,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_default_sort:\n",
                        "lineNumber": 819,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if isinstance(self.column_default_sort, tuple):\n",
                        "lineNumber": 820,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return self.column_default_sort\n",
                        "lineNumber": 821,
                        "lineChange": "none"
                      },
                      {
                        "line": "            else:\n",
                        "lineNumber": 822,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return self.column_default_sort, False\n",
                        "lineNumber": 823,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 824,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return None\n",
                        "lineNumber": 825,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 826,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Database-related API\n",
                        "lineNumber": 827,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list(self, page, sort_field, sort_desc, search, filters):\n",
                        "lineNumber": 828,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 829,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a paginated and sorted list of models from the data source.\n",
                        "lineNumber": 830,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 831,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 832,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 833,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param page:\n",
                        "lineNumber": 834,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Page number, 0 based. Can be set to None if it is first page.\n",
                        "lineNumber": 835,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_field:\n",
                        "lineNumber": 836,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Sort column name or None.\n",
                        "lineNumber": 837,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_desc:\n",
                        "lineNumber": 838,
                        "lineChange": "none"
                      },
                      {
                        "line": "                If set to True, sorting is in descending order.\n",
                        "lineNumber": 839,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param search:\n",
                        "lineNumber": 840,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Search query\n",
                        "lineNumber": 841,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filters:\n",
                        "lineNumber": 842,
                        "lineChange": "none"
                      },
                      {
                        "line": "                List of filter tuples. First value in a tuple is a search\n",
                        "lineNumber": 843,
                        "lineChange": "none"
                      },
                      {
                        "line": "                index, second value is a search value.\n",
                        "lineNumber": 844,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 845,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement get_list method')\n",
                        "lineNumber": 846,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 847,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_one(self, id):\n",
                        "lineNumber": 848,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 849,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return one model by its id.\n",
                        "lineNumber": 850,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 851,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 852,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 853,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param id:\n",
                        "lineNumber": 854,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model id\n",
                        "lineNumber": 855,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 856,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement get_one method')\n",
                        "lineNumber": 857,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 858,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Model event handlers\n",
                        "lineNumber": 859,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def on_model_change(self, form, model, is_created):\n",
                        "lineNumber": 860,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 861,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions after a model is created or updated.\n",
                        "lineNumber": 862,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 863,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from create_model and update_model in the same transaction\n",
                        "lineNumber": 864,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (if it has any meaning for a store backend).\n",
                        "lineNumber": 865,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 866,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default does nothing.\n",
                        "lineNumber": 867,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 868,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 869,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form used to create/update model\n",
                        "lineNumber": 870,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 871,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model that will be created/updated\n",
                        "lineNumber": 872,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param is_created:\n",
                        "lineNumber": 873,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Will be set to True if model was created and to False if edited\n",
                        "lineNumber": 874,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 875,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 876,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 877,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _on_model_change(self, form, model, is_created):\n",
                        "lineNumber": 878,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 879,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Compatibility helper.\n",
                        "lineNumber": 880,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 881,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 882,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.on_model_change(form, model, is_created)\n",
                        "lineNumber": 883,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except TypeError:\n",
                        "lineNumber": 884,
                        "lineChange": "none"
                      },
                      {
                        "line": "            msg = ('%s.on_model_change() now accepts third ' +\n",
                        "lineNumber": 885,
                        "lineChange": "none"
                      },
                      {
                        "line": "                   'parameter is_created. Please update your code') % self.model\n",
                        "lineNumber": 886,
                        "lineChange": "none"
                      },
                      {
                        "line": "            warnings.warn(msg)\n",
                        "lineNumber": 887,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 888,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.on_model_change(form, model)\n",
                        "lineNumber": 889,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 890,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def after_model_change(self, form, model, is_created):\n",
                        "lineNumber": 891,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 892,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions after a model was created or updated and\n",
                        "lineNumber": 893,
                        "lineChange": "none"
                      },
                      {
                        "line": "            committed to the database.\n",
                        "lineNumber": 894,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 895,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from create_model after successful database commit.\n",
                        "lineNumber": 896,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 897,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default does nothing.\n",
                        "lineNumber": 898,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 899,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 900,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form used to create/update model\n",
                        "lineNumber": 901,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 902,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model that was created/updated\n",
                        "lineNumber": 903,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param is_created:\n",
                        "lineNumber": 904,
                        "lineChange": "none"
                      },
                      {
                        "line": "                True if model was created, False if model was updated\n",
                        "lineNumber": 905,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 906,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 907,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 908,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def on_model_delete(self, model):\n",
                        "lineNumber": 909,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 910,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions before a model is deleted.\n",
                        "lineNumber": 911,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 912,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from delete_model in the same transaction\n",
                        "lineNumber": 913,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (if it has any meaning for a store backend).\n",
                        "lineNumber": 914,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 915,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default do nothing.\n",
                        "lineNumber": 916,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 917,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 918,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 919,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_model(self, form):\n",
                        "lineNumber": 920,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 921,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create model from the form.\n",
                        "lineNumber": 922,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 923,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 924,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 925,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 926,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 927,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 928,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form instance\n",
                        "lineNumber": 929,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 930,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 931,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 932,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def update_model(self, form, model):\n",
                        "lineNumber": 933,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 934,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Update model from the form.\n",
                        "lineNumber": 935,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 936,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 937,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 938,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 939,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 940,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 941,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form instance\n",
                        "lineNumber": 942,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 943,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 944,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 945,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 946,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 947,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def delete_model(self, model):\n",
                        "lineNumber": 948,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 949,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Delete model.\n",
                        "lineNumber": 950,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 951,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 952,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 953,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 954,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 955,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 956,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 957,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 958,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 959,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 960,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Various helpers\n",
                        "lineNumber": 961,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _prettify_name(self, name):\n",
                        "lineNumber": 962,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 963,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Prettify pythonic variable name.\n",
                        "lineNumber": 964,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 965,
                        "lineChange": "none"
                      },
                      {
                        "line": "            For example, 'hello_world' will be converted to 'Hello World'\n",
                        "lineNumber": 966,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 967,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 968,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Name to prettify\n",
                        "lineNumber": 969,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 970,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return prettify_name(name)\n",
                        "lineNumber": 971,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 972,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_empty_list_message(self):\n",
                        "lineNumber": 973,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return gettext('There are no items in the table.')\n",
                        "lineNumber": 974,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 975,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def unique_filter_label(self, flt):\n",
                        "lineNumber": 976,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 977,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Given a filter `flt`, return a unique name for that filter in\n",
                        "lineNumber": 978,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this view.\n",
                        "lineNumber": 979,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 980,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default, returns a numeric index or a human-readable filter name\n",
                        "lineNumber": 981,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 982,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Does not include the `flt[n]_` portion of the filter name.\n",
                        "lineNumber": 983,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 984,
                        "lineChange": "none"
                      },
                      {
                        "line": "            To use custom names, override this function, eg\n",
                        "lineNumber": 985,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def unique_filter_label(self, flt):\n",
                        "lineNumber": 986,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return flt.name + flt.__class__.__name__\n",
                        "lineNumber": 987,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 988,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Be aware that if you override this method, the default URL format\n",
                        "lineNumber": 989,
                        "lineChange": "none"
                      },
                      {
                        "line": "            will no longer work.\n",
                        "lineNumber": 990,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 991,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.named_filter_urls:\n",
                        "lineNumber": 992,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return re.sub('\\W', '_', u'{name}_{operation}'.format(name=flt.name, operation=flt.operation())).lower()\n",
                        "lineNumber": 993,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 994,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return str(self._filters.index(flt))\n",
                        "lineNumber": 995,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 996,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_filter_args(self):\n",
                        "lineNumber": 997,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 998,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Retrieve and parse filter parameters from the request URL.\n",
                        "lineNumber": 999,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1000,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a list of 2-tuples in the format [(idx, value), ...],\n",
                        "lineNumber": 1001,
                        "lineChange": "none"
                      },
                      {
                        "line": "            where idx is the index into the list returned by get_filters().\n",
                        "lineNumber": 1002,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1003,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override this method to provide your own URL filter format.\n",
                        "lineNumber": 1004,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1005,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self._filters:\n",
                        "lineNumber": 1006,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 1007,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1008,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filter_idx_by_label = dict((self.unique_filter_label(flt), i) for i, flt in enumerate(self._filters))\n",
                        "lineNumber": 1009,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 1010,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sfilters = []\n",
                        "lineNumber": 1011,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1012,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for n in request.args:\n",
                        "lineNumber": 1013,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not n.startswith('flt'):\n",
                        "lineNumber": 1014,
                        "lineChange": "none"
                      },
                      {
                        "line": "                continue\n",
                        "lineNumber": 1015,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if '_' not in n:\n",
                        "lineNumber": 1016,
                        "lineChange": "none"
                      },
                      {
                        "line": "                continue\n",
                        "lineNumber": 1017,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1018,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pos, filter_label = n[3:].split('_', 1)\n",
                        "lineNumber": 1019,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1020,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # If pos not specified, just add incrementally to the list.\n",
                        "lineNumber": 1021,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pos = int(pos) if pos else len(sfilters)\n",
                        "lineNumber": 1022,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1023,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try:\n",
                        "lineNumber": 1024,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # See if filter is numeric\n",
                        "lineNumber": 1025,
                        "lineChange": "none"
                      },
                      {
                        "line": "                idx = int(filter_label)\n",
                        "lineNumber": 1026,
                        "lineChange": "none"
                      },
                      {
                        "line": "            except ValueError:\n",
                        "lineNumber": 1027,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # If non-numeric, look filter up by name\n",
                        "lineNumber": 1028,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try:\n",
                        "lineNumber": 1029,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    idx = filter_idx_by_label[filter_label]\n",
                        "lineNumber": 1030,
                        "lineChange": "none"
                      },
                      {
                        "line": "                except KeyError:\n",
                        "lineNumber": 1031,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # No matching filter name\n",
                        "lineNumber": 1032,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    continue\n",
                        "lineNumber": 1033,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1034,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if 0 <= idx < len(self._filters):\n",
                        "lineNumber": 1035,
                        "lineChange": "none"
                      },
                      {
                        "line": "                flt = self._filters[idx]\n",
                        "lineNumber": 1036,
                        "lineChange": "none"
                      },
                      {
                        "line": "                value = request.args[n]\n",
                        "lineNumber": 1037,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if flt.validate(value):\n",
                        "lineNumber": 1038,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    sfilters.append((pos, (idx, flt.clean(value))))\n",
                        "lineNumber": 1039,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1040,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return [v[1] for v in sorted(sfilters, key=lambda n: n[0])]\n",
                        "lineNumber": 1041,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1042,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_listing_args(self):\n",
                        "lineNumber": 1043,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1044,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return generic list view arguments from query string.\n",
                        "lineNumber": 1045,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1046,
                        "lineChange": "none"
                      },
                      {
                        "line": "        page = request.args.get('page', 0, type=int)\n",
                        "lineNumber": 1047,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort = request.args.get('sort', None, type=int)\n",
                        "lineNumber": 1048,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort_desc = request.args.get('desc', None, type=int)\n",
                        "lineNumber": 1049,
                        "lineChange": "none"
                      },
                      {
                        "line": "        search = request.args.get('search', None)\n",
                        "lineNumber": 1050,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return page, sort, sort_desc, search\n",
                        "lineNumber": 1051,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1052,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_url(self, view=None, page=None, sort=None, sort_desc=None,\n",
                        "lineNumber": 1053,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 search=None, filters=None):\n",
                        "lineNumber": 1054,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1055,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Generate page URL with current page, sort column and\n",
                        "lineNumber": 1056,
                        "lineChange": "none"
                      },
                      {
                        "line": "            other parameters.\n",
                        "lineNumber": 1057,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1058,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param view:\n",
                        "lineNumber": 1059,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View name\n",
                        "lineNumber": 1060,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param page:\n",
                        "lineNumber": 1061,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Page number\n",
                        "lineNumber": 1062,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort:\n",
                        "lineNumber": 1063,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Sort column index\n",
                        "lineNumber": 1064,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_desc:\n",
                        "lineNumber": 1065,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Use descending sorting order\n",
                        "lineNumber": 1066,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param search:\n",
                        "lineNumber": 1067,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Search query\n",
                        "lineNumber": 1068,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filters:\n",
                        "lineNumber": 1069,
                        "lineChange": "none"
                      },
                      {
                        "line": "                List of active filters\n",
                        "lineNumber": 1070,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1071,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not search:\n",
                        "lineNumber": 1072,
                        "lineChange": "none"
                      },
                      {
                        "line": "            search = None\n",
                        "lineNumber": 1073,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1074,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not page:\n",
                        "lineNumber": 1075,
                        "lineChange": "none"
                      },
                      {
                        "line": "            page = None\n",
                        "lineNumber": 1076,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1077,
                        "lineChange": "none"
                      },
                      {
                        "line": "        kwargs = dict(page=page, sort=sort, desc=sort_desc, search=search)\n",
                        "lineNumber": 1078,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1079,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if filters:\n",
                        "lineNumber": 1080,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for flt in filters:\n",
                        "lineNumber": 1081,
                        "lineChange": "none"
                      },
                      {
                        "line": "                key = 'flt_%s' % self.unique_filter_label(self._filters[flt[0]])\n",
                        "lineNumber": 1082,
                        "lineChange": "none"
                      },
                      {
                        "line": "                kwargs[key] = flt[1]\n",
                        "lineNumber": 1083,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1084,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return url_for(view, **kwargs)\n",
                        "lineNumber": 1085,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 1086,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_action_allowed(self, name):\n",
                        "lineNumber": 1087,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1088,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override this method to allow or disallow actions based\n",
                        "lineNumber": 1089,
                        "lineChange": "none"
                      },
                      {
                        "line": "            on some condition.\n",
                        "lineNumber": 1090,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1091,
                        "lineChange": "none"
                      },
                      {
                        "line": "            The default implementation only checks if the particular action\n",
                        "lineNumber": 1092,
                        "lineChange": "none"
                      },
                      {
                        "line": "            is not in `action_disallowed_list`.\n",
                        "lineNumber": 1093,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1094,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name not in self.action_disallowed_list\n",
                        "lineNumber": 1095,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1096,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_field_value(self, model, name):\n",
                        "lineNumber": 1097,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1098,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Get unformatted field value from the model\n",
                        "lineNumber": 1099,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1100,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return rec_getattr(model, name)\n",
                        "lineNumber": 1101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def filters_by_label(self):\n",
                        "lineNumber": 1103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1104,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Flattened dict of all filters, indexed by their label.\n",
                        "lineNumber": 1105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1106,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return dict((self.unique_filter_label(flt), flt) for flt in self._filters)\n",
                        "lineNumber": 1107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @contextfunction\n",
                        "lineNumber": 1109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list_value(self, context, model, name):\n",
                        "lineNumber": 1110,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns the value to be displayed in the list view\n",
                        "lineNumber": 1112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1113,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param context:\n",
                        "lineNumber": 1114,
                        "lineChange": "none"
                      },
                      {
                        "line": "                :py:class:`jinja2.runtime.Context`\n",
                        "lineNumber": 1115,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 1116,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 1117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 1118,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Field name\n",
                        "lineNumber": 1119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        column_fmt = self.column_formatters.get(name)\n",
                        "lineNumber": 1121,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if column_fmt is not None:\n",
                        "lineNumber": 1122,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return column_fmt(self, context, model, name)\n",
                        "lineNumber": 1123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1124,
                        "lineChange": "none"
                      },
                      {
                        "line": "            value = self._get_field_value(model, name)\n",
                        "lineNumber": 1125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        choices_map = self._column_choices_map.get(name, {})\n",
                        "lineNumber": 1127,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if choices_map:\n",
                        "lineNumber": 1128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return choices_map.get(value) or value\n",
                        "lineNumber": 1129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        type_fmt = self.column_type_formatters.get(type(value))\n",
                        "lineNumber": 1131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if type_fmt is not None:\n",
                        "lineNumber": 1132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            value = type_fmt(self, value)\n",
                        "lineNumber": 1133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return value\n",
                        "lineNumber": 1135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1136,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # AJAX references\n",
                        "lineNumber": 1137,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _process_ajax_references(self):\n",
                        "lineNumber": 1138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1139,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Process `form_ajax_refs` and generate model loaders that\n",
                        "lineNumber": 1140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            will be used by the `ajax_lookup` view.\n",
                        "lineNumber": 1141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        result = {}\n",
                        "lineNumber": 1143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1144,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_ajax_refs:\n",
                        "lineNumber": 1145,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for name, options in iteritems(self.form_ajax_refs):\n",
                        "lineNumber": 1146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if isinstance(options, dict):\n",
                        "lineNumber": 1147,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[name] = self._create_ajax_loader(name, options)\n",
                        "lineNumber": 1148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                elif isinstance(options, AjaxModelLoader):\n",
                        "lineNumber": 1149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[name] = options\n",
                        "lineNumber": 1150,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    raise ValueError('%s.form_ajax_refs can not handle %s types' % (self, type(options)))\n",
                        "lineNumber": 1152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1153,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return result\n",
                        "lineNumber": 1154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _create_ajax_loader(self, name, options):\n",
                        "lineNumber": 1156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Model backend will override this to implement AJAX model loading.\n",
                        "lineNumber": 1158,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1159,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 1160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Views\n",
                        "lineNumber": 1162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/')\n",
                        "lineNumber": 1163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def index_view(self):\n",
                        "lineNumber": 1164,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1165,
                        "lineChange": "none"
                      },
                      {
                        "line": "            List view\n",
                        "lineNumber": 1166,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Grab parameters from URL\n",
                        "lineNumber": 1168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        page, sort_idx, sort_desc, search = self._get_listing_args()\n",
                        "lineNumber": 1169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filters = self.get_filter_args()\n",
                        "lineNumber": 1170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Map column index to column name\n",
                        "lineNumber": 1172,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort_column = self._get_column_by_idx(sort_idx)\n",
                        "lineNumber": 1173,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if sort_column is not None:\n",
                        "lineNumber": 1174,
                        "lineChange": "none"
                      },
                      {
                        "line": "            sort_column = sort_column[0]\n",
                        "lineNumber": 1175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1176,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Get count and data\n",
                        "lineNumber": 1177,
                        "lineChange": "none"
                      },
                      {
                        "line": "        count, data = self.get_list(page, sort_column, sort_desc,\n",
                        "lineNumber": 1178,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                    search, filters)\n",
                        "lineNumber": 1179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1180,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Calculate number of pages\n",
                        "lineNumber": 1181,
                        "lineChange": "none"
                      },
                      {
                        "line": "        num_pages = count // self.page_size\n",
                        "lineNumber": 1182,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if count % self.page_size != 0:\n",
                        "lineNumber": 1183,
                        "lineChange": "none"
                      },
                      {
                        "line": "            num_pages += 1\n",
                        "lineNumber": 1184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1185,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Various URL generation helpers\n",
                        "lineNumber": 1186,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def pager_url(p):\n",
                        "lineNumber": 1187,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Do not add page number if it is first page\n",
                        "lineNumber": 1188,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if p == 0:\n",
                        "lineNumber": 1189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                p = None\n",
                        "lineNumber": 1190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._get_url('.index_view', p, sort_idx, sort_desc,\n",
                        "lineNumber": 1192,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 search, filters)\n",
                        "lineNumber": 1193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1194,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def sort_url(column, invert=False):\n",
                        "lineNumber": 1195,
                        "lineChange": "none"
                      },
                      {
                        "line": "            desc = None\n",
                        "lineNumber": 1196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1197,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if invert and not sort_desc:\n",
                        "lineNumber": 1198,
                        "lineChange": "none"
                      },
                      {
                        "line": "                desc = 1\n",
                        "lineNumber": 1199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1200,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._get_url('.index_view', page, column, desc,\n",
                        "lineNumber": 1201,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 search, filters)\n",
                        "lineNumber": 1202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1203,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Actions\n",
                        "lineNumber": 1204,
                        "lineChange": "none"
                      },
                      {
                        "line": "        actions, actions_confirmation = self.get_actions_list()\n",
                        "lineNumber": 1205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1206,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.list_template,\n",
                        "lineNumber": 1207,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               data=data,\n",
                        "lineNumber": 1208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # List\n",
                        "lineNumber": 1209,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               list_columns=self._list_columns,\n",
                        "lineNumber": 1210,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sortable_columns=self._sortable_columns,\n",
                        "lineNumber": 1211,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Stuff\n",
                        "lineNumber": 1212,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               enumerate=enumerate,\n",
                        "lineNumber": 1213,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               get_pk_value=self.get_pk_value,\n",
                        "lineNumber": 1214,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               get_value=self.get_list_value,\n",
                        "lineNumber": 1215,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               return_url=self._get_url('.index_view',\n",
                        "lineNumber": 1216,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        page,\n",
                        "lineNumber": 1217,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        sort_idx,\n",
                        "lineNumber": 1218,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        sort_desc,\n",
                        "lineNumber": 1219,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        search,\n",
                        "lineNumber": 1220,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        filters),\n",
                        "lineNumber": 1221,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Pagination\n",
                        "lineNumber": 1222,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               count=count,\n",
                        "lineNumber": 1223,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               pager_url=pager_url,\n",
                        "lineNumber": 1224,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               num_pages=num_pages,\n",
                        "lineNumber": 1225,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               page=page,\n",
                        "lineNumber": 1226,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Sorting\n",
                        "lineNumber": 1227,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_column=sort_idx,\n",
                        "lineNumber": 1228,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_desc=sort_desc,\n",
                        "lineNumber": 1229,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_url=sort_url,\n",
                        "lineNumber": 1230,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Search\n",
                        "lineNumber": 1231,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               search_supported=self._search_supported,\n",
                        "lineNumber": 1232,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               clear_search_url=self._get_url('.index_view',\n",
                        "lineNumber": 1233,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              None,\n",
                        "lineNumber": 1234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              sort_idx,\n",
                        "lineNumber": 1235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              sort_desc),\n",
                        "lineNumber": 1236,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               search=search,\n",
                        "lineNumber": 1237,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Filters\n",
                        "lineNumber": 1238,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               filters=self._filters,\n",
                        "lineNumber": 1239,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               filter_groups=self._flattened_filters_by_group,\n",
                        "lineNumber": 1240,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               active_filters=filters,\n",
                        "lineNumber": 1241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1242,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Actions\n",
                        "lineNumber": 1243,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               actions=actions,\n",
                        "lineNumber": 1244,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               actions_confirmation=actions_confirmation)\n",
                        "lineNumber": 1245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1246,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/new/', methods=('GET', 'POST'))\n",
                        "lineNumber": 1247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_view(self):\n",
                        "lineNumber": 1248,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create model view\n",
                        "lineNumber": 1250,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1251,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1253,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_create:\n",
                        "lineNumber": 1254,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1255,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1256,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form = self.create_form()\n",
                        "lineNumber": 1257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1258,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if validate_form_on_submit(form):\n",
                        "lineNumber": 1259,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.create_model(form):\n",
                        "lineNumber": 1260,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if '_add_another' in request.form:\n",
                        "lineNumber": 1261,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flash(gettext('Model was successfully created.'))\n",
                        "lineNumber": 1262,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(url_for('.create_view', url=return_url))\n",
                        "lineNumber": 1263,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1264,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(return_url)\n",
                        "lineNumber": 1265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1266,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                        "lineNumber": 1267,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             form_rules=self._form_create_rules)\n",
                        "lineNumber": 1268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1269,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.create_template,\n",
                        "lineNumber": 1270,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form=form,\n",
                        "lineNumber": 1271,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form_opts=form_opts,\n",
                        "lineNumber": 1272,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           return_url=return_url)\n",
                        "lineNumber": 1273,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1274,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/edit/', methods=('GET', 'POST'))\n",
                        "lineNumber": 1275,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def edit_view(self):\n",
                        "lineNumber": 1276,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1277,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Edit model view\n",
                        "lineNumber": 1278,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1279,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1280,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1281,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_edit:\n",
                        "lineNumber": 1282,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1284,
                        "lineChange": "none"
                      },
                      {
                        "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                        "lineNumber": 1285,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if id is None:\n",
                        "lineNumber": 1286,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1288,
                        "lineChange": "none"
                      },
                      {
                        "line": "        model = self.get_one(id)\n",
                        "lineNumber": 1289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1290,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if model is None:\n",
                        "lineNumber": 1291,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1292,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1293,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form = self.edit_form(obj=model)\n",
                        "lineNumber": 1294,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1295,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if validate_form_on_submit(form):\n",
                        "lineNumber": 1296,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.update_model(form, model):\n",
                        "lineNumber": 1297,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if '_continue_editing' in request.form:\n",
                        "lineNumber": 1298,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flash(gettext('Model was successfully saved.'))\n",
                        "lineNumber": 1299,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(request.url)\n",
                        "lineNumber": 1300,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(return_url)\n",
                        "lineNumber": 1302,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1303,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                        "lineNumber": 1304,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             form_rules=self._form_create_rules)\n",
                        "lineNumber": 1305,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1306,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.edit_template,\n",
                        "lineNumber": 1307,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           model=model,\n",
                        "lineNumber": 1308,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form=form,\n",
                        "lineNumber": 1309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form_opts=form_opts,\n",
                        "lineNumber": 1310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           return_url=return_url)\n",
                        "lineNumber": 1311,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/delete/', methods=('POST',))\n",
                        "lineNumber": 1313,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def delete_view(self):\n",
                        "lineNumber": 1314,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1315,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Delete model view. Only POST method is allowed.\n",
                        "lineNumber": 1316,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1317,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1318,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return_url = get_redirect_target() or url_for('.index_view')\n",
                        "lineNumber": 1318,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1319,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # TODO: Use post\n",
                        "lineNumber": 1320,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_delete:\n",
                        "lineNumber": 1321,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1322,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1323,
                        "lineChange": "none"
                      },
                      {
                        "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                        "lineNumber": 1324,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if id is None:\n",
                        "lineNumber": 1325,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1326,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 13,
                "cwe": [
                  "CWE-601"
                ]
              }
            },
            {
              "id": "python/MissingObjectPermission",
              "name": "MissingObjectPermission",
              "shortDescription": {
                "text": "Improper Handling of Insufficient Permissions or Privileges"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nIn Django, REST framework permissions also support object-level permissioning. Object level permissions are used to determine if a user should be allowed to act on a particular object, which will typically be a model instance. Not validating object permisions using the `check_object_permissions` method could result in Access Control issues.\n\nExample:\n\n```\n\ndef get_object(self):\n    obj = get_object_or_404(self.get_queryset(), pk=self.kwargs[\"pk\"])\n    return obj #check_object_permissions is missing\n\n```\n\n\n## Best practices for prevention\nIf the `get_object` method is overridden on a generic view, `.check_object_permissions(request, obj)` will need to be explicitly called on the method on the view at the point at which you've retrieved the object.\n\nExample:\n\n```\ndef get_object(self):\n    obj = get_object_or_404(self.get_queryset(), pk=self.kwargs[\"pk\"])\n    self.check_object_permissions(self.request, obj)\n    return obj\n```\n\n## References\n* https://www.django-rest-framework.org/api-guide/permissions/#object-level-permissions",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "MissingObjectPermission",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-280"
                ]
              }
            },
            {
              "id": "python/Jinja2AutoEscapeFalse",
              "name": "Jinja2AutoEscapeFalse",
              "shortDescription": {
                "text": "Jinja auto-escape is set to false."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nJinja2 is a python templating library that can be configured to escape values and avoid XSS vulnerabilities. However, the library by default sets the autoescaping to false.\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Jinja2AutoEscapeFalse",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/checktheroads/hyperglass/commit/d67dec47a909c7cf3708e82290a306ebf999fe89?diff=split#diff-0bd1912758bddf940a185954e437176ec2bf96420e66e67a76242d2ace77837dL-1",
                    "lines": [
                      {
                        "line": "jinja2.Environment(loader=jinja2.BaseLoader)\n",
                        "lineNumber": 138,
                        "lineChange": "removed"
                      },
                      {
                        "line": "jinja2.Environment(\n",
                        "lineNumber": 140,
                        "lineChange": "added"
                      },
                      {
                        "line": "    loader=jinja2.BaseLoader,\n",
                        "lineNumber": 141,
                        "lineChange": "added"
                      },
                      {
                        "line": "    autoescape=True,\n",
                        "lineNumber": 142,
                        "lineChange": "added"
                      },
                      {
                        "line": "    extensions=[\"jinja2.ext.autoescape\"],\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 144,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/GoogleCloudPlatform/titan/commit/0bf5c35ddc04b1020a14ed910af41e9ae37b1c1b?diff=split#diff-a15bcaffa09467d5024e540fee708e1b024eecad4ae85121885de69ef88c666dL-1",
                    "lines": [
                      {
                        "line": "jinja_environment = jinja2.Environment(\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)))\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)), autoescape=True)\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nexB/aboutcode-toolkit/commit/537f3516b6bee96c0c5efebac7f576102b4047c8?diff=split#diff-a9f80dbb2d6d8fe6525586938ee43531107d524ffede93ea1236cf3f44c908aaL-1",
                    "lines": [
                      {
                        "line": "template = jinja2.Template(template_text)\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "template = jinja2.Template(template_text, autoescape=True)\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 44,
                "cwe": [
                  "CWE-79"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/Ssti",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a database flows into jinja2.Template, where it is used to construct a template that gets rendered. This may result in a Server-Side Template Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to construct a template that gets rendered. This may result in a Server-Side Template Injection vulnerability.",
            "arguments": [
              "[a database](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[jinja2.Template](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/views/instance.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 263,
                  "endLine": 263,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "23a17e16872a268d62ddd791f0ac630e6952f1fef2d5d6bcdc97d940bc331116",
            "1": "525e9541.47b4c978.79e62dc9.26ccb27e.9c795643.05a1d16e.9b87d056.1417bb47.525e9541.47b4c978.ec35cf50.26ccb27e.2f817212.05a1d16e.7e8da20f.1417bb47"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 5,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 252,
                            "endLine": 252,
                            "startColumn": 65,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 8,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 8,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 62,
                            "endColumn": 99
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 263,
                            "endLine": 263,
                            "startColumn": 33,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 263,
                            "endLine": 263,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 555,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/XSS",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a database flows into render, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[a database](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[render](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/views/instance.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 265,
                  "endLine": 265,
                  "startColumn": 37,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f771b511810acabda316d13d06c4f6901af0b51e050bcc1c0100788588885a04",
            "1": "57b79894.716481d7.79e62dc9.139c59a8.747347ea.ba14daf2.081ac3f4.0990edd8.525e9541.716481d7.ec35cf50.26ccb27e.2f817212.5ebff2dd.22a8b49e.1417bb47"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 5,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 252,
                            "endLine": 252,
                            "startColumn": 65,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 62,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 261,
                            "endLine": 261,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 261,
                            "endLine": 261,
                            "startColumn": 13,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 260,
                            "endLine": 262,
                            "startColumn": 23,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 260,
                            "endLine": 262,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 57,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 37,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 555,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_service_catalog/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 32,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fea6c0383073d87af3e84d74fdc4dfb9bb0555926ed8a7716b086f33aab7afb7",
            "1": "3d73bd83.577bab1d.79e62dc9.139c59a8.bd1299c4.ba14daf2.9743cabd.584a1d4c.3aaab275.277c621c.7be03776.2d31a5cc.bd1299c4.aad38241.57538d3a.584a1d4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/test_service_catalog/base.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 32,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/test_service_catalog/base.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 61,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/OR",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a database flows into django.shortcuts.redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[a database](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[django.shortcuts.redirect](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/views/instance.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 270,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ff7e4a0068a7364727ab8ed6fe14897707703a2486771a2fa3420efaa4cf564",
            "1": "e6ce8cc0.8c82a947.a406b245.26ccb27e.cc857d4e.ba14daf2.0a7337bb.ebed174f.525e9541.716481d7.a406b245.26ccb27e.2f817212.05a1d16e.22a8b49e.1417bb47"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 5,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 252,
                            "endLine": 252,
                            "startColumn": 65,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 8,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 8,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 62,
                            "endColumn": 99
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 263,
                            "endLine": 263,
                            "startColumn": 33,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 263,
                            "endLine": 263,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 263,
                            "endLine": 263,
                            "startColumn": 9,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 37,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 37,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 13,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 270,
                            "endLine": 270,
                            "startColumn": 25,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 270,
                            "endLine": 270,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/OR",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into django.http.HttpResponseRedirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2)",
              "[django.http.HttpResponseRedirect](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "profiles/views/profile.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35,
                  "startColumn": 12,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1493393068f0fc47b2894d1dae57c41a67b74a5f31f65ca629bf5bc77090eda3",
            "1": "8a30cfc6.993139d5.2683ade8.139c59a8.42a20936.ba14daf2.8e314e66.100d6fba.63ecb6a3.993139d5.d5e84f04.466ca705.1d07cee4.ba14daf2.8e314e66.100d6fba"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "profiles/views/profile.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 33,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "profiles/views/profile.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 33,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "profiles/views/profile.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "profiles/views/profile.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 12,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 515,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/OR",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into django.shortcuts.redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2)",
              "[django.shortcuts.redirect](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "resource_tracker_v2/views/utils/tag_session_manager.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ce1f6516e5c2e1c5ddf2a8ab8c5a0a2d566c938fa94b8d57e764a3f092a0ee14",
            "1": "8a30cfc6.80655f79.a406b245.a3785489.8ef86c74.ba14daf2.0a7337bb.100d6fba.129db901.33e5c9f9.a406b245.a3785489.8ef86c74.ba14daf2.83596d43.8794408a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "resource_tracker_v2/views/utils/tag_session_manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 25,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "resource_tracker_v2/views/utils/tag_session_manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 25,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "resource_tracker_v2/views/utils/tag_session_manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 25,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "resource_tracker_v2/views/utils/tag_session_manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 515,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/MissingObjectPermission",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Django get_object function was found to be not enforcing object level permissions. Not validating object permisions using check_object_permissions could result in Access Control issues.",
            "markdown": "Django {0} function was found to be not enforcing object level permissions. Not validating object permisions using check_object_permissions could result in Access Control issues.",
            "arguments": [
              "[get_object](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/views/request.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 475,
                  "endLine": 475,
                  "startColumn": 9,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dec3c105bd6c0dfaf224dd40708ff57af3786014bc9fe4eb3336e4ef809d409e",
            "1": "ae06c667.32a4c680.606e638d.8d213514.e10a9ee9.d994cbe5.5c558b05.742d9b21.ae06c667.6464b2c2.606e638d.8d213514.f1e0fcb8.ff6cb16d.22a8b49e.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/request.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 475,
                            "endLine": 475,
                            "startColumn": 9,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 320,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/MissingObjectPermission",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Django get_object function was found to be not enforcing object level permissions. Not validating object permisions using check_object_permissions could result in Access Control issues.",
            "markdown": "Django {0} function was found to be not enforcing object level permissions. Not validating object permisions using check_object_permissions could result in Access Control issues.",
            "arguments": [
              "[get_object](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "profiles/views/scope.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 9,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5a5f0a531b979aa7f2049bfa02d2feb4418d7d27ae6e6b258395d14e770764a4",
            "1": "b37185f4.b3a36194.606e638d.8d213514.8aa98a1d.ba14daf2.de9f8d7d.742d9b21.b37185f4.b3a36194.606e638d.8d213514.8aa98a1d.ba14daf2.22a8b49e.adf26d2d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "profiles/views/scope.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 9,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/MissingObjectPermission",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Django get_object function was found to be not enforcing object level permissions. Not validating object permisions using check_object_permissions could result in Access Control issues.",
            "markdown": "Django {0} function was found to be not enforcing object level permissions. Not validating object permisions using check_object_permissions could result in Access Control issues.",
            "arguments": [
              "[get_object](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "profiles/views/scope.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "startColumn": 9,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0f274005bc45bc99759d86f4894720379a135099d805289e59792e6943345332",
            "1": "b37185f4.b3a36194.606e638d.8d213514.8aa98a1d.ba14daf2.de9f8d7d.742d9b21.b37185f4.b3a36194.606e638d.8d213514.8aa98a1d.ba14daf2.22a8b49e.adf26d2d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "profiles/views/scope.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 9,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 370,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/MissingObjectPermission",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Django get_object function was found to be not enforcing object level permissions. Not validating object permisions using check_object_permissions could result in Access Control issues.",
            "markdown": "Django {0} function was found to be not enforcing object level permissions. Not validating object permisions using check_object_permissions could result in Access Control issues.",
            "arguments": [
              "[get_object](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "profiles/models/scope.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 9,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1fa299601d675d1868b5545712ccc7c27ee2560129a17c615b4584a4d1e43d89",
            "1": "b37185f4.577bab1d.606e638d.8d213514.1a0abf6d.ba14daf2.545835b3.c8d2c8e1.b37185f4.577bab1d.606e638d.8d213514.1a0abf6d.ba14daf2.22a8b49e.adf26d2d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "profiles/models/scope.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 9,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 320,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/views/instance.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 263,
                  "endLine": 263,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "61bcc2223c7ed2a7b222544667fe128677a7798751255618c59403bc20cbfbcb",
            "1": "525e9541.47b4c978.79e62dc9.26ccb27e.747347ea.57d888ee.9b87d056.1417bb47.525e9541.47b4c978.79e62dc9.26ccb27e.747347ea.57d888ee.9b87d056.1417bb47"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/views/instance.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 263,
                            "endLine": 263,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 603,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Squest/utils/ansible_when.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1f2fea62f6a10a09d58df06eb4c7c0e9e053d91d10f1253fdf274cf2177e47de",
            "1": "cde8b698.72f0ab79.4c413c45.139c59a8.056de048.c7570064.9b87d056.8794408a.054b2ffb.100098e4.1e205913.cc98b6f9.cead4661.ba14daf2.7e8da20f.8794408a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Squest/utils/ansible_when.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/templatetags/custom_links.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ff99d612d715015393656dc0e7538c24ad12c452529af5e9026bfbe786f9dcbf",
            "1": "525e9541.47b4c978.7a4e016b.139c59a8.c15150e7.c7570064.9b87d056.ebed174f.525e9541.47b4c978.7a4e016b.139c59a8.c15150e7.ba14daf2.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/templatetags/custom_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 603,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/templatetags/custom_links.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 25,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f3f780062476be2e471bdeec9698b9a6c881ebbf0f3e726fb4f0aff8ad6b8c76",
            "1": "d9cc4e02.223d39aa.7be166b0.139c59a8.c15150e7.c7570064.9b87d056.ebed174f.a6b41d6e.223d39aa.7be166b0.139c59a8.c15150e7.ba14daf2.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/templatetags/custom_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 603,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/templatetags/custom_links.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 21,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "263ded7e5b36c6a7b2fa952afbe88393a7c61efb8f626e845c42011509141306",
            "1": "057d8e92.0c6fc2af.55bb5ef5.139c59a8.8d0cdaf4.57d888ee.46409e8c.ebed174f.a6b41d6e.0c6fc2af.55bb5ef5.139c59a8.8d0cdaf4.ba14daf2.46409e8c.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/templatetags/custom_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 21,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 603,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/templatetags/custom_links.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 28,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3a72f119729dc7fb913231e65e787af2178902b3294642f5068ba9ff5c61b885",
            "1": "525e9541.47b4c978.79e62dc9.139c59a8.c15150e7.c7570064.9b87d056.ebed174f.525e9541.47b4c978.7a4e016b.139c59a8.c15150e7.ba14daf2.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/templatetags/custom_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 28,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 603,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/templatetags/custom_links.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 29,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ba14ae789bb51e4a1248c36308b8f4bee87a3e64796401b1a992e442c2efafaf",
            "1": "d9cc4e02.223d39aa.7be166b0.139c59a8.c15150e7.c7570064.9b87d056.ebed174f.a6b41d6e.223d39aa.7be166b0.139c59a8.c15150e7.ba14daf2.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/templatetags/custom_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 603,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/templatetags/custom_links.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109,
                  "startColumn": 26,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "62cfcdee0c774086081a2666cdbc58db920c2a78c08b6a8b3a66bad26b6ac1be",
            "1": "5068fef5.d08ebce1.79e62dc9.139c59a8.8d0cdaf4.5b7ecabc.9b87d056.7858580b.a6b41d6e.d08ebce1.7a4e016b.139c59a8.8d0cdaf4.5b7ecabc.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/templatetags/custom_links.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 603,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/models/tower_survey_field.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 20,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2f7e0d45a65e35da32e9d0f5a850ee81e6d03dfeb59da91b38fb23415eb87031",
            "1": "b2dd68c0.577bab1d.1e205913.139c59a8.b0e4b9f9.57d888ee.9b87d056.ebed174f.a3e161b7.577bab1d.1e205913.139c59a8.42198a3f.ba14daf2.9b87d056.0990edd8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/models/tower_survey_field.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 20,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/forms/form_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "startColumn": 20,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e812809238c9de93c4606a239af1335e66f480366f202e9201c22f4fcf4044c0",
            "1": "cde8b698.b190afa4.4c413c45.139c59a8.3e2a554f.57d888ee.9b87d056.15d957bc.cde8b698.b190afa4.1e205913.139c59a8.3e2a554f.b9d39713.7e8da20f.ca5bf6a5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/forms/form_utils.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 20,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Template](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_catalog/models/documentation.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c44105ca32f52cd242b3ec45626ade4912160e8c3d6cb4d0ef19ffb12ede094a",
            "1": "b2dd68c0.577bab1d.4c413c45.139c59a8.5ef7b7f7.c7570064.9b87d056.652e7e4e.b2dd68c0.577bab1d.4c413c45.139c59a8.5ef7b7f7.ba14daf2.9b87d056.0990edd8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "service_catalog/models/documentation.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 38,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 4,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 703,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 91,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

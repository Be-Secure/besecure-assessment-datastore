{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/nickvellios/golang-web-app/commit/8ceeeb09c880de70ca2626110afa2846410a8c2a?diff=split#diff-4107bc961286db59ba80aa5bb16fee3909f98505385dd6a51cf9461da04fad16L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"database/sql\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"fmt\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"io\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"regexp\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"webapp/ncrypt\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "type User struct {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tEmail     string  `json:\"email\"`\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tName      string  `json:\"name\"`\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPassword  string  `json:\"password\"`\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHash      string  `json:\"-\"`\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tCSRFToken string  `json:\"-\"`\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tId        int     `json:\"id\"`\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDb        *sql.DB `json:\"-\"`\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Authenticate() bool {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.Load() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ncrypt.CheckPassHash([]byte(u.Hash), []byte(u.Password))\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Load reloads the user from the database.  Only value needed to be set is 'Email', the rest will be populated.\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Load() bool {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT name, password, id, csrftok FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Name, &u.Hash, &u.Id, &u.CSRFToken)\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Save() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Save user to db\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET email=$1, name=$2, password=$3 WHERE id=$4\")\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.Email, u.Name, u.Hash, u.Id)\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "*/\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Create saves a user object to the database.  If a duplicate email is found this will fail.\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Create() error {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.validEmail() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"Invalid email format\")\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif u.Exists() {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"User already exists\")\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.sanitize()\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar lastInsertId int\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := u.Db.QueryRow(\"INSERT INTO users(email, name, password) VALUES($1,$2,$3) returning id;\", u.Email, u.Name, u.Hash).Scan(&lastInsertId)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err //fmt.Println(err.Error())\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Id = lastInsertId\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) validEmail() bool {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tre := regexp.MustCompile(`^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$`)\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn re.MatchString(u.Email)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) sanitize() {\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Clean up user object to prevent XSS attacks\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Exists() bool {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT id FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Id)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) SetCSRF() {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = CSRFToken()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) RevokeCSRF() {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = \"\"\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) HashPass() {\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thash, _ := ncrypt.HashPass([]byte(u.Password))\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Hash = string(hash)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "func CSRFToken() string {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\th := md5.New()\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\th := sha256.New()\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bookingcom/carbonapi/commit/f57ca38fea22194840bae407be94d73c2eda4dfa?diff=split#diff-74597f1e11b4f598d4f75e99aee5237cc9dc7e7cf008e1f33e3c72dc4a93ffe3L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha1\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/hex\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync/atomic\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/bradfitz/gomemcache/memcache\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dgryski/go-expirecache\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrTimeout  = errors.New(\"cache: timeout\")\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrNotFound = errors.New(\"cache: not found\")\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "type BytesCache interface {\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(k string) ([]byte, error)\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(k string, v []byte, expire int32)\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "type NullCache struct{}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Get(string) ([]byte, error) { return nil, ErrNotFound }\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Set(string, []byte, int32)  {}\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewExpireCache(maxsize uint64) BytesCache {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec := expirecache.New(maxsize)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo ec.ApproximateCleaner(10 * time.Second)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ExpireCache{ec: ec}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ExpireCache struct {\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec *expirecache.Cache\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tv, ok := ec.ec.Get(k)\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn v.([]byte), nil\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec.ec.Set(k, v, uint64(len(v)), expire)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Items() int { return ec.ec.Items() }\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Size() uint64 { return ec.ec.Size() }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewMemcached(prefix string, timeoutMs uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &MemcachedCache{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:         prefix,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tqueryTimeoutMs: timeoutMs,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:         memcache.New(servers...),\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "type MemcachedCache struct {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix         string\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient         *memcache.Client\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeouts       uint64\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tqueryTimeoutMs uint64\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdone := make(chan bool, 1)\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar err error\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar item *memcache.Item\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo func() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\titem, err = m.client.Get(m.prefix + hk)\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tdone <- true\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}()\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeout := time.After(time.Duration(m.queryTimeoutMs) * time.Millisecond)\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tselect {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-timeout:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tatomic.AddUint64(&m.timeouts, 1)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-done:\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// translate to internal cache miss error\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err == memcache.ErrCacheMiss {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\terr = ErrNotFound\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif item == nil {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// in case if memcached client returns (nil, nil)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, nil\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn item.Value, nil\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo m.client.Set(&memcache.Item{Key: m.prefix + hk, Value: v, Expiration: expire})\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Timeouts() uint64 {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn atomic.LoadUint64(&m.timeouts)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ReplicatedMemcached represents the caching setup when all the memcached instances\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "// are identical. Each read and write refers to all of them.\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ReplicatedMemcached struct {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix    string\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tinstances []Cache\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeoutMs uint64 // timeout for getting data\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Cache is a cache interface. Mainly for testing abilities.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "type Cache interface {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(string) (*memcache.Item, error)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(*memcache.Item) error\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewReplicatedMemcached creates a set of identical memcached instances.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewReplicatedMemcached(prefix string, timeout uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tm := ReplicatedMemcached{\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:    prefix,\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttimeoutMs: timeout,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, s := range servers {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tm.instances = append(m.instances, memcache.New(s))\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &m\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Get gets value for the key from the replicated memcached.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "// It sends the request to all replicas and picks the first valid answer\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (event if it's a not-found) or times out.\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *ReplicatedMemcached) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// chan size is selected so that timeouts do not block getFromReplica goroutines\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tresCh := make(chan cacheResponse, len(m.instances))\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, replica := range m.instances {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo getFromReplica(replica, k, m.prefix, resCh)\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttout := time.After(time.Duration(m.timeoutMs) * time.Millisecond)\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcacheErrs := \"\"\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor range m.instances {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase res := <-resCh:\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif res.err != nil {\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tcacheErrs = cacheErrs + \"; \" + res.err.Error()\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else if !res.found {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn res.data, nil\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-tout:\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// if this point is reached, it means that all caches returned errors\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil, errors.New(\"all caches failed with errors: \" + cacheErrs)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Set sets the key-value pair for all cache instances.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (rm *ReplicatedMemcached) Set(k string, val []byte, expire int32) {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar wg sync.WaitGroup\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, m := range rm.instances {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twg.Add(1)\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo func(k_ string, val_ []byte, expire_ int32, m_ Cache) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tm_.Set(&memcache.Item{\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tKey:        rm.prefix + k_,\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tValue:      val_,\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tExpiration: expire_,\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t})\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twg.Done()\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}(hk, val, expire, m)\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twg.Wait()\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "type cacheResponse struct {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfound bool\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdata  []byte\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr   error\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "func getFromReplica(m Cache, k string, prefix string, res chan<- cacheResponse) {\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tkey := sha256.Sum256([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/reugn/go-streams/commit/db50128f2c0ac92b8057ecbee8ac6341b36165fe?diff=split#diff-91b73d75d1aca2860b254018c07a1b68715ae6351c37666f98fbc4b42c16d8abL-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/json\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os/signal\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"syscall\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\taero \"github.com/aerospike/aerospike-client-go\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams/flow\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeProperties is the Aerospike connector configuration properties\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeProperties struct {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPolicy    *aero.ClientPolicy\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHostname  string\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPort      int\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tNamespase string\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSetName   string\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ChangeNotificationProperties holds the changes polling configuration\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ChangeNotificationProperties struct {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPollingInterval time.Duration\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSource connector\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSource struct {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient                       *aero.Client\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords                      chan *aero.Result\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy                   *aero.ScanPolicy\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tout                          chan interface{}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx                          context.Context\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties                   *AerospikeProperties\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSource returns a new AerospikeSource instance\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "// set changeNotificationProperties to nil to scan the entire namespace/set\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSource(ctx context.Context,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties,\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy *aero.ScanPolicy,\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties) (*AerospikeSource, error) {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif scanPolicy == nil {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy = aero.NewScanPolicy()\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords := make(chan *aero.Result)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSource{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:                       client,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\trecords:                      records,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy:                   scanPolicy,\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tout:                          make(chan interface{}),\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:                          ctx,\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:                   properties,\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tchangeNotificationProperties: changeNotificationProperties,\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.poll()\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) poll() {\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif as.changeNotificationProperties == nil {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// scan the entire namespace/set\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.doScan()\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclose(as.records)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// get change notifications by polling\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tticker := time.NewTicker(as.changeNotificationProperties.PollingInterval)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase t := <-ticker.C:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tts := t.UnixNano() - as.changeNotificationProperties.PollingInterval.Nanoseconds()\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.scanPolicy.PredExp = []aero.PredExp{\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpRecLastUpdate(),\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerValue(ts),\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerGreater(),\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tlog.Printf(\"Polling records %v\", as.scanPolicy.PredExp)\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.doScan()\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) doScan() {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecordSet, err := as.client.ScanAll(as.scanPolicy, as.properties.Namespase, as.properties.SetName)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tlog.Printf(\"Aerospike client.ScanAll failed with: %v\", err)\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfor result := range recordSet.Results() {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.records <- result\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) init() {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigchan := make(chan os.Signal, 1)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsignal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-sigchan:\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase result, ok := <-as.records:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif !ok {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tbreak loop\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif result.Err == nil {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tas.out <- result.Record\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Scan record error %s\", result.Err)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog.Printf(\"Closing Aerospike consumer\")\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclose(as.out)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tas.client.Close()\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Via streams data through the given flow\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Via(_flow streams.Flow) streams.Flow {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tflow.DoStream(as, _flow)\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn _flow\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Out returns an output channel for sending data\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Out() <-chan interface{} {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn as.out\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeKeyBins is an Aerospike Key and BinMap container\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "// use it to stream records to the AerospikeSink\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeKeyBins struct {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tKey  *aero.Key\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tBins aero.BinMap\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSink connector\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSink struct {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient      *aero.Client\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tin          chan interface{}\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx         context.Context\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties  *AerospikeProperties\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twritePolicy *aero.WritePolicy\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSink returns a new AerospikeSink instance\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSink(ctx context.Context,\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties, writePolicy *aero.WritePolicy) (*AerospikeSink, error) {\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif writePolicy == nil {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy = aero.NewWritePolicy(0, 0)\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSink{\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:      client,\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tin:          make(chan interface{}),\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:         ctx,\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:  properties,\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy: writePolicy,\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSink) init() {\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor msg := range as.in {\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tswitch m := msg.(type) {\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase AerospikeKeyBins:\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err := as.client.Put(as.writePolicy, m.Key, m.Bins); err != nil {\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Aerospike client.Put failed with: %s\", err)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase aero.BinMap:\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// use the md5 hash of a BinMap as a Key\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "jsonStr, err := json.Marshal(m)\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err == nil {\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey, err := aero.NewKey(as.properties.Namespase,\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.properties.SetName,\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmd5.Sum([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tsha256.Sum256([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 89,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "InTest",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ory/hydra/commit/043c6635fa3b1661b4a666f26cebf16c2306bfdb?diff=split#diff-37b8edd0d01d055fd4ede6b212ab56428bed90cd46d9960a1edfa874d8707293L-1",
                    "lines": [
                      {
                        "line": "\t\"html/template\"\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"net/http\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/hydra/cmd/cli\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/julienschmidt/httprouter\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/toqueteos/webbrowser\"\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"golang.org/x/oauth2\"\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/cmdx\"\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/flagx\"\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/randx\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/tlsx\"\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/urlx\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserWelcome = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "        Connect</a> library.</p>\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "    Hydra).\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "    To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p><a href=\"{{ .URL }}\">Authorize application</a></p>\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>`))\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserError = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>An error occurred</h1>\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h2>{{ .Name }}</h2>\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Description }}</p>\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Hint }}</p>\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Debug }}</p>\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserResult = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "<html>\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "<ul>\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Access Token: <code>{{ .AccessToken }}</code></li>\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Refresh Token: <code>{{ .RefreshToken }}</code></li>\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Expires in: <code>{{ .Expiry }}</code></li>\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>ID Token: <code>{{ .IDToken }}</code></li>\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "</ul>\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "// tokenUserCmd represents the token command\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserCmd = &cobra.Command{\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tUse:   \"user\",\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tShort: \"An exemplary OAuth 2.0 Client performing the OAuth 2.0 Authorize Code Flow\",\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tLong: `Starts an exemplary web server that acts as an OAuth 2.0 Client performing the Authorize Code Flow.\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command will help you to see if ORY Hydra has been configured properly.\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command must not be used for anything else than manual testing or demo purposes. The server will terminate on error\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "and success.`,\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRun: func(cmd *cobra.Command, args []string) {\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx := context.Background()\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif flagx.MustGetBool(cmd, \"skip-tls-verify\") {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// fmt.Println(\"Warning: Skipping TLS Certificate Verification.\")\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx = context.WithValue(context.Background(), oauth2.HTTPClient, &http.Client{Transport: &http.Transport{\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}})\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tisSSL := flagx.MustGetBool(cmd, \"https\")\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tport := flagx.MustGetInt(cmd, \"port\")\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscopes := flagx.MustGetStringSlice(cmd, \"scope\")\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprompt := flagx.MustGetStringSlice(cmd, \"prompt\")\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmaxAge := flagx.MustGetInt(cmd, \"max-age\")\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tredirectUrl := flagx.MustGetString(cmd, \"redirect\")\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbackend := flagx.MustGetString(cmd, \"token-url\")\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfrontend := flagx.MustGetString(cmd, \"auth-url\")\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\taudience := flagx.MustGetStringSlice(cmd, \"audience\")\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientID := flagx.MustGetString(cmd, \"client-id\")\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientSecret := flagx.MustGetString(cmd, \"client-secret\")\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif clientID == \"\" || clientSecret == \"\" {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Print(cmd.UsageString())\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(\"Please provide a Client ID and Client Secret using flags --client-id and --client-secret, or environment variables OAUTH2_CLIENT_ID and OAUTH2_CLIENT_SECRET.\")\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproto := \"http\"\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tproto = \"https\"\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserverLocation := fmt.Sprintf(\"%s://127.0.0.1:%d/\", proto, port)\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif redirectUrl == \"\" {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tredirectUrl = serverLocation + \"callback\"\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif backend == \"\" {\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbackend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/token\").String()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif frontend == \"\" {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfrontend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/auth\").String()\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tconf := oauth2.Config{\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientID:     clientID,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientSecret: clientSecret,\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tEndpoint: oauth2.Endpoint{\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTokenURL: backend,\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tAuthURL:  frontend,\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t},\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tRedirectURL: redirectUrl,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tScopes:      scopes,\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tstate, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tnonce, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tauthCodeURL := conf.AuthCodeURL(\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tstring(state),\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"audience\", strings.Join(audience, \"+\")),\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"nonce\", string(nonce)),\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"prompt\", strings.Join(prompt, \"+\")),\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"max_age\", strconv.Itoa(maxAge)),\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t)\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !flagx.MustGetBool(cmd, \"no-open\") {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twebbrowser.Open(serverLocation)\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up home route on \" + serverLocation)\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up callback listener on \" + serverLocation + \"callback\")\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Press ctrl + c on Linux / Windows or cmd + c on OSX to end the process.\")\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Printf(\"If your browser does not open automatically, navigate to:\\n\\n\\t%s\\n\\n\", serverLocation)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr := httprouter.New()\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar tlsc *tls.Config\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tkey, err := rsa.GenerateKey(rand.Reader, 2048)\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate RSA key pair: %s\", err)\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcert, err := tlsx.CreateSelfSignedTLSCertificate(key)\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate self-signed TLS Certificate: %s\", err)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttlsc = &tls.Config{Certificates: []tls.Certificate{*cert}}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserver := &http.Server{Addr: fmt.Sprintf(\":%d\", port), Handler: r, TLSConfig: tlsc}\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar shutdown = func() {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttime.Sleep(time.Second * 1)\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tdefer cancel()\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tserver.Shutdown(ctx)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tw.Write([]byte(fmt.Sprintf(`\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "<html><head></head><body>\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID Connect</a> library.</p>\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY Hydra).\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p><a href=\"%s\">Authorize application</a></p>\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "`, authCodeURL)))\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t})\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/callback\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(r.URL.Query().Get(\"error\")) > 0 {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"Got error: %s\\n\", r.URL.Query().Get(\"error_description\"))\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p><p>%s</p><p>%s</p></body></html>\", r.URL.Query().Get(\"error\"), r.URL.Query().Get(\"error_description\"), r.URL.Query().Get(\"error_hint\"), r.URL.Query().Get(\"error_debug\"))\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tgo shutdown()\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif r.URL.Query().Get(\"state\") != string(state) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"States do not match. Expected %s, got %s\\n\", string(state), r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p></body></html>\", \"States do not match\", \"Expected state \"+string(state)+\" but got \"+r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\t_ = tokenUserError.Execute(w, &ed{\n",
                        "lineNumber": 221,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tName:        \"States do not match\",\n",
                        "lineNumber": 222,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tDescription: \"Expected state \" + string(state) + \" but got \" + r.URL.Query().Get(\"state\"),\n",
                        "lineNumber": 223,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t})\n",
                        "lineNumber": 224,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ewhal/Pastebin/commit/bfdb8c815ad06f8b114521be2997a830285ac92b?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\"html\"\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"io\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"net/http\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dchest/uniuri\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ewhal/pygments\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDIRECTORY = \"/tmp/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "ADDRESS = \"https://p.pantsu.cat/\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "LENGTH    = 4\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tTEXT    = \"$ <command> | curl -F 'p=<-' \" + ADDRESS + \"\\n\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPORT    = \":9900\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "func check(err error) {\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err)\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func exists(location string) bool {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif _, err := os.Stat(location); err != nil {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif os.IsNotExist(err) {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn false\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generateName() string {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := uniuri.NewLen(LENGTH)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile := exists(DIRECTORY + s)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file == true {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgenerateName()\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "func save(raw []byte) string {\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpaste := raw[85 : len(raw)-46]\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := generateName()\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlocation := DIRECTORY + s\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ioutil.WriteFile(location, paste, 0644)\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "check(err)\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "func pasteHandler(w http.ResponseWriter, r *http.Request) {\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch r.Method {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase \"GET\":\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam1 := r.URL.Query().Get(\"p\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam2 := r.URL.Query().Get(\"lang\")\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif param1 != \"\" {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\td := DIRECTORY + param1\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ts, err := ioutil.ReadFile(d)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err != nil {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\thttp.Error(w, err.Error(), 500)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "if param2 != \"\" {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(string(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tio.WriteString(w, string(highlight))\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(html.UnescapeString(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tio.WriteString(w, highlight)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fairfaxmedia/flywheel/commit/8e4de33a3346aa6c85af67a52d9b0eaa43cdabdd?diff=split#diff-6971e2713fe98b79ea18e9748bf68928f6ebcd4d93e7a27f10e7472ce6d78a48L-1",
                    "lines": [
                      {
                        "line": "\tif ok && flywheel[0] == \"status\" {\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf, err := json.Marshal(pong)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfmt.Fprint(w, err)\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Write(buf)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif pong.Err != nil {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbody := fmt.Sprintf(HTML_ERROR, pong.Err)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.Write([]byte(body))\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 48,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/Ssrf/test",
              "name": "Ssrf/test",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "Ssrf",
                  "Security",
                  "InTest",
                  "SourceServer",
                  "SourceHttpHeader",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/argoproj/argo-workflows/commit/3b6c53af00843a17dc2f030e08dec1b1c070e3f2?diff=split#diff-42623a9b98b20e51352de53c9e3283f5d13fcb2b9144bb2b62f7247119b773a1L-1",
                    "lines": [
                      {
                        "line": "// InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{Certificates: []tls.Certificate{cer}, InsecureSkipVerify: true}\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsMinVersion, err := env.GetInt(\"TLS_MIN_VERSION\", tls.VersionTLS12)\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "errors.CheckError(err)\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tCertificates:       []tls.Certificate{cer},\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: false, // InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tMinVersion:         uint16(tlsMinVersion),\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ssllabs/ssllabs-scan/commit/8a3e50f861b4b2afaa3f383b50d58579bf6b966b?diff=split#diff-bdfe0ba05cb064a75ee18b6ec0f1dbe7ef0c6ed409f45d603490d1cc86b3d641L-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: true },\n",
                        "lineNumber": 498,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: false },\n",
                        "lineNumber": 497,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cloudfoundry/stratos/commit/0e62bb103775a351650f31312c7ef848846fdee7?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "if skipCertVerification {\n",
                        "lineNumber": 280,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\ttr.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 281,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tr.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 280,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 34,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/InsecureHash/test",
              "name": "InsecureHash/test",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/nickvellios/golang-web-app/commit/8ceeeb09c880de70ca2626110afa2846410a8c2a?diff=split#diff-4107bc961286db59ba80aa5bb16fee3909f98505385dd6a51cf9461da04fad16L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"database/sql\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"fmt\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"io\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"regexp\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"webapp/ncrypt\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "type User struct {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tEmail     string  `json:\"email\"`\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tName      string  `json:\"name\"`\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPassword  string  `json:\"password\"`\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHash      string  `json:\"-\"`\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tCSRFToken string  `json:\"-\"`\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tId        int     `json:\"id\"`\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDb        *sql.DB `json:\"-\"`\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Authenticate() bool {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.Load() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ncrypt.CheckPassHash([]byte(u.Hash), []byte(u.Password))\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Load reloads the user from the database.  Only value needed to be set is 'Email', the rest will be populated.\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Load() bool {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT name, password, id, csrftok FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Name, &u.Hash, &u.Id, &u.CSRFToken)\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Save() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Save user to db\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET email=$1, name=$2, password=$3 WHERE id=$4\")\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.Email, u.Name, u.Hash, u.Id)\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "*/\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Create saves a user object to the database.  If a duplicate email is found this will fail.\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Create() error {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.validEmail() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"Invalid email format\")\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif u.Exists() {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"User already exists\")\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.sanitize()\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar lastInsertId int\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := u.Db.QueryRow(\"INSERT INTO users(email, name, password) VALUES($1,$2,$3) returning id;\", u.Email, u.Name, u.Hash).Scan(&lastInsertId)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err //fmt.Println(err.Error())\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Id = lastInsertId\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) validEmail() bool {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tre := regexp.MustCompile(`^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$`)\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn re.MatchString(u.Email)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) sanitize() {\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Clean up user object to prevent XSS attacks\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Exists() bool {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT id FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Id)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) SetCSRF() {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = CSRFToken()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) RevokeCSRF() {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = \"\"\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) HashPass() {\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thash, _ := ncrypt.HashPass([]byte(u.Password))\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Hash = string(hash)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "func CSRFToken() string {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\th := md5.New()\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\th := sha256.New()\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bookingcom/carbonapi/commit/f57ca38fea22194840bae407be94d73c2eda4dfa?diff=split#diff-74597f1e11b4f598d4f75e99aee5237cc9dc7e7cf008e1f33e3c72dc4a93ffe3L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha1\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/hex\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync/atomic\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/bradfitz/gomemcache/memcache\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dgryski/go-expirecache\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrTimeout  = errors.New(\"cache: timeout\")\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrNotFound = errors.New(\"cache: not found\")\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "type BytesCache interface {\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(k string) ([]byte, error)\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(k string, v []byte, expire int32)\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "type NullCache struct{}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Get(string) ([]byte, error) { return nil, ErrNotFound }\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Set(string, []byte, int32)  {}\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewExpireCache(maxsize uint64) BytesCache {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec := expirecache.New(maxsize)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo ec.ApproximateCleaner(10 * time.Second)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ExpireCache{ec: ec}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ExpireCache struct {\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec *expirecache.Cache\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tv, ok := ec.ec.Get(k)\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn v.([]byte), nil\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec.ec.Set(k, v, uint64(len(v)), expire)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Items() int { return ec.ec.Items() }\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Size() uint64 { return ec.ec.Size() }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewMemcached(prefix string, timeoutMs uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &MemcachedCache{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:         prefix,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tqueryTimeoutMs: timeoutMs,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:         memcache.New(servers...),\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "type MemcachedCache struct {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix         string\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient         *memcache.Client\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeouts       uint64\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tqueryTimeoutMs uint64\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdone := make(chan bool, 1)\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar err error\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar item *memcache.Item\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo func() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\titem, err = m.client.Get(m.prefix + hk)\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tdone <- true\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}()\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeout := time.After(time.Duration(m.queryTimeoutMs) * time.Millisecond)\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tselect {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-timeout:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tatomic.AddUint64(&m.timeouts, 1)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-done:\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// translate to internal cache miss error\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err == memcache.ErrCacheMiss {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\terr = ErrNotFound\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif item == nil {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// in case if memcached client returns (nil, nil)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, nil\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn item.Value, nil\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo m.client.Set(&memcache.Item{Key: m.prefix + hk, Value: v, Expiration: expire})\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Timeouts() uint64 {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn atomic.LoadUint64(&m.timeouts)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ReplicatedMemcached represents the caching setup when all the memcached instances\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "// are identical. Each read and write refers to all of them.\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ReplicatedMemcached struct {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix    string\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tinstances []Cache\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeoutMs uint64 // timeout for getting data\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Cache is a cache interface. Mainly for testing abilities.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "type Cache interface {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(string) (*memcache.Item, error)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(*memcache.Item) error\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewReplicatedMemcached creates a set of identical memcached instances.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewReplicatedMemcached(prefix string, timeout uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tm := ReplicatedMemcached{\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:    prefix,\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttimeoutMs: timeout,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, s := range servers {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tm.instances = append(m.instances, memcache.New(s))\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &m\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Get gets value for the key from the replicated memcached.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "// It sends the request to all replicas and picks the first valid answer\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (event if it's a not-found) or times out.\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *ReplicatedMemcached) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// chan size is selected so that timeouts do not block getFromReplica goroutines\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tresCh := make(chan cacheResponse, len(m.instances))\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, replica := range m.instances {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo getFromReplica(replica, k, m.prefix, resCh)\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttout := time.After(time.Duration(m.timeoutMs) * time.Millisecond)\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcacheErrs := \"\"\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor range m.instances {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase res := <-resCh:\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif res.err != nil {\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tcacheErrs = cacheErrs + \"; \" + res.err.Error()\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else if !res.found {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn res.data, nil\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-tout:\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// if this point is reached, it means that all caches returned errors\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil, errors.New(\"all caches failed with errors: \" + cacheErrs)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Set sets the key-value pair for all cache instances.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (rm *ReplicatedMemcached) Set(k string, val []byte, expire int32) {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar wg sync.WaitGroup\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, m := range rm.instances {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twg.Add(1)\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo func(k_ string, val_ []byte, expire_ int32, m_ Cache) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tm_.Set(&memcache.Item{\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tKey:        rm.prefix + k_,\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tValue:      val_,\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tExpiration: expire_,\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t})\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twg.Done()\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}(hk, val, expire, m)\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twg.Wait()\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "type cacheResponse struct {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfound bool\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdata  []byte\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr   error\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "func getFromReplica(m Cache, k string, prefix string, res chan<- cacheResponse) {\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tkey := sha256.Sum256([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/reugn/go-streams/commit/db50128f2c0ac92b8057ecbee8ac6341b36165fe?diff=split#diff-91b73d75d1aca2860b254018c07a1b68715ae6351c37666f98fbc4b42c16d8abL-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/json\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os/signal\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"syscall\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\taero \"github.com/aerospike/aerospike-client-go\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams/flow\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeProperties is the Aerospike connector configuration properties\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeProperties struct {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPolicy    *aero.ClientPolicy\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHostname  string\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPort      int\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tNamespase string\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSetName   string\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ChangeNotificationProperties holds the changes polling configuration\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ChangeNotificationProperties struct {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPollingInterval time.Duration\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSource connector\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSource struct {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient                       *aero.Client\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords                      chan *aero.Result\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy                   *aero.ScanPolicy\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tout                          chan interface{}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx                          context.Context\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties                   *AerospikeProperties\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSource returns a new AerospikeSource instance\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "// set changeNotificationProperties to nil to scan the entire namespace/set\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSource(ctx context.Context,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties,\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy *aero.ScanPolicy,\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties) (*AerospikeSource, error) {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif scanPolicy == nil {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy = aero.NewScanPolicy()\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords := make(chan *aero.Result)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSource{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:                       client,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\trecords:                      records,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy:                   scanPolicy,\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tout:                          make(chan interface{}),\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:                          ctx,\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:                   properties,\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tchangeNotificationProperties: changeNotificationProperties,\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.poll()\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) poll() {\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif as.changeNotificationProperties == nil {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// scan the entire namespace/set\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.doScan()\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclose(as.records)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// get change notifications by polling\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tticker := time.NewTicker(as.changeNotificationProperties.PollingInterval)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase t := <-ticker.C:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tts := t.UnixNano() - as.changeNotificationProperties.PollingInterval.Nanoseconds()\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.scanPolicy.PredExp = []aero.PredExp{\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpRecLastUpdate(),\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerValue(ts),\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerGreater(),\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tlog.Printf(\"Polling records %v\", as.scanPolicy.PredExp)\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.doScan()\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) doScan() {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecordSet, err := as.client.ScanAll(as.scanPolicy, as.properties.Namespase, as.properties.SetName)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tlog.Printf(\"Aerospike client.ScanAll failed with: %v\", err)\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfor result := range recordSet.Results() {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.records <- result\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) init() {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigchan := make(chan os.Signal, 1)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsignal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-sigchan:\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase result, ok := <-as.records:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif !ok {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tbreak loop\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif result.Err == nil {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tas.out <- result.Record\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Scan record error %s\", result.Err)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog.Printf(\"Closing Aerospike consumer\")\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclose(as.out)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tas.client.Close()\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Via streams data through the given flow\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Via(_flow streams.Flow) streams.Flow {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tflow.DoStream(as, _flow)\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn _flow\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Out returns an output channel for sending data\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Out() <-chan interface{} {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn as.out\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeKeyBins is an Aerospike Key and BinMap container\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "// use it to stream records to the AerospikeSink\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeKeyBins struct {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tKey  *aero.Key\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tBins aero.BinMap\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSink connector\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSink struct {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient      *aero.Client\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tin          chan interface{}\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx         context.Context\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties  *AerospikeProperties\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twritePolicy *aero.WritePolicy\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSink returns a new AerospikeSink instance\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSink(ctx context.Context,\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties, writePolicy *aero.WritePolicy) (*AerospikeSink, error) {\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif writePolicy == nil {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy = aero.NewWritePolicy(0, 0)\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSink{\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:      client,\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tin:          make(chan interface{}),\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:         ctx,\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:  properties,\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy: writePolicy,\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSink) init() {\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor msg := range as.in {\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tswitch m := msg.(type) {\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase AerospikeKeyBins:\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err := as.client.Put(as.writePolicy, m.Key, m.Bins); err != nil {\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Aerospike client.Put failed with: %s\", err)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase aero.BinMap:\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// use the md5 hash of a BinMap as a Key\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "jsonStr, err := json.Marshal(m)\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err == nil {\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey, err := aero.NewKey(as.properties.Namespase,\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.properties.SetName,\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmd5.Sum([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tsha256.Sum256([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 89,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Azure/azure-event-hubs-for-kafka/commit/799660b4b8fd1e8a0c6d362212c7a7429d0efeec?diff=split#diff-d34b81a08e29004cd68e348d8510fb405d2cdaa1c1aab6e5947ef55d1d72af9eL-1",
                    "lines": [
                      {
                        "line": "applicationID := \"fd756bd0-6853-41fd-8f5a-cc7e8bd89214\"\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationSecret := \"l.vUN-4SRE45Ph9@D-]_s[zUaOBchc-i\"\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tenantID := \"72f988bf-86f1-41af-91ab-2d7cd011db47\"\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationID := os.Getenv(\"AAD_APPLICATION_ID\")\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "applicationSecret := os.Getenv(\"AAD_APPLICATION_SECRET\")\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "tenantID := os.Getenv(\"AAD_TENANT_ID\")\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Aristat/golang-example-app/commit/45a4fdb067ce46ea368c980b91de51c6e95cf821?diff=split#diff-b9640f0eb39529cf3fe30664f7a043945161da506fcd4b8c65e15b345b33dfd8L-1",
                    "lines": [
                      {
                        "line": "func ClientStore() (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\"123456\": &models.Client{\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tID:     \"123456\",\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tSecret: \"12345678\",\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tDomain: \"http://localhost:9094\",\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func ClientStore(cfg Config) (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{}\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfor k, v := range cfg.ClientStoreInfo {\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tclientsConfig[k] = &models.Client{\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tID:     v.ID,\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tSecret: v.Secret,\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tDomain: v.Domain,\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jointwt/twtxt/commit/14e86ea4b5ef71df46297a8ffccc8f259a677fb5?diff=split#diff-0c6fb9f312dbfbfed47d840e0d73f6ba10291681cf8b70ad10979fa20b6aa350L-1",
                    "lines": [
                      {
                        "line": "\t// InvalidConfigValue is the constant value for invalid config values\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// which must be changed for production configurations before successful\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// startup\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInvalidConfigValue = \"INVALID CONFIG VALUE - PLEASE CHANGE THIS VALUE\"\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// DebugMode is the default debug mode\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultDebug = false\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultData is the default data directory for storage\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultData = \"./data\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultStore is the default data store used for accounts, sessions, etc\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultStore = \"bitcask://twtxt.db\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultBaseURL is the default Base URL for the app used to construct feed URLs\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultBaseURL = \"http://0.0.0.0:8000\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultAdminXXX is the default admin user / pod operator\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminUser  = \"admin\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminName  = \"Administrator\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminEmail = \"support@twt.social\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultName is the default instance name\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultName = \"twtxt.net\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultMetaxxx are the default set of <meta> tags used on non-specific views\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaTitle       = \"\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaAuthor      = \"twtxt.net / twt.social\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaKeywords    = \"twtxt, twt, blog, micro-blogging, social, media, decentralised, pod\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaDescription = \"📕 twtxt is a Self-Hosted, Twitter™-like Decentralised microBlogging platform. No ads, no tracking, your content, your data!\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultTheme is the default theme to use ('light' or 'dark')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultTheme = \"dark\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultOpenRegistrations is the default for open user registrations\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultOpenRegistrations = false\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultRegisterMessage is the default message displayed when  registrations are disabled\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultRegisterMessage = \"\"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultCookieSecret is the server's default cookie secret\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultCookieSecret = \"PLEASE_CHANGE_ME!!!\"\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tDefaultCookieSecret = InvalidConfigValue\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 43,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/goharbor/harbor/commit/583ce589f16e5d34c60e090b39405a24021c3f44?diff=split#diff-f56bf727da9a9623dd562299c2b7c401b03f333040982de8a993b94cd54b8168L-1",
                    "lines": [
                      {
                        "line": "host:     \"postgres\",\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "port:     5432,\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "usr:      \"postgres\",\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pwd:      password,\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "database: \"postgres\",\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host:     clairDB.Host,\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "port:     clairDB.Port,\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "usr:      clairDB.Username,\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "pwd:      clairDB.Password,\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "database: clairDB.Database,\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "return userName\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/Ssrf",
              "name": "Ssrf",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "Ssrf",
                  "Security",
                  "SourceServer",
                  "SourceHttpHeader",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "python/InsecureXmlParser/test",
              "name": "InsecureXmlParser/test",
              "shortDescription": {
                "text": "Insecure Xml Parser"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nFor convenience, XML documents can use system identifiers to enable access to stored content, whether local or remote. The XML processor then uses the system identifier to access the resource rather than using the URI. When this weakness exists, the application permits user-supplied data, which could include the address of an XML external identity, to be passed directly to the XML parser. The application will then attempt to retrieve documents from outside of secure, controlled areas.\n\nAttackers can exploit this weakness to expose sensitive data, execute port scanning on the server side, or launch a denial-of-service attack (DoS) such as Billion Laughs.\n\n## Best practices for prevention\n* Avoid using vulnerable APIs\n* When possible, disable loading of data from external entities. The method of doing this will vary based on the language and XML parser being used.\n* Use a local, static document type definitions (DTDs) and ensure that external DTDs are disallowed entirely.\n* If user input cannot be avoided, perform validation against an allowlist of possible data sources. However, as long as external DTDs are allowed, XML code remains inherently vulnerable to attacks exploiting this weakness.\n\n\n## References\n* [XML vulnerabilities](https://docs.python.org/3/library/xml.html#xml-vulnerabilities)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureXmlParser",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/archerysec/archerysec/commit/73c2ef30d96ad8abcca11886ba96b9c9bc6a7289?diff=split#diff-fa2a8a9395a6042f369c987ec4ff5fe39f6a8b8ce5a551402de875938e03afb1L-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import defusedxml.ElementTree as ET\n",
                        "lineNumber": 30,
                        "lineChange": "added"
                      },
                      {
                        "line": "from scanners.scanner_parser.web_scanner import zap_xml_parser, \\\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    arachni_xml_parser, netsparker_xml_parser, webinspect_xml_parser\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "from rest_framework.response import Response\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "from rest_framework.views import APIView\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "from rest_framework.parsers import MultiPartParser, FormParser\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "class WebScan(generics.ListCreateAPIView):\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = zap_scans_db.objects.all()\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = WebScanSerializer\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self, request, format=None, **kwargs):\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "            GET List all scans and check status.\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        all_scans = zap_scans_db.objects.all()\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serialized_scans = WebScanSerializer(all_scans, many=True)\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serialized_scans.data)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Launch scans using this api\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = WebScanSerializer(data=request.data)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_id = uuid.uuid4()\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scanner = request.data.get('scanner')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "            target_url = request.data.get('scan_url', )\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_id = request.data.get('project_id', )\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "            rescanid = None\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            rescan = 'No'\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if scanner == 'zap_scan':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # run_s = launch_zap_scan\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "                thread = threading.Thread(target=launch_zap_scan, args=(target_url, project_id, rescanid, rescan))\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "                thread.daemon = True\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "                thread.start()\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif scanner == 'burp_scan':\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "                date_time = datetime.datetime.now()\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "                scan_dump = burp_scan_db(scan_id=scan_id,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         project_id=project_id,\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         url=target_url,\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         date_time=date_time)\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "                scan_dump.save()\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # do_scan = burp_plugin.burp_scans(project_id, target_url, scan_id)\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # # o = ()\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # thread = threading.Thread(target=do_scan.scan_launch(), args=(project_id, target_url, scan_id))\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # thread.daemon = True\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # thread.start()\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try:\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    do_scan = burp_plugin.burp_scans(\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        project_id,\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        target_url,\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        scan_id)\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # do_scan.scan_lauch(project_id,\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    #                    target,\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    #                    scan_id)\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    thread = threading.Thread(\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        target=do_scan.scan_launch,\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    )\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    thread.daemon = True\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    thread.start()\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # time.sleep(5)\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "                except Exception as e:\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    print e\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not target_url:\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Response({\"error\": \"No name passed\"})\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response({\"message\": \"Scan Launched\", \"scanid\": scan_id})\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "class NetworkScan(generics.ListCreateAPIView):\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Network Scan API call to perform scan.\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = scan_save_db.objects.all()\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = NetworkScanSerializer\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self, request, format=None, **kwargs):\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Returns a list of all **Network Scans** in the system.\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        all_scans = scan_save_db.objects.all()\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serialized_scans = NetworkScanSerializer(all_scans, many=True)\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serialized_scans.data)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "           Current user's identity endpoint.\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = NetworkScanSerializer(data=request.data)\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            target_ip = request.data.get('scan_ip', )\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_id = request.data.get('project_id', )\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "            profile = None\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # views.openvas_scanner(target_ip, project_id, profile)\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            thread = threading.Thread(\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "                target=views.openvas_scanner,\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "                args=(target_ip, project_id, profile)\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            )\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "            thread.daemon = True\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "            thread.start()\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # time.sleep(5)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not target_ip:\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Response({\"error\": \"No name passed\"})\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response({\"message\": \"Scan Started\"})\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "class Project(generics.CreateAPIView):\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = project_db.objects.all()\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = ProjectDataSerializers\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self, request, format=None, **kwargs):\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Returns a list of all **Network Scans** in the system.\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "        all_scans = project_db.objects.all()\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serialized_scans = ProjectDataSerializers(all_scans, many=True)\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serialized_scans.data)\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "           Current user's identity endpoint.\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = ProjectDataSerializers(data=request.data)\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_id = uuid.uuid4()\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_name = request.data.get(\"project_name\", )\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_start = request.data.get(\"project_start\", )\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_end = request.data.get(\"project_end\", )\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_owner = request.data.get(\"project_owner\", )\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_disc = request.data.get(\"project_disc\", )\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            save_project = project_db(project_name=project_name, project_id=project_id,\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                      project_start=project_start, project_end=project_end,\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                      project_owner=project_owner, project_disc=project_disc, )\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "            save_project.save()\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not project_name:\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Response({\"error\": \"No name passed\"})\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response({\"message\": \"Project Created\"})\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "class WebScanResult(generics.ListCreateAPIView):\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = zap_scan_results_db.objects.all()\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = WebScanResultSerializer\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Post request to get all vulnerability Data.\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = WebScanResultSerializer(data=request.data)\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_id = request.data.get('scan_id', )\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # project_id = request.data.get('project_id',)\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zap_scan = zap_scan_results_db.objects.filter(scan_id=scan_id)\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "            burp_scan = burp_scan_result_db.objects.filter(scan_id=scan_id)\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "            all_scans = chain(zap_scan, burp_scan)\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "            serialized_scans = WebScanResultSerializer(all_scans, many=True)\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response(serialized_scans.data)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "class NetworkScanResult(generics.ListCreateAPIView):\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = ov_scan_result_db.objects.all()\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = NetworkScanResultSerializer\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Post request to get all vulnerability Data.\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = NetworkScanResultSerializer(data=request.data)\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_id = request.data.get('scan_id', )\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "            all_scans = ov_scan_result_db.objects.filter(scan_id=scan_id)\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "            serialized_scans = NetworkScanResultSerializer(all_scans, many=True)\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response(serialized_scans.data)\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "class UpladScanResult(APIView):\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parser_classes = (MultiPartParser,)\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None):\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "        project_id = request.data.get(\"project_id\")\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scanner = request.data.get(\"scanner\")\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xml_file = request.data.get(\"filename\")\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scan_url = request.data.get(\"scan_url\")\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scan_id = uuid.uuid4()\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scan_status = \"100\"\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print xml_file\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if scanner == \"zap_scan\":\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "            date_time = datetime.datetime.now()\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_dump = zap_scans_db(scan_url=scan_url,\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     scan_scanid=scan_id,\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     date_time=date_time,\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     project_id=project_id,\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     vul_status=scan_status,\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     rescan='No')\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_dump.save()\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "            tree = ET.parse(xml_file)\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/arvvoid/plugin.video.hbogoeu/commit/b3025809c78d3fe0f7d5cca06047acce6a6f91c1?diff=split#diff-04e77ef21fb1644dd424e853cfeb8a66d3c7fd5982f201c7c7985fd87e84858cL-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import defusedxml.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome import Random\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Cipher import AES\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Util import Padding\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "except ImportError:\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # no Cryptodome gracefully fail with an informative message\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    msg = xbmcaddon.Addon().getLocalizedString(30694)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmc.log(\"[\" + str(xbmcaddon.Addon().getAddonInfo('id')) + \"] MISSING Cryptodome dependency...exiting...\" + traceback.format_exc(), xbmc.LOGDEBUG)\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmcgui.Dialog().ok(xbmcaddon.Addon().getAddonInfo('name') + \" ERROR\", msg)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sys.exit()\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "class HbogoHandler(object):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    UA = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_SW_VERSION = '4.7.4'\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_REQUIRED_PLATFORM = 'CHBR'  # emulate chrome\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ACCEPT_LANGUAGE = 'en-us,en;q=0.8'\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, handle, base_url):\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon = xbmcaddon.Addon()\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon_id = self.addon.getAddonInfo('id')\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.language = self.addon.getLocalizedString\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_url = base_url\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.handle = handle\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.DEBUG_ID_STRING = \"[\" + str(self.addon_id) + \"] \"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.SESSION_VALIDITY = 0.5  # stored session valid for half hour\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_addon_cat=\"\"\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = \"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.search_string = urllib.unquote_plus(self.addon.getSetting('lastsearch'))\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginFanart(self.handle, image=self.get_resource(\"fanart.jpg\"))\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # LABELS\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_DESC = self.language(30700).encode('utf-8')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_NORES = self.language(30701).encode('utf-8')\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_ERROR = self.language(30702).encode('utf-8')\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_INFO = self.language(30713).encode('utf-8')\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SUCESS = self.language(30727).encode('utf-8')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE_UNTILL = self.language(30703).encode('utf-8')\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_FILM_UNTILL = self.language(30704).encode('utf-8')\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE = self.language(30705).encode('utf-8')\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEASON = self.language(30706).encode('utf-8')\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_MYPLAYLIST = self.language(30707).encode('utf-8')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NOLOGIN = self.language(30708).encode('utf-8')\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_LOGIN_ERROR = self.language(30709).encode('utf-8')\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NO_OPERATOR = self.language(30710).encode('utf-8')\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH = self.language(30711).encode('utf-8')\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.use_content_type = \"episodes\"\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_original_names = self.addon.getSetting('origtitles')\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_original_names == \"true\":\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = True\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = False\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_scraper_names = self.addon.getSetting('forcescrap')\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_scraper_names == \"true\":\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = True\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = False\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.sensitive_debug = self.addon.getSetting('sensitivedebug')\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug == \"true\":\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = True\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = False\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.lograwdata = self.addon.getSetting('lograwdata')\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.lograwdata == \"true\":\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = True\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug:\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ret = xbmcgui.Dialog().yesno(self.LB_INFO, self.language(30712).encode('utf-8'), self.language(30714).encode('utf-8'), self.language(30715).encode('utf-8'))\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not ret:\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "                sys.exit()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.loggedin_headers = None  #DEFINE IN SPECIFIC HANDLER\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.API_PLATFORM = 'COMP'\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_resource(file):\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/'+file).decode('utf-8')\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_media_resource(file):\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/media/'+file).decode('utf-8')\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def log(self, msg, level=xbmc.LOGDEBUG):\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmc.log(self.DEBUG_ID_STRING + msg, level)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def setDispCat(self, cur_loc):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginCategory(self.handle, cur_loc)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = cur_loc\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def send_login_hbogo(self, url, headers, data, response_format='json'):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN URL: \" + url)\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN RESPONSE FORMAT: \" + response_format)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            r = requests.post(url, headers=headers, data=data)\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"SEND LOGIN RETURNED STATUS: \" + str(r.status_code))\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.sensitive_debug:\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self.log(\"SEND LOGIN RETURNED RAW: \" + r.text.encode('utf-8'))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if response_format == 'json':\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return r.json()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif response_format == 'xml':\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return ET.fromstring(r.text.encode('utf-8'))\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/arvvoid/plugin.video.hbogoeu/commit/b3025809c78d3fe0f7d5cca06047acce6a6f91c1?diff=split#diff-04e77ef21fb1644dd424e853cfeb8a66d3c7fd5982f201c7c7985fd87e84858cL-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import defusedxml.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome import Random\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Cipher import AES\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Util import Padding\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "except ImportError:\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # no Cryptodome gracefully fail with an informative message\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    msg = xbmcaddon.Addon().getLocalizedString(30694)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmc.log(\"[\" + str(xbmcaddon.Addon().getAddonInfo('id')) + \"] MISSING Cryptodome dependency...exiting...\" + traceback.format_exc(), xbmc.LOGDEBUG)\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmcgui.Dialog().ok(xbmcaddon.Addon().getAddonInfo('name') + \" ERROR\", msg)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sys.exit()\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "class HbogoHandler(object):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    UA = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_SW_VERSION = '4.7.4'\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_REQUIRED_PLATFORM = 'CHBR'  # emulate chrome\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ACCEPT_LANGUAGE = 'en-us,en;q=0.8'\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, handle, base_url):\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon = xbmcaddon.Addon()\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon_id = self.addon.getAddonInfo('id')\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.language = self.addon.getLocalizedString\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_url = base_url\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.handle = handle\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.DEBUG_ID_STRING = \"[\" + str(self.addon_id) + \"] \"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.SESSION_VALIDITY = 0.5  # stored session valid for half hour\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_addon_cat=\"\"\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = \"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.search_string = urllib.unquote_plus(self.addon.getSetting('lastsearch'))\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginFanart(self.handle, image=self.get_resource(\"fanart.jpg\"))\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # LABELS\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_DESC = self.language(30700).encode('utf-8')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_NORES = self.language(30701).encode('utf-8')\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_ERROR = self.language(30702).encode('utf-8')\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_INFO = self.language(30713).encode('utf-8')\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SUCESS = self.language(30727).encode('utf-8')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE_UNTILL = self.language(30703).encode('utf-8')\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_FILM_UNTILL = self.language(30704).encode('utf-8')\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE = self.language(30705).encode('utf-8')\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEASON = self.language(30706).encode('utf-8')\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_MYPLAYLIST = self.language(30707).encode('utf-8')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NOLOGIN = self.language(30708).encode('utf-8')\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_LOGIN_ERROR = self.language(30709).encode('utf-8')\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NO_OPERATOR = self.language(30710).encode('utf-8')\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH = self.language(30711).encode('utf-8')\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.use_content_type = \"episodes\"\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_original_names = self.addon.getSetting('origtitles')\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_original_names == \"true\":\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = True\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = False\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_scraper_names = self.addon.getSetting('forcescrap')\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_scraper_names == \"true\":\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = True\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = False\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.sensitive_debug = self.addon.getSetting('sensitivedebug')\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug == \"true\":\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = True\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = False\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.lograwdata = self.addon.getSetting('lograwdata')\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.lograwdata == \"true\":\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = True\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug:\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ret = xbmcgui.Dialog().yesno(self.LB_INFO, self.language(30712).encode('utf-8'), self.language(30714).encode('utf-8'), self.language(30715).encode('utf-8'))\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not ret:\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "                sys.exit()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.loggedin_headers = None  #DEFINE IN SPECIFIC HANDLER\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.API_PLATFORM = 'COMP'\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_resource(file):\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/'+file).decode('utf-8')\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_media_resource(file):\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/media/'+file).decode('utf-8')\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def log(self, msg, level=xbmc.LOGDEBUG):\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmc.log(self.DEBUG_ID_STRING + msg, level)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def setDispCat(self, cur_loc):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginCategory(self.handle, cur_loc)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = cur_loc\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def send_login_hbogo(self, url, headers, data, response_format='json'):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN URL: \" + url)\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN RESPONSE FORMAT: \" + response_format)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            r = requests.post(url, headers=headers, data=data)\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"SEND LOGIN RETURNED STATUS: \" + str(r.status_code))\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.sensitive_debug:\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self.log(\"SEND LOGIN RETURNED RAW: \" + r.text.encode('utf-8'))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if response_format == 'json':\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return r.json()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif response_format == 'xml':\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return ET.fromstring(r.text.encode('utf-8'))\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except requests.RequestException as e:\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"SEND LOGIN ERROR: \" + repr(e))\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "            resp = {\"Data\": {\"ErrorMessage\": \"SEND LOGIN ERROR\"}, \"ErrorMessage\": \"SEND LOGIN ERROR\"}\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return resp\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_from_hbogo(self, url, response_format='json'):\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"GET FROM HBO URL: \" + url)\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"GET FROM HBO RESPONSE FORMAT: \" + response_format)\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            r = requests.get(url, headers=self.loggedin_headers)\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"GET FROM HBO STATUS: \" + str(r.status_code))\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if response_format == 'json':\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return r.json()\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif response_format == 'xml':\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return ET.fromstring(r.text.encode('utf-8'))\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 23,
                "cwe": [
                  "CWE-611"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/recipes/terraform/config/backends/kubernetes.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b2ee6fa034d4d0a43099724762b7396e9f3455b4fae3a480c4d7f73316e92119",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.fe86eaf4.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/recipes/terraform/config/backends/kubernetes.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/ucp/trackedresource/name.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "389647c2cbbdfba8bd40045d7d4180fb25916ac806d9151b33d05f8fc61b9074",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.fe86eaf4.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ucp/trackedresource/name.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kubernetes/secrets.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c70d1df791d0a7c094c3b17a4ebc06a38f6f7040251785b8105571254065bce2",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kubernetes/secrets.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/ucp/store/apiserverstore/apiserverclient.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 407,
                  "endLine": 407,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fba9662498f3b219e7554ce60a5e0937a209cab92893bd932dba9e0253d94566",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.fe86eaf4.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ucp/store/apiserverstore/apiserverclient.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 407,
                            "endLine": 407,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/controller/reconciler/annotations.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 9,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c6b956f255d525fa26b8470cc40d6ea9c1932724f083476e5d225678a0abbb5c",
            "1": "339a08ba.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72.339a08ba.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/controller/reconciler/annotations.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/ucp/util/etag/etag.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e4fcf0192fbc502e208b217c779ef50434e9c092dd746db27cd9103d0870b504",
            "1": "34950bd9.73eb5804.45df3e14.f24cd98e.0772103c.67ab4541.860c51ff.1d874c72.34950bd9.73eb5804.45df3e14.f24cd98e.0772103c.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ucp/util/etag/etag.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[Write](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/armrpc/authentication/certvalidator_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "49bcf10977763ca068a4cc5cc56118597700cf388320099b697f1b1eb4f7c36c",
            "1": "ad99a241.c45f1b38.45df3e14.0c66bee6.7c4a878b.67ab4541.3bee9612.0cdf1410.1b973386.73eb5804.fd4eeae2.e22980a8.6b6807dc.67ab4541.3bee9612.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/authentication/certvalidator_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 28,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/authentication/certvalidator_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 28,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/authentication/certvalidator_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/authentication/certvalidator_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 357,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[Write](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/middleware/lowercaseurlpath_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e2ba891f0d0ea1727b4166dcfaaf292f821dcb0db349e65f2e8ad816b53649c7",
            "1": "4d5aa13a.73eb5804.45df3e14.6f6e1432.db2bb079.995dab92.3bee9612.0cdf1410.1b973386.73eb5804.fd4eeae2.6e842233.6b6807dc.67ab4541.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/lowercaseurlpath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 12,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/lowercaseurlpath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 12,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/lowercaseurlpath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 12,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/lowercaseurlpath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 12,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/lowercaseurlpath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/lowercaseurlpath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 27,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/lowercaseurlpath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 20,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/lowercaseurlpath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 357,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[Write](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/middleware/normalizepath_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3450ea5fd0447c34d051273ed78a5d145252b90e1730a2af1b7d5aa31e968d0b",
            "1": "ad99a241.c45f1b38.45df3e14.0c66bee6.7c4a878b.67ab4541.3bee9612.0cdf1410.1b973386.73eb5804.fd4eeae2.e22980a8.6b6807dc.67ab4541.3bee9612.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 27,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 27,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 20,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 407,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[Write](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/middleware/normalizepath_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a05b2ff917899cf52e0258879ccf2c54c2ad81c35b1bb2c0a934baab746f17df",
            "1": "ad99a241.c45f1b38.45df3e14.0c66bee6.7c4a878b.67ab4541.3bee9612.0cdf1410.1b973386.73eb5804.fd4eeae2.e22980a8.6b6807dc.67ab4541.3bee9612.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 27,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 27,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 20,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 407,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[Write](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/middleware/normalizepath_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cd08e3c389b66945cb96194ae3b78004dca5e5a98efd5a687fe4a52a5e671ba7",
            "1": "ad99a241.c45f1b38.45df3e14.0c66bee6.7c4a878b.67ab4541.3bee9612.0cdf1410.1b973386.73eb5804.fd4eeae2.e22980a8.6b6807dc.67ab4541.3bee9612.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 27,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 27,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 20,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 407,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[Write](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/middleware/normalizepath_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4b2c8306336fa9e840cff098f1821ff1407d3d0b6cfde57c3622bcb33b3b6557",
            "1": "ad99a241.c45f1b38.45df3e14.0c66bee6.7c4a878b.67ab4541.3bee9612.0cdf1410.1b973386.73eb5804.fd4eeae2.e22980a8.6b6807dc.67ab4541.3bee9612.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 27,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 27,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 20,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/middleware/normalizepath_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 407,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3)",
              "[fmt.Fprintf](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/testrp/testrp.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 2,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "76cf207dc6e1e463e7bfc23faf61044ea9c79f3b87a9d37b9b571bed856904a2",
            "1": "b700ed59.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.1b973386.277c621c.fd4eeae2.e22980a8.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/testrp/testrp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 31,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/testrp/testrp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 31,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/testrp/testrp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 31,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/testrp/testrp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/testrp/testrp.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 357,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[_](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/armrpc/frontend/defaultoperation/resource_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 223,
                  "endLine": 223,
                  "startColumn": 3,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eb7ff78f0f1f7357d77757620166dfdef0dab3ae6e6667a972b0e96da65ef095",
            "1": "424eddda.98f0ff0f.3d13e656.6483b32f.6ee851a6.67ab4541.8ee950b3.dd979430.163b5b71.940077cb.3d13e656.e22980a8.6ee851a6.67ab4541.8ee950b3.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/frontend/defaultoperation/resource_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/frontend/defaultoperation/resource_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/frontend/defaultoperation/resource_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 3,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 151,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/functional/shared/resources/gateway_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "endLine": 413,
                  "startColumn": 4,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7249c016d6d64716666cdcd86bb724244335bace6e1817e7d0c89755e05fce9e",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.8ee950b3.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/functional/shared/resources/gateway_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 413,
                            "endLine": 413,
                            "startColumn": 4,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/recipes/terraform/config/backends/kubernetes_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eeb2fd378eb62ae8967e4448e3f5e5d44a09ca2d93299155c82b2a9ed0e75307",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.fe86eaf4.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/recipes/terraform/config/backends/kubernetes_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f5cb1b9dca6a4a7fe0672bf28062d241095c14245b14b799ab5913beab366786",
            "1": "974a0c1f.ef407988.45df3e14.79502f34.45ea151f.71030370.30910d28.1bff12d3.974a0c1f.ef407988.45df3e14.79502f34.45ea151f.71030370.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "22d0387da07100085841f9e2fe2ddb44ba8a47434b539dc5472ff8c67e2ded9e",
            "1": "974a0c1f.98f0ff0f.45df3e14.79502f34.45ea151f.a9759be7.30910d28.1bff12d3.974a0c1f.98f0ff0f.45df3e14.79502f34.45ea151f.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b6be0fc8cd529eb5de8ec85ab526a0a3dcfde846821f396e356fecbbf0940083",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1b7b2720292f2f4d41db6e02b76d96e4ea20c484b4fb8adcd00452d07c449166",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "933d8f9bdd49694b12ebe714005076377ff4250d4b1e7aa2e55571cf47de5351",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d16c8d59f34a54aab3c863dc78d08d785ac967bd622f3b353d56688aa5fe0b7b",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 185,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "69f38c680e2fb632b38df01c8097e81c11cbc64898847e0f6a96fbf01068ca81",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 185,
                            "endLine": 185,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "50ddd7ca70a5ab11fd39f7fce426da62636053064ebc7c4138c6d1eae51b213a",
            "1": "974a0c1f.ef407988.45df3e14.79502f34.45ea151f.71030370.30910d28.1bff12d3.974a0c1f.ef407988.45df3e14.79502f34.45ea151f.71030370.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "79c1fecd75b94dcbea6038f53f6310e65d26f0e46f7f4e16b891ec08078e1aa8",
            "1": "974a0c1f.98f0ff0f.45df3e14.79502f34.45ea151f.a9759be7.30910d28.1bff12d3.974a0c1f.98f0ff0f.45df3e14.79502f34.45ea151f.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "efd3806f3e1805faea9664a69db66148ff21aa8c34fa9b2ff4ee33efdfac656a",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b40bbfd696eb663a3cc21b078c38620401509eb9c62f19557cc32055f08360c9",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "323eb0de17d979f0f184c37fa6627141d3e450e450e73480a2f7755b995e32e4",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 166,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ce0ae5054a6229491420b43b0ee8385dea68e60ac7f4e8699021bd37a70ef1cb",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 208,
                  "endLine": 208,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3603e33ea6ecd277e2f926dc36d838f47fbe0c3beb2a17055becd635348525cf",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 208,
                            "endLine": 208,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5678954f7e3f9287c3348ceeccd2bb1a969e9df36cf2c1f7db1f64082e00aa3d",
            "1": "974a0c1f.ef407988.45df3e14.79502f34.45ea151f.71030370.30910d28.1bff12d3.974a0c1f.ef407988.45df3e14.79502f34.45ea151f.71030370.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8738a74769425c3fb9e2805d26b2f55468cb23f8cb8d840a8810db36787e8edc",
            "1": "974a0c1f.98f0ff0f.45df3e14.79502f34.45ea151f.a9759be7.30910d28.1bff12d3.974a0c1f.98f0ff0f.45df3e14.79502f34.45ea151f.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "86461f30a841b915d6c060e375943acf5714f902ecc4f425f7513fcb8b96ba0e",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 105,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9d28a27de8ccbab4e36a39238b966e22c94070114d9b24acfc0b6af5a72287e8",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4dd987abe1b30360c5cb5664f24b28021c801f30da5d6d740f0b378ae6640d4e",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 128,
                            "endLine": 128,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ebc26ffa5ae23e555829ec5a06658163d1a1aa31e8645f6bbc7be1e39ef669f6",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 156,
                            "endLine": 156,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "98c15070cd0088a93adc4bd7057c71cbb39d8e17eed7763d623dd9016e484481",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 19,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 198,
                            "endLine": 198,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d435aca15ec4e04a8526fc5b21d10ea83ad6d6152be307d44d95d727341ae7b1",
            "1": "974a0c1f.ef407988.3d13e656.79502f34.45ea151f.71030370.30910d28.1bff12d3.974a0c1f.ef407988.3d13e656.79502f34.45ea151f.1bf86369.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8a0d0bb35b48b6327e83c335055dc28ea2ef61e77a6dcee2d7054b30b331624f",
            "1": "974a0c1f.98f0ff0f.45df3e14.79502f34.45ea151f.71030370.30910d28.1bff12d3.974a0c1f.98f0ff0f.45df3e14.79502f34.45ea151f.71030370.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "85f0f71a5e6a04ac8e311f11d5e054b07bf963090fe13359f1fd54b66a3be1bf",
            "1": "974a0c1f.98f0ff0f.45df3e14.bfac11f0.45ea151f.a9759be7.30910d28.ff3d0695.974a0c1f.98f0ff0f.45df3e14.79502f34.45ea151f.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "69b1af1421d1a095ab9828916107ec23a7ef31c751bb4992a6c1c572c1646d92",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3a8671860977b07d249a7ff05153c24ad2d66f0149288b0a939ea808028d0616",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd43c7c5df7f8ad3ae985fc0086febf421622dc2d94e995754a592fc5c3d12c4",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dfe0bbbe3b5a2a65539db281d42de2369710bb8d142fe801c46efb28a3085da1",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6c5ad439f46f67f37e7b850ef10753263ecb726d724cb295014e35b9b180a476",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.45df3e14.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 122,
                            "endLine": 122,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 190,
                  "endLine": 190,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f86e8d10a4b22523580d94d7ef20eb32fa5bcb2c1ddb3df1af8297231193e998",
            "1": "974a0c1f.98f0ff0f.3d13e656.79502f34.45ea151f.71030370.30910d28.1bff12d3.974a0c1f.98f0ff0f.3d13e656.79502f34.45ea151f.71030370.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 208,
                  "endLine": 208,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "42febd04758cc98e1147d505de751e16019ba7db4e96d8d677f2fc0b403efb1a",
            "1": "974a0c1f.98f0ff0f.3d13e656.bfac11f0.45ea151f.71030370.30910d28.ff3d0695.974a0c1f.98f0ff0f.3d13e656.79502f34.45ea151f.71030370.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 208,
                            "endLine": 208,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209,
                  "startColumn": 24,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ebea3f1c3c9765c82c95588a7075f8698e230723f6c427f941e4193dcc9dbd6f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.3d13e656.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 209,
                            "endLine": 209,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219,
                  "startColumn": 22,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "829411ec8977fc04335bebd2bc8b403001d6fa99235ed7973d02948630ab78e1",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.3d13e656.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 219,
                            "endLine": 219,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 220,
                  "endLine": 220,
                  "startColumn": 22,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1cc4ac901d95173cfab643af7fdbcbe285716dbe91c0bc2a16b509bed0c31325",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.3d13e656.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/corerp/processors/extenders/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 221,
                  "endLine": 221,
                  "startColumn": 22,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dc0581bda4dfe172a13f4a0f679dab2d241a46e956f508a984d17829d9abcfe1",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.2f3335af.98f0ff0f.3d13e656.79502f34.6ee851a6.63a86890.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/corerp/processors/extenders/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 221,
                            "endLine": 221,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3868fe79523a358c8f4dbb266db82419abc0dbe13a18197bbd0d07e91b5db860",
            "1": "424eddda.ef407988.3d13e656.79502f34.6ee851a6.63a86890.30910d28.1bff12d3.3a16cad1.776d1789.3d13e656.79502f34.6ee851a6.f2930542.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 19,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "20cc40e27370230dba50a018d3e7823eb3a7084da5bdc72d8382c1a7ab85258b",
            "1": "424eddda.98f0ff0f.3d13e656.79502f34.6ee851a6.63a86890.30910d28.1bff12d3.3a16cad1.776d1789.3d13e656.79502f34.6ee851a6.f2930542.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 19,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b544615449ed606690bf14ec2e7cc534f8782272578b748b26cc712961f3c9de",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.3a16cad1.776d1789.3d13e656.79502f34.6ee851a6.f2930542.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 19,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f4a5104784a79b49cdf7586cca458b40b617a807fec84c961cad32a097d7a9fc",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.3a16cad1.776d1789.3d13e656.79502f34.6ee851a6.f2930542.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 19,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/api/v20231001preview/rediscache_conversion_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6fbac5fe46f19df1b3ec4563c1169cfee2a1c5abfe7e50f59a05928c4f5c66f6",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.df2d5e17.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/rediscache_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 25,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/rediscache_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/api/v20231001preview/mongodatabase_conversion_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 162,
                  "endLine": 162,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c0e0f6d4602f71dc17dca1a3770358bd63855f67be98cdaee390447a4abd0a32",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.df2d5e17.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/mongodatabase_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 162,
                            "endLine": 162,
                            "startColumn": 25,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/mongodatabase_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 162,
                            "endLine": 162,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/api/v20231001preview/sqldatabase_conversion_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2c47b74300af716aea8ad8296ba72ea4ca35e1ff75e4f6747be79e5cb4d1dc60",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.df2d5e17.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/sqldatabase_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 25,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/sqldatabase_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 123,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9e7c652a2d27f6cd8b8abf17c129fbe64ae95bb13caeea515a1775f4efaaa0c3",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.797f7937.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.c67516cf.797f7937.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 16,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b98fd0bac5e1e04b086f11a1c2e0b430a50aa8dd7b76ddf39a3aba24e07371ca",
            "1": "424eddda.0291bc58.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3.424eddda.0291bc58.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a779e15056cedcc2e3aefc50039493029908278058cf41b0b2fb807c307f305a",
            "1": "424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "76dc5350fac5aa5e50d30536f6f212b8699d10b568e80c13b2ae012f5a1f537d",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5c80a804a357f8422763b0ba68d910e01b6cc00a51df628ee507367e41045384",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd006a584d3ea9585c57b9a220bebb7847637f464a4f0d892989c304899b7f73",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a497b562e082134b722a89651190114f1796ddf82f8c9744debc0d64974b541a",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a019722705ca64431e8e5f63505d31b89bfc5f8c2a192e4d423536d10d921165",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 158,
                            "endLine": 158,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 181,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1f608e79dc197ec235ef5dba03e63dda7425c2d323b4ec2ff296684a2dec6b8a",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/sqldatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 181,
                            "endLine": 181,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b33ec37290bda61dfe56a3023c48a615a6882e60327e9444157c17ad488851f6",
            "1": "424eddda.0291bc58.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3.424eddda.0291bc58.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ed156d19fafd05c4ef92be721a7194f505a7652745a6537e97b016eb69021b8",
            "1": "424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eae73820b5d31b02c25a0bcfdda25d1b44bf6a40f294d27ebf1d6528aa0fc882",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cf1285b1fa415d49d3b44a25e75a8fa06081863f87aa5b01ad390eba9cc00953",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0212067b6e333704b64fd208e0465639bbbd6c8bb2f001af87d859946e3f4075",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 162,
                  "endLine": 162,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6121bd36c8aafd36cb3401aa3dbe582080e3ba03835dc856b4c2743bc8500f94",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 162,
                            "endLine": 162,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 203,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2b9ebfee19d3181f5ae6625bda269e1eb606b27cace374ceb565a1f7f0650d12",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/rediscaches/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "82e391707e5457bac9a9288f5786cb79d5d1cb1e52cda55457bf226e7c1acbc1",
            "1": "424eddda.0291bc58.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3.424eddda.0291bc58.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ccb536b018ac7952a589d7e28adf32b769016a7d63b4c8c27601cddc25bf4eaa",
            "1": "424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c1cbbc9987cb4c9070279e97023df4f6605afd0290d46ecb9fc57629b3470cc9",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e40a4a5f40c8270f5181262a4d2b123270ebab890016d761101ca47d11be795c",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 124,
                  "endLine": 124,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b8dc2e504be993165355114afcb42ef1c1a8b1b96a3ffcf3b50a75b8ab31de46",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7513b57f43f021addd1d55478c5580df1c55aba69adc2588786ec82be92cd7ed",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4322090330096592a38a5915e25ae0d5b1d0f3da20ab71ed4d85caf7e29a8b0d",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 194,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d23d2c02940c9491a55932dc574115a2192dee8b3d5afcd3af11d415b769982a",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.a9759be7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.a9759be7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/processors/mongodatabases/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 194,
                            "endLine": 194,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b6ead751b0e278f2411fd5d827c92bf9ebc1a208c6cbc8b9bff02e86e5e46642",
            "1": "424eddda.0291bc58.3d13e656.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3.424eddda.0291bc58.3d13e656.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f6ad4633bda07d0c2b17189ff86c09a6a53eedc334b6cc58fa57cca761040c2e",
            "1": "424eddda.98f0ff0f.3d13e656.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3.424eddda.98f0ff0f.3d13e656.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "09c4d882cd552abe2b219af019e14ef5dbc2c7ead18741f010f4901b6196f50c",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.3d13e656.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 15,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c26f1f57733a770c44bae5a2c51d2b434a80add33aef29880989840cc6c00c5c",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.3d13e656.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 108,
                  "endLine": 108,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "74158cab927fa8b27a98a39af05b4194aac09b08c840926346fc4c082d412d9a",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.3d13e656.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57b27925e075000a2d720949d41ffd391a6c77ef06a9fa401f51ae7ec608517f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.3d13e656.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/api/v20231001preview/rediscache_conversion_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b0d5e221cb87deca1151036bce51d6eacbefc952779be50d1a267cfacf00d972",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/rediscache_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/rediscache_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/api/v20231001preview/mongodatabase_conversion_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 160,
                  "endLine": 160,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8eda38ef51e6ced68a53c3b792e3c125ad59a24414bc3279be2911bfad280c26",
            "1": "3f86bf3e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.664ad69b.8ee950b3.ff3d0695.3f86bf3e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.664ad69b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/mongodatabase_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 28,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/mongodatabase_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/datastoresrp/api/v20231001preview/sqldatabase_conversion_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2b23c291131d07447771c250b27bd9825c93bc6cadf6372b67feced419dc1c59",
            "1": "3f86bf3e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.664ad69b.8ee950b3.ff3d0695.3f86bf3e.98f0ff0f.3d13e656.bfac11f0.6ee851a6.664ad69b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/sqldatabase_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/datastoresrp/api/v20231001preview/sqldatabase_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "56149111b2e61a7e2e334233538cb5c4b0c7c70a1eadd026a6c3377d9bb3e8ef",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.0b5d0d65.424eddda.98f0ff0f.3d13e656.ef8a41f9.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/processors/rabbitmqqueues/processor_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 434,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/messagingrp/api/v20231001preview/rabbitmq_conversion_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 6,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "987927a51c7e0934d95c5b0d8337a0060824aa3e01721bd08a9d1e924ac9009f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/api/v20231001preview/rabbitmq_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 28,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/messagingrp/api/v20231001preview/rabbitmq_conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 6,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[_](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/ucp/frontend/controller/planes/proxycontroller.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 155,
                  "startColumn": 3,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1fde3d4bf2c1c7d31fd1e2d9cc5d2aeccd0fdf457d9237b7fe7ffe15cb8e536e",
            "1": "424eddda.98f0ff0f.3d13e656.6483b32f.6ee851a6.67ab4541.8ee950b3.dd979430.163b5b71.940077cb.3d13e656.e22980a8.20e24934.67ab4541.8ee950b3.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ucp/frontend/controller/planes/proxycontroller.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ucp/frontend/controller/planes/proxycontroller.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ucp/frontend/controller/planes/proxycontroller.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 3,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[_](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/armrpc/rest/results.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "startColumn": 3,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8ecf7c3eb1f6e5d45af835cee0abbe4dbe68232f09936381c222d90328c05825",
            "1": "424eddda.98f0ff0f.3d13e656.6483b32f.6ee851a6.67ab4541.8ee950b3.dd979430.163b5b71.940077cb.3d13e656.e22980a8.6ee851a6.67ab4541.8ee950b3.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 3,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 607,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[_](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/armrpc/rest/results.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 210,
                  "endLine": 210,
                  "startColumn": 3,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cdb8100abf646207967d52f8b680d0889f62ac84463a507551faa6e760539e58",
            "1": "424eddda.98f0ff0f.3d13e656.6483b32f.6ee851a6.67ab4541.8ee950b3.dd979430.163b5b71.940077cb.3d13e656.e22980a8.6ee851a6.67ab4541.8ee950b3.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 210,
                            "endLine": 210,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 210,
                            "endLine": 210,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 210,
                            "endLine": 210,
                            "startColumn": 3,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 607,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3)",
              "[_](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/armrpc/rest/results.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 326,
                  "endLine": 326,
                  "startColumn": 3,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "70df532d97c761024e149c5610c37109409e4c95cf0e5841421783b12855ed72",
            "1": "424eddda.73eb5804.e0fd2740.6483b32f.437467f6.67ab4541.8ee950b3.dd979430.163b5b71.940077cb.e0fd2740.e22980a8.437467f6.67ab4541.47a042ff.825d389c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 326,
                            "endLine": 326,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 326,
                            "endLine": 326,
                            "startColumn": 3,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 607,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[_](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/ucp/frontend/controller/radius/proxy.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 184,
                  "startColumn": 3,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "07ed89c8b98be0b6ca88f19cfcd4730cacc4633580dabd1f1ad5b39125fe8f74",
            "1": "5eddd1f1.98f0ff0f.3d13e656.6483b32f.6ee851a6.67ab4541.8ee950b3.dd979430.5eddd1f1.940077cb.3d13e656.e22980a8.20e24934.67ab4541.8ee950b3.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ucp/frontend/controller/radius/proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 184,
                            "endLine": 184,
                            "startColumn": 13,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ucp/frontend/controller/radius/proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 184,
                            "endLine": 184,
                            "startColumn": 13,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ucp/frontend/controller/radius/proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 184,
                            "endLine": 184,
                            "startColumn": 3,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[_](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/armrpc/frontend/controller/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121,
                  "startColumn": 3,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3ae8b8ae4fb6c63fdfecf05294b10c7230133349c53f91d7a4de1da252813e74",
            "1": "424eddda.98f0ff0f.3d13e656.6483b32f.6ee851a6.67ab4541.8ee950b3.dd979430.163b5b71.940077cb.45df3e14.e22980a8.6ee851a6.67ab4541.8ee950b3.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/frontend/controller/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/frontend/controller/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/frontend/controller/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 3,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into ASSIGN, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[ASSIGN](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/armrpc/rest/results.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321,
                  "startColumn": 3,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d4080b6fc974e2cc18742f7315c38ca61edb7f65b25b486a1b9d5f37b29bfa1b",
            "1": "424eddda.73eb5804.e0fd2740.e22980a8.437467f6.67ab4541.8ee950b3.dd979430.424eddda.73eb5804.e0fd2740.a5ae0baf.fa6a56aa.67ab4541.8ee950b3.949d0607"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/armrpc/rest/results.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 3,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 607,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "xml.etree.ElementTree.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.ElementTree.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/scripts/transform_test_results.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 10,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e19b841816e1634fa2d472ad834a430244ce0ebfccf634a55ca7818504f5099a",
            "1": "26f1400e.84f55464.79e62dc9.5697e99c.1d07cee4.57d888ee.b69c6615.50a3ef13.26f1400e.84f55464.79e62dc9.5697e99c.1d07cee4.57d888ee.b69c6615.50a3ef13"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": ".github/scripts/transform_test_results.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 10,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "TypeScript",
            "files": 15,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Go",
            "files": 1214,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 4,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "JavaScript",
            "files": 2,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

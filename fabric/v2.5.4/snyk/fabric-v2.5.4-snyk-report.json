{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedNonCryptoSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword",
              "name": "HardcodedPassword",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "go/TooSmallKeySize/test",
              "name": "TooSmallKeySize/test",
              "shortDescription": {
                "text": "Inadequate Encryption Strength"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n## Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooSmallKeySize",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/cs3org/reva/commit/38af4c15190bfbc83177107e8e00bf98c54fb009?diff=split#diff-99c46b42524a4b672d91f795f0cd434fL175",
                    "lines": [
                      {
                        "line": "func mustRSAKey() *rsa.PrivateKey {",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "  key, err := rsa.GenerateKey(rand.Reader, 1024)",
                        "lineNumber": 174,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  key, err := rsa.GenerateKey(rand.Reader, 2048)",
                        "lineNumber": 174,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO really panic?",
                        "lineNumber": 176,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dexidp/dex/commit/ebbea78a2eb0f89104ccedf54a7752f601b72fd5?diff=split#diff-f5a63b3798c32b70652a7c48786df8bdL139",
                    "lines": [
                      {
                        "line": "func GeneratePrivateKey() (*PrivateKey, error) {",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  pk, err := rsa.GenerateKey(rand.Reader, 1024)",
                        "lineNumber": 138,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  pk, err := rsa.GenerateKey(rand.Reader, 2048)",
                        "lineNumber": 138,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return nil, err",
                        "lineNumber": 140,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/golang/go/commit/5b20a18f3b985cdf116a0ea6dd589d26056b16ad?diff=split#diff-863700294a2fc12b6fb40449950e5a1aL31",
                    "lines": [
                      {
                        "line": "flag.Parse()",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "priv, err := rsa.GenerateKey(rand.Reader, 1024)",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 41,
                        "lineChange": "added"
                      },
                      {
                        "line": "priv, err := rsa.GenerateKey(rand.Reader, *rsaBits)",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  log.Fatalf(\"failed to generate private key: %s\", err)",
                        "lineNumber": 45,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 15,
                "cwe": [
                  "CWE-326"
                ]
              }
            },
            {
              "id": "go/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pacolang/paco/commit/d05f41cb0aa3167b86bd3b1063d07d7e64bec86f?diff=split#diff-7ddfb3e035b42cd70649cc33393fe32cR26",
                    "lines": [
                      {
                        "line": "// Commands",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "switch os.Args[1] {",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "case \"build\":",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "  err := buildCommand.Parse(os.Args[2:])",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Read the given file",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "bytes, err := ioutil.ReadFile(os.Args[1])",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bytes, err := ioutil.ReadFile(file)",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  log.Errorf(err)",
                        "lineNumber": 47,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/trinchan/slackbot/commit/c8350a18049c609ef7b6847666d07e69aca9fb46?diff=split#diff-f2f667c6f0bb538d9d35241bd93421fcL18",
                    "lines": [
                      {
                        "line": "func init() {",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "  flag.Parse()",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var configFile = flag.String(\"c\", \"config.json\", \"Config file (default ./config.json)\")",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  config, err := ioutil.ReadFile(configFile)",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  config, err := ioutil.ReadFile(*configFile)",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.Println(\"open config: \", err)",
                        "lineNumber": 20,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ketchuphq/ketchup/commit/31630fa4703d23c6055439536fd661d3c47da038?diff=split#diff-d72b60c856c1aa9b8e14c2c3c4b221abL59",
                    "lines": [
                      {
                        "line": "Run: func(ctx *service.CommandContext) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ctx.RequireExactlyNArgs(1)",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "  f, err := os.Open(ctx.Args[0])",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    panic(err)",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  err := m.importFromJSON(ctx.Args[0])",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpanic(err)",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *Module) importFromJSON(path string) error {",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "  f, err := os.Open(path)",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return err",
                        "lineNumber": 81,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 527,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/ErrorMessage",
              "name": "ErrorMessage",
              "shortDescription": {
                "text": "Generation of Error Message Containing Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen a command to your site or application fails, it should do so gracefully, meaning that the user is informed that there has been a problem, rather than experiencing erratic behavior, such as crashing, hanging, or returning a 404 or similar generic error page.\n\nIn some cases, developers include information in an error message to help pinpoint the source of an error; these may include username, password, application path, stack values, and other internal details. When this weakness is present, if these logs are accessible to an attacker, it may give them clues as to the inner workings of the app, helping them plan a focused attack. For example, clues revealing SQL database details may help plan an SQL injection attack.\n\n## Best practices for prevention\n* Keep error messages to the barest minimum of helpful information that users absolutely need to know.\n* Use consistent error messages that do not give attackers clues that they might be on the right track to a successful attack, such as \"File not found\" or \"User name does not exist\".\n* Ensure that debugging information is removed from code prior to release.\n* Create clear policy for the types of errors that must be logged, which messages will be displayed to users, and which details will be logged for later alerting and debugging.\n* When logging error details, never include sensitive information such as passwords.\n* Implement naming conventions that will help you flag and defend sensitive information.\n* Use dynamic (white box) test techniques to identify conditions that could cause errors and failures and test thoroughly to ensure that the code performs gracefully without revealing sensitive data under these stress conditions.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "ErrorMessage",
                  "Security",
                  "SourceStackTrace"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pingcap/dm/commit/ae69e0f0c2d63fd1ed6ecfea4a83e7b34d51899d?diff=split#diff-e36df0e4c06ecb8f4fd37373ef56e339L68",
                    "lines": [
                      {
                        "line": "// PrintLines adds a wrap to support `\\n` within `chzyer/readline`",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "func PrintLines(format string, a ...interface{}) {",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Println(fmt.Sprintf(format, a...))",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "s, err := marshResponseToString(resp)",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "  PrintLines(errors.ErrorStack(err))",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  PrintLines(\"%v\", err)",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Println(s)",
                        "lineNumber": 77,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/markelog/eclectica/commit/95135c35e2561aca0c9af6d77f4be114170a665d?diff=split#diff-df1faddfbda9cbba6402850bb26098b2L67",
                    "lines": [
                      {
                        "line": "if variables.IsDebug() {",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Println(errors.Wrap(err, 2).ErrorStack())",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  stderr.Println(errors.Wrap(err, 2).ErrorStack())",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 71,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dnanexus/dxfuse/commit/46456485408b62c27b551f37d70e95362638d3ce?diff=split#diff-0fc7be4d9b9b60f945b4762084c79c2eL76",
                    "lines": [
                      {
                        "line": "// when calling the database.",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func printErrorStack(err error) error {",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\tvar buf []byte",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\truntime.Stack(buf, false)",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  debug.PrintStack()",
                        "lineNumber": 78,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 103,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 119,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create table data_objects\")",
                        "lineNumber": 120,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "ON data_objects (id);",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 111,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 128,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create index id_index on table data_objects\")",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": ");",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 132,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 150,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create table namespace\")",
                        "lineNumber": 151,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "ON namespace (parent);",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 140,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 159,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create index parent_index on table namespace\")",
                        "lineNumber": 160,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "ON namespace (inode);",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 150,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 170,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create index inode_rev_index on table namespace\")",
                        "lineNumber": 171,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": ");",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "`",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 169,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 191,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create table directories\")",
                        "lineNumber": 192,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "  InodeRoot, \"\", \"\", boolToInt(false),",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "  time.Now().Unix(), time.Now().Unix())",
                        "lineNumber": 180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  nowSeconds, nowSeconds, dirReadOnlyMode)",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 182,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 206,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create root directory\")",
                        "lineNumber": 207,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    VALUES ('%s', '%s', '%d', '%d');`,",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \"\", \"/\", nsDirType, InodeRoot)",
                        "lineNumber": 188,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  rParent, rBase, nsDirType, InodeRoot)",
                        "lineNumber": 215,
                        "lineChange": "added"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 190,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 217,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not create root inode (%d)\", InodeRoot)",
                        "lineNumber": 218,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "txn, err := fsys.db.Begin()",
                        "lineNumber": 202,
                        "lineChange": "removed"
                      },
                      {
                        "line": "txn, err := mdb.db.Begin()",
                        "lineNumber": 230,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 204,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 232,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not open transaction\")",
                        "lineNumber": 233,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err := fsys.metadataDbInitCore(txn); err != nil {",
                        "lineNumber": 207,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err := mdb.init2(txn); err != nil {",
                        "lineNumber": 236,
                        "lineChange": "added"
                      },
                      {
                        "line": "  txn.Rollback()",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 209,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 238,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Could not initialize database\")",
                        "lineNumber": 239,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err := txn.Commit(); err != nil {",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "  txn.Rollback()",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 214,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 244,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"Error during commit\")",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fId)",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "rows, err := txn.Query(sqlStmt)",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return InodeInvalid, 0, printErrorStack(err)",
                        "lineNumber": 243,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 274,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return InodeInvalid, 0, false, fmt.Errorf(\"lookupDataObjectById fId=%s\", fId)",
                        "lineNumber": 275,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "  inode)",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "rows, err := fsys.db.Query(sqlStmt)",
                        "lineNumber": 278,
                        "lineChange": "removed"
                      },
                      {
                        "line": "rows, err := mdb.db.Query(sqlStmt)",
                        "lineNumber": 307,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "  panic(fmt.Sprintf(\"could not find data-object inode=%d dir=%s name=%s\",",
                        "lineNumber": 281,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    inode, dirFullName, oname))",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "rows, err := mdb.db.Query(sqlStmt)",
                        "lineNumber": 398,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 399,
                        "lineChange": "added"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 400,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return nil, false, fmt.Errorf(\"LookupByInode: error in query\")",
                        "lineNumber": 401,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 402,
                        "lineChange": "added"
                      },
                      {
                        "line": "var obj_type int",
                        "lineNumber": 405,
                        "lineChange": "added"
                      },
                      {
                        "line": "numRows := 0",
                        "lineNumber": 406,
                        "lineChange": "added"
                      },
                      {
                        "line": "for rows.Next() {",
                        "lineNumber": 407,
                        "lineChange": "added"
                      },
                      {
                        "line": "  rows.Scan(&parent, &name, &obj_type)",
                        "lineNumber": 408,
                        "lineChange": "added"
                      },
                      {
                        "line": "  numRows++",
                        "lineNumber": 409,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 410,
                        "lineChange": "added"
                      },
                      {
                        "line": "rows.Close()",
                        "lineNumber": 411,
                        "lineChange": "added"
                      },
                      {
                        "line": "switch numRows {",
                        "lineNumber": 413,
                        "lineChange": "added"
                      },
                      {
                        "line": "    `, dirFullName, nsDirType)",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "rows, err := fsys.db.Query(sqlStmt)",
                        "lineNumber": 330,
                        "lineChange": "removed"
                      },
                      {
                        "line": "rows, err := mdb.db.Query(sqlStmt)",
                        "lineNumber": 448,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nil, nil, printErrorStack(err)",
                        "lineNumber": 332,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Print(err.Error())",
                        "lineNumber": 450,
                        "lineChange": "added"
                      },
                      {
                        "line": "  log.Printf(\"Error in directories query\")",
                        "lineNumber": 451,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return nil, nil, err",
                        "lineNumber": 452,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "rows, err = fsys.db.Query(sqlStmt)",
                        "lineNumber": 364,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nil, nil, printErrorStack(err)",
                        "lineNumber": 366,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Find the files in the directory",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "files := make(map[string]File)",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "for rows.Next() {",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var f File",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "inode, nlink, err := fsys.lookupDataObjectInodeById(txn, objId)",
                        "lineNumber": 407,
                        "lineChange": "removed"
                      },
                      {
                        "line": "inode, nlink, ok, err := mdb.lookupDataObjectById(txn, objId)",
                        "lineNumber": 536,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return InodeInvalid, err",
                        "lineNumber": 409,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return 0, err",
                        "lineNumber": 538,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "VALUES ('%d', '%s', '%s', '%d', '%d', '%d', '%d', '%d', '%s');`,",
                        "lineNumber": 420,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kind, objId, projId, inode, size, ctime, mtime, 1, inlineData)",
                        "lineNumber": 421,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    VALUES ('%d', '%s', '%s', '%d', '%d', '%d', '%d', '%d', '%d', '%s');`,",
                        "lineNumber": 549,
                        "lineChange": "added"
                      },
                      {
                        "line": "    kind, objId, projId, inode, size, ctime, mtime, int(mode), 1, inlineData)",
                        "lineNumber": 550,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return 0, printErrorStack(err)",
                        "lineNumber": 423,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    log.Printf(err.Error())",
                        "lineNumber": 552,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.Printf(\"Error inserting into data objects table\")",
                        "lineNumber": 553,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return 0, err",
                        "lineNumber": 554,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "    WHERE id = '%s';`,",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "    nlink + 1, objId)",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return 0, printErrorStack(err)",
                        "lineNumber": 433,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    log.Printf(\"Error updating data_object table, incrementing the link number\")",
                        "lineNumber": 568,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return 0, err",
                        "lineNumber": 569,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "    VALUES ('%s', '%s', '%d', '%d');`,",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "  parentDir, fname, nsDataObjType, inode)",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return 0, printErrorStack(err)",
                        "lineNumber": 442,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"Error inserting %s/%s into the namespace table\", parentDir, fname)",
                        "lineNumber": 578,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return 0, err",
                        "lineNumber": 579,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "    VALUES ('%s', '%s', '%d', '%d');`,",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "  parentDir, basename, nsDirType,\tinode)",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return 0, printErrorStack(err)",
                        "lineNumber": 476,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"createEmptyDir: error inserting into namespace table %s/%s\",",
                        "lineNumber": 614,
                        "lineChange": "added"
                      },
                      {
                        "line": "    parentDir, basename)",
                        "lineNumber": 615,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return 0, err",
                        "lineNumber": 616,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "                   VALUES ('%d', '%s', '%s', '%d', '%d', '%d');`,",
                        "lineNumber": 482,
                        "lineChange": "removed"
                      },
                      {
                        "line": "inode, projId, projFolder, boolToInt(populated), ctime, mtime)",
                        "lineNumber": 483,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                     VALUES ('%d', '%s', '%s', '%d', '%d', '%d', '%d');`,",
                        "lineNumber": 623,
                        "lineChange": "added"
                      },
                      {
                        "line": "  inode, projId, projFolder, boolToInt(populated), ctime, mtime, int(mode))",
                        "lineNumber": 624,
                        "lineChange": "added"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return 0, printErrorStack(err)",
                        "lineNumber": 485,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"createEmptyDir: error inserting into directories table %d\",",
                        "lineNumber": 626,
                        "lineChange": "added"
                      },
                      {
                        "line": "    inode)",
                        "lineNumber": 627,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return 0, err",
                        "lineNumber": 628,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 629,
                        "lineChange": "none"
                      },
                      {
                        "line": "return inode, nil",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "              WHERE inode = '%d'`,",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "  dinode)",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 498,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"Error set directory %d to populated\", dinode)",
                        "lineNumber": 641,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 642,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 643,
                        "lineChange": "none"
                      },
                      {
                        "line": "return nil",
                        "lineNumber": 644,
                        "lineChange": "none"
                      },
                      {
                        "line": "dxDir, err := DxDescribeFolder(httpClient, &fsys.dxEnv, projId, projFolder)",
                        "lineNumber": 631,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fsys.httpClientPool <- httpClient",
                        "lineNumber": 632,
                        "lineChange": "removed"
                      },
                      {
                        "line": "dxDir, err := DxDescribeFolder(ctx, httpClient, &mdb.dxEnv, projId, projFolder, true)",
                        "lineNumber": 785,
                        "lineChange": "added"
                      },
                      {
                        "line": "mdb.httpClientPool <- httpClient",
                        "lineNumber": 786,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 787,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Printf(\"Describe error: %s\", err.Error())",
                        "lineNumber": 634,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  fmt.Printf(err.Error())",
                        "lineNumber": 788,
                        "lineChange": "added"
                      },
                      {
                        "line": "  fmt.Printf(\"reading directory frmo DNAx error\")",
                        "lineNumber": 789,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 790,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 791,
                        "lineChange": "none"
                      },
                      {
                        "line": "// very well mislead the user.",
                        "lineNumber": 812,
                        "lineChange": "none"
                      },
                      {
                        "line": "posixDir, err := PosixFixDir(fsys, dxDir)",
                        "lineNumber": 658,
                        "lineChange": "removed"
                      },
                      {
                        "line": "posixDir, err := PosixFixDir(mdb.options, dxDir)",
                        "lineNumber": 813,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 814,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 815,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 816,
                        "lineChange": "none"
                      },
                      {
                        "line": "txn, err := fsys.db.Begin()",
                        "lineNumber": 663,
                        "lineChange": "removed"
                      },
                      {
                        "line": "txn, err := mdb.db.Begin()",
                        "lineNumber": 818,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 819,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 665,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 820,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return fmt.Errorf(\"directoryReadFromDNAx: error opening transaction\")",
                        "lineNumber": 821,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 822,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 849,
                        "lineChange": "none"
                      },
                      {
                        "line": "    txn.Rollback()",
                        "lineNumber": 850,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return printErrorStack(err)",
                        "lineNumber": 691,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    log.Printf(err.Error())",
                        "lineNumber": 851,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return fmt.Errorf(\"directoryReadFromDNAx: creating faux directory %s\", fauxDirPath)",
                        "lineNumber": 852,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 853,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var no_subdirs []string",
                        "lineNumber": 855,
                        "lineChange": "none"
                      },
                      {
                        "line": "  err = fsys.populateDir(",
                        "lineNumber": 695,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  err = mdb.populateDir(",
                        "lineNumber": 856,
                        "lineChange": "added"
                      },
                      {
                        "line": "    txn, fauxDirInode,",
                        "lineNumber": 857,
                        "lineChange": "none"
                      },
                      {
                        "line": "    projId, \"\",",
                        "lineNumber": 858,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ctimeApprox, mtimeApprox,",
                        "lineNumber": 859,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fauxDirPath, fauxFiles, no_subdirs)",
                        "lineNumber": 860,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 861,
                        "lineChange": "none"
                      },
                      {
                        "line": "    txn.Rollback()",
                        "lineNumber": 862,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return printErrorStack(err)",
                        "lineNumber": 702,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    log.Printf(err.Error())",
                        "lineNumber": 863,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return fmt.Errorf(\"directoryReadFromDNAx: populating faux directory %s\", fauxDirPath)",
                        "lineNumber": 864,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 865,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 866,
                        "lineChange": "none"
                      },
                      {
                        "line": "case nsDataObjType:",
                        "lineNumber": 959,
                        "lineChange": "none"
                      },
                      {
                        "line": "rows, err := fsys.db.Query(sqlStmt)",
                        "lineNumber": 1008,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1009,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return nil, printErrorStack(err)",
                        "lineNumber": 1010,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1011,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var dname string",
                        "lineNumber": 1015,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var objType int",
                        "lineNumber": 1016,
                        "lineChange": "removed"
                      },
                      {
                        "line": "for rows.Next() {",
                        "lineNumber": 1017,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  rows.Scan(&parent, &dname, &objType)",
                        "lineNumber": 1018,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  numRows++",
                        "lineNumber": 1019,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1020,
                        "lineChange": "removed"
                      },
                      {
                        "line": "rows.Close()",
                        "lineNumber": 1021,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if fsys.options.Verbose {",
                        "lineNumber": 1023,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  file, ok, err := mdb.lookupDataObjectByInode(dirOrFileName, inode)",
                        "lineNumber": 943,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if ok && err == nil {",
                        "lineNumber": 944,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.Printf(\"lookupDataObjectByInode: %v\", file)",
                        "lineNumber": 945,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.Printf(\"size: %d\", file.Size)",
                        "lineNumber": 946,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}",
                        "lineNumber": 1033,
                        "lineChange": "none"
                      },
                      {
                        "line": "return file, ok, err",
                        "lineNumber": 948,
                        "lineChange": "added"
                      },
                      {
                        "line": "default:",
                        "lineNumber": 1035,
                        "lineChange": "none"
                      },
                      {
                        "line": "panic(fmt.Sprintf(\"Invalid object type %d\", objType))",
                        "lineNumber": 950,
                        "lineChange": "added"
                      },
                      {
                        "line": "dirSkel, err := manifest.DirSkeleton()",
                        "lineNumber": 1063,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1064,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 1065,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1066,
                        "lineChange": "none"
                      },
                      {
                        "line": "txn, err := fsys.db.Begin()",
                        "lineNumber": 1071,
                        "lineChange": "removed"
                      },
                      {
                        "line": "txn, err := mdb.db.Begin()",
                        "lineNumber": 971,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1072,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 1073,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"PopulateRoot: Error opening transaction\")",
                        "lineNumber": 973,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 974,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1074,
                        "lineChange": "none"
                      },
                      {
                        "line": "// set the root to be populated",
                        "lineNumber": 1118,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err := fsys.setDirectoryToPopulated(txn, InodeRoot); err != nil {",
                        "lineNumber": 1119,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err := mdb.setDirectoryToPopulated(txn, InodeRoot); err != nil {",
                        "lineNumber": 1028,
                        "lineChange": "added"
                      },
                      {
                        "line": "  txn.Rollback()",
                        "lineNumber": 1120,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 1121,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(\"PopulateRoot: error setting root directory to populated\")",
                        "lineNumber": 1030,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return err",
                        "lineNumber": 1031,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1122,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Check if the directory already contains [name].",
                        "lineNumber": 1149,
                        "lineChange": "removed"
                      },
                      {
                        "line": "_, err := fsys.MetadataDbLookupInDir(dir.FullPath, fname)",
                        "lineNumber": 1150,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err == nil {",
                        "lineNumber": 1151,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  // file already exists",
                        "lineNumber": 1152,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return nil, fuse.EEXIST",
                        "lineNumber": 1153,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1154,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err != fuse.ENOENT {",
                        "lineNumber": 1155,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  // An error occured. We are expecting the file to -not- exist.",
                        "lineNumber": 1156,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return nil, err",
                        "lineNumber": 1157,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1158,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  projId, fname, folder)",
                        "lineNumber": 1171,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fsys.httpClientPool <- httpClient",
                        "lineNumber": 1172,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1173,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return nil, err",
                        "lineNumber": 1174,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1175,
                        "lineChange": "none"
                      },
                      {
                        "line": "// 2. insert into the database",
                        "lineNumber": 1177,
                        "lineChange": "removed"
                      },
                      {
                        "line": "txn, err := fsys.db.Begin()",
                        "lineNumber": 1178,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// insert into the database",
                        "lineNumber": 1050,
                        "lineChange": "added"
                      },
                      {
                        "line": "txn, err := mdb.db.Begin()",
                        "lineNumber": 1051,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1179,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nil, printErrorStack(err)",
                        "lineNumber": 1180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 1053,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return File{}, fmt.Errorf(\"CreateFile error opening transaction\")",
                        "lineNumber": 1054,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1181,
                        "lineChange": "none"
                      },
                      {
                        "line": "nowSeconds := time.Now().Unix()",
                        "lineNumber": 1182,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fname,",
                        "lineNumber": 1192,
                        "lineChange": "none"
                      },
                      {
                        "line": "  localPath)",
                        "lineNumber": 1193,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  txn.Rollback()",
                        "lineNumber": 1195,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nil, printErrorStack(err)",
                        "lineNumber": 1196,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 1072,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return File{}, fmt.Errorf(\"CreateFile error creating data object\")",
                        "lineNumber": 1073,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1197,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err := txn.Commit(); err != nil {",
                        "lineNumber": 1198,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nil, err",
                        "lineNumber": 1199,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  log.Printf(err.Error())",
                        "lineNumber": 1076,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return File{}, fmt.Errorf(\"CreateFile commit failed\")",
                        "lineNumber": 1077,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1200,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (fsys *Filesys) MetadataDbUpdateFile(f File, fInfo os.FileInfo) error {",
                        "lineNumber": 1219,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  txn, err := fsys.db.Begin()",
                        "lineNumber": 1220,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 1221,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 1222,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1223,
                        "lineChange": "none"
                      },
                      {
                        "line": "if _, err := txn.Exec(sqlStmt); err != nil {",
                        "lineNumber": 1232,
                        "lineChange": "none"
                      },
                      {
                        "line": "  txn.Rollback()",
                        "lineNumber": 1233,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return printErrorStack(err)",
                        "lineNumber": 1234,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1235,
                        "lineChange": "none"
                      },
                      {
                        "line": "return txn.Commit()",
                        "lineNumber": 1236,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 3,
                "cwe": [
                  "CWE-209"
                ]
              }
            },
            {
              "id": "go/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceResourceAccess",
                  "SourceArchive",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pacolang/paco/commit/d05f41cb0aa3167b86bd3b1063d07d7e64bec86f?diff=split#diff-7ddfb3e035b42cd70649cc33393fe32cR26",
                    "lines": [
                      {
                        "line": "// Commands",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "switch os.Args[1] {",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "case \"build\":",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "  err := buildCommand.Parse(os.Args[2:])",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Read the given file",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "bytes, err := ioutil.ReadFile(os.Args[1])",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bytes, err := ioutil.ReadFile(file)",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  log.Errorf(err)",
                        "lineNumber": 47,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/trinchan/slackbot/commit/c8350a18049c609ef7b6847666d07e69aca9fb46?diff=split#diff-f2f667c6f0bb538d9d35241bd93421fcL18",
                    "lines": [
                      {
                        "line": "func init() {",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "  flag.Parse()",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var configFile = flag.String(\"c\", \"config.json\", \"Config file (default ./config.json)\")",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  config, err := ioutil.ReadFile(configFile)",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  config, err := ioutil.ReadFile(*configFile)",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.Println(\"open config: \", err)",
                        "lineNumber": 20,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ketchuphq/ketchup/commit/31630fa4703d23c6055439536fd661d3c47da038?diff=split#diff-d72b60c856c1aa9b8e14c2c3c4b221abL59",
                    "lines": [
                      {
                        "line": "Run: func(ctx *service.CommandContext) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ctx.RequireExactlyNArgs(1)",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "  f, err := os.Open(ctx.Args[0])",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    panic(err)",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  err := m.importFromJSON(ctx.Args[0])",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpanic(err)",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *Module) importFromJSON(path string) error {",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "  f, err := os.Open(path)",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return err",
                        "lineNumber": 81,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 527,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/arangodb/kube-arangodb/commit/7c9b8fdecccf78ec76983baa9bbf3747aba6f1d0?diff=split#diff-ee987cb87cf8e0096365e15a5a52358eL101",
                    "lines": [
                      {
                        "line": "func createArangodVSTConfigForDNSNames(ctx context.Context, cli corev1.CoreV1Interface, apiObject *api.ArangoDeployment, dnsNames []string) (vst.ConnectionConfig, error) {",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  scheme := \"http\"",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "  tlsConfig := &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  tlsConfig := &tls.Config{}",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if apiObject != nil && apiObject.Spec.IsSecure() {",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scheme = \"https\"",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tlsConfig = &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "transport := vstProtocol.TransportConfig{",
                        "lineNumber": 105,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fiorix/go-diameter/commit/fbf03cf9eaf1047d51aed495f311280b3f74cb50?diff=split#diff-04482c9117706d6f62ddf81a1153cc2bL72",
                    "lines": [
                      {
                        "line": "  addr = \":3868\"",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "config := &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if srv.TLSConfig != nil {",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  *config = *srv.TLSConfig",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var config *tls.Config",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "if srv.TLSConfig == nil {",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "  config = &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "  config = srv.TLSConfig.Clone()",
                        "lineNumber": 75,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/toorop/tmail/commit/67f8ce07ab1260618c2afb2cb0a07ea4e71f33ad?diff=split#diff-898d6a5dc29ee443fb3b42c23bf863a4R25",
                    "lines": [
                      {
                        "line": "var listener net.Listener",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "var err error",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tlsConfig *tls.Config",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "// SSL ?",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "if s.dsn.ssl {",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "// TODO: http://fastah.blackbuck.mobi/blog/securing-https-in-go/",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "tlsConfig := tls.Config{",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Certificates:       []tls.Certificate{cert},",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  InsecureSkipVerify: true,",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 39,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 138,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/shaoshing/train/commit/10f251358766222f4211540c014fd74c6a32cf83?diff=split#diff-8b80bab7c379f59fe83cb4ee2d015ea7L9",
                    "lines": [
                      {
                        "line": ")",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Handler(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "  content := ReadAsset(r.URL.Path)",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Fprintf(w, content)",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  reader := strings.NewReader(content)",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "  io.Copy(w, reader)",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 14,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/alphagov/router/commit/1c0f502e99bafc95900f6d0c42dfb6c364430a7c?diff=split#diff-a2c8aae7faef01e89d82efda1da4f769L12",
                    "lines": [
                      {
                        "line": "func makeDebugServer(name string) http.HandlerFunc {",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var randSrc = &randomDataMaker{src: rand.NewSource(time.Now().UTC().UnixNano())}",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return func(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    randSrc.Lock()",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "    defer randSrc.Unlock()",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "w.Header().Set(\"Content-Type\", \"text/plain\")",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "fmt.Fprintln(w, name, \":\", r.URL.Path)",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "fmt.Fprintln(w)",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 44,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/aristanetworks/openconfigbeat/commit/d9f4424d7d6d442a95dc9860bf704745a4ce5cae?diff=split#diff-13c7e3ca9b985b0c964b3150b184b678L30",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "func dbJoin(ctx interface{}, w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  r.ParseForm()",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "  diagnose.DebugHTTPForm(r)",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "err := nDB.Join(strings.Split(r.Form[\"members\"][0], \",\"))",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Fprintf(w, \"%s error in the DB join %s\\n\", r.URL.Path, err)",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  rsp := diagnose.FailCommand(fmt.Errorf(\"%s error in the DB join %s\", r.URL.Path, err))",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "  log.WithError(err).Error(\"join cluster failed\")",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "  diagnose.HTTPReply(w, rsp, json)",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 57,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 288,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/InsecureTLSConfig/test",
              "name": "InsecureTLSConfig/test",
              "shortDescription": {
                "text": "Insecure TLS Configuration"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n## Best practices for prevention\n* Use TLS instead of SSL\n* Be aware of outdated algorithms; recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureTLSConfig",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/gopherpit/gopherpit/commit/85ef080b72a60bdd902ab97d935e93cc4b294c92?diff=split#diff-91bbeda7eb98a7adc57b9e47e2cf5c2bL261",
                    "lines": [
                      {
                        "line": "// Configure TLS",
                        "lineNumber": 259,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig := &tls.Config{",
                        "lineNumber": 260,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 282,
                        "lineChange": "added"
                      },
                      {
                        "line": "func newTLSConfig(s *Server) (tlsConfig *tls.Config, err error) {",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "  tlsConfig = &tls.Config{",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "    MinVersion:         tls.VersionTLS10,",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "    NextProtos:         []string{\"h2\"},",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ClientSessionCache: tls.NewLRUClientSessionCache(-1),",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 289,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/distribution/distribution/commit/cc341b01108a81f7c92249456cae0b1c164fa8da?diff=split#diff-55e333416ad33b237c440cbd78d81cebR84",
                    "lines": [
                      {
                        "line": "var tlsVersions = map[string]uint16{",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "  // user specified values",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"tls1.0\": tls.VersionTLS10,",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"tls1.1\": tls.VersionTLS11,",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"tls1.2\": tls.VersionTLS12,",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "if config.HTTP.TLS.Certificate != \"\" || config.HTTP.TLS.LetsEncrypt.CacheFile != \"\" {",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "dcontext.GetLogger(registry.app).Infof(\"restricting TLS cipher suites to: %s\", strings.Join(getCipherSuiteNames(tlsCipherSuites), \",\"))",
                        "lineNumber": 235,
                        "lineChange": "added"
                      },
                      {
                        "line": "tlsConf := &tls.Config{",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ClientAuth:               tls.NoClientCert,",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "  NextProtos:               nextProtos(config),",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "  MinVersion:               tls.VersionTLS10,",
                        "lineNumber": 141,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  MinVersion:               tlsMinVersion,",
                        "lineNumber": 240,
                        "lineChange": "added"
                      },
                      {
                        "line": "  PreferServerCipherSuites: true,",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "  CipherSuites: []uint16{",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  CipherSuites:             tlsCipherSuites,",
                        "lineNumber": 242,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/muraenateam/muraena/commit/5828c4e9f1f0b0cd016cb03036f3ee3f6000b5c7?diff=split#diff-8852c8f0f0b918ff654ffe4bff05dd2bR38",
                    "lines": [
                      {
                        "line": " ",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tlsVersionToConst = map[string]uint16{",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"SSL3.0\": tls.VersionSSL30,",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"TLS1.0\": tls.VersionTLS10,",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"TLS1.1\": tls.VersionTLS11,",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "func (server *tlsServer) serveTLS() (err error) {",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": " // In an ideal world everyone would use TLS 1.2 at least, but we downgrade to",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": " // accept SSL 3.0 as a minimum version, otherwise old clients will have issues",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": " conf := &tls.Config{",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "   MinVersion:               tls.VersionSSL30,",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   PreferServerCipherSuites: true,",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   SessionTicketsDisabled:   true,",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   MinVersion:               tlsVersionToConst[server.MinVersion],",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "   PreferServerCipherSuites: server.PreferServerCipherSuites,",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "   SessionTicketsDisabled:   server.SessionTicketsDisabled,",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "   NextProtos:               []string{\"http/1.1\"},",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "   Certificates:             make([]tls.Certificate, 1),",
                        "lineNumber": 51,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 32,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "go/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/TooSmallKeySize",
              "name": "TooSmallKeySize",
              "shortDescription": {
                "text": "Inadequate Encryption Strength"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n## Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooSmallKeySize",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/cs3org/reva/commit/38af4c15190bfbc83177107e8e00bf98c54fb009?diff=split#diff-99c46b42524a4b672d91f795f0cd434fL175",
                    "lines": [
                      {
                        "line": "func mustRSAKey() *rsa.PrivateKey {",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "  key, err := rsa.GenerateKey(rand.Reader, 1024)",
                        "lineNumber": 174,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  key, err := rsa.GenerateKey(rand.Reader, 2048)",
                        "lineNumber": 174,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO really panic?",
                        "lineNumber": 176,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dexidp/dex/commit/ebbea78a2eb0f89104ccedf54a7752f601b72fd5?diff=split#diff-f5a63b3798c32b70652a7c48786df8bdL139",
                    "lines": [
                      {
                        "line": "func GeneratePrivateKey() (*PrivateKey, error) {",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  pk, err := rsa.GenerateKey(rand.Reader, 1024)",
                        "lineNumber": 138,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  pk, err := rsa.GenerateKey(rand.Reader, 2048)",
                        "lineNumber": 138,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return nil, err",
                        "lineNumber": 140,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/golang/go/commit/5b20a18f3b985cdf116a0ea6dd589d26056b16ad?diff=split#diff-863700294a2fc12b6fb40449950e5a1aL31",
                    "lines": [
                      {
                        "line": "flag.Parse()",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "priv, err := rsa.GenerateKey(rand.Reader, 1024)",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 41,
                        "lineChange": "added"
                      },
                      {
                        "line": "priv, err := rsa.GenerateKey(rand.Reader, *rsaBits)",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  log.Fatalf(\"failed to generate private key: %s\", err)",
                        "lineNumber": 45,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 15,
                "cwe": [
                  "CWE-326"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/arangodb/kube-arangodb/commit/7c9b8fdecccf78ec76983baa9bbf3747aba6f1d0?diff=split#diff-ee987cb87cf8e0096365e15a5a52358eL101",
                    "lines": [
                      {
                        "line": "func createArangodVSTConfigForDNSNames(ctx context.Context, cli corev1.CoreV1Interface, apiObject *api.ArangoDeployment, dnsNames []string) (vst.ConnectionConfig, error) {",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  scheme := \"http\"",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "  tlsConfig := &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  tlsConfig := &tls.Config{}",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if apiObject != nil && apiObject.Spec.IsSecure() {",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scheme = \"https\"",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tlsConfig = &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "transport := vstProtocol.TransportConfig{",
                        "lineNumber": 105,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fiorix/go-diameter/commit/fbf03cf9eaf1047d51aed495f311280b3f74cb50?diff=split#diff-04482c9117706d6f62ddf81a1153cc2bL72",
                    "lines": [
                      {
                        "line": "  addr = \":3868\"",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "config := &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if srv.TLSConfig != nil {",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  *config = *srv.TLSConfig",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var config *tls.Config",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "if srv.TLSConfig == nil {",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "  config = &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "  config = srv.TLSConfig.Clone()",
                        "lineNumber": 75,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/toorop/tmail/commit/67f8ce07ab1260618c2afb2cb0a07ea4e71f33ad?diff=split#diff-898d6a5dc29ee443fb3b42c23bf863a4R25",
                    "lines": [
                      {
                        "line": "var listener net.Listener",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "var err error",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tlsConfig *tls.Config",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "// SSL ?",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "if s.dsn.ssl {",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "// TODO: http://fastah.blackbuck.mobi/blog/securing-https-in-go/",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "tlsConfig := tls.Config{",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Certificates:       []tls.Certificate{cert},",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  InsecureSkipVerify: true,",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 39,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 138,
                "cwe": [
                  "CWE-295"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in key.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[key](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/common/signer/signer_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 2,
                  "endColumn": 5
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ab3ad55d41412784079274accd7f58737414d9aa4ce7ecf9470a44a3fd2061ba",
            "1": "cb53f4db.73eb5804.45df3e14.76b707f0.f1d9f854.995dab92.7b915e3a.1bff12d3.cb53f4db.73eb5804.45df3e14.76b707f0.f1d9f854.995dab92.7b915e3a.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/common/signer/signer_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 47,
                            "startColumn": 9,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/common/signer/signer_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 155,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in selfSignedKeyPEM.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[selfSignedKeyPEM](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "common/deliver/binding_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198,
                  "startColumn": 5,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ffb38ba53414f8092a550ea94024755e86ad11d41d29be30e609c47dd05911e2",
            "1": "424eddda.98f0ff0f.45df3e14.db2afa6c.6ee851a6.63a86890.8ee950b3.1bff12d3.424eddda.98f0ff0f.45df3e14.db2afa6c.6ee851a6.63a86890.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/deliver/binding_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 198,
                            "endLine": 203,
                            "startColumn": 24,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/deliver/binding_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 198,
                            "endLine": 198,
                            "startColumn": 5,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 155,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in selfSignedKeyPEM.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[selfSignedKeyPEM](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/pkg/comm/server_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 5,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2be2d5f0e874268008a5984b28b31ea594cce2e71d726582253c649d4d4038de",
            "1": "424eddda.98f0ff0f.45df3e14.db2afa6c.6ee851a6.63a86890.8ee950b3.1bff12d3.424eddda.98f0ff0f.45df3e14.db2afa6c.6ee851a6.63a86890.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/pkg/comm/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 42,
                            "startColumn": 24,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/pkg/comm/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 5,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 155,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/tests/v1x_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 387,
                  "endLine": 387,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "de25fe504174cf3908d383b5e6298f748d3bed8e7c60211eaab0e4c546bf9276",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.9a7c61ed.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.a549e7c8.bfac11f0.9a7c61ed.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/tests/v1x_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 387,
                            "endLine": 387,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/tests/v1x_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 387,
                            "endLine": 387,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 215,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9313c5dcb74ba397c67f0a52aad39d5727e83eb860576e5c42a848645864edc9",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.9a7c61ed.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.a549e7c8.bfac11f0.9a7c61ed.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 215,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "66c68c089a30ffec2cf45a11f212137a7c6a6ebdd7a019608cdffaef12e56745",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.9a7c61ed.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.a549e7c8.bfac11f0.9a7c61ed.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 215,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "760a57c15856d2a595ea2c5b50feb2af926af056c45fb60898b9987d592fd821",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.9a7c61ed.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.a549e7c8.bfac11f0.9a7c61ed.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 215,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8651a00bd2017457ac4b2f8ea22fabca9f9e83f379bc182fee8aacbbaafd190f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.9a7c61ed.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.a549e7c8.bfac11f0.9a7c61ed.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 215,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e4ddd3fe28d6b937133318fa24a785e8f2ca4dac47d9eb22a9fc85ed4dcf88f3",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.9a7c61ed.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.a549e7c8.bfac11f0.9a7c61ed.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 215,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1129,
                  "endLine": 1129,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "86026075fd9011594a6cb1bbb0bd4245d191d1158457663bfa70b2da042aea4c",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.9a7c61ed.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.a549e7c8.bfac11f0.9a7c61ed.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1129,
                            "endLine": 1129,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1129,
                            "endLine": 1129,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 215,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/snapshot_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 275,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5c47aaeb94dc51b35671b627e04151745c2d1cf88daab3acd9928e4aad0e2273",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.9a7c61ed.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.a549e7c8.bfac11f0.9a7c61ed.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/snapshot_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/snapshot_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 215,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/privacyenabledstate/test_exports.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 150,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "432255a264e8d666096c27d3228373be4893186513f184e96da5f5b6f86491d2",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.9a7c61ed.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.a549e7c8.bfac11f0.9a7c61ed.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/privacyenabledstate/test_exports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/privacyenabledstate/test_exports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 215,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in CouchDBPassword.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[CouchDBPassword](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/nwo/runner/couchdb.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29,
                  "startColumn": 2,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dcf4228b1ba937d25dc1d29dff8ed7bd2ed4ea160f77a298603dc08baa1f6f1b",
            "1": "8379f5e8.1adbfc77.45df3e14.79502f34.9a7c61ed.63a86890.70804e9b.1bff12d3.8379f5e8.1adbfc77.a549e7c8.79502f34.9a7c61ed.583749e8.2f126c3d.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/runner/couchdb.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/runner/couchdb.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 2,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 305,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in unixPasswdPath.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[unixPasswdPath](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "startColumn": 2,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "03ede91580262d03d2ddc821291c4f1780ff7342702caebebea616141941f0af",
            "1": "8379f5e8.57486739.45df3e14.e22980a8.8193a752.8fd31a01.fb9e89bc.1bff12d3.8379f5e8.57486739.71d8f4e9.e22980a8.8193a752.8fd31a01.0c6e0684.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 2,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in unixPasswdPath.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[unixPasswdPath](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103,
                  "startColumn": 9,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f27eb873abd1cd428504cb5bd1dc1b45a0e934b8a49750f4424501c7768d7da8",
            "1": "8379f5e8.57486739.45df3e14.e22980a8.8193a752.8fd31a01.cd527bfb.1bff12d3.8379f5e8.57486739.45df3e14.e22980a8.8193a752.8fd31a01.0c6e0684.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 9,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooSmallKeySize/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Usage of 1024 bits key in crypto.rsa.GenerateKey is considered insecure. Use a key with at least 2048 bits.",
            "markdown": "Usage of {0} bits key in {1} is considered insecure. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[crypto.rsa.GenerateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cryptogen/csp/csp_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 17,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1e1af42da263d1ec6921e6f66c67eb129a21cb8ef8471c93847550c47ef273cc",
            "1": "f93f09c7.5d8de7a9.a2126a63.e22980a8.ebd5faa6.67ab4541.860c51ff.fbc19cb8.f93f09c7.5d8de7a9.a2126a63.e22980a8.ebd5faa6.67ab4541.860c51ff.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cryptogen/csp/csp_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 46,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cryptogen/csp/csp_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 17,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.Open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[os.Open](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ccaas_builder/cmd/release/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ff3f3abbb1cb3fdac54ee0d770be09a8c9564d8f4872822fe2f74d4f4b0c1038",
            "1": "7af7c0e9.9789732c.45df3e14.89f13fa7.556f02b4.2f4e1548.b223b8b2.678b0e20.3c5639cc.a95b3109.45df3e14.9692a5c1.556f02b4.67ab4541.b223b8b2.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 2,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 37,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 23,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 2,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 20,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 21,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/release/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 525,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1)",
              "[os.OpenFile](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/go.uber.org/zap/sink.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 9,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "739ebcd78a935e5d64943205544cce1455cb5f390a4756b9b4da65f2a05538de",
            "1": "b5d65c13.c8cae435.45df3e14.b1e0a0f9.7c4a878b.e4d7b7ac.aa359f29.4cb51de1.1f0bd5c5.940077cb.9fa62a61.e22980a8.56ffa9d2.e4d7b7ac.aa359f29.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/go.uber.org/zap/sink.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/go.uber.org/zap/sink.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/go.uber.org/zap/sink.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 775,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from open tar file flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[open tar file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[os.OpenFile](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container/externalbuilder/tar.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 14,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "67d052739dffe89eba10d334055074db4cd06460ebe78c8088308dce26452993",
            "1": "b5336025.73eb5804.45df3e14.0c44ecc1.a8b1e9a5.e4d7b7ac.aa359f29.e01cd24f.b5336025.9bf9da8e.9fa62a61.e22980a8.cbb07c01.e4d7b7ac.3aa2965d.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 2,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 18,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 3,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 17,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 32,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 13,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 3,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 39,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 26,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/container/externalbuilder/tar.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 525,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into io.ioutil.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[io.ioutil.ReadFile](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ccaas_builder/cmd/detect/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 20,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6405685df6fc104fcfc901cbc79d43bf4c5d8ce7fb6f4493f44ea15a08623c16",
            "1": "2d6d6aa6.f9ce87da.45df3e14.32ba0a39.5f7e278f.343edea9.df7e59ba.ea1b9161.f93f09c7.348ddf12.9641d6ab.9692a5c1.800847ac.0b60a7db.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/detect/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 23,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/detect/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 23,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/detect/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 2,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/detect/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 32,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/detect/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/detect/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 2,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/detect/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 20,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/detect/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 23,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/detect/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 36,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/detect/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 525,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into io.ioutil.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4)",
              "[io.ioutil.ReadFile](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "common/metrics/cmd/gendoc/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 22,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "22d3de0654d3e89ad3cfe8243d4db7affc2b3a7453bfc41cf7a98167ca518f7d",
            "1": "b3bbc358.b1d760a0.45df3e14.0c66bee6.54489699.2f4e1548.df7e59ba.abf2ff5a.9414ca6b.7912a57c.45df3e14.1913ff44.800847ac.67ab4541.e287aaee.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/metrics/cmd/gendoc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/metrics/cmd/gendoc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/metrics/cmd/gendoc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/metrics/cmd/gendoc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 39,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/metrics/cmd/gendoc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 38,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/metrics/cmd/gendoc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 525,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into io.ioutil.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[io.ioutil.ReadFile](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ccaas_builder/cmd/build/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107,
                  "startColumn": 33,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3dab94ded2afa564e5160b9cdfcfc947709c9c1598738924b57a8695781442a6",
            "1": "7af7c0e9.73eb5804.45df3e14.6f6e1432.db2bb079.995dab92.0c91a940.e01cd24f.7af7c0e9.348ddf12.5dea26e6.9692a5c1.800847ac.67ab4541.657797c6.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 39,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 39,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 2,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 23,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 2,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 27,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 49,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 33,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from open tar file flows into os.Symlink, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "arguments": [
              "[open tar file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23)",
              "[os.Symlink](24)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107,
                  "startColumn": 15,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "71fa2f80029a989d66b959fd5913f6f638a393c6fa2a906061b79b0463a31cbe",
            "1": "3e0ea818.277c621c.45df3e14.9692a5c1.5ef953d3.67ab4541.860c51ff.37d4bff0.2d06e3d6.277c621c.45df3e14.9692a5c1.018aeb33.57f89f2f.3aa2965d.545e9171"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 2,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 40,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 29,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 55,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 31,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 31,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 5,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 73,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 45,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 13,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 592,
                            "endLine": 592,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 51,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from open tar file flows into os.Symlink, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "arguments": [
              "[open tar file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22)",
              "[os.Symlink](23)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198,
                  "startColumn": 14,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "52f0b1d15de0db2811770106d783aefaa41f70f0e7867d27b34ad71940b89eb2",
            "1": "82a0f5fb.348ddf12.45df3e14.9692a5c1.84c49f13.d51155f6.0873598c.0b3d1648.2d06e3d6.348ddf12.45df3e14.9692a5c1.018aeb33.57f89f2f.3aa2965d.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 2,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 40,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 29,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 198,
                            "endLine": 198,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 44,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from open tar file flows into os.Symlink, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "arguments": [
              "[open tar file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41),(42),(43),(44),(45)",
              "[os.Symlink](46)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 430,
                  "endLine": 430,
                  "startColumn": 9,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3a3e29be950d423b7837069df775b1bc7a80e404fae34d487109f59f73a42f95",
            "1": "d3f23c3e.73eb5804.24fcbd1b.6f6e1432.8193a752.67ab4541.86c16eeb.9925e872.c80ecbcb.c55d47e1.24fcbd1b.a7267516.37592078.67ab4541.86c16eeb.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 2,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 942,
                            "endLine": 942,
                            "startColumn": 6,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 29,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 961,
                            "endLine": 961,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 973,
                            "endLine": 973,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 979,
                            "endLine": 979,
                            "startColumn": 59,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 979,
                            "endLine": 979,
                            "startColumn": 25,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 979,
                            "endLine": 979,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1053,
                            "endLine": 1053,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 430,
                            "endLine": 430,
                            "startColumn": 9,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 406,
                            "endLine": 406,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 268,
                            "endLine": 268,
                            "startColumn": 19,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 419,
                            "endLine": 419,
                            "startColumn": 23,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 420,
                            "endLine": 420,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 421,
                            "endLine": 421,
                            "startColumn": 10,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 268,
                            "endLine": 268,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 419,
                            "endLine": 419,
                            "startColumn": 10,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 423,
                            "endLine": 423,
                            "startColumn": 8,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/copy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 430,
                            "endLine": 430,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1052,
                            "endLine": 1052,
                            "startColumn": 12,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1053,
                            "endLine": 1053,
                            "startColumn": 22,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1064,
                            "endLine": 1064,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1065,
                            "endLine": 1065,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1076,
                            "endLine": 1076,
                            "startColumn": 7,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1076,
                            "endLine": 1076,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1086,
                            "endLine": 1086,
                            "startColumn": 16,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 916,
                            "endLine": 916,
                            "startColumn": 13,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 22,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 961,
                            "endLine": 961,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 973,
                            "endLine": 973,
                            "startColumn": 31,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1011,
                            "endLine": 1011,
                            "startColumn": 33,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1228,
                            "endLine": 1228,
                            "startColumn": 51,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1025,
                            "endLine": 1025,
                            "startColumn": 39,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 45,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 13,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 42,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 592,
                            "endLine": 592,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 43,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 51,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 44,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 45,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 46,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 525,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from open tar file flows into os.Symlink, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "arguments": [
              "[open tar file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19)",
              "[os.Symlink](20)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 651,
                  "endLine": 651,
                  "startColumn": 13,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fb684ae95e0a7ef8dd9e7c43850c45ffcc7a20bba3e988ee8f97c1dea2f6fb5d",
            "1": "c1d2e2c2.4d09fcd2.45df3e14.bb0d7326.84c49f13.67ab4541.860c51ff.0b3d1648.2d06e3d6.277c621c.fc813cb9.bb0d7326.96095dba.57f89f2f.847895ff.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 2,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 942,
                            "endLine": 942,
                            "startColumn": 6,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 29,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 961,
                            "endLine": 961,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 973,
                            "endLine": 973,
                            "startColumn": 31,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1011,
                            "endLine": 1011,
                            "startColumn": 33,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1228,
                            "endLine": 1228,
                            "startColumn": 51,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1025,
                            "endLine": 1025,
                            "startColumn": 39,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 45,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 13,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 592,
                            "endLine": 592,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 51,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 51,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from open tar file flows into os.Symlink, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to create arbitrary symlinks.",
            "arguments": [
              "[open tar file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19)",
              "[os.Symlink](20)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1025,
                  "endLine": 1025,
                  "startColumn": 13,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2c20f48ac3c2b50995f1fa6843312e84570bc28159164f13f62c5470f52d7f35",
            "1": "8379f5e8.684b6ea2.45df3e14.bb0d7326.556f02b4.d9c4bbd5.df7e59ba.9925e872.ae4abdc8.c55d47e1.45df3e14.bb0d7326.547ac5a8.57f89f2f.3aa2965d.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 2,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 942,
                            "endLine": 942,
                            "startColumn": 6,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 29,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 961,
                            "endLine": 961,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 973,
                            "endLine": 973,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 973,
                            "endLine": 973,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 973,
                            "endLine": 973,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 974,
                            "endLine": 974,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 986,
                            "endLine": 986,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1025,
                            "endLine": 1025,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 44,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from open tar file flows into os.RemoveAll, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "arguments": [
              "[open tar file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24)",
              "[os.RemoveAll](25)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157,
                  "startColumn": 15,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c91a9c151876cfc6786bfcdd7437b48532338ebce36af63216ac2cf8abdfde2e",
            "1": "ba4e4356.73eb5804.45df3e14.6f6e1432.84c49f13.995dab92.9686e05a.e01cd24f.2d06e3d6.3d676911.45df3e14.bb0d7326.32408664.57f89f2f.3aa2965d.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 2,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 40,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 29,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 24,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 4,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 156,
                            "endLine": 156,
                            "startColumn": 35,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 156,
                            "endLine": 156,
                            "startColumn": 21,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 156,
                            "endLine": 156,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 157,
                            "endLine": 157,
                            "startColumn": 28,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 157,
                            "endLine": 157,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from open tar file flows into os.RemoveAll, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "arguments": [
              "[open tar file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19)",
              "[os.RemoveAll](20)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168,
                  "startColumn": 16,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "321f20145fbe1b6b8806f702c2fc24a222f488d9ef631efae77e7bd7376058e9",
            "1": "82a0f5fb.348ddf12.45df3e14.edbd913d.84c49f13.d51155f6.0873598c.0b3d1648.2d06e3d6.348ddf12.45df3e14.bb0d7326.96095dba.57f89f2f.3aa2965d.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 2,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 40,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 29,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 168,
                            "endLine": 168,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/diff.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 168,
                            "endLine": 168,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from open tar file flows into os.RemoveAll, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "arguments": [
              "[open tar file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16)",
              "[os.RemoveAll](17)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1004,
                  "endLine": 1004,
                  "startColumn": 15,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c1a474cd1c1c9d2420afdf28ae3caa1b5108fb449ad7fc1bf3d2afbb810f9bae",
            "1": "8379f5e8.684b6ea2.45df3e14.bb0d7326.84c49f13.d9c4bbd5.df7e59ba.0b3d1648.ae4abdc8.17301397.45df3e14.bb0d7326.547ac5a8.57f89f2f.3aa2965d.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 2,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 932,
                            "endLine": 932,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 942,
                            "endLine": 942,
                            "startColumn": 6,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 29,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 950,
                            "endLine": 950,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 961,
                            "endLine": 961,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 973,
                            "endLine": 973,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 973,
                            "endLine": 973,
                            "startColumn": 11,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 973,
                            "endLine": 973,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 974,
                            "endLine": 974,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 986,
                            "endLine": 986,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1004,
                            "endLine": 1004,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/docker/docker/pkg/archive/archive.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1004,
                            "endLine": 1004,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into io.ioutil.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[io.ioutil.WriteFile](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ccaas_builder/cmd/build/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169,
                  "startColumn": 8,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "37a801ca6a13ba00f744f7ffae919b03d529009226d8a56a76ffd3bea654f906",
            "1": "3e0ea818.73eb5804.45df3e14.a53131fe.84c49f13.995dab92.ec4f221e.dc2bbada.2d06e3d6.348ddf12.45df3e14.9692a5c1.70ee189e.67ab4541.657797c6.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 38,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 2,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 25,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ccaas_builder/cmd/build/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 8,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/ErrorMessage",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "Information exposure through error stack trace in fmt.Printf.",
            "markdown": "Information exposure through {0} in {1}.",
            "arguments": [
              "[error stack trace](0)",
              "[fmt.Printf](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gossip/util/misc.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128,
                  "startColumn": 2,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f0decbc1ca99d927866d6e5eed775cc1d65088860d58dfc22d67a552c39685eb",
            "1": "2d06e3d6.3c81bbdf.14ec8903.b227866b.78b40541.57f89f2f.981a2d61.1bff12d3.2d06e3d6.9bf9da8e.8d277033.e22980a8.78b40541.57f89f2f.981a2d61.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "gossip/util/misc.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 21,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "gossip/util/misc.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 128,
                            "endLine": 128,
                            "startColumn": 2,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from open zip file flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[open zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21)",
              "[os.OpenFile](22)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "common/ledger/testutil/test_util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5bc79bf1c845e59452b5d52ee8c4e7a1293ed35f437bdc008531af4deb2f1f1c",
            "1": "7572e22a.73eb5804.45df3e14.b1e0a0f9.db2bb079.e4d7b7ac.aa359f29.9674c996.f3ca82f7.5d8de7a9.9fa62a61.e22980a8.56ffa9d2.e4d7b7ac.aa359f29.8b4eb32f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 12,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 12,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 122,
                            "endLine": 122,
                            "startColumn": 8,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 23,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 23,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 13,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 4,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 130,
                            "endLine": 130,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 130,
                            "endLine": 130,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 130,
                            "endLine": 130,
                            "startColumn": 15,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 130,
                            "endLine": 130,
                            "startColumn": 4,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 35,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 37,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 31,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/ledger/testutil/test_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gossip/comm/comm_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "abfa0e42667380d71206ac3de051e9fbacc226ba53425538fe946bc22ff156c4",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.458f1695"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "gossip/comm/comm_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gossip/comm/comm_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 535,
                  "endLine": 535,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "831845469e8c9e497e0fa80ee9043da3d39a5a7bec13cfca67dce3bf6a6fa223",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.8ee950b3.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.458f1695"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "gossip/comm/comm_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 535,
                            "endLine": 535,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gossip/comm/crypto_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dcbb34ef1a51e9c4f3186dca43f04a7a73a2aa81ce659caf4c4ce93cb1b05dd5",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.8ee950b3.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "gossip/comm/crypto_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[fmt.Fprintf](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/nwo/buildserver.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98,
                  "startColumn": 3,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e391e822f3850fb692a6f3ebe2ceefe982d2dabf15937db1962c3e4e9dbbff96",
            "1": "f0a84589.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.033439eb.f47edcf6.45df3e14.6b457aa1.5ef953d3.57f89f2f.5c650436.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 30,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 30,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 11,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 2,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 18,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 7,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 12,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 32,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 812,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[fmt.Fprintf](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/nwo/buildserver.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103,
                  "startColumn": 2,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ee626f04f4cee3f231a08a9d57594d960fce74724a70428431d4ece05babfa5",
            "1": "9cf53582.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.033439eb.f47edcf6.45df3e14.6b457aa1.5ef953d3.57f89f2f.5c650436.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 30,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 30,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 11,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 2,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 18,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 7,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 12,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 23,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/nwo/buildserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 812,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request body flows into fmt.Fprintln, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[fmt.Fprintln](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/configtxlator/rest/protolator_handlers.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 3,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7800984872ff5e494ee63bc28536b87689ce30c4ffc0d4b97980573f50b4bea8",
            "1": "f0a84589.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.37d4bff0.556df6d4.f75a6a44.45df3e14.e22980a8.6b6807dc.57f89f2f.a145879e.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 37,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 37,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 8,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 2,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 812,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request body flows into fmt.Fprintln, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[fmt.Fprintln](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/configtxlator/rest/protolator_handlers.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 3,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ccd29292adb2e297188eb5cf4bbde93d6244498fa66b32b63fd814ae9ae19a0",
            "1": "f0a84589.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.37d4bff0.556df6d4.f75a6a44.45df3e14.e22980a8.6b6807dc.57f89f2f.a145879e.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 37,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 37,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 8,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 2,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 812,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request body flows into fmt.Fprintln, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[fmt.Fprintln](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/configtxlator/rest/protolator_handlers.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "startColumn": 3,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "29553b210729e90ade082a0e9cc030008c739c650d943234e3086c4c1826c871",
            "1": "f0a84589.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.37d4bff0.34950bd9.f75a6a44.45df3e14.f24cd98e.6b6807dc.57f89f2f.a145879e.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 37,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 37,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 8,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 2,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 45,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 29,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 8,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 812,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[Write](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/configtxlator/rest/protolator_handlers.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 2,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7531a7f0acfa752878168f59366dc07c12f2d306f6c2eb371b59ecd441dbd068",
            "1": "34950bd9.73eb5804.45df3e14.f24cd98e.f658f14a.57f89f2f.df7e59ba.e01cd24f.34950bd9.f75a6a44.45df3e14.f24cd98e.6b6807dc.57f89f2f.a145879e.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 37,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 37,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 8,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 2,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 45,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 29,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/protolator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 812,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a web form flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18)",
              "[Write](19)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 2,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c6610933c3d7d3d425be6e9b57240364a8068765358b9ce64034230e12695a36",
            "1": "b979bb12.73eb5804.45df3e14.c19d78c5.037f6a72.57f89f2f.105fc38f.e01cd24f.2c1f7865.73eb5804.45df3e14.e22980a8.037f6a72.57f89f2f.96b9c3be.026ccee3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 23,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 23,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 16,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 15,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 59,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 18,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 38,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 23,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 2,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 2,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 32,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 10,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/configtxlator/rest/configtxlator_handlers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 762,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureTLSConfig/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Insecure TLS configuration is found to be in use. MaxVersion is set to a deprecated SSL/TLS version",
            "markdown": "Insecure TLS configuration is found to be in use. MaxVersion is set to a deprecated SSL/TLS version",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "common/fabhttp/server_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "startColumn": 5,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3bf832c2686d328ba2b2e53aaa72918081e6eed5853ac3917fe4408d3535f6a7",
            "1": "3e0ea818.73eb5804.738307e1.e22980a8.c8f211d9.67ab4541.b5e396cd.37d4bff0.8379f5e8.73eb5804.738307e1.e22980a8.556f02b4.67ab4541.b5e396cd.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "common/fabhttp/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 5,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 10,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/Microsoft/hcsshim/layer.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9cbc853f5ac1371c7b2eb6b43c1e84726e7040bc9587a945b42c23ce4039407a",
            "1": "685bf8ba.73eb5804.45df3e14.e22980a8.099b8dff.67ab4541.860c51ff.1d874c72.685bf8ba.73eb5804.45df3e14.e22980a8.099b8dff.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Microsoft/hcsshim/layer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 157,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 10,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/stretchr/objx/security.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "16063194054dc7cb01a0f66c48fb0cea888176b8b315e8124218e39cb6787c83",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.d8f8b060.67ab4541.860c51ff.3e33c505.ba4e4356.73eb5804.45df3e14.e22980a8.d8f8b060.67ab4541.860c51ff.3e33c505"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/stretchr/objx/security.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 157,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 10,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/Microsoft/go-winio/pkg/guid/guid.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8b612fe2127c2a6765575ef29939e1fe49fa6324dc759c36c95e1509753e09b5",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Microsoft/go-winio/pkg/guid/guid.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 157,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 10,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/tools/go/internal/pkgbits/encoder.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "81a0013dcc8242441611e3884e672b86a0b8af5367538924bb8531803923a73b",
            "1": "685bf8ba.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72.685bf8ba.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/tools/go/internal/pkgbits/encoder.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 7,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 157,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/tests/v1x_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 386,
                  "endLine": 386,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e1763a05d8a14229c4f9307da516b059202bea10fb359d727f03c2f91c948e7a",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/tests/v1x_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 386,
                            "endLine": 386,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/tests/v1x_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 386,
                            "endLine": 386,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 217,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dd2b34234080390ccfcb90394dc775fd42af3b30205cae9323b03089f1080548",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 26,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 217,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "92bbfc006b2c02db70ddbd0c2340edbb0e43889f77eced0b7136efb0079115b8",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 217,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "776c4ae44177487006cbcb5a875dd4e98b123ff9421c97200ab24d2a49c9bced",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 25,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 217,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 320,
                  "endLine": 320,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bc7a60f0dcae1520a9fd2e4f0d48d077c715e0f1f76324cbe5985a6ea4efeaf9",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 320,
                            "endLine": 320,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 320,
                            "endLine": 320,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 217,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ed67b67c0b47b70db02e522180ee87d9676c1d0117c23d195043ba09c80f7d7d",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 217,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1128,
                  "endLine": 1128,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "35fe1d7349b69cc67cc30b420fb6fe88f821f48cb909781a27faff60f3e27e6f",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1128,
                            "endLine": 1128,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1128,
                            "endLine": 1128,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 217,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/snapshot_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "endLine": 274,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1d94a8aca57df82abf4172935ec6cc4768612c6febaccc01fcd7975e291a03f2",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/snapshot_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 274,
                            "endLine": 274,
                            "startColumn": 25,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/snapshot_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 274,
                            "endLine": 274,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 217,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/privacyenabledstate/test_exports.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 149,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "114e0e29c1bb9b9e1e610df86ea2925cbcd62c08e81292f41f9066c7ad58d331",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/privacyenabledstate/test_exports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 26,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/privacyenabledstate/test_exports.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 217,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 338,
                  "endLine": 338,
                  "startColumn": 2,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "674f560e5f137e803a4e8564d248f0a8431234f7a356f7398273bffb2e125875",
            "1": "ba4e4356.73eb5804.52a8a1ee.e22980a8.c8f211d9.57f89f2f.860c51ff.1bff12d3.3e0ea818.73eb5804.52a8a1ee.e22980a8.eb15e5e7.57f89f2f.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 338,
                            "endLine": 338,
                            "startColumn": 23,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdb_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 338,
                            "endLine": 338,
                            "startColumn": 2,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 217,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooSmallKeySize",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "Usage of 1024 bits key in crypto.rsa.GenerateKey is considered insecure. Use a key with at least 2048 bits.",
            "markdown": "Usage of {0} bits key in {1} is considered insecure. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[crypto.rsa.GenerateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderer/mocks/util/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 21,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "636e9dcb098371a45d3569450a9a5765a39b7d18297c5fe1f01858a2679f9cf2",
            "1": "f93f09c7.5d8de7a9.a2126a63.e22980a8.ebd5faa6.67ab4541.860c51ff.fbc19cb8.f93f09c7.5d8de7a9.a2126a63.e22980a8.ebd5faa6.67ab4541.860c51ff.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "orderer/mocks/util/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 50,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "orderer/mocks/util/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 21,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/fsouza/go-dockerclient/client.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 329,
                  "endLine": 329,
                  "startColumn": 3,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7eab52945060d5a9fdbb688f199181fab2657dadd6e9e68949f5c5518fef0877",
            "1": "9cf53582.9bf9da8e.8d277033.e22980a8.c8f211d9.67ab4541.860c51ff.91f18234.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.91f18234"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/fsouza/go-dockerclient/client.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 329,
                            "endLine": 329,
                            "startColumn": 3,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Go",
            "files": 4559,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Java",
            "files": 2,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "Java",
            "files": 1,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 2,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "XML",
            "files": 1,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

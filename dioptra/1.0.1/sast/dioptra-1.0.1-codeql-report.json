[
  {
    "number": 16,
    "created_at": "2025-06-23T06:19:09Z",
    "updated_at": "2025-06-23T06:19:09Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/16",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/16",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": ["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"python\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "015061ae313e80b4792d230118c5b212a8f38bba",
      "message": {
        "text": "This expression logs sensitive data (password) as clear text."
      },
      "location": {
        "path": "cookiecutter-templates/cookiecutter-dioptra-deployment/{{cookiecutter.__project_slug}}/scripts/generate_password_templates.py",
        "start_line": 113,
        "end_line": 113,
        "start_column": 38,
        "end_column": 53
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/16/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 15,
    "created_at": "2025-06-23T06:19:09Z",
    "updated_at": "2025-06-23T06:19:09Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/15",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/15",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": ["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"python\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "015061ae313e80b4792d230118c5b212a8f38bba",
      "message": {
        "text": "This expression logs sensitive data (password) as clear text."
      },
      "location": {
        "path": "cookiecutter-templates/cookiecutter-dioptra-deployment/{{cookiecutter.__project_slug}}/scripts/generate_password_templates.py",
        "start_line": 110,
        "end_line": 110,
        "start_column": 65,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/15/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 14,
    "created_at": "2025-06-23T06:19:07Z",
    "updated_at": "2025-06-23T06:19:07Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/14",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/14",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/html-constructed-from-input",
      "severity": "error",
      "description": "Unsafe HTML constructed from library input",
      "name": "js/html-constructed-from-input",
      "tags": ["external/cwe/cwe-079","external/cwe/cwe-116","security"],
      "full_description": "Using externally controlled strings to construct HTML might allow a malicious user to perform a cross-site scripting attack.",
      "help": "# Unsafe HTML constructed from library input\nWhen a library function dynamically constructs HTML in a potentially unsafe way, then it's important to document to clients of the library that the function should only be used with trusted inputs. If the function is not documented as being potentially unsafe, then a client may inadvertently use inputs containing unsafe HTML fragments, and thereby leave the client vulnerable to cross-site scripting attacks.\n\n\n## Recommendation\nDocument all library functions that can lead to cross-site scripting attacks, and guard against unsafe inputs where dynamic HTML construction is not intended.\n\n\n## Example\nThe following example has a library function that renders a boldface name by writing to the `innerHTML` property of an element.\n\n\n```javascript\nmodule.exports = function showBoldName(name) {\n  document.getElementById('name').innerHTML = \"<b>\" + name + \"</b>\";\n}\n\n```\nThis library function, however, does not escape unsafe HTML, and a client that calls the function with user-supplied input may be vulnerable to cross-site scripting attacks.\n\nThe library could either document that this function should not be used with unsafe inputs, or use safe APIs such as `innerText`.\n\n\n```javascript\nmodule.exports = function showBoldName(name) {\n  const bold = document.createElement('b');\n  bold.innerText = name;\n  document.getElementById('name').appendChild(bold);\n}\n\n```\nAlternatively, an HTML sanitizer can be used to remove unsafe content.\n\n\n```javascript\n\nconst striptags = require('striptags');\nmodule.exports = function showBoldName(name) {\n  document.getElementById('name').innerHTML = \"<b>\" + striptags(name) + \"</b>\";\n}\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet).\n* OWASP [DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "015061ae313e80b4792d230118c5b212a8f38bba",
      "message": {
        "text": "This HTML construction which depends on library input might later allow cross-site scripting."
      },
      "location": {
        "path": "docs/source/_static/jquery.leaveNotice-nist.js",
        "start_line": 56,
        "end_line": 56,
        "start_column": 82,
        "end_column": 102
      },
      "classifications": ["documentation"]
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/14/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 13,
    "created_at": "2025-06-23T06:19:07Z",
    "updated_at": "2025-06-23T06:19:07Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/13",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/13",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/html-constructed-from-input",
      "severity": "error",
      "description": "Unsafe HTML constructed from library input",
      "name": "js/html-constructed-from-input",
      "tags": ["external/cwe/cwe-079","external/cwe/cwe-116","security"],
      "full_description": "Using externally controlled strings to construct HTML might allow a malicious user to perform a cross-site scripting attack.",
      "help": "# Unsafe HTML constructed from library input\nWhen a library function dynamically constructs HTML in a potentially unsafe way, then it's important to document to clients of the library that the function should only be used with trusted inputs. If the function is not documented as being potentially unsafe, then a client may inadvertently use inputs containing unsafe HTML fragments, and thereby leave the client vulnerable to cross-site scripting attacks.\n\n\n## Recommendation\nDocument all library functions that can lead to cross-site scripting attacks, and guard against unsafe inputs where dynamic HTML construction is not intended.\n\n\n## Example\nThe following example has a library function that renders a boldface name by writing to the `innerHTML` property of an element.\n\n\n```javascript\nmodule.exports = function showBoldName(name) {\n  document.getElementById('name').innerHTML = \"<b>\" + name + \"</b>\";\n}\n\n```\nThis library function, however, does not escape unsafe HTML, and a client that calls the function with user-supplied input may be vulnerable to cross-site scripting attacks.\n\nThe library could either document that this function should not be used with unsafe inputs, or use safe APIs such as `innerText`.\n\n\n```javascript\nmodule.exports = function showBoldName(name) {\n  const bold = document.createElement('b');\n  bold.innerText = name;\n  document.getElementById('name').appendChild(bold);\n}\n\n```\nAlternatively, an HTML sanitizer can be used to remove unsafe content.\n\n\n```javascript\n\nconst striptags = require('striptags');\nmodule.exports = function showBoldName(name) {\n  document.getElementById('name').innerHTML = \"<b>\" + striptags(name) + \"</b>\";\n}\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet).\n* OWASP [DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "015061ae313e80b4792d230118c5b212a8f38bba",
      "message": {
        "text": "This HTML construction which depends on library input might later allow cross-site scripting."
      },
      "location": {
        "path": "docs/source/_static/jquery.leaveNotice-nist.js",
        "start_line": 56,
        "end_line": 56,
        "start_column": 40,
        "end_column": 63
      },
      "classifications": ["documentation"]
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/13/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 12,
    "created_at": "2025-06-23T06:19:07Z",
    "updated_at": "2025-06-23T06:19:07Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/12",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/12",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/html-constructed-from-input",
      "severity": "error",
      "description": "Unsafe HTML constructed from library input",
      "name": "js/html-constructed-from-input",
      "tags": ["external/cwe/cwe-079","external/cwe/cwe-116","security"],
      "full_description": "Using externally controlled strings to construct HTML might allow a malicious user to perform a cross-site scripting attack.",
      "help": "# Unsafe HTML constructed from library input\nWhen a library function dynamically constructs HTML in a potentially unsafe way, then it's important to document to clients of the library that the function should only be used with trusted inputs. If the function is not documented as being potentially unsafe, then a client may inadvertently use inputs containing unsafe HTML fragments, and thereby leave the client vulnerable to cross-site scripting attacks.\n\n\n## Recommendation\nDocument all library functions that can lead to cross-site scripting attacks, and guard against unsafe inputs where dynamic HTML construction is not intended.\n\n\n## Example\nThe following example has a library function that renders a boldface name by writing to the `innerHTML` property of an element.\n\n\n```javascript\nmodule.exports = function showBoldName(name) {\n  document.getElementById('name').innerHTML = \"<b>\" + name + \"</b>\";\n}\n\n```\nThis library function, however, does not escape unsafe HTML, and a client that calls the function with user-supplied input may be vulnerable to cross-site scripting attacks.\n\nThe library could either document that this function should not be used with unsafe inputs, or use safe APIs such as `innerText`.\n\n\n```javascript\nmodule.exports = function showBoldName(name) {\n  const bold = document.createElement('b');\n  bold.innerText = name;\n  document.getElementById('name').appendChild(bold);\n}\n\n```\nAlternatively, an HTML sanitizer can be used to remove unsafe content.\n\n\n```javascript\n\nconst striptags = require('striptags');\nmodule.exports = function showBoldName(name) {\n  document.getElementById('name').innerHTML = \"<b>\" + striptags(name) + \"</b>\";\n}\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet).\n* OWASP [DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "015061ae313e80b4792d230118c5b212a8f38bba",
      "message": {
        "text": "This HTML construction which depends on library input might later allow cross-site scripting."
      },
      "location": {
        "path": "docs/source/_static/jquery.leaveNotice-nist.js",
        "start_line": 55,
        "end_line": 55,
        "start_column": 40,
        "end_column": 57
      },
      "classifications": ["documentation"]
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/12/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 11,
    "created_at": "2025-06-23T06:19:07Z",
    "updated_at": "2025-06-23T06:19:07Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/11",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/11",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unsafe-jquery-plugin",
      "severity": "warning",
      "description": "Unsafe jQuery plugin",
      "name": "js/unsafe-jquery-plugin",
      "tags": ["external/cwe/cwe-079","external/cwe/cwe-116","frameworks/jquery","security"],
      "full_description": "A jQuery plugin that unintentionally constructs HTML from some of its options may be unsafe to use for clients.",
      "help": "# Unsafe jQuery plugin\nLibrary plugins, such as those for the jQuery library, are often configurable through options provided by the clients of the plugin. Clients, however, do not know the implementation details of the plugin, so it is important to document the capabilities of each option. The documentation for the plugin options that the client is responsible for sanitizing is of particular importance. Otherwise, the plugin may write user input (for example, a URL query parameter) to a web page without properly sanitizing it first, which allows for a cross-site scripting vulnerability in the client application through dynamic HTML construction.\n\n\n## Recommendation\nDocument all options that can lead to cross-site scripting attacks, and guard against unsafe inputs where dynamic HTML construction is not intended.\n\n\n## Example\nThe following example shows a jQuery plugin that selects a DOM element, and copies its text content to another DOM element. The selection is performed by using the plugin option `sourceSelector` as a CSS selector.\n\n\n```javascript\njQuery.fn.copyText = function(options) {\n\t// BAD may evaluate `options.sourceSelector` as HTML\n\tvar source = jQuery(options.sourceSelector),\n\t    text = source.text();\n\tjQuery(this).text(text);\n}\n\n```\nThis is, however, not a safe plugin, since the call to `jQuery` interprets `sourceSelector` as HTML if it is a string that starts with `<`.\n\nInstead of documenting that the client is responsible for sanitizing `sourceSelector`, the plugin can use `jQuery.find` to always interpret `sourceSelector` as a CSS selector:\n\n\n```javascript\njQuery.fn.copyText = function(options) {\n\t// GOOD may not evaluate `options.sourceSelector` as HTML\n\tvar source = jQuery.find(options.sourceSelector),\n\t    text = source.text();\n\tjQuery(this).text(text);\n}\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* jQuery: [Plugin creation](https://learn.jquery.com/plugins/basic-plugin-creation/).\n* Bootstrap: [XSS vulnerable bootstrap plugins](https://github.com/twbs/bootstrap/pull/27047).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "015061ae313e80b4792d230118c5b212a8f38bba",
      "message": {
        "text": "Potential XSS vulnerability in the '$.fn.visible' plugin."
      },
      "location": {
        "path": "docs/source/_static/jquery.visible.js",
        "start_line": 48,
        "end_line": 48,
        "start_column": 33,
        "end_column": 42
      },
      "classifications": ["documentation"]
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/11/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 10,
    "created_at": "2025-06-23T06:19:07Z",
    "updated_at": "2025-06-23T06:19:07Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/10",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/10",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/xss-through-dom",
      "severity": "warning",
      "description": "DOM text reinterpreted as HTML",
      "name": "js/xss-through-dom",
      "tags": ["external/cwe/cwe-079","external/cwe/cwe-116","security"],
      "full_description": "Reinterpreting text from the DOM as HTML can lead to a cross-site scripting vulnerability.",
      "help": "# DOM text reinterpreted as HTML\nExtracting text from a DOM node and interpreting it as HTML can lead to a cross-site scripting vulnerability.\n\nA webpage with this vulnerability reads text from the DOM, and afterwards adds the text as HTML to the DOM. Using text from the DOM as HTML effectively unescapes the text, and thereby invalidates any escaping done on the text. If an attacker is able to control the safe sanitized text, then this vulnerability can be exploited to perform a cross-site scripting attack.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing text to the page, or one of the other solutions that are mentioned in the References section below.\n\n\n## Example\nThe following example shows a webpage using a `data-target` attribute to select and manipulate a DOM element using the JQuery library. In the example, the `data-target` attribute is read into the `target` variable, and the `$` function is then supposed to use the `target` variable as a CSS selector to determine which element should be manipulated.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n    $(target).hide();\n});\n\n```\nHowever, if an attacker can control the `data-target` attribute, then the value of `target` can be used to cause the `$` function to execute arbitrary JavaScript.\n\nThe above vulnerability can be fixed by using `$.find` instead of `$`. The `$.find` function will only interpret `target` as a CSS selector and never as HTML, thereby preventing an XSS attack.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n\t$.find(target).hide();\n});\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://owasp.org/www-community/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "015061ae313e80b4792d230118c5b212a8f38bba",
      "message": {
        "text": "DOM text is reinterpreted as HTML without escaping meta-characters."
      },
      "location": {
        "path": "docs/source/_static/jquery.leaveNotice-nist.js",
        "start_line": 68,
        "end_line": 68,
        "start_column": 46,
        "end_column": 56
      },
      "classifications": ["documentation"]
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/10/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 9,
    "created_at": "2025-06-23T06:19:07Z",
    "updated_at": "2025-06-23T06:19:07Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/9",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/9",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/useless-regexp-character-escape",
      "severity": "error",
      "description": "Useless regular-expression character escape",
      "name": "js/useless-regexp-character-escape",
      "tags": ["correctness","external/cwe/cwe-020","security"],
      "full_description": "Prepending a backslash to an ordinary character in a string does not have any effect, and may make regular expressions constructed from this string behave unexpectedly.",
      "help": "# Useless regular-expression character escape\nWhen a character in a string literal or regular expression literal is preceded by a backslash, it is interpreted as part of an escape sequence. For example, the escape sequence `\\n` in a string literal corresponds to a single `newline` character, and not the `\\` and `n` characters. However, not all characters change meaning when used in an escape sequence. In this case, the backslash just makes the character appear to mean something else, and the backslash actually has no effect. For example, the escape sequence `\\k` in a string literal just means `k`. Such superfluous escape sequences are usually benign, and do not change the behavior of the program.\n\nThe set of characters that change meaning when in escape sequences is different for regular expression literals and string literals. This can be problematic when a regular expression literal is turned into a regular expression that is built from one or more string literals. The problem occurs when a regular expression escape sequence loses its special meaning in a string literal.\n\n\n## Recommendation\nEnsure that the right amount of backslashes is used when escaping characters in strings, template literals and regular expressions. Pay special attention to the number of backslashes when rewriting a regular expression as a string literal.\n\n\n## Example\nThe following example code checks that a string is `\"my-marker\"`, possibly surrounded by white space:\n\n\n```javascript\nlet regex = new RegExp('(^\\s*)my-marker(\\s*$)'),\n    isMyMarkerText = regex.test(text);\n\n```\nHowever, the check does not work properly for white space as the two `\\s` occurrences are semantically equivalent to just `s`, meaning that the check will succeed for strings like `\"smy-markers\"` instead of `\" my-marker \"`. Address these shortcomings by either using a regular expression literal (`/(^\\s*)my-marker(\\s*$)/`), or by adding extra backslashes (`'(^\\\\s*)my-marker(\\\\s*$)'`).\n\n\n## References\n* MDN: [Regular expression escape notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping)\n* MDN: [String escape notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Escape_notation)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "015061ae313e80b4792d230118c5b212a8f38bba",
      "message": {
        "text": "The escape sequence '\\.' is equivalent to just '.', so the sequence may still represent a meta-character when it is used in a regular expression."
      },
      "location": {
        "path": "docs/source/_static/applyLeaveNotice.js",
        "start_line": 21,
        "end_line": 21,
        "start_column": 50,
        "end_column": 52
      },
      "classifications": ["documentation"]
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/9/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 8,
    "created_at": "2025-06-23T06:18:40Z",
    "updated_at": "2025-06-27T07:36:56Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/8",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/8",
    "state": "fixed",
    "fixed_at": "2025-06-27T07:36:56Z",
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "fixed",
      "commit_sha": "6e9c955110c3f90be49d7fd1f0288392f5149e2a",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}"
      },
      "location": {
        "path": ".github/workflows/pip-compile.yml",
        "start_line": 215,
        "end_line": 241,
        "start_column": 5,
        "end_column": 23
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/8/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 7,
    "created_at": "2025-06-23T06:18:40Z",
    "updated_at": "2025-06-27T07:36:56Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/7",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/7",
    "state": "fixed",
    "fixed_at": "2025-06-27T07:36:56Z",
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "fixed",
      "commit_sha": "6e9c955110c3f90be49d7fd1f0288392f5149e2a",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/pip-compile.yml",
        "start_line": 164,
        "end_line": 214,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/7/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 6,
    "created_at": "2025-06-23T06:18:40Z",
    "updated_at": "2025-06-27T07:36:56Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/6",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/6",
    "state": "fixed",
    "fixed_at": "2025-06-27T07:36:56Z",
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "fixed",
      "commit_sha": "6e9c955110c3f90be49d7fd1f0288392f5149e2a",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/tox-tests.yml",
        "start_line": 71,
        "end_line": 136,
        "start_column": 5,
        "end_column": 26
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/6/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 5,
    "created_at": "2025-06-23T06:18:40Z",
    "updated_at": "2025-06-27T07:36:56Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/5",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/5",
    "state": "fixed",
    "fixed_at": "2025-06-27T07:36:56Z",
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "fixed",
      "commit_sha": "6e9c955110c3f90be49d7fd1f0288392f5149e2a",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/pip-compile.yml",
        "start_line": 111,
        "end_line": 163,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/5/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 4,
    "created_at": "2025-06-23T06:18:40Z",
    "updated_at": "2025-06-27T07:36:56Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/4",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/4",
    "state": "fixed",
    "fixed_at": "2025-06-27T07:36:56Z",
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "fixed",
      "commit_sha": "6e9c955110c3f90be49d7fd1f0288392f5149e2a",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/tox-tests.yml",
        "start_line": 28,
        "end_line": 70,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/4/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 3,
    "created_at": "2025-06-23T06:18:40Z",
    "updated_at": "2025-06-27T07:36:56Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/3",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/3",
    "state": "fixed",
    "fixed_at": "2025-06-27T07:36:56Z",
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "fixed",
      "commit_sha": "6e9c955110c3f90be49d7fd1f0288392f5149e2a",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/docker-images.yml",
        "start_line": 38,
        "end_line": 111,
        "start_column": 5,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/3/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 2,
    "created_at": "2025-06-23T06:18:40Z",
    "updated_at": "2025-06-27T07:36:56Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/2",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/2",
    "state": "fixed",
    "fixed_at": "2025-06-27T07:36:56Z",
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "fixed",
      "commit_sha": "6e9c955110c3f90be49d7fd1f0288392f5149e2a",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/sphinx-docs.yml",
        "start_line": 28,
        "end_line": 75,
        "start_column": 5,
        "end_column": 67
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/2/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 1,
    "created_at": "2025-06-23T06:18:40Z",
    "updated_at": "2025-06-27T07:36:56Z",
    "url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/1",
    "html_url": "https://github.com/Be-Secure/dioptra/security/code-scanning/1",
    "state": "fixed",
    "fixed_at": "2025-06-27T07:36:56Z",
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions","external/cwe/cwe-275","maintainability","security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.22.0"
    },
    "most_recent_instance": {
      "ref": "refs/heads/releasev-1.0.1",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"build-mode\":\"none\",\"language\":\"actions\"}",
      "category": "/language:actions",
      "state": "fixed",
      "commit_sha": "6e9c955110c3f90be49d7fd1f0288392f5149e2a",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/pip-compile.yml",
        "start_line": 25,
        "end_line": 110,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/Be-Secure/dioptra/code-scanning/alerts/1/instances",
    "dismissal_approved_by": null
  }
]
{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/argoproj/argo-workflows/commit/3b6c53af00843a17dc2f030e08dec1b1c070e3f2?diff=split#diff-42623a9b98b20e51352de53c9e3283f5d13fcb2b9144bb2b62f7247119b773a1L-1",
                    "lines": [
                      {
                        "line": "// InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{Certificates: []tls.Certificate{cer}, InsecureSkipVerify: true}\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsMinVersion, err := env.GetInt(\"TLS_MIN_VERSION\", tls.VersionTLS12)\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "errors.CheckError(err)\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tCertificates:       []tls.Certificate{cer},\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: false, // InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tMinVersion:         uint16(tlsMinVersion),\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ssllabs/ssllabs-scan/commit/8a3e50f861b4b2afaa3f383b50d58579bf6b966b?diff=split#diff-bdfe0ba05cb064a75ee18b6ec0f1dbe7ef0c6ed409f45d603490d1cc86b3d641L-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: true },\n",
                        "lineNumber": 498,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: false },\n",
                        "lineNumber": 497,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cloudfoundry/stratos/commit/0e62bb103775a351650f31312c7ef848846fdee7?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "if skipCertVerification {\n",
                        "lineNumber": 280,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\ttr.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 281,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tr.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 280,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 34,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "InTest",
                  "SourceHttpBody",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ory/hydra/commit/043c6635fa3b1661b4a666f26cebf16c2306bfdb?diff=split#diff-37b8edd0d01d055fd4ede6b212ab56428bed90cd46d9960a1edfa874d8707293L-1",
                    "lines": [
                      {
                        "line": "\t\"html/template\"\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"net/http\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/hydra/cmd/cli\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/julienschmidt/httprouter\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/toqueteos/webbrowser\"\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"golang.org/x/oauth2\"\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/cmdx\"\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/flagx\"\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/randx\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/tlsx\"\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/urlx\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserWelcome = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "        Connect</a> library.</p>\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "    Hydra).\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "    To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p><a href=\"{{ .URL }}\">Authorize application</a></p>\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>`))\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserError = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>An error occurred</h1>\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h2>{{ .Name }}</h2>\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Description }}</p>\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Hint }}</p>\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Debug }}</p>\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserResult = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "<html>\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "<ul>\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Access Token: <code>{{ .AccessToken }}</code></li>\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Refresh Token: <code>{{ .RefreshToken }}</code></li>\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Expires in: <code>{{ .Expiry }}</code></li>\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>ID Token: <code>{{ .IDToken }}</code></li>\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "</ul>\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "// tokenUserCmd represents the token command\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserCmd = &cobra.Command{\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tUse:   \"user\",\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tShort: \"An exemplary OAuth 2.0 Client performing the OAuth 2.0 Authorize Code Flow\",\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tLong: `Starts an exemplary web server that acts as an OAuth 2.0 Client performing the Authorize Code Flow.\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command will help you to see if ORY Hydra has been configured properly.\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command must not be used for anything else than manual testing or demo purposes. The server will terminate on error\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "and success.`,\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRun: func(cmd *cobra.Command, args []string) {\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx := context.Background()\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif flagx.MustGetBool(cmd, \"skip-tls-verify\") {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// fmt.Println(\"Warning: Skipping TLS Certificate Verification.\")\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx = context.WithValue(context.Background(), oauth2.HTTPClient, &http.Client{Transport: &http.Transport{\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}})\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tisSSL := flagx.MustGetBool(cmd, \"https\")\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tport := flagx.MustGetInt(cmd, \"port\")\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscopes := flagx.MustGetStringSlice(cmd, \"scope\")\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprompt := flagx.MustGetStringSlice(cmd, \"prompt\")\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmaxAge := flagx.MustGetInt(cmd, \"max-age\")\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tredirectUrl := flagx.MustGetString(cmd, \"redirect\")\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbackend := flagx.MustGetString(cmd, \"token-url\")\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfrontend := flagx.MustGetString(cmd, \"auth-url\")\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\taudience := flagx.MustGetStringSlice(cmd, \"audience\")\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientID := flagx.MustGetString(cmd, \"client-id\")\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientSecret := flagx.MustGetString(cmd, \"client-secret\")\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif clientID == \"\" || clientSecret == \"\" {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Print(cmd.UsageString())\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(\"Please provide a Client ID and Client Secret using flags --client-id and --client-secret, or environment variables OAUTH2_CLIENT_ID and OAUTH2_CLIENT_SECRET.\")\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproto := \"http\"\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tproto = \"https\"\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserverLocation := fmt.Sprintf(\"%s://127.0.0.1:%d/\", proto, port)\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif redirectUrl == \"\" {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tredirectUrl = serverLocation + \"callback\"\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif backend == \"\" {\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbackend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/token\").String()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif frontend == \"\" {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfrontend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/auth\").String()\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tconf := oauth2.Config{\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientID:     clientID,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientSecret: clientSecret,\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tEndpoint: oauth2.Endpoint{\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTokenURL: backend,\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tAuthURL:  frontend,\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t},\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tRedirectURL: redirectUrl,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tScopes:      scopes,\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tstate, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tnonce, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tauthCodeURL := conf.AuthCodeURL(\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tstring(state),\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"audience\", strings.Join(audience, \"+\")),\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"nonce\", string(nonce)),\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"prompt\", strings.Join(prompt, \"+\")),\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"max_age\", strconv.Itoa(maxAge)),\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t)\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !flagx.MustGetBool(cmd, \"no-open\") {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twebbrowser.Open(serverLocation)\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up home route on \" + serverLocation)\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up callback listener on \" + serverLocation + \"callback\")\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Press ctrl + c on Linux / Windows or cmd + c on OSX to end the process.\")\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Printf(\"If your browser does not open automatically, navigate to:\\n\\n\\t%s\\n\\n\", serverLocation)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr := httprouter.New()\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar tlsc *tls.Config\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tkey, err := rsa.GenerateKey(rand.Reader, 2048)\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate RSA key pair: %s\", err)\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcert, err := tlsx.CreateSelfSignedTLSCertificate(key)\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate self-signed TLS Certificate: %s\", err)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttlsc = &tls.Config{Certificates: []tls.Certificate{*cert}}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserver := &http.Server{Addr: fmt.Sprintf(\":%d\", port), Handler: r, TLSConfig: tlsc}\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar shutdown = func() {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttime.Sleep(time.Second * 1)\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tdefer cancel()\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tserver.Shutdown(ctx)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tw.Write([]byte(fmt.Sprintf(`\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "<html><head></head><body>\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID Connect</a> library.</p>\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY Hydra).\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p><a href=\"%s\">Authorize application</a></p>\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "`, authCodeURL)))\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t})\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/callback\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(r.URL.Query().Get(\"error\")) > 0 {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"Got error: %s\\n\", r.URL.Query().Get(\"error_description\"))\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p><p>%s</p><p>%s</p></body></html>\", r.URL.Query().Get(\"error\"), r.URL.Query().Get(\"error_description\"), r.URL.Query().Get(\"error_hint\"), r.URL.Query().Get(\"error_debug\"))\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tgo shutdown()\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif r.URL.Query().Get(\"state\") != string(state) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"States do not match. Expected %s, got %s\\n\", string(state), r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p></body></html>\", \"States do not match\", \"Expected state \"+string(state)+\" but got \"+r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\t_ = tokenUserError.Execute(w, &ed{\n",
                        "lineNumber": 221,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tName:        \"States do not match\",\n",
                        "lineNumber": 222,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tDescription: \"Expected state \" + string(state) + \" but got \" + r.URL.Query().Get(\"state\"),\n",
                        "lineNumber": 223,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t})\n",
                        "lineNumber": 224,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ewhal/Pastebin/commit/bfdb8c815ad06f8b114521be2997a830285ac92b?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\"html\"\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"io\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"net/http\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dchest/uniuri\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ewhal/pygments\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDIRECTORY = \"/tmp/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "ADDRESS = \"https://p.pantsu.cat/\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "LENGTH    = 4\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tTEXT    = \"$ <command> | curl -F 'p=<-' \" + ADDRESS + \"\\n\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPORT    = \":9900\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "func check(err error) {\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err)\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func exists(location string) bool {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif _, err := os.Stat(location); err != nil {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif os.IsNotExist(err) {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn false\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generateName() string {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := uniuri.NewLen(LENGTH)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile := exists(DIRECTORY + s)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file == true {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgenerateName()\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "func save(raw []byte) string {\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpaste := raw[85 : len(raw)-46]\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := generateName()\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlocation := DIRECTORY + s\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ioutil.WriteFile(location, paste, 0644)\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "check(err)\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "func pasteHandler(w http.ResponseWriter, r *http.Request) {\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch r.Method {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase \"GET\":\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam1 := r.URL.Query().Get(\"p\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam2 := r.URL.Query().Get(\"lang\")\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif param1 != \"\" {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\td := DIRECTORY + param1\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ts, err := ioutil.ReadFile(d)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err != nil {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\thttp.Error(w, err.Error(), 500)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "if param2 != \"\" {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(string(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tio.WriteString(w, string(highlight))\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(html.UnescapeString(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tio.WriteString(w, highlight)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fairfaxmedia/flywheel/commit/8e4de33a3346aa6c85af67a52d9b0eaa43cdabdd?diff=split#diff-6971e2713fe98b79ea18e9748bf68928f6ebcd4d93e7a27f10e7472ce6d78a48L-1",
                    "lines": [
                      {
                        "line": "\tif ok && flywheel[0] == \"status\" {\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf, err := json.Marshal(pong)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfmt.Fprint(w, err)\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Write(buf)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif pong.Err != nil {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbody := fmt.Sprintf(HTML_ERROR, pong.Err)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.Write([]byte(body))\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 48,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/nickvellios/golang-web-app/commit/8ceeeb09c880de70ca2626110afa2846410a8c2a?diff=split#diff-4107bc961286db59ba80aa5bb16fee3909f98505385dd6a51cf9461da04fad16L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"database/sql\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"fmt\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"io\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"regexp\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"webapp/ncrypt\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "type User struct {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tEmail     string  `json:\"email\"`\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tName      string  `json:\"name\"`\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPassword  string  `json:\"password\"`\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHash      string  `json:\"-\"`\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tCSRFToken string  `json:\"-\"`\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tId        int     `json:\"id\"`\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDb        *sql.DB `json:\"-\"`\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Authenticate() bool {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.Load() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ncrypt.CheckPassHash([]byte(u.Hash), []byte(u.Password))\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Load reloads the user from the database.  Only value needed to be set is 'Email', the rest will be populated.\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Load() bool {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT name, password, id, csrftok FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Name, &u.Hash, &u.Id, &u.CSRFToken)\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Save() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Save user to db\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET email=$1, name=$2, password=$3 WHERE id=$4\")\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.Email, u.Name, u.Hash, u.Id)\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "*/\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Create saves a user object to the database.  If a duplicate email is found this will fail.\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Create() error {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.validEmail() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"Invalid email format\")\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif u.Exists() {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"User already exists\")\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.sanitize()\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar lastInsertId int\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := u.Db.QueryRow(\"INSERT INTO users(email, name, password) VALUES($1,$2,$3) returning id;\", u.Email, u.Name, u.Hash).Scan(&lastInsertId)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err //fmt.Println(err.Error())\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Id = lastInsertId\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) validEmail() bool {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tre := regexp.MustCompile(`^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$`)\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn re.MatchString(u.Email)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) sanitize() {\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Clean up user object to prevent XSS attacks\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Exists() bool {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT id FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Id)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) SetCSRF() {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = CSRFToken()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) RevokeCSRF() {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = \"\"\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) HashPass() {\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thash, _ := ncrypt.HashPass([]byte(u.Password))\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Hash = string(hash)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "func CSRFToken() string {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\th := md5.New()\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\th := sha256.New()\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bookingcom/carbonapi/commit/f57ca38fea22194840bae407be94d73c2eda4dfa?diff=split#diff-74597f1e11b4f598d4f75e99aee5237cc9dc7e7cf008e1f33e3c72dc4a93ffe3L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha1\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/hex\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync/atomic\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/bradfitz/gomemcache/memcache\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dgryski/go-expirecache\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrTimeout  = errors.New(\"cache: timeout\")\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrNotFound = errors.New(\"cache: not found\")\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "type BytesCache interface {\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(k string) ([]byte, error)\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(k string, v []byte, expire int32)\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "type NullCache struct{}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Get(string) ([]byte, error) { return nil, ErrNotFound }\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Set(string, []byte, int32)  {}\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewExpireCache(maxsize uint64) BytesCache {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec := expirecache.New(maxsize)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo ec.ApproximateCleaner(10 * time.Second)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ExpireCache{ec: ec}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ExpireCache struct {\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec *expirecache.Cache\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tv, ok := ec.ec.Get(k)\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn v.([]byte), nil\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec.ec.Set(k, v, uint64(len(v)), expire)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Items() int { return ec.ec.Items() }\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Size() uint64 { return ec.ec.Size() }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewMemcached(prefix string, timeoutMs uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &MemcachedCache{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:         prefix,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tqueryTimeoutMs: timeoutMs,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:         memcache.New(servers...),\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "type MemcachedCache struct {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix         string\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient         *memcache.Client\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeouts       uint64\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tqueryTimeoutMs uint64\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdone := make(chan bool, 1)\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar err error\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar item *memcache.Item\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo func() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\titem, err = m.client.Get(m.prefix + hk)\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tdone <- true\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}()\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeout := time.After(time.Duration(m.queryTimeoutMs) * time.Millisecond)\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tselect {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-timeout:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tatomic.AddUint64(&m.timeouts, 1)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-done:\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// translate to internal cache miss error\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err == memcache.ErrCacheMiss {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\terr = ErrNotFound\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif item == nil {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// in case if memcached client returns (nil, nil)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, nil\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn item.Value, nil\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo m.client.Set(&memcache.Item{Key: m.prefix + hk, Value: v, Expiration: expire})\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Timeouts() uint64 {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn atomic.LoadUint64(&m.timeouts)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ReplicatedMemcached represents the caching setup when all the memcached instances\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "// are identical. Each read and write refers to all of them.\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ReplicatedMemcached struct {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix    string\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tinstances []Cache\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeoutMs uint64 // timeout for getting data\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Cache is a cache interface. Mainly for testing abilities.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "type Cache interface {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(string) (*memcache.Item, error)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(*memcache.Item) error\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewReplicatedMemcached creates a set of identical memcached instances.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewReplicatedMemcached(prefix string, timeout uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tm := ReplicatedMemcached{\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:    prefix,\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttimeoutMs: timeout,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, s := range servers {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tm.instances = append(m.instances, memcache.New(s))\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &m\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Get gets value for the key from the replicated memcached.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "// It sends the request to all replicas and picks the first valid answer\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (event if it's a not-found) or times out.\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *ReplicatedMemcached) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// chan size is selected so that timeouts do not block getFromReplica goroutines\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tresCh := make(chan cacheResponse, len(m.instances))\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, replica := range m.instances {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo getFromReplica(replica, k, m.prefix, resCh)\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttout := time.After(time.Duration(m.timeoutMs) * time.Millisecond)\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcacheErrs := \"\"\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor range m.instances {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase res := <-resCh:\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif res.err != nil {\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tcacheErrs = cacheErrs + \"; \" + res.err.Error()\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else if !res.found {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn res.data, nil\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-tout:\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// if this point is reached, it means that all caches returned errors\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil, errors.New(\"all caches failed with errors: \" + cacheErrs)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Set sets the key-value pair for all cache instances.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (rm *ReplicatedMemcached) Set(k string, val []byte, expire int32) {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar wg sync.WaitGroup\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, m := range rm.instances {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twg.Add(1)\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo func(k_ string, val_ []byte, expire_ int32, m_ Cache) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tm_.Set(&memcache.Item{\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tKey:        rm.prefix + k_,\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tValue:      val_,\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tExpiration: expire_,\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t})\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twg.Done()\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}(hk, val, expire, m)\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twg.Wait()\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "type cacheResponse struct {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfound bool\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdata  []byte\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr   error\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "func getFromReplica(m Cache, k string, prefix string, res chan<- cacheResponse) {\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tkey := sha256.Sum256([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/reugn/go-streams/commit/db50128f2c0ac92b8057ecbee8ac6341b36165fe?diff=split#diff-91b73d75d1aca2860b254018c07a1b68715ae6351c37666f98fbc4b42c16d8abL-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/json\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os/signal\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"syscall\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\taero \"github.com/aerospike/aerospike-client-go\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams/flow\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeProperties is the Aerospike connector configuration properties\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeProperties struct {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPolicy    *aero.ClientPolicy\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHostname  string\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPort      int\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tNamespase string\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSetName   string\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ChangeNotificationProperties holds the changes polling configuration\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ChangeNotificationProperties struct {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPollingInterval time.Duration\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSource connector\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSource struct {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient                       *aero.Client\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords                      chan *aero.Result\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy                   *aero.ScanPolicy\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tout                          chan interface{}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx                          context.Context\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties                   *AerospikeProperties\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSource returns a new AerospikeSource instance\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "// set changeNotificationProperties to nil to scan the entire namespace/set\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSource(ctx context.Context,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties,\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy *aero.ScanPolicy,\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties) (*AerospikeSource, error) {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif scanPolicy == nil {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy = aero.NewScanPolicy()\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords := make(chan *aero.Result)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSource{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:                       client,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\trecords:                      records,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy:                   scanPolicy,\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tout:                          make(chan interface{}),\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:                          ctx,\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:                   properties,\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tchangeNotificationProperties: changeNotificationProperties,\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.poll()\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) poll() {\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif as.changeNotificationProperties == nil {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// scan the entire namespace/set\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.doScan()\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclose(as.records)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// get change notifications by polling\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tticker := time.NewTicker(as.changeNotificationProperties.PollingInterval)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase t := <-ticker.C:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tts := t.UnixNano() - as.changeNotificationProperties.PollingInterval.Nanoseconds()\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.scanPolicy.PredExp = []aero.PredExp{\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpRecLastUpdate(),\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerValue(ts),\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerGreater(),\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tlog.Printf(\"Polling records %v\", as.scanPolicy.PredExp)\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.doScan()\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) doScan() {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecordSet, err := as.client.ScanAll(as.scanPolicy, as.properties.Namespase, as.properties.SetName)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tlog.Printf(\"Aerospike client.ScanAll failed with: %v\", err)\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfor result := range recordSet.Results() {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.records <- result\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) init() {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigchan := make(chan os.Signal, 1)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsignal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-sigchan:\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase result, ok := <-as.records:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif !ok {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tbreak loop\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif result.Err == nil {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tas.out <- result.Record\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Scan record error %s\", result.Err)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog.Printf(\"Closing Aerospike consumer\")\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclose(as.out)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tas.client.Close()\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Via streams data through the given flow\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Via(_flow streams.Flow) streams.Flow {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tflow.DoStream(as, _flow)\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn _flow\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Out returns an output channel for sending data\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Out() <-chan interface{} {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn as.out\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeKeyBins is an Aerospike Key and BinMap container\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "// use it to stream records to the AerospikeSink\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeKeyBins struct {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tKey  *aero.Key\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tBins aero.BinMap\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSink connector\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSink struct {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient      *aero.Client\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tin          chan interface{}\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx         context.Context\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties  *AerospikeProperties\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twritePolicy *aero.WritePolicy\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSink returns a new AerospikeSink instance\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSink(ctx context.Context,\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties, writePolicy *aero.WritePolicy) (*AerospikeSink, error) {\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif writePolicy == nil {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy = aero.NewWritePolicy(0, 0)\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSink{\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:      client,\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tin:          make(chan interface{}),\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:         ctx,\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:  properties,\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy: writePolicy,\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSink) init() {\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor msg := range as.in {\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tswitch m := msg.(type) {\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase AerospikeKeyBins:\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err := as.client.Put(as.writePolicy, m.Key, m.Bins); err != nil {\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Aerospike client.Put failed with: %s\", err)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase aero.BinMap:\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// use the md5 hash of a BinMap as a Key\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "jsonStr, err := json.Marshal(m)\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err == nil {\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey, err := aero.NewKey(as.properties.Namespase,\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.properties.SetName,\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmd5.Sum([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tsha256.Sum256([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 89,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "javascript/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "XSS",
                  "Security",
                  "SourceHttpBody",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/mjackson/unpkg/commit/db69375e9c944a115e0d542485694e5529e1ddd7?diff=split#diff-59f9f1a3f7e9116d78e320b8b4f3739db8ceaddcff22dae7d19dbc2a5304024aL-1",
                    "lines": [
                      {
                        "line": "res.status(404).send(`Cannot find main file \"${mainFilename}\" in package ${req.packageSpec}`)\n",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "res.status(404).type('text').send(`Cannot find main file \"${mainFilename}\" in package ${req.packageSpec}`)\n",
                        "lineNumber": 95,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/themeblvd/backroad/commit/08be2967098668a994d9d8bd034452c7b5b1ae6b?diff=split#diff-a73913970ad590fbf5ed8688eed6f7eda75939c6217a98c2d583e27709b7226fL-1",
                    "lines": [
                      {
                        "line": "res.status(500).send(err);\n",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "res.status(404).send({ message: 'User not found.' });\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/embark-framework/embark/commit/efbe71f5e25a3070088a3ea3a08e953e8e446a52?diff=split#diff-7c96a33de8e6615819fd2eccdb5d047d6fde50184a37faf63235fcf90319a606L-1",
                    "lines": [
                      {
                        "line": "return res.send(\"--  couldn't profile \" + contractName + \" - it's not deployed or could be an interface\");\n",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return res.send({error: \"--  couldn't profile \" + contractName + \" - it's not deployed or could be an interface\"});\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 141,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "python/TarSlip",
              "name": "TarSlip",
              "shortDescription": {
                "text": "Arbitrary File Write via Archive Extraction (Tar Slip)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nZip Slip is a form of directory traversal that can be exploited by extracting files from an archive. The premise of the directory traversal vulnerability is that an attacker can gain access to parts of the file system outside of the target folder in which they should reside. The attacker can then overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim’s machine. The vulnerability can also cause damage by overwriting configuration files or other sensitive resources, and can be exploited on both client (user) machines and servers.\n\n## Example\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "TarSlip",
                  "Security",
                  "SourceArchive",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-22"
                ]
              }
            },
            {
              "id": "javascript/UseCsurfForExpress",
              "name": "UseCsurfForExpress",
              "shortDescription": {
                "text": "Cross-Site Request Forgery (CSRF)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\n## Best practices for prevention\n* Use development frameworks that defend against CSRF, using a nonce, hash, or some other security device to the URL and/or to forms.\n* Implement secure, unique, hidden tokens that are checked by the server each time to validate state-change requests.\n* Never assume that authentication tokens and session identifiers mean a request is legitimate.\n* Understand and implement other safe-cookie techniques, such as double submit cookies.\n* Terminate user sessions when not in use, including automatic timeout.\n* Ensure rigorous coding practices and defenses against other commonly exploited CWEs, since cross-site scripting (XSS), for example, can be used to bypass defenses against CSRF.\n\n## References\n\n* [Express Documentation - Implement CSRF Protection](https://expressjs.com/en/resources/middleware/csurf.html)\n* [Node Security Checklist - CSRF](https://blog.risingstack.com/node-js-security-checklist/#csrf)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "UseCsurfForExpress",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/xiaoshan5733/cms/commit/cfa979899ffc5d7a1305571923ba6ae70548675b?diff=split#diff-e07d531ac040ce3f40e0ce632ac2a059d7cd60f20e61f78268ac3be015b3b28fL-1",
                    "lines": [
                      {
                        "line": "var app = express();\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "//连接数据库\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "mongoose.connect(config.mongodb.uri);\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "var db = mongoose.connection;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "db.on('error', console.error.bind(console, 'connection error:'));\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "db.once('open', function callback () {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "  console.log('连接mongodb成功');\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "});\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "//引入数据模型\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "util.walk(appPath + '/server/models', null, function(path) {\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    require(path);\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "});\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "// view engine setup\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('views', path.join(__dirname, 'views'));\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('view engine', 'jade');\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "//定义全局字段\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.locals = {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    title: 'CMS',\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    pretty: true,\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    moment: moment,\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    _: underscore,\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    util: util,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    config: config,\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    adminDir: config.admin.dir ? ('/' + config.admin.dir) : ''\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "};\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('config', config);\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(favicon());\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(logger('dev'));\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(bodyParser.json());\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(bodyParser.urlencoded());\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(cookieParser());\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(session({\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    secret: 'ruoguan'/*,\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    store: new RedisStore*/\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "}));\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "//app.use(csrf());\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.use(csrf());\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Detry322/redisred/commit/57aeed9563c1020ca70093310634000d795ae3b4?diff=split#diff-e07d531ac040ce3f40e0ce632ac2a059d7cd60f20e61f78268ac3be015b3b28fL-1",
                    "lines": [
                      {
                        "line": "var csrf = require('csurf');\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "//Initialize auth\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "authentication(passport, adminUsername, adminPassword);\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "//Initialize the app\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "var app = express();\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('views', './views');\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('view engine', 'jade');\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(favicon('./public/assets/favicon.png'));\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(bodyParser.urlencoded({ extended: false }));\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(expressSession({ secret: sessionSecret, resave: true, saveUninitialized: true }));\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(passport.initialize());\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(passport.session());\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(csrf());\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/slidewiki/slidewiki-platform/commit/3e1fd3ff647826a1321f4272924da9bfbcc91383?diff=split#diff-a4c65ede64197e1a112899a68bf994485b889c4b143198bac4af53425b38406fL-1",
                    "lines": [
                      {
                        "line": "import cookieParser from 'cookie-parser';\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "import csrf from 'csurf';\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "import compression from 'compression';\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "import debugLib from 'debug';\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "import path from 'path';\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "import serialize from 'serialize-javascript';\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "import {navigateAction} from 'fluxible-router';\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "import debugLib from 'debug';\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "import React from 'react';\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "import ReactDOM from 'react-dom/server';\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "import app from './app';\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "import HTMLComponent from './components/DefaultHTMLLayout';\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import { createElementWithContext } from 'fluxible-addons-react';\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import favicon from 'serve-favicon';\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "const env = process.env.NODE_ENV;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "const debug = debugLib('slidewiki-platform');\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "const server = express();\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.use(favicon(path.join(__dirname, '/favicon.ico')));\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.use('/public', express['static'](path.join(__dirname, '/build')));\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.use('/bower_components', express['static'](path.join(__dirname, '/bower_components')));\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.use('/custom_modules', express['static'](path.join(__dirname, '/custom_modules')));\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.use('/assets', express['static'](path.join(__dirname, '/assets')));\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.use(compression());\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.use(bodyParser.json());\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.use(csrf({cookie: true}));\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 66,
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "python/HardcodedNonCryptoSecret",
              "name": "HardcodedNonCryptoSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "HardcodedNonCryptoSecret",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ortoloco/ortoloco/commit/2bdc2a18ae07478b6b2ad481e6ad8ee43d99dd11?diff=split#diff-2c4d0fc3f973ca45b5be1e050f542f3fdf9f879073895c1ff6c8a127f9311b67L-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "    General Settings\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "DEBUG = os.environ.get(\"JUNTAGRICO_DEBUG\", \"True\") == \"True\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "ALLOWED_HOSTS = ['my.ortoloco.ch']\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "DATA_UPLOAD_MAX_NUMBER_FIELDS = None\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "FILE_UPLOAD_PERMISSIONS = 0o444\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "ROOT_URLCONF = 'ortoloco.urls'\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "SITE_ID = 1\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "LOGIN_REDIRECT_URL = \"/my/home\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Python dotted path to the WSGI application used by Django's runserver.\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "WSGI_APPLICATION = 'ortoloco.wsgi.application'\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Make this unique, and don't share it with anybody.\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = 'd3w=vyfqpqmcj#&ge1d0$ch#ff7$qt#6z)lzqt=9pg8wg%d^%s'\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = os.environ.get('JUNTAGRICO_SECRET_KEY')\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/kirstykitto/CLAtoolkit/commit/57b0252012fd2bee6671734f8a598c47106dcb3c?diff=split#diff-fb10e8b863c0b9b7a10271f5cda36dbf1e7e3fe75586870b7547050c7e2e77fdL-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "from apiclient.discovery import build\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "CLIENT_ID = '775313004373-6nt8n91ih4g5qku95us9ceskbdlb6ure.apps.googleusercontent.com'\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "CLIENT_SECRET = 'MJHbk5HdDWmqyptU_ZZtBQNP'\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "SCOPE_YOUTUBE = 'https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtubepartner'\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "REDIRECT_URI = 'http://127.0.0.1:8000/dataintegration/ytAuthCallback'\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_YT_VIDEO_BASE_URL = \"https://www.youtube.com/watch?v=\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_YT_CHANNEL_BASE_URL = \"https://www.youtube.com/channel/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_PLATFORM_NAME_YOUTUBE = \"YouTube\"\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_PLATFORM_URL_YOUTUBE = \"https://www.youtube.com\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_OBJ_TYPE_VIDEO = 'Video'\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "# For YouTube OAuth authentication\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "FLOW_YOUTUBE = OAuth2WebServerFlow(\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    client_id=CLIENT_ID,\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    client_secret=CLIENT_SECRET,\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    client_id=os.environ.get(\"YOUTUBE_CLIENT_ID\"),\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "    client_secret=os.environ.get(\"YOUTUBE_CLIENT_SECRET\"),\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hartwork/jawanndenn/commit/18eebc346ded81b839b1b2d38caf19927255afca?diff=split#diff-dd637aba286a0661c1b974283e708ce762bb3d24a707054e5b81495c1b7ab2b6L-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "from jawanndenn import DEFAULT_MAX_POLLS, DEFAULT_MAX_VOTES_PER_POLL\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Quick-start development settings - unsuitable for production\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "# SECURITY WARNING: keep the secret key used in production secret!\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "SECRET_KEY = 'ou@c@e2(9oh4*z9+tu0!)zf)j=_($#vmu36iflgy@g19+bkp-m'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = os.environ['JAWANNDENN_SECRET_KEY']\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 109,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "python/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "CommandInjection",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Xcal1bur/Giter/commit/cd3cb5a9a8a2b20d38d76350dce71d5ce4c1ae52?diff=split#diff-5525cbff62ceafe31dc99d746001579986f2348868bf4da54771d6a54259e3f7L-1",
                    "lines": [
                      {
                        "line": "    subprocess.run(f\"git remote add origin git@github.com:{username}/{repo_name}.git\", shell=True)\n",
                        "lineNumber": 99,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git pull origin master:master\", shell=True)\n",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git rebase origin/master\", shell=True)\n",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git push -u origin master\", shell=True)\n",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.run([\"git\", \"remote\", \"add\", \"origin\", f\"git@github.com:{username}/{repo_name}.git\"])\n",
                        "lineNumber": 112,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"pull\", \"origin\", \"master:master\"])\n",
                        "lineNumber": 113,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"rebase\", \"origin/master\"])\n",
                        "lineNumber": 114,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"push\", \"-u\", \"origin\", \"master\"])\n",
                        "lineNumber": 115,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/lammps/lammps/commit/22f99be57e6e97754bb9f1ee264b7dd844916fda?diff=split#diff-4e7cc7a44b4b4f346493d07636004e210db6bc3f4ec9e0652aa5c7408360f27aL-1",
                    "lines": [
                      {
                        "line": "import sys,os,re,subprocess\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import sys,os,re,subprocess,shutil\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "# help message\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "help = \"\"\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "Syntax from src dir: make lib-scafacos args=\"-b\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 or: make lib-scafacos args=\"-p /usr/local/scafacos\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "Syntax from lib dir: python Install.py -b\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 or: python Install.py -p /usr/local/scafacos\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "specify zero or more options, order does not matter\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  -b = download and build the Scafacos library\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "  -p = specify folder of existing Scafacos installation\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "   always creates includelink, liblink to Scafacos dirs\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "Example:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "make lib-scafacos args=\"-b\"   # download/build in lib/scafacos/scafacos\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "make lib-scafacos args=\"-p $HOME/scafacos\" # use existing Scafacos installation in $HOME\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "# settings\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "version = \"scafacos-1.0.1\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "url = \"https://github.com/scafacos/scafacos/releases/download/v1.0.1/scafacos-1.0.1.tar.gz\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "#url = \"https://gigamove.rz.rwth-aachen.de/d/id/CTzyApN76MXMJ6/dd/100\" % version\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "# print error message or help\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "def error(str=None):\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not str: print(help)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else: print(\"ERROR\",str)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sys.exit()\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "# expand to full path name\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "# process leading '~' or relative path\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "def fullpath(path):\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return os.path.abspath(os.path.expanduser(path))\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "def which(program):\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  def is_exe(fpath):\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fpath, fname = os.path.split(program)\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if fpath:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if is_exe(program):\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return program\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else:\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for path in os.environ[\"PATH\"].split(os.pathsep):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      path = path.strip('\"')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "      exe_file = os.path.join(path, program)\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if is_exe(exe_file):\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return exe_file\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return None\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "def geturl(url,fname):\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  success = False\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if which('curl') != None:\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'curl -L -o \"%s\" %s' % (fname,url)\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "      success = True\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except subprocess.CalledProcessError as e:\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "      print(\"Calling curl failed with: %s\" % e.output.decode('UTF-8'))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not success and which('wget') != None:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'wget -O \"%s\" %s' % (fname,url)\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print(\"Wget command: %s\" % cmd)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "      success = True\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except subprocess.CalledProcessError as e:\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "      print(\"Calling wget failed with: %s\" % e.output.decode('UTF-8'))\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not success:\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    error(\"Failed to download source code with 'curl' or 'wget'\")\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "# parse args\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "args = sys.argv[1:]\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "nargs = len(args)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "homepath = \".\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "buildflag = True \n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "pathflag = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "linkflag = True\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "iarg = 0\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "while iarg < nargs:\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if args[iarg] == \"-v\":\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if iarg+2 > nargs: error()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "    version = args[iarg+1]\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 2\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "  elif args[iarg] == \"-p\":\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if iarg+2 > nargs: error()\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scafacospath = fullpath(args[iarg+1])\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    pathflag = True\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 2\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "  elif args[iarg] == \"-b\":\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    buildflag = True\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 1\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else: error()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "homepath = fullpath(homepath)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "homedir = \"%s/%s\" % (homepath,version)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (pathflag):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.isdir(scafacospath): error(\"Scafacos path does not exist\")\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    homedir =scafacospath\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (buildflag and pathflag):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "    error(\"Cannot use -b and -p flag at the same time\")\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "# download and unpack Scafacos tarball\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "if buildflag:\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(\"Downloading Scafacos ...\")\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "  geturl(url,\"%s/%s.tar.gz\" % (homepath,version))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(\"Unpacking Scafacos tarball ...\")\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if os.path.exists(\"%s/%s\" % (homepath,version)):\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'rm -rf \"%s/%s\"' % (homepath,version)\n",
                        "lineNumber": 134,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 135,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    shutil.rmtree(\"%s/%s\" % (homepath,version))\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jachinlin/kindle_maker/commit/8804b85a69865837d31e37bdf73e01844229c5bc?diff=split#diff-00e2b2a85960fbf3f1969c885888cbc0aefd4e01c24e7fc34e1fecc94429f7b3L-1",
                    "lines": [
                      {
                        "line": "import shutil\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "from jinja2 import Environment, FileSystemLoader\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "templates_env = Environment(loader=FileSystemLoader('%s/templates/' % os.path.dirname(os.path.realpath(__file__))))\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "_default_output_dir = '/tmp/kindle_maker/'\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_file(template_name, context, output_name, output_dir):\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "    template = templates_env.get_template(template_name)\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(os.path.join(output_dir, output_name), \"w\") as f:\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "        f.write(template.render(**context))\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_toc_ncx(headers, output_dir, title=None, author=None):\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param title:\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param author:\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file(\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'toc.xml',\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'headers': headers,\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': title or 'jachinlin.github.io' + str(datetime.date.today()),\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'author': author or 'jachinlin.github.io'\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        },\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'toc.ncx',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        output_dir\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_toc_html(headers, output_dir):\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file('toc.html', {'headers': headers}, 'toc.html', output_dir)\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_opf(headers, title, output_dir, author=None):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param title:\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param author:\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file('opf.xml', {'headers': headers, 'title': title,\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            'author': author or 'jachinlin.github.io'}, '{}.opf'.format(title), output_dir)\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "def parse_headers(toc_file_name):\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param toc_file_name:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    headers_info = []\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(toc_file_name) as f:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        headers = f.readlines()\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        order = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not headers:\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None, None\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title_line = 0\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        while (not headers[title_line].strip()) or title_line == len(headers):\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "            title_line += 1\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if title_line == len(headers):\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None, None\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title = headers[title_line].strip()\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for h in headers[title_line + 1:]:\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if h.startswith('# '):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                order += 1\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "                headers_info.append({\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'title': h[2:].strip(),\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'play_order': order,\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'next_headers': []\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if h.startswith('## '):\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if len(headers) == 0:\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    continue\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "                order += 1\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "                headers_info[-1]['next_headers'].append({\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'title': h[2:].strip(),\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'play_order': order,\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return title, headers_info\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "def make_ebook(source_dir, output_dir=None):\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    make ebook with the files in source_dir and put the ebook made in output_dir\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param source_dir:\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output_dir = output_dir or _default_output_dir\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # make a tmp dir in output_dir\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmp_dir = os.path.join(output_dir, str(uuid.uuid4()))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"mkdir -p {}\".format(tmp_dir))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # copy source files to tmp dir\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"cp -rf {}/* {}\".format(source_dir, tmp_dir))\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # parse toc.md file\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toc_file_name = os.path.join(tmp_dir, 'toc.md')\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(toc_file_name):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise ValueError('not exists toc md file')\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    title, headers = parse_headers(toc_file_name)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not title:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise ValueError('invalid toc md file')\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # cover\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cover_file_name = os.path.join(tmp_dir, 'cover.jpg')\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(cover_file_name):\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        cover = '%s/templates/cover.jpg' % os.path.dirname(os.path.realpath(__file__))\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "        os.system('cp %s %s' % (cover, tmp_dir))\n",
                        "lineNumber": 133,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        shutil.copy(cover, tmp_dir)\n",
                        "lineNumber": 133,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 47,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "javascript/DisablePoweredBy",
              "name": "DisablePoweredBy",
              "shortDescription": {
                "text": "Information Exposure"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nSensitive data includes: personally identifiable information (PII) of employees, customers, users, or other third parties; financial information; code; intellectual property; or protected network information such as passwords. Exposure of sensitive information to an unauthorized actor occurs when any party who does not require this information for business purposes can remove this information from the secure network.\nConsequences of exposure can include holding it for ransom payment, identity theft, or access to other internal network resources-along with financial loss due to regulatory fines, court settlements, or cost to restore compromised systems. As most attackers aim to extract sensitive information, this CWE only describes exploits that take advantage of vulnerabilities related to how data is handled: the management, storage, transfer, or removal of sensitive information.\n\n## Best practices for prevention\n- Encrypt data at all times, whether in transit or at rest.\n- When transporting data, always use a secure protocol such as TLS.\n- Before collecting PII or financial information, consider whether there is a true business need for this information; similarly, before storing the data, ensure that there is an ongoing business need.\n- Classify all incoming data according to privacy and security guidelines to improve awareness of sensitive data.\n- Ensure that caching is disabled for all transactions involving sensitive information.\n- Store passwords with secure, salted hashing functions.\n- Apply a network-wide least-privilege policy so sensitive data is provided only to users with business need to know.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "DisablePoweredBy",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/nunux-keeper/keeper-core-api/commit/3717e4c4d2f732ceb7d3ee521782c979ca2a141c?diff=split#diff-c72a907ac323cd2f334ed0e2bd07d15ab62581c4753660c8a0d1c681b30be4b6L-1",
                    "lines": [
                      {
                        "line": "const app = express();\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Set properties\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('port', process.env.APP_PORT || 3000);\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('realm', process.env.APP_REALM || 'http://localhost:' + app.get('port'));\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('info', {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "  name: appInfo.name,\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "  description: appInfo.description,\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "  version: appInfo.version,\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "  realm: app.get('realm'),\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "  env: env\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "});\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Disable some properties\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.disable('x-powered-by');\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/GoogleChromeLabs/gulliver/commit/e3e61eb3aa66bf9c801dc79318d585ef76b2df6c?diff=split#diff-e07d531ac040ce3f40e0ce632ac2a059d7cd60f20e61f78268ac3be015b3b28fL-1",
                    "lines": [
                      {
                        "line": "const helmet = require('helmet');\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "const helpers = require('./views/helpers');\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "const app = express();\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "const bodyParser = require('body-parser');\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "const serveStatic = require('serve-static');\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(helmet());\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/adeperio/base/commit/bee34a30b82cf3d8c0812b92907a5a15cdf0ac93?diff=split#diff-f85e295b34c9835cd9f4b308ba1deea8fc648cb706ae7d4e198cf3585051dee1L-1",
                    "lines": [
                      {
                        "line": "// import helmet from 'helmet';\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// import express_enforces_ssl from 'express-enforces-ssl';\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import helmet from 'helmet';\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "import express_enforces_ssl from 'express-enforces-ssl';\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "import signInRoutes from './routes/sign-in-routes.js';\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "import signOutRoutes from './routes/sign-out-routes.js';\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "import signUpRoutes from './routes/sign-up-routes.js';\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "import userRoutes from './routes/user-routes.js';\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "import passport from './middleware/passport.js';\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "var server = express();\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ======== *** VIEWS AND TEMPLATES ***\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "//Set port\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.set('port', (process.env.PORT || 5000));\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.set('views', path.join(__dirname, 'templates'));\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.set('view engine', 'jade');\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "//Setup location to static assets\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.use(express.static(path.join(__dirname)));\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ======== *** SECURITY MIDDLEWARE ***\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "//setup helmet js\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "// server.use(helmet());\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "server.use(helmet());\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 416,
                "cwe": [
                  "CWE-200"
                ]
              }
            },
            {
              "id": "go/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedNonCryptoSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bytedance/Elkeid/commit/b070a02bf892b9e386d413041f09bd02d6e4468c?diff=split#diff-a74e9f02d2ff047da859c6d9072f60c804374279234946d0df77c91b6258e4b7L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tClientKey = `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIEowIBAAKCAQEAuLggSmOGW6mKi3kQwXYWfeA5j92yAgCOilhIX0gfW5ETYUoz\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Ws6gzT90vtHuzEWZubK9c7WGGFLsj58HGBPqAKLzpweGA4/Bsv+mrMKKWXFCb+yE\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "4by46QET8C3lLZP7Yf8vZ4sPDivwMWnu+JvamR9Lh0ErXAopO34ebd/hwCtyWEt/\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fLxOhro1dHD0Jc/bBOmOIQLa6J9PbmhVs6IebIVRL8W8bChgdSjpKo1UC2B8Jngf\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "T/efpgh4xrIdW6ziqy14uc29VuYaCEDywxP3cCFfGfMPan+wwW12Ja43ttna1LGf\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GQMNoZsishmCEx9MHtcvLJ0XuLaOhTeDK9rz3wIDAQABAoIBAC2ftMIK4PWk44Zd\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aakO/LEsf6ssC7p43rwG4CFAlBYuuAWwqQyFuqvXP4OeIIgtrLF0F10L+cnqOWmj\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "0sG8sXBkzx9zOUOJ70LB6C4FgtxioBE67vs+fMF4Na999nwSb+WdfNzrONW8PoBF\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9PNMs2pck3AdxZLfI54BIYzr3jtzVDJ0Rf2GwgEXA9XqJIeRSjNZj6vcIlpQ2NeP\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "r3/zCDhfaVHnO1f89rTRWPRYxlx32eAU4s+WX6HA3OsWm2ec9i+J3k9qiuDnDZtU\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SfOox0nHsrszO1H3aJRiE2GClyOrHbnKXDtKo/m39sF03J8SnWyY/odcqN3TLI0x\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IV9iTuECgYEA4jCxhkloP6OWoF9UbtC5PCzmW9MJDGh4+Lthxi51FBSHW0N2TvsA\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "EW2M0aQ3qrlyUuLLLsKgJ7qRHUaVkV7Im8j8GHa1H4AXI0ZLlImsgOmpxaeeDVFu\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "xDtjDZtFWp+RWPNVeabS1sMFh3/+FX2xco7siHSYO0FckeuLHK8O+jECgYEA0RBE\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Q5kicAbBIlg3KY/D9VOov8/eaVLqTURbzansBYeN1gTYvyPA0bKygW2KbOb8Htvq\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "goCz01RUKHc3D6E4o1zauialorwZBKs/4nivU/HKAQ2nQS5z1tALlRk4kdacapYH\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "7iFPxvSpz31ksc7FaRjilWE479kSn21pbhYhOw8CgYBkfTWhb2N9QnRc831Tbi+d\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aGU/TlaqyI9WEgmyPlmNfkFUbnhVRnYVSBJT4R1KH/GGmXOjZpw4ik6GLyGr3+xI\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Kda2F6cIQ6QD6+sQJsoYy7a9NWamjBMl4yxykxUQ2et9FT5YOaFaAHKobFi5u4nm\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "V1EGnqYzTSqPOZIoQC3rQQKBgQC/a2t1kXLsq+KOdcMcNNwxdgYeik+UlCyfzqVX\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6+uFLJZ7jTh/2lakKkAzLX7/M4dJIgbYssr0BlSAMJejofRf75b9toEWPa+SjNIT\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pHi0HcDdsgigL840s4zHWa5oKd5R4Uklii6ndkE9EAzwmOg70GM2byxYv6LDgsRz\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "3aNTlQKBgE/64EGwbQ/MnuGwEDaWV1BsdjzZjKL9yr2udpfR8vEyJZR7y3CQha9w\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "u+CsLYjkGEDnGX7d/N5KeeAWD7esLMfFEHRmYKsXKmicBvyzMIciVATWuo4z1LH5\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "HEW5L05P4qYNwZEt/0gUukrYfWyTm+Q435aPB/d12GDn28ZjUAJe\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tClientCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIDxTCCAq2gAwIBAgIJAMfNY7aa7VezMA0GCSqGSIb3DQEBCwUAME4xCzAJBgNV\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BAYTAkdCMQ4wDAYDVQQHDAVDaGluYTERMA8GA1UECgwIaGlkcy1zdnIxHDAaBgNV\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BAMME2hpZHMtc3ZyQGdpdGh1Yi5jb20wHhcNMjEwMzExMDgwNTE5WhcNMzEwMzA5\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MDgwNTE5WjBOMQswCQYDVQQGEwJHQjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoM\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CGhpZHMtc3ZyMRwwGgYDVQQDDBNoaWRzLXN2ckBnaXRodWIuY29tMIIBIjANBgkq\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuLggSmOGW6mKi3kQwXYWfeA5j92yAgCO\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ilhIX0gfW5ETYUozWs6gzT90vtHuzEWZubK9c7WGGFLsj58HGBPqAKLzpweGA4/B\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "sv+mrMKKWXFCb+yE4by46QET8C3lLZP7Yf8vZ4sPDivwMWnu+JvamR9Lh0ErXAop\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "O34ebd/hwCtyWEt/fLxOhro1dHD0Jc/bBOmOIQLa6J9PbmhVs6IebIVRL8W8bChg\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "dSjpKo1UC2B8JngfT/efpgh4xrIdW6ziqy14uc29VuYaCEDywxP3cCFfGfMPan+w\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "wW12Ja43ttna1LGfGQMNoZsishmCEx9MHtcvLJ0XuLaOhTeDK9rz3wIDAQABo4Gl\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIGiMGgGA1UdIwRhMF+hUqRQME4xCzAJBgNVBAYTAkdCMQ4wDAYDVQQHDAVDaGlu\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "YTERMA8GA1UECgwIaGlkcy1zdnIxHDAaBgNVBAMME2hpZHMtc3ZyQGdpdGh1Yi5j\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b22CCQC3DBG9MtGPzDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIE8DAeBgNVHREEFzAV\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ghNoaWRzX3N2ci5naXRodWIuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQCiMeOHraB8\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "3yvoGVetHJPCKlFnThsxoS1fZtl3RT2blDVJeXb3m3EVJJRw+RAeQ2dAg9BIDXDI\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6k3ZBveewxLSu6EggKn8RKzprek/nPhawOU+qiEbwWENSQFj/5FY2sPE+RXjlBwe\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "/lbmRbcmJsLtMIqzMkhFHx/mEliIVwC8B/J3trrhGcLRuvB6sXM79nqkjGYhVyIN\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "y0x1DbB/I8ifmx3L+rCW5iaNp0pHHpjUtrU5yxcb5OtfRuYVp5RjvzETU9XbTWKU\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5jGwhvZ3QEy568CeDEYUyofANREfnYohQHS6NcZ8D5Iqxx4OxovoLygcfE4MYVZq\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2L9cH5F0OWIs\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tCaCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIDGjCCAgICCQC3DBG9MtGPzDANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJH\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "QjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoMCGhpZHMtc3ZyMRwwGgYDVQQDDBNo\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aWRzLXN2ckBnaXRodWIuY29tMCAXDTIxMDMxMTA4MDUxOVoYDzIxMjEwMjE1MDgw\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "NTE5WjBOMQswCQYDVQQGEwJHQjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoMCGhp\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ZHMtc3ZyMRwwGgYDVQQDDBNoaWRzLXN2ckBnaXRodWIuY29tMIIBIjANBgkqhkiG\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0YUgwaI9gyZxpl03mh4hv6T0/WaB3E7GeK5e\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "w4eS5VO6I9b+8DDYJAHqhxraQAt/F9TBwVW1Oljo8YNuyjaCpSlRjQnqHiLSA1Tq\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "P7YAMoZq3MnfmE882QR9/aJ4JL+c4fHg8GauilR/1TaZMj3sEsRenqFk5bFW+fbm\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "VYmWR0/Oeu3sNJ7mG8WgrWeFF3uUz+L98RXmeLbGGVDqObTogOPXz0rZsVkzGVYs\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "KeBnBOdVvqdbs4FUsVgw/BYy2XrBDdSNnfxjXD7tp+F+IRtyx4kN8wEsQ5aJTpC+\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "U9QzFJBglyjjepCqfqdSjW4J5Dzdv2KsFDza/lvHtE8U4NOoVQIDAQABMA0GCSqG\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SIb3DQEBCwUAA4IBAQBxUVzWjaDY05Vk27xWooXoQIcTrc5/+ly7UPnoF2sk1tc6\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "nP4VpNAFNk46MP9PhGLa6qIqFEQXhWB99AyGliSb8o2Lv/+kvm4y7ch7v5W/Ae0X\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "UIMCO6IBMU8QP3niuaJSTcEmu7B1zIj03lLlbZFboLns/2U46ZnmWtyxxBcxfM/O\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RtQeJpfIffQZunx9ftuvEix54mOncrYow9dPAFkcDxgcbRtgKN7ESksL8YherCuI\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pZCj0XpwSglYjDby0p2nuANUucj6m8DSqDVIzbNcAvycbYe07kc1PiUpi1vcGhI+\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uAVEAPxTCl1poB75onPUNTb6NigCpGA5Ip1zBnUq\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import _ \"embed\"\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed client.key\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "var ClientKey []byte\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed client.crt\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "var ClientCert []byte\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed ca.crt\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "var CaCert []byte\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ChrisRx/dungeonfs/commit/34ea225ad07c50f262756fd1d3eb821962e29347?diff=split#diff-92e2cbc286c92525f3cfcd6ea1c84f711f4f65379d23431b01ac18bccc174f4eL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tTroll = `\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                       _-------------------_\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     _            _   /                     \\\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    | \\  __--__  / |  |  Roar! I'm a troll! | \n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    |  \\/      \\/  |  \\                     /\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \\__  \\    / __ /   -_  ________________-\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     /   O    -   \\     / /\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    |      oo      |    /\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \\ -- ______ -- /  \n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     (_  |\\||/|  _)\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "       --______--\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "`\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tKey = []byte(`-----BEGIN PRIVATE KEY-----\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAMjSi/S67mqFDGP0\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "+MRBkidG6zenktXMPMcwXCN1WQjHAo4Gcp9GqjH+IVTgBSO7tdz9VxxKAJgSFXqv\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kWj95QjoT6OTjVk0UXH4t9PV7OU2jn/xnA8pqhg4sxVzbVq9LSB55CsqNpX5IpUu\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9cUUgiq9rzDBmh4bg1X9fUHufAxbAgMBAAECgYAfARKGeA2y+FOPYxS9B/qOgc5y\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "yzZKN7vybK7s8oMKbd8hGjG8EWbZTQjMV8GzYJmVQq+eOHabA7+5Lz3d3cTsMu5I\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DSCKGers7AHHQAYQv0P14CxBp5PFY5qewMYB/FITcD/Z25YXlg3ZjwCB3XrQwLnN\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "QB83C1r6lcFi2fdioQJBAPP/Wy39L+Vda7thcRPcQpb4FmpwU+v+Rzpxov5KRq9G\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "38u3BVd0GdSwQWLVDMmvSLy70doGgxJ5p54YPScxCfkCQQDSs31+ftL34+lSXtrx\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5utBZc34q3UcCOa3twoHTzxGeM4BiYvAcVa+PjdWRaNXz71UBs2GQWWihApZoGk9\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2X3zAkEAllFwI/ICauTV9Re/6UNeBtIKRUK0gQQjb58Ikm7CA0O/pio38TvGmiCH\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "99JXUX1aa2OukgpG/7/RAvXd3uI4SQJAdHJ2nP6CojX3sWpzHtY8lrwpBZHc+02A\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "FXC3vipwaZJCaF8YOZdqFWJVOvzptZI+VL4dwGFMRnErNzWMdH5LOQJABytqQ8eF\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "qM/JedHdd4l6ADmUA3A3JxF6eQwYUEd7V51f1dKHB7El2nCLPD1lLgWNewYLg5a6\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "eVH4jECLO2OH8Q==\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END PRIVATE KEY----- `)\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "type ResourceType int\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tFileResource ResourceType = iota\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tDirResource\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ginuerzh/gost/commit/9ef10b90a9367083c0018cb0185ef7e968867f0b?diff=split#diff-366e46a40f6f60b4f7614eb0976bb51820364bf5ca6ccc4787eb49d7bdbef3e6L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "import (\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"github.com/ginuerzh/gosocks5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"github.com/shadowsocks/shadowsocks-go/shadowsocks\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"net\"\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t//\"strconv\"\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/tls\"\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trawCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIC5jCCAdCgAwIBAgIBADALBgkqhkiG9w0BAQUwEjEQMA4GA1UEChMHQWNtZSBD\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bzAeFw0xNDAzMTcwNjIwNTFaFw0xNTAzMTcwNjIwNTFaMBIxEDAOBgNVBAoTB0Fj\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bWUgQ28wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDccNO1xmd4lWSf\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "d/0/QS3E93cYIWHw831i/IKxigdRD/XMZonLdEHywW6lOiXazaP8e6CqPGSmnl0x\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5k/3dvGCMj2JCVxM6+z7NpL+AiwvXmvkj/TOciCgwqssCwYS2CiVwjfazRjx1ZUJ\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "VDC5qiyRsfktQ2fVHrpnJGVSRagmiQgwGWBilVG9B8QvRtpQKN/GQGq17oIQm8aK\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kOdPt93g93ojMIg7YJpgDgOirvVz/hDn7YD4ryrtPos9CMafFkJprymKpRHyvz7P\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "8a3+OkuPjFjPnwOHQ5u1U3+8vC44vfb1ExWzDLoT8Xp8Gndx39k0f7MVOol3GnYu\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MN/dvNUdAgMBAAGjSzBJMA4GA1UdDwEB/wQEAwIAoDATBgNVHSUEDDAKBggrBgEF\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BQcDATAMBgNVHRMBAf8EAjAAMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDALBgkqhkiG\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9w0BAQUDggEBAIG8CJqvTIgJnNOK+i5/IUc/3yF/mSCWuG8qP+Fmo2t6T0PVOtc0\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "8wiWH5iWtCAhjn0MRY9l/hIjWm6gUZGHCGuEgsOPpJDYGoNLjH9Xwokm4y3LFNRK\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "UBrrrDbKRNibApBHCapPf6gC5sXcjOwx7P2/kiHDgY7YH47jfcRhtAPNsM4gjsEO\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RmwENY+hRUFHIRfQTyalqND+x6PWhRo3K6hpHs4DQEYPq4P2kFPqUqSBymH+Ny5/\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BcQ3wdMNmC6Bm/oiL1QV0M+/InOsAgQk/EDd0kmoU1ZT2lYHQduGmP099bOlHNpS\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uqO3vXF3q8SPPr/A9TqSs7BKkBQbe0+cdsA=\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trawKey = `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIEowIBAAKCAQEA3HDTtcZneJVkn3f9P0EtxPd3GCFh8PN9YvyCsYoHUQ/1zGaJ\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "y3RB8sFupTol2s2j/Hugqjxkpp5dMeZP93bxgjI9iQlcTOvs+zaS/gIsL15r5I/0\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "znIgoMKrLAsGEtgolcI32s0Y8dWVCVQwuaoskbH5LUNn1R66ZyRlUkWoJokIMBlg\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "YpVRvQfEL0baUCjfxkBqte6CEJvGipDnT7fd4Pd6IzCIO2CaYA4Doq71c/4Q5+2A\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "+K8q7T6LPQjGnxZCaa8piqUR8r8+z/Gt/jpLj4xYz58Dh0ObtVN/vLwuOL329RMV\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "swy6E/F6fBp3cd/ZNH+zFTqJdxp2LjDf3bzVHQIDAQABAoIBAHal26147nQ+pHwY\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "jxwers3XDCjWvup7g79lfcqlKi79UiUEA6KYHm7UogMYewt7p4nb2KwH+XycvDiB\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aAUf5flXpTs+6IkWauUDiLZi4PlV7uiEexUq5FjirlL0U/6MjbudX4bK4WQ4uxDc\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WaV07Kw2iJFOOHLDKT0en9JaX5jtJNc4ZnE9efFoQ5jfypPWtRw65G1rULEg6nvc\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GDh+1ce+4foCkpLRC9c24xAwJONZG6x3UqrSS9qfAsb73nWRQrTfUcO3nhoN8VvL\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kL9skn1+S06NyUN0KoEtyRBp+RcpXSsBWAo6qZmo/WqhB/gjzWrxVwn20+yJSm35\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ZsMc6QECgYEA8GS+Mp9xfB2szWHz6YTOO1Uu4lHM1ccZMwS1G+dL0KO3uGAiPdvp\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "woVot6v6w88t7onXsLo5pgz7SYug0CpkF3K/MRd1Ar4lH7PK7IBQ6rFr9ppVxDbx\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "AEWRswUoPbKCr7W6HU8LbQHDavsDlEIwc6+DiwnL4BzlKjb7RpgQEz0CgYEA6sB5\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uHvx3Y5FDcGk1n73leQSAcq14l3ZLNpjrs8msoREDil/j5WmuSN58/7PGMiMgHEi\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "1vLm3H796JmvGr9OBvspOjHyk07ui2/We/j9Hoxm1VWhyi8HkLNDj70HKalTTFMz\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RHO4O+0xCva+h9mKZrRMVktXr2jjdFn/0MYIZ2ECgYAIIsC1IeRLWQ3CHbCNlKsO\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IwHlMvOFwKk/qsceXKOaOhA7szU1dr3gkXdL0Aw6mEZrrkqYdpUA46uVf54/rU+Z\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "445I8QxKvXiwK/uQKX+TkdGflPWWIG3jnnch4ejMvb/ihnn4B/bRB6A/fKNQXzUY\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "lTYUfI5j1VaEKTwz1W2l2QKBgByFCcSp+jZqhGUpc3dDsZyaOr3Q/Mvlju7uEVI5\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hIAHpaT60a6GBd1UPAqymEJwivFHzW3D0NxU6VAK68UaHMaoWNfjHY9b9YsnKS2i\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kE3XzN56Ks+/avHfdYPO+UHMenw5V28nh+hv5pdoZrlmanQTz3pkaOC8o3WNQZEB\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "nh/BAoGBAMY5z2f1pmMhrvtPDSlEVjgjELbaInxFaxPLR4Pdyzn83gtIIU14+R8X\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2LPs6PPwrNjWnIgrUSVXncIFL3pa45B+Mx1pYCpOAB1+nCZjIBQmpeo4Y0dwA/XH\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "85EthKPvoszm+OPbyI16OcePV5ocX7lupRYuAo0pek7bomhmHWHz\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func selectMethod(methods ...uint8) uint8 {\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor _, method := range methods {\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif _, ok := Methods[method]; ok {\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn method\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn gosocks5.MethodNoAuth\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func methodSelected(method uint8, conn net.Conn) (net.Conn, error) {\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tswitch method {\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase MethodTLS:\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvar cert tls.Certificate\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvar err error\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif len(CertFile) == 0 || len(KeyFile) == 0 {\n",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tcert, err = tls.X509KeyPair([]byte(rawCert), []byte(rawKey))\n",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 78,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tcert, err = tls.LoadX509KeyPair(CertFile, KeyFile)\n",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 81,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tlog.Println(err)\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tconn = tls.Server(conn, &tls.Config{Certificates: []tls.Certificate{cert}})\n",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase MethodAES128, MethodAES192, MethodAES256,\n",
                        "lineNumber": 87,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tMethodDES, MethodBF, MethodCAST5, MethodRC4MD5, MethodRC4, MethodTable:\n",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcipher, err := shadowsocks.NewCipher(Methods[method], Password)\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 92,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tconn = shadowsocks.NewConn(conn, cipher)\n",
                        "lineNumber": 93,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase gosocks5.MethodNoAcceptable:\n",
                        "lineNumber": 94,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn nil, gosocks5.ErrBadMethod\n",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "type Server interface {\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "    ListenAndServe() error\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 16,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "python/CommandInjection/test",
              "name": "CommandInjection/test",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "CommandInjection",
                  "Security",
                  "InTest",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Xcal1bur/Giter/commit/cd3cb5a9a8a2b20d38d76350dce71d5ce4c1ae52?diff=split#diff-5525cbff62ceafe31dc99d746001579986f2348868bf4da54771d6a54259e3f7L-1",
                    "lines": [
                      {
                        "line": "    subprocess.run(f\"git remote add origin git@github.com:{username}/{repo_name}.git\", shell=True)\n",
                        "lineNumber": 99,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git pull origin master:master\", shell=True)\n",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git rebase origin/master\", shell=True)\n",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git push -u origin master\", shell=True)\n",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.run([\"git\", \"remote\", \"add\", \"origin\", f\"git@github.com:{username}/{repo_name}.git\"])\n",
                        "lineNumber": 112,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"pull\", \"origin\", \"master:master\"])\n",
                        "lineNumber": 113,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"rebase\", \"origin/master\"])\n",
                        "lineNumber": 114,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"push\", \"-u\", \"origin\", \"master\"])\n",
                        "lineNumber": 115,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/lammps/lammps/commit/22f99be57e6e97754bb9f1ee264b7dd844916fda?diff=split#diff-4e7cc7a44b4b4f346493d07636004e210db6bc3f4ec9e0652aa5c7408360f27aL-1",
                    "lines": [
                      {
                        "line": "import sys,os,re,subprocess\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import sys,os,re,subprocess,shutil\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "# help message\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "help = \"\"\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "Syntax from src dir: make lib-scafacos args=\"-b\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 or: make lib-scafacos args=\"-p /usr/local/scafacos\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "Syntax from lib dir: python Install.py -b\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 or: python Install.py -p /usr/local/scafacos\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "specify zero or more options, order does not matter\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  -b = download and build the Scafacos library\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "  -p = specify folder of existing Scafacos installation\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "   always creates includelink, liblink to Scafacos dirs\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "Example:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "make lib-scafacos args=\"-b\"   # download/build in lib/scafacos/scafacos\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "make lib-scafacos args=\"-p $HOME/scafacos\" # use existing Scafacos installation in $HOME\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "# settings\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "version = \"scafacos-1.0.1\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "url = \"https://github.com/scafacos/scafacos/releases/download/v1.0.1/scafacos-1.0.1.tar.gz\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "#url = \"https://gigamove.rz.rwth-aachen.de/d/id/CTzyApN76MXMJ6/dd/100\" % version\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "# print error message or help\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "def error(str=None):\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not str: print(help)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else: print(\"ERROR\",str)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sys.exit()\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "# expand to full path name\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "# process leading '~' or relative path\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "def fullpath(path):\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return os.path.abspath(os.path.expanduser(path))\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "def which(program):\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  def is_exe(fpath):\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fpath, fname = os.path.split(program)\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if fpath:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if is_exe(program):\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return program\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else:\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for path in os.environ[\"PATH\"].split(os.pathsep):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      path = path.strip('\"')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "      exe_file = os.path.join(path, program)\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if is_exe(exe_file):\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return exe_file\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return None\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "def geturl(url,fname):\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  success = False\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if which('curl') != None:\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'curl -L -o \"%s\" %s' % (fname,url)\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "      success = True\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except subprocess.CalledProcessError as e:\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "      print(\"Calling curl failed with: %s\" % e.output.decode('UTF-8'))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not success and which('wget') != None:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'wget -O \"%s\" %s' % (fname,url)\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print(\"Wget command: %s\" % cmd)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "      success = True\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except subprocess.CalledProcessError as e:\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "      print(\"Calling wget failed with: %s\" % e.output.decode('UTF-8'))\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not success:\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    error(\"Failed to download source code with 'curl' or 'wget'\")\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "# parse args\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "args = sys.argv[1:]\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "nargs = len(args)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "homepath = \".\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "buildflag = True \n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "pathflag = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "linkflag = True\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "iarg = 0\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "while iarg < nargs:\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if args[iarg] == \"-v\":\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if iarg+2 > nargs: error()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "    version = args[iarg+1]\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 2\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "  elif args[iarg] == \"-p\":\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if iarg+2 > nargs: error()\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scafacospath = fullpath(args[iarg+1])\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    pathflag = True\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 2\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "  elif args[iarg] == \"-b\":\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    buildflag = True\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 1\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else: error()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "homepath = fullpath(homepath)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "homedir = \"%s/%s\" % (homepath,version)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (pathflag):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.isdir(scafacospath): error(\"Scafacos path does not exist\")\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    homedir =scafacospath\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (buildflag and pathflag):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "    error(\"Cannot use -b and -p flag at the same time\")\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "# download and unpack Scafacos tarball\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "if buildflag:\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(\"Downloading Scafacos ...\")\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "  geturl(url,\"%s/%s.tar.gz\" % (homepath,version))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(\"Unpacking Scafacos tarball ...\")\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if os.path.exists(\"%s/%s\" % (homepath,version)):\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'rm -rf \"%s/%s\"' % (homepath,version)\n",
                        "lineNumber": 134,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 135,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    shutil.rmtree(\"%s/%s\" % (homepath,version))\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jachinlin/kindle_maker/commit/8804b85a69865837d31e37bdf73e01844229c5bc?diff=split#diff-00e2b2a85960fbf3f1969c885888cbc0aefd4e01c24e7fc34e1fecc94429f7b3L-1",
                    "lines": [
                      {
                        "line": "import shutil\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "from jinja2 import Environment, FileSystemLoader\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "templates_env = Environment(loader=FileSystemLoader('%s/templates/' % os.path.dirname(os.path.realpath(__file__))))\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "_default_output_dir = '/tmp/kindle_maker/'\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_file(template_name, context, output_name, output_dir):\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "    template = templates_env.get_template(template_name)\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(os.path.join(output_dir, output_name), \"w\") as f:\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "        f.write(template.render(**context))\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_toc_ncx(headers, output_dir, title=None, author=None):\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param title:\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param author:\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file(\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'toc.xml',\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'headers': headers,\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': title or 'jachinlin.github.io' + str(datetime.date.today()),\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'author': author or 'jachinlin.github.io'\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        },\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'toc.ncx',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        output_dir\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_toc_html(headers, output_dir):\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file('toc.html', {'headers': headers}, 'toc.html', output_dir)\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_opf(headers, title, output_dir, author=None):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param title:\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param author:\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file('opf.xml', {'headers': headers, 'title': title,\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            'author': author or 'jachinlin.github.io'}, '{}.opf'.format(title), output_dir)\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "def parse_headers(toc_file_name):\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param toc_file_name:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    headers_info = []\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(toc_file_name) as f:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        headers = f.readlines()\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        order = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not headers:\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None, None\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title_line = 0\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        while (not headers[title_line].strip()) or title_line == len(headers):\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "            title_line += 1\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if title_line == len(headers):\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None, None\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title = headers[title_line].strip()\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for h in headers[title_line + 1:]:\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if h.startswith('# '):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                order += 1\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "                headers_info.append({\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'title': h[2:].strip(),\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'play_order': order,\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'next_headers': []\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if h.startswith('## '):\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if len(headers) == 0:\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    continue\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "                order += 1\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "                headers_info[-1]['next_headers'].append({\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'title': h[2:].strip(),\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'play_order': order,\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return title, headers_info\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "def make_ebook(source_dir, output_dir=None):\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    make ebook with the files in source_dir and put the ebook made in output_dir\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param source_dir:\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output_dir = output_dir or _default_output_dir\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # make a tmp dir in output_dir\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmp_dir = os.path.join(output_dir, str(uuid.uuid4()))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"mkdir -p {}\".format(tmp_dir))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # copy source files to tmp dir\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"cp -rf {}/* {}\".format(source_dir, tmp_dir))\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # parse toc.md file\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toc_file_name = os.path.join(tmp_dir, 'toc.md')\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(toc_file_name):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise ValueError('not exists toc md file')\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    title, headers = parse_headers(toc_file_name)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not title:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise ValueError('invalid toc md file')\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # cover\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cover_file_name = os.path.join(tmp_dir, 'cover.jpg')\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(cover_file_name):\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        cover = '%s/templates/cover.jpg' % os.path.dirname(os.path.realpath(__file__))\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "        os.system('cp %s %s' % (cover, tmp_dir))\n",
                        "lineNumber": 133,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        shutil.copy(cover, tmp_dir)\n",
                        "lineNumber": 133,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 47,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "python/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "PT",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/malept/gmusicprocurator/commit/0df7be3ef3ca89b42331939d88ca9919944295c9?diff=split#diff-9e23a9ffa43e64422973783e9021248781e0732c50d02ec8b7b1ac680b56c173L-1",
                    "lines": [
                      {
                        "line": "from flask import abort, request, Response, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask import abort, request, Response, safe_join, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "from flask.json import jsonify\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import os\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import requests\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from shutil import copyfileobj\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "from tempfile import NamedTemporaryFile\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "from xspf import Xspf\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..app import app, music\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..id3 import MP3\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "JSON_TYPE = 'application/json'\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "XSPF_TYPE = 'application/xspf+xml'\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Mapping: Google : Mutagen EasyID3\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "METADATA_FIELDS = {\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'artist': 'artist',\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'title': 'title',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'album': 'album',\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'albumArtist': 'albumartistsort',\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'composer': 'composer',\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'trackNumber': 'tracknumber',\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'discNumber': 'discnumber',\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'genre': 'genre',\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'year': 'date',\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'durationMillis': 'length',\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "if app.config['GMP_EMBED_ALBUM_ART']:\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    METADATA_FIELDS['albumArtRef'] = 'albumart'\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def mp3ify(resp):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Sets MIME Type and Content-Disposition header suitable for MP3s.'''\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.mimetype = 'audio/mpeg'\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.headers.add('Content-Disposition', 'inline', filename='song.mp3')\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return resp\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "def send_song(filename):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Generates a Flask response for an MP3 on the filesystem.'''\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return mp3ify(send_file(filename))\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "def gmusic_playlist_to_xspf(playlist_id, playlist):\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Converts a playlist from gmusicapi into an XSPF playlist.\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :type playlist: dict\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return: XSPF (XML), UTF-8 encoded\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :rtype: str\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_ts = int(playlist['creationTimestamp']) / 1000000.0\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_iso = datetime.utcfromtimestamp(create_ts).isoformat()\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    p_url = url_for('get_playlist', _external=True, playlist_id=playlist_id)\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xspf = Xspf(title=playlist['name'], creator=playlist['ownerName'],\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                date=create_iso, location=p_url)\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for track in playlist['tracks']:\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if 'track' not in track:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tmd = track['track']\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = url_for('get_song', _external=True, song_id=tmd['storeId'])\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        metadata = {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'location': url,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': tmd['title'],\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'creator': tmd['artist'],\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'album': tmd['album'],\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'trackNum': str(tmd['trackNumber']),\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'duration': tmd['durationMillis'],\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        album_art = tmd.get('albumArtRef', [])\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if album_art:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "            metadata['image'] = album_art[0]['url']\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xspf.add_track(metadata)\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return xspf.toXml()\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/songs/<song_id>')\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_song(song_id):\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Retrieves the MP3 for a given ID.'''\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cached_fname = os.path.join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cached_fname = safe_join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # rather than \"application/x-rar\"\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # check file type via mime type\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "        file_type = magic.from_file(filepath, mime=True)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if file_type != 'application/x-rar' and file_type != 'application/x-gzip' and file_type != 'application/zip':\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            os.remove(filepath)\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 7,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "python/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/malept/gmusicprocurator/commit/0df7be3ef3ca89b42331939d88ca9919944295c9?diff=split#diff-9e23a9ffa43e64422973783e9021248781e0732c50d02ec8b7b1ac680b56c173L-1",
                    "lines": [
                      {
                        "line": "from flask import abort, request, Response, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask import abort, request, Response, safe_join, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "from flask.json import jsonify\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import os\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import requests\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from shutil import copyfileobj\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "from tempfile import NamedTemporaryFile\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "from xspf import Xspf\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..app import app, music\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..id3 import MP3\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "JSON_TYPE = 'application/json'\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "XSPF_TYPE = 'application/xspf+xml'\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Mapping: Google : Mutagen EasyID3\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "METADATA_FIELDS = {\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'artist': 'artist',\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'title': 'title',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'album': 'album',\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'albumArtist': 'albumartistsort',\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'composer': 'composer',\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'trackNumber': 'tracknumber',\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'discNumber': 'discnumber',\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'genre': 'genre',\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'year': 'date',\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'durationMillis': 'length',\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "if app.config['GMP_EMBED_ALBUM_ART']:\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    METADATA_FIELDS['albumArtRef'] = 'albumart'\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def mp3ify(resp):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Sets MIME Type and Content-Disposition header suitable for MP3s.'''\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.mimetype = 'audio/mpeg'\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.headers.add('Content-Disposition', 'inline', filename='song.mp3')\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return resp\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "def send_song(filename):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Generates a Flask response for an MP3 on the filesystem.'''\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return mp3ify(send_file(filename))\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "def gmusic_playlist_to_xspf(playlist_id, playlist):\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Converts a playlist from gmusicapi into an XSPF playlist.\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :type playlist: dict\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return: XSPF (XML), UTF-8 encoded\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :rtype: str\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_ts = int(playlist['creationTimestamp']) / 1000000.0\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_iso = datetime.utcfromtimestamp(create_ts).isoformat()\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    p_url = url_for('get_playlist', _external=True, playlist_id=playlist_id)\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xspf = Xspf(title=playlist['name'], creator=playlist['ownerName'],\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                date=create_iso, location=p_url)\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for track in playlist['tracks']:\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if 'track' not in track:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tmd = track['track']\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = url_for('get_song', _external=True, song_id=tmd['storeId'])\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        metadata = {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'location': url,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': tmd['title'],\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'creator': tmd['artist'],\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'album': tmd['album'],\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'trackNum': str(tmd['trackNumber']),\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'duration': tmd['durationMillis'],\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        album_art = tmd.get('albumArtRef', [])\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if album_art:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "            metadata['image'] = album_art[0]['url']\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xspf.add_track(metadata)\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return xspf.toXml()\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/songs/<song_id>')\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_song(song_id):\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Retrieves the MP3 for a given ID.'''\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cached_fname = os.path.join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cached_fname = safe_join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # rather than \"application/x-rar\"\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # check file type via mime type\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "        file_type = magic.from_file(filepath, mime=True)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if file_type != 'application/x-rar' and file_type != 'application/x-gzip' and file_type != 'application/zip':\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            os.remove(filepath)\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 7,
                "cwe": [
                  "CWE-23"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "executor/api/rest/client_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 5,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b8be5dfc52153e682ebb9aa43fb1821fbe6f6bbcb8548fa8a1f7d6e4b1a74202",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/client_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 5,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[Write](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "executor/api/rest/server_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 188,
                  "startColumn": 3,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "92ccec07063bb3eb984569e927f4dd791ee8119f74fed80b36dd9b86da7dc5f6",
            "1": "ad99a241.73eb5804.45df3e14.c19d78c5.db2bb079.57f89f2f.3bee9612.0cdf1410.38552e76.f75a6a44.45df3e14.e22980a8.6b6807dc.57f89f2f.9dd3e190.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 184,
                            "endLine": 184,
                            "startColumn": 36,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 184,
                            "endLine": 184,
                            "startColumn": 36,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 184,
                            "endLine": 184,
                            "startColumn": 21,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 184,
                            "endLine": 184,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 18,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 11,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 407,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[Write](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "executor/api/rest/server_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 269,
                  "endLine": 269,
                  "startColumn": 3,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8728c502fbfe7f30e7b1351881cd12ccb0988442aee06ce2c29614c70a706b93",
            "1": "ad99a241.73eb5804.45df3e14.c19d78c5.db2bb079.57f89f2f.3bee9612.0cdf1410.38552e76.f75a6a44.45df3e14.e22980a8.6b6807dc.57f89f2f.9dd3e190.ddbd2688"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 36,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 36,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 21,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 269,
                            "endLine": 269,
                            "startColumn": 18,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 269,
                            "endLine": 269,
                            "startColumn": 11,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/api/rest/server_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 269,
                            "endLine": 269,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 407,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "operator/apis/machinelearning.seldon.io/v1/seldondeployment_types.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e81e64c73c82ce548c947bca6944a16b6ec87c0f13b57f6609e901115b725f04",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72.ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.fe86eaf4.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/apis/machinelearning.seldon.io/v1/seldondeployment_types.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/XSS",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the HTTP request body flows into send, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the HTTP request body](0)",
              "[flows](1),(2)",
              "[send](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 25,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4bffa2cf27f740134724c8b21e8b43034f14c5af3438f6def35f7b9d5979f45c",
            "1": "2acb54cb.4773f344.a32ed1a1.1f269b07.ef9f7d82.8020cfdf.cd61fc56.2f05c567.67e7998e.f7744b75.aa4dda5f.08906714.fd1fa73f.8431f2ca.83265159.2f05c567"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 71,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 71,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 30,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 813,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/XSS",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the HTTP request body flows into send, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the HTTP request body](0)",
              "[flows](1),(2)",
              "[send](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 12,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e69a72fb4e8e436b6c0974f717995726a6837573e84d6008be25d6aa187a7771",
            "1": "2acb54cb.4773f344.a32ed1a1.1f269b07.462a6cc1.8020cfdf.cd61fc56.2f05c567.67e7998e.f7744b75.aa4dda5f.08906714.fd1fa73f.8431f2ca.83265159.2f05c567"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 64,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 64,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 17,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 813,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/XSS",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the HTTP request body flows into send, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the HTTP request body](0)",
              "[flows](1),(2)",
              "[send](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 25,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8d05d445ceba4571a8b52b859c6acf6bc3cfd59cffb6a0c11dfb5a0c9b380fd6",
            "1": "2acb54cb.4773f344.a32ed1a1.1f269b07.ef9f7d82.8020cfdf.cd61fc56.2f05c567.67e7998e.4773f344.aa4dda5f.08906714.fd1fa73f.8431f2ca.83265159.2f05c567"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 73,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 73,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 30,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 813,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/XSS",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the HTTP request body flows into send, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the HTTP request body](0)",
              "[flows](1),(2)",
              "[send](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 25,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a4f43b5b5fb41f981e98ae7e09354622854942a162a1c11bb722393d71d64e0d",
            "1": "2acb54cb.4773f344.a32ed1a1.1f269b07.ef9f7d82.8020cfdf.cd61fc56.2f05c567.67e7998e.4773f344.aa4dda5f.08906714.fd1fa73f.8431f2ca.83265159.2f05c567"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 73,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 73,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 30,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 813,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/TarSlip",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an opened tar file flows into extractfile, where it is used to extract a file from a tar archive. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to extract a file from a tar archive. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
            "arguments": [
              "[an opened tar file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[extractfile](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "startColumn": 13,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e84efe7b09bbc19e28a4894d547d6c60681d27c854ab2b44b71fafee4dbaad25",
            "1": "2e8ddaeb.4d629d26.79e62dc9.139c59a8.2731d61d.ba14daf2.081ac3f4.6aac30d8.0fab28e7.3fff5d3d.f93632c6.139c59a8.25ac000c.ba14daf2.a2237efa.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 5,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 32,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 32,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 32,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 29,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/sklearnserver/models/moviesentiment/train.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 13,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 304,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/UseCsurfForExpress",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled for your Express app. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled for your {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[Express app](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "65b7c98f888f8f33f4a75aa217a7e9f32a38e0bf3a2ffdf94a6432629808d0e2",
            "1": "ae77ea27.4773f344.8b18f948.d7919eeb.a1fb1152.5fce695c.ea4b1c47.89d75565.ae77ea27.f7744b75.aa4dda5f.d7919eeb.79a7d027.5fce695c.60d372c8.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2,
                            "endLine": 2,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/UseCsurfForExpress",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled for your Express app. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled for your {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[Express app](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "63952b4d2abe7305661153eea68e7e1adc918f34081cd896906ac58bfb4d1dff",
            "1": "ae77ea27.4773f344.8b18f948.d7919eeb.a1fb1152.5fce695c.ea4b1c47.89d75565.ae77ea27.4773f344.aa4dda5f.d7919eeb.79a7d027.5fce695c.60d372c8.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2,
                            "endLine": 2,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "operator/helm/split_resources.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 5,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e62696a7c04da5e230dcf87b8fa8b4d3bd0ac0d78ab56f1a4563fde112d6127e",
            "1": "41bfc63b.08046e7f.9b8c3fac.1e8f7142.d9ce7dec.a1632d4f.25ca586c.cfec04b2.41bfc63b.08046e7f.9b8c3fac.1e8f7142.d9ce7dec.a1632d4f.25ca586c.cfec04b2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/helm/split_resources.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 5,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/helm/split_resources.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 5,
                            "endColumn": 92
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 754,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into subprocess.Popen, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32)",
              "[subprocess.Popen](33)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 441,
                  "endLine": 441,
                  "startColumn": 24,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9ee862a16a963c1ab4a2edab8554bdf8bf41752d62a585f7e18eb75b6904ec15",
            "1": "e06468b8.e3d9b656.79e62dc9.b5f6ec27.1d07cee4.ba14daf2.081ac3f4.6aac30d8.d4ae1f88.1f2f411d.625500fc.a9f31bfb.694e5599.e444fde2.d6bb74eb.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 5,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 646,
                            "endLine": 646,
                            "startColumn": 5,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 648,
                            "endLine": 648,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 652,
                            "endLine": 652,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 652,
                            "endLine": 652,
                            "startColumn": 9,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 466,
                            "endLine": 466,
                            "startColumn": 5,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 477,
                            "endLine": 477,
                            "startColumn": 42,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 449,
                            "endLine": 449,
                            "startColumn": 42,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 499,
                            "endLine": 499,
                            "startColumn": 39,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 39,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 502,
                            "endLine": 502,
                            "startColumn": 29,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 379,
                            "endLine": 379,
                            "startColumn": 29,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 505,
                            "endLine": 505,
                            "startColumn": 25,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 333,
                            "endLine": 333,
                            "startColumn": 25,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 508,
                            "endLine": 508,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 346,
                            "endLine": 346,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 574,
                            "endLine": 574,
                            "startColumn": 32,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 397,
                            "endLine": 397,
                            "startColumn": 32,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 37,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 418,
                            "endLine": 418,
                            "startColumn": 37,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 428,
                            "endLine": 428,
                            "startColumn": 41,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 428,
                            "endLine": 428,
                            "startColumn": 9,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 427,
                            "endLine": 430,
                            "startColumn": 16,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 432,
                            "endLine": 432,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 435,
                            "endLine": 440,
                            "startColumn": 20,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 435,
                            "endLine": 440,
                            "startColumn": 13,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 441,
                            "endLine": 441,
                            "startColumn": 36,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 9,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 504,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/DisablePoweredBy",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "Disable X-Powered-By header for your Express app (consider using Helmet middleware), because it exposes information about the used framework to potential attackers.",
            "markdown": "Disable X-Powered-By header for your {0} (consider using Helmet middleware), because it exposes information about the used framework to potential attackers.",
            "arguments": [
              "[Express app](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "22a9b1f8745950a842cf6fbefd03abef2f6ed82be7b2a4abf38cbf2435a1d937",
            "1": "ae77ea27.4773f344.8b18f948.d7919eeb.a1fb1152.5fce695c.ea4b1c47.89d75565.ae77ea27.f7744b75.aa4dda5f.d7919eeb.79a7d027.5fce695c.60d372c8.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/model_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2,
                            "endLine": 2,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/DisablePoweredBy",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "Disable X-Powered-By header for your Express app (consider using Helmet middleware), because it exposes information about the used framework to potential attackers.",
            "markdown": "Disable X-Powered-By header for your {0} (consider using Helmet middleware), because it exposes information about the used framework to potential attackers.",
            "arguments": [
              "[Express app](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0a02c88eae8541b84cb44c708a53eecef801e8969e5058b1651a65209baa236d",
            "1": "ae77ea27.4773f344.8b18f948.d7919eeb.a1fb1152.5fce695c.ea4b1c47.89d75565.ae77ea27.4773f344.aa4dda5f.d7919eeb.79a7d027.5fce695c.60d372c8.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "incubating/wrappers/s2i/nodejs/transformer_microservice.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2,
                            "endLine": 2,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 557,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in keyPEM.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[keyPEM](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "executor/logger/worker_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 2,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bf751c648385fe5317cf79e34415ac2621dfca1c83553bafa6ffba1db196d356",
            "1": "b14516a0.3f035611.45df3e14.b329012e.2e9cb64b.6e8f66c1.8ee950b3.1bff12d3.b14516a0.3f035611.45df3e14.b329012e.2e9cb64b.6e8f66c1.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/logger/worker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 66,
                            "startColumn": 11,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "executor/logger/worker_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection/test",
          "ruleIndex": 10,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.Popen, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[subprocess.Popen](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "python/tests/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 22,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "75c40bc533df90c2eb0ec7129213eaf0680760409007a4c5c21aedd446f01f15",
            "1": "1fc0eb35.577bab1d.79e62dc9.0eac8534.51ec7ee4.ba14daf2.081ac3f4.b60afa86.2cfbffb4.277c621c.719f49d2.0eac8534.51ec7ee4.73cfdf26.a90b8ab2.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 25,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 9,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 9,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 13,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 13,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 57,
                            "startColumn": 15,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 57,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 16,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 9,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 48,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/tests/helpers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 22,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18)",
              "[open](19)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 10,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1ef8a8f8109658b77e657cab795c42f43a5f94763e68d7eb45360b15912941d2",
            "1": "29d1c8e0.5b46cdac.187bf175.1e2c0147.f3eda546.addfbd48.cb317a58.4201a018.2e8ddaeb.f4a1ab20.187bf175.f6463326.937585f0.31a96f2a.f6dc7859.3acd807d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 5,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 32,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 17,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 31,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 31,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 19,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[open](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 10,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4bc3310ddaf6ea9db89bab2ac0296426c17aae75a324d51ff365ff2208a7e070",
            "1": "2e8ddaeb.e3d9b656.187bf175.139c59a8.b993c6f8.ba14daf2.081ac3f4.a4830b9a.2e8ddaeb.e3d9b656.187bf175.9cd2dfe0.937585f0.31a96f2a.f6dc7859.3acd807d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 5,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18)",
              "[open](19)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 21,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a68f4cdfc88af799cb5083e7f4df48c061aa65d355870567fd1b1a0fd5d1d12c",
            "1": "29d1c8e0.5350d5d0.79e62dc9.4687e4f4.c54c3fd2.73cfdf26.cb317a58.6aac30d8.2e8ddaeb.f4a1ab20.187bf175.f6463326.937585f0.31a96f2a.f6dc7859.3acd807d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 5,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 32,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 17,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 31,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 31,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 19,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/models/openvino_imagenet_ensemble/seldon_grpc_client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[open](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "python/seldon_core/api_tester.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 26,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5282cf0133bcea6ab9699db532524bbe4697d0e17066cf07ee7c0c7900d95e49",
            "1": "7b0793b4.e3d9b656.62912127.139c59a8.f3eda546.ba14daf2.081ac3f4.4201a018.15cff1ed.be004016.62912127.376b9f80.4f332671.f9eb8e44.f6dc7859.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 146,
                            "endLine": 146,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 31,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[open](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "python/seldon_core/api_tester.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 26,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9f4db521b585a8c9a804a9145091e8f6a03e48e22f7241f10b39c0c0039c8b77",
            "1": "7b0793b4.e3d9b656.62912127.139c59a8.f3eda546.ba14daf2.081ac3f4.4201a018.15cff1ed.be004016.62912127.376b9f80.4f332671.f9eb8e44.f6dc7859.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 144,
                            "endLine": 144,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 31,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/api_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[open](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "util/kafka/test-client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 10,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "421f480b26dad805e9b6b96dd472e9ca603fdb3889ee2ca0c93077ddcbe2a01d",
            "1": "7b0793b4.09b47a5b.187bf175.90ef6ae0.f3eda546.addfbd48.081ac3f4.999b2fa5.af58caa9.3ecb8227.cdebca38.9cd2dfe0.f3eda546.9cb0746a.3adf911a.999b2fa5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 35,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 40,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 36,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[open](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "util/kafka/test-client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 10,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "afb15a96d8a6db59f4eba111c9b64bcac02311d3d9c09a6a8779834d8fa0b5de",
            "1": "7b0793b4.09b47a5b.187bf175.90ef6ae0.f3eda546.addfbd48.081ac3f4.999b2fa5.af58caa9.3ecb8227.cdebca38.9cd2dfe0.ba62a2ca.9cb0746a.3adf911a.999b2fa5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 35,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "util/kafka/test-client.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[open](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "python/seldon_core/microservice_tester.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176,
                  "startColumn": 26,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6a1e11ad07087812133bdecd9bebe07b1804b996321e156a08680a725696748b",
            "1": "7b0793b4.e3d9b656.62912127.139c59a8.f3eda546.ba14daf2.081ac3f4.4201a018.15cff1ed.be004016.62912127.376b9f80.4f332671.405c593e.f6dc7859.8794408a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 271,
                            "endLine": 271,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 271,
                            "endLine": 271,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 271,
                            "endLine": 271,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 276,
                            "endLine": 276,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 284,
                            "endLine": 284,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 284,
                            "endLine": 284,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 286,
                            "endLine": 286,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 287,
                            "endLine": 287,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 31,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[open](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "python/seldon_core/microservice_tester.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 220,
                  "endLine": 220,
                  "startColumn": 26,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6294498eab06e8e02c9799d3d21a64a3a6baa75aeccb09981bf3ff219ca28b05",
            "1": "7b0793b4.e3d9b656.62912127.139c59a8.f3eda546.ba14daf2.081ac3f4.4201a018.15cff1ed.be004016.62912127.376b9f80.4f332671.405c593e.4fb551bd.b60afa86"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 271,
                            "endLine": 271,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 271,
                            "endLine": 271,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 271,
                            "endLine": 271,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 276,
                            "endLine": 276,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 284,
                            "endLine": 284,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 284,
                            "endLine": 284,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 285,
                            "endLine": 285,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 210,
                            "endLine": 210,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 31,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "python/seldon_core/microservice_tester.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 589,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into shutil.copy2, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26)",
              "[shutil.copy2](27)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121,
                  "startColumn": 5,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a88d4cbefa03b124964f0cbad53dac80d254514f5036e372ad345b99b0158a02",
            "1": "7b0793b4.74564554.79e62dc9.139c59a8.cc857d4e.a322722c.081ac3f4.6eb46ac5.189e327e.74564554.d6caff5f.6d7ba186.06360068.a322722c.f6dc7859.0f826141"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 153,
                            "endLine": 153,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 46,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 46,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 35,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 18,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 5,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 17,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 5,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 146,
                            "endLine": 146,
                            "startColumn": 40,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 20,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 5,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 28,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 18,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 34,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 21,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 5,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 30,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "servers/mlflowserver/mlflowserver/conda_env_create.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 539,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[open](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "operator/hack/create_graph_openapi_schema.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 10,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "012efe8f2c3cd81c58d66990e156683b51197d88594fea5028734e37e227d87b",
            "1": "53eb1c4b.413071ec.187bf175.139c59a8.f3eda546.e444fde2.cb97864c.ebed174f.a6b41d6e.04ad2656.187bf175.3f4e1c2b.4608c58f.e444fde2.95600950.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 5,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 5,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 11,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 36,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/create_graph_openapi_schema.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 539,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[open](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "operator/hack/csv_hack.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 14,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e657722152221be15acae12cd29d167b16174f433399ea0a728e85003148ec4a",
            "1": "9d0461a3.413071ec.187bf175.22222ad5.f3eda546.e444fde2.cb97864c.d62b86e0.9d0461a3.04ad2656.187bf175.3beeacb6.4608c58f.e444fde2.cb97864c.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/csv_hack.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/csv_hack.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/csv_hack.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 5,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/csv_hack.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/csv_hack.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 5,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/csv_hack.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 11,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/csv_hack.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/csv_hack.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/csv_hack.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 19,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "operator/hack/csv_hack.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 539,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[open](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testing/benchmarking/tf_proto_save.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 10,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "751ffec10ee4b07fdfa030ea3c275ebab0f488a393d5b1e2e4cd24c1ac4bece2",
            "1": "50654080.e3d9b656.187bf175.139c59a8.f3eda546.ba14daf2.081ac3f4.b4737be6.a6b41d6e.be004016.187bf175.9cd2dfe0.f3eda546.a5d7f69f.f6dc7859.9a91bf99"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 48,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 48,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 38,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 407,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[open](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testing/benchmarking/tf_proto_save.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "startColumn": 16,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "79874e0710286967e2b0248a400fe8f553a7f87306f399eea7a92f970f123230",
            "1": "6dcd3a73.e3d9b656.79e62dc9.139c59a8.f3eda546.ba14daf2.081ac3f4.b4737be6.2d06e3d6.4797b8a6.187bf175.9cd2dfe0.4608c58f.a5d7f69f.f6dc7859.9a91bf99"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 48,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 65,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 65,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 50,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/benchmarking/tf_proto_save.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 407,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Python",
            "files": 281,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 2,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 18,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "C++",
            "files": 14,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Go",
            "files": 253,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Java",
            "files": 34,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 5,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "C++",
            "files": 4,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 1,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "Python",
            "files": 1,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

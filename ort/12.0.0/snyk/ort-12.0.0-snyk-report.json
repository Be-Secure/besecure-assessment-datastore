{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "javascript/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "PT",
                  "Security",
                  "SourceResourceAccess",
                  "SourceFile",
                  "<unknown>",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/NodeBB/NodeBB/commit/cacc732015c64bba55a6ab45510086febccfb1b2?diff=split#diff-300f765b568b38163933bfcd40c75fe91709a35e9a7522bca2f8c5fe4b19195aL-1",
                    "lines": [
                      {
                        "line": "\t\t\t\t\tuploadUserPicture(req.user.uid, req.files.userPhoto.name, req.files.userPhoto.path, res);\n",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\t\tuploadUserPicture(req.user.uid, path.extname(req.files.userPhoto.name), req.files.userPhoto.path, res);\n",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\treturn;\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t}\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tvar absolutePath = path.join(global.configuration['ROOT_DIRECTORY'], global.nconf.get('upload_path'), path.basename(oldpicture));\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfs.unlink(absolutePath, function(err) {\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\tif(err) {\t\t\t\t\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\t\tconsole.error('[%d] %s', Date.now(), + err);\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\t}\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\t\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\tuploadUserPicture(req.user.uid, path.extname(req.files.userPhoto.name), req.files.userPhoto.path, res);\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\t\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t});\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t});\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t});\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfunction uploadUserPicture(uid, extension, tempPath, res) {\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif(!extension) {\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tres.send({\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\terror: 'Error uploading file! Error : Invalid extension!'\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t});\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn;\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tvar filename = uid + '-profileimg' + extension;\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tvar uploadPath = path.join(global.configuration['ROOT_DIRECTORY'], global.nconf.get('upload_path'), filename);\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// @todo move to proper logging code - this should only be temporary\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tconsole.log('Info: Attempting upload to: '+ uploadPath);\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tvar is = fs.createReadStream(tempPath);\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tvar os = fs.createWriteStream(uploadPath);\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/vilmosioo/magma/commit/b13ae22e9cc3646444f949279c92dfa54fa2e882?diff=split#diff-e727e4bdf3657fd1d798edcd6b099d6e092f8573cba266154583a746bba0f346L-1",
                    "lines": [
                      {
                        "line": "\tres.render(req.params.path || 'home');\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tconsole.log(req.params.path);\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tvar template = routes['/' + req.params.path] || routes['/'];\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\ttemplate = template.templateUrl;\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tres.render(path.basename(template, path.extname(template)), {\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tconstants: {\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tROUTES: JSON.stringify(routes)\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t});\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cube-js/cube.js/commit/256be019d9393daff7d8776be2c39bceafc49ce2?diff=split#diff-e3f9f2305d99d77628204eb1da6a6fd4695a3b3235274d4e7d8a65a150f0941fL-1",
                    "lines": [
                      {
                        "line": "await Promise.all(files.map(file => fs.writeFile(path.join(file.fileName), file.content)));\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "await Promise.all(\n",
                        "lineNumber": 144,
                        "lineChange": "added"
                      },
                      {
                        "line": "  files.map(file => path.join(...[dashboardAppPath].concat(file.fileName.split('/'))))\n",
                        "lineNumber": 145,
                        "lineChange": "added"
                      },
                      {
                        "line": ");\n",
                        "lineNumber": 146,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 42,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "kotlin/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "kotlin",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "javascript/HardcodedNonCryptoSecret",
              "name": "HardcodedNonCryptoSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "HardcodedNonCryptoSecret",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/DanielMil/Authentication-Server/commit/310ce5500e9e751ee2fd9f3018bf772e9aae8364?diff=split#diff-dcdc3e0b3362edb8fec2a51d3fa51f8fb8af8f70247e06d9887fa934834c9122L-1",
                    "lines": [
                      {
                        "line": "// Set environment variables\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "const sessionSecret: any = process.env.SESSION_SECRET;\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "const dbConnection: any = process.env.MONGO_URI; \n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Mongo config\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "const DB_CONNECTION: any = process.env.MONGO_URI; \n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "mongoose.connect(DB_CONNECTION, { useNewUrlParser: true })\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": " .then(() => console.log(\"Succesfully connected to MongoDB.\"))\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": " .catch((err: mongoose.Error) => console.error(err));\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "const MongoStore = mongoStore(session); \n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "const db: any  = mongoose.connection;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": " \n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Fix mongo deprecation warnings\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "mongoose.set('useNewUrlParser', true);\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "mongoose.set('useFindAndModify', false);\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "mongoose.set('useCreateIndex', true);\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Configure express session\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(cookieParser());\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(session({\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "    secret: \"secret\",\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    secret: sessionSecret,\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/virena-app/virena/commit/8058527e8ef71bfa81f0cb0fb35eb80d00e08fdb?diff=split#diff-186488e26aa960d29fec244ac086f15e024c5a84df47eeba233d9b8d2525de2dL-1",
                    "lines": [
                      {
                        "line": "client_id: '8fcf3e5c2d3d5dd78188',\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "client_secret: '0e102c56021e1aa28005b469b3c83ef7cb7e5b0e'\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "client_id: process.env.GITINIT,\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "client_secret: process.env.GITSEE\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nemtech/nem2-library-js/commit/dd101718759035849eeb9d4a388656acdb5bf6d9?diff=split#diff-59ccc41578f07869060f7aea9ceca193a407696cce3de9f7219f98187f65c5b7L-1",
                    "lines": [
                      {
                        "line": "const hash = sha3_512.create();\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hash.update('secret');\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const hash = new Ripemd160().update(Buffer.from('Test Hash 160')).digest('Hex');\t\t\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "const secretLockTransaction = {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdeadline: deadline(),\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tmosaicId: [3646934825, 3576016193],\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tmosaicAmount: uint64.fromUint(10000000),\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tduration: uint64.fromUint(100),\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thashAlgorithm: 0,\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tsecret: '225fe6d12b73a7d51f2992ce82951dbf8c173fa4',\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thashAlgorithm: HashAlgorithm.RIPEMD_160,\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tsecret: hash,\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 68,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "kotlin/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "kotlin",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "kotlin/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "kotlin",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "python/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "HardcodedNonCryptoSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ortoloco/ortoloco/commit/2bdc2a18ae07478b6b2ad481e6ad8ee43d99dd11?diff=split#diff-2c4d0fc3f973ca45b5be1e050f542f3fdf9f879073895c1ff6c8a127f9311b67L-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "    General Settings\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "DEBUG = os.environ.get(\"JUNTAGRICO_DEBUG\", \"True\") == \"True\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "ALLOWED_HOSTS = ['my.ortoloco.ch']\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "DATA_UPLOAD_MAX_NUMBER_FIELDS = None\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "FILE_UPLOAD_PERMISSIONS = 0o444\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "ROOT_URLCONF = 'ortoloco.urls'\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "SITE_ID = 1\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "LOGIN_REDIRECT_URL = \"/my/home\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Python dotted path to the WSGI application used by Django's runserver.\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "WSGI_APPLICATION = 'ortoloco.wsgi.application'\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Make this unique, and don't share it with anybody.\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = 'd3w=vyfqpqmcj#&ge1d0$ch#ff7$qt#6z)lzqt=9pg8wg%d^%s'\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = os.environ.get('JUNTAGRICO_SECRET_KEY')\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/kirstykitto/CLAtoolkit/commit/57b0252012fd2bee6671734f8a598c47106dcb3c?diff=split#diff-fb10e8b863c0b9b7a10271f5cda36dbf1e7e3fe75586870b7547050c7e2e77fdL-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "from apiclient.discovery import build\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "CLIENT_ID = '775313004373-6nt8n91ih4g5qku95us9ceskbdlb6ure.apps.googleusercontent.com'\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "CLIENT_SECRET = 'MJHbk5HdDWmqyptU_ZZtBQNP'\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "SCOPE_YOUTUBE = 'https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtubepartner'\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "REDIRECT_URI = 'http://127.0.0.1:8000/dataintegration/ytAuthCallback'\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_YT_VIDEO_BASE_URL = \"https://www.youtube.com/watch?v=\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_YT_CHANNEL_BASE_URL = \"https://www.youtube.com/channel/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_PLATFORM_NAME_YOUTUBE = \"YouTube\"\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_PLATFORM_URL_YOUTUBE = \"https://www.youtube.com\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_OBJ_TYPE_VIDEO = 'Video'\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "# For YouTube OAuth authentication\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "FLOW_YOUTUBE = OAuth2WebServerFlow(\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    client_id=CLIENT_ID,\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    client_secret=CLIENT_SECRET,\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    client_id=os.environ.get(\"YOUTUBE_CLIENT_ID\"),\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "    client_secret=os.environ.get(\"YOUTUBE_CLIENT_SECRET\"),\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hartwork/jawanndenn/commit/18eebc346ded81b839b1b2d38caf19927255afca?diff=split#diff-dd637aba286a0661c1b974283e708ce762bb3d24a707054e5b81495c1b7ab2b6L-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "from jawanndenn import DEFAULT_MAX_POLLS, DEFAULT_MAX_VOTES_PER_POLL\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Quick-start development settings - unsuitable for production\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "# SECURITY WARNING: keep the secret key used in production secret!\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "SECRET_KEY = 'ou@c@e2(9oh4*z9+tu0!)zf)j=_($#vmu36iflgy@g19+bkp-m'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = os.environ['JAWANNDENN_SECRET_KEY']\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 109,
                "cwe": [
                  "CWE-547"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "javascript/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a local file flows into <unknown>, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into <unknown>, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "arguments": [
              "[a local file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 30,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b4269a3d48c3cce4c9387801d3778d1c9d0f6065e7a32fa9fd63655d2282bafd",
            "1": "cf7733e4.4773f344.607187b5.c8688b2b.ef9f7d82.8020cfdf.db26d63d.d84a12e8.6849fe68.4773f344.9f9d316e.c8688b2b.3f452f8c.37110c89.83265159.d5de5421"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 41,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 41,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 28,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 29,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 38,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 21,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 21,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 41,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/reporters/web-app-template/.rescriptsrc.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 30,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 506,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/scripting/src/main/kotlin/OrtScriptCompilationConfiguration.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79,
                  "startColumn": 22,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "db35bec0a7ff8535f698e7dfa6073b9b5824e0891b64be463c7d4f715548abfa",
            "1": "f6e90720.f8acaa91.1fa66d1a.2ebf0a68.b928c457.c8771288.1b6a94da.d6e9b901.f6e90720.f8acaa91.1fa66d1a.2ebf0a68.b928c457.c8771288.1b6a94da.d6e9b901"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/scripting/src/main/kotlin/OrtScriptCompilationConfiguration.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 49,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/scripting/src/main/kotlin/OrtScriptCompilationConfiguration.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 22,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 177,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/spdx/src/main/kotlin/Utils.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 42,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1933aaec1ed6404f3c2b4757f6dcf73609963e22b1164f87b96fe80376454eb4",
            "1": "f6e90720.f8acaa91.50234378.9d0f394e.b928c457.c8771288.66e788cb.47ebb75b.f6e90720.f8acaa91.50234378.9d0f394e.b928c457.c8771288.66e788cb.d17c128a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/spdx/src/main/kotlin/Utils.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 69,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/spdx/src/main/kotlin/Utils.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 42,
                            "endColumn": 67
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 177,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/common/src/main/kotlin/Utils.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 55,
                  "endColumn": 80
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1ad68c1456de5afc3bc2f33ee8339325815c12960632c30ce066bb0ecae96b34",
            "1": "f6e90720.4bd61c13.de63efdc.9d0f394e.b928c457.c8771288.66e788cb.54a6ecb7.f6e90720.4bd61c13.de63efdc.9d0f394e.b928c457.c8771288.66e788cb.54a6ecb7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/common/src/main/kotlin/Utils.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 82,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/common/src/main/kotlin/Utils.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 55,
                            "endColumn": 80
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/common/src/main/kotlin/Utils.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 59,
                  "endColumn": 84
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e9cca2aa20efbdc583b7dbf8d6eedf8ed3c1dc177e88d730fc2bb0f9a9e0588d",
            "1": "f6e90720.f8acaa91.de63efdc.9d0f394e.b928c457.c8771288.66e788cb.e5f2b112.f6e90720.f8acaa91.de63efdc.9d0f394e.b928c457.c8771288.66e788cb.e5f2b112"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/common/src/main/kotlin/Utils.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 86,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/common/src/main/kotlin/Utils.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 59,
                            "endColumn": 84
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/common/src/main/kotlin/Utils.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 69,
                  "endColumn": 94
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ef797e7ac94cd65992a90feb9dd63af88a97fa6db8414fd590673fd0a9a25ff2",
            "1": "f6e90720.f8acaa91.de63efdc.9d0f394e.b928c457.91697bf9.66e788cb.54a6ecb7.f6e90720.f8acaa91.de63efdc.9d0f394e.b928c457.91697bf9.66e788cb.54a6ecb7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/common/src/main/kotlin/Utils.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 96,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "utils/common/src/main/kotlin/Utils.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 69,
                            "endColumn": 94
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/HardcodedNonCryptoSecret",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "website/docusaurus.config.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "startColumn": 9,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9d423de01e1f7eb7e6447d381c2943fbac6333d4383ccfbb50e93f80047990dd",
            "1": "0e8f9dd2.3f481afb.dc7ff3b1.e052b9a9.79a7d027.fcf3002d.e393440e.e0f43150.0e8f9dd2.3f481afb.7b72d6b9.9baeb7bc.926d91f9.0ef37289.9866eb98.87e1a947"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "website/docusaurus.config.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 158,
                            "endLine": 158,
                            "startColumn": 17,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "website/docusaurus.config.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 158,
                            "endLine": 158,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 756,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/NoHardcodedCredentials/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/src/test/kotlin/config/OrtConfigurationTest.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 523,
                  "endLine": 523,
                  "startColumn": 25,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1261093981d66788c69c5ae18a3299fc121c0f24378b1a56787618980be18e5b",
            "1": "3c7e0ebc.f8acaa91.51725473.cc2fede5.954c40de.f571610e.ce0185b2.2ae6498d.3c7e0ebc.f8acaa91.51725473.cc2fede5.954c40de.b1d66766.ce0185b2.71a2c14b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "model/src/test/kotlin/config/OrtConfigurationTest.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 523,
                            "endLine": 523,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 177,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/NoHardcodedCredentials/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/version-control-systems/git/src/test/kotlin/GitTest.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106,
                  "startColumn": 25,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5480fe6004dff793bf767d182bb77b16ca85f2480a2095cbce52a2413b9a65e5",
            "1": "62a535d0.f8acaa91.51725473.cc2fede5.954c40de.f571610e.ce0185b2.2ae6498d.f3789251.f8acaa91.72905986.9d0f394e.b928c457.b1d66766.ce0185b2.71a2c14b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/version-control-systems/git/src/test/kotlin/GitTest.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/NoHardcodedCredentials/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/version-control-systems/git/src/test/kotlin/GitTest.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 56,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "70bd1e0040af3d5c3bc7ea4991636bb25ae4bee5f15609d9578975d39ef2f0c2",
            "1": "aba9cab9.f8acaa91.50234378.9d0f394e.fa7a7505.626e41e2.66e788cb.66f5376a.45a068ec.f8acaa91.72905986.9d0f394e.b928c457.23ddf727.1d8fed88.459a4fb7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/version-control-systems/git/src/test/kotlin/GitTest.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 56,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/NoHardcodedCredentials/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/scanners/fossid/src/test/kotlin/FossIdUrlProviderTest.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95,
                  "startColumn": 25,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5501629e02e0ebed1b5c35bc2a4139892c9c76ac8c2fea099664474732f8ce37",
            "1": "62a535d0.f8acaa91.51725473.d6e36fd2.954c40de.f571610e.ce0185b2.c9992513.62a535d0.f8acaa91.51725473.9d0f394e.b928c457.b1d66766.ce0185b2.587fdbea"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/scanners/fossid/src/test/kotlin/FossIdUrlProviderTest.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/NoHardcodedCredentials/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/scanners/fossid/src/test/kotlin/FossIdUrlProviderTest.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 123,
                  "startColumn": 27,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2c82790ea4c5b73e9bec496cac9f0eb8727fca099719865001722737c23bfa4c",
            "1": "77954589.f8acaa91.1fa66d1a.2ebf0a68.954c40de.f571610e.61aed268.c09eaa18.77954589.f8acaa91.1fa66d1a.2ebf0a68.b928c457.f571610e.61aed268.c09eaa18"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/scanners/fossid/src/test/kotlin/FossIdUrlProviderTest.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 27,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/HardcodedPassword/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/version-control-systems/git/src/test/kotlin/GitTest.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 56,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "684b40918113957e5cddd22d20b521576fd852a319f64c64d32cc2e7d72032c1",
            "1": "aba9cab9.f8acaa91.50234378.9d0f394e.fa7a7505.626e41e2.66e788cb.66f5376a.45a068ec.f8acaa91.72905986.9d0f394e.b928c457.23ddf727.1d8fed88.459a4fb7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/version-control-systems/git/src/test/kotlin/GitTest.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 56,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/HardcodedPassword/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/version-control-systems/git/src/test/kotlin/GitTest.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 67,
                  "endColumn": 93
                }
              }
            }
          ],
          "fingerprints": {
            "0": "684b40918113957e5cddd22d20b521576fd852a319f64c64d32cc2e7d72032c1",
            "1": "aba9cab9.f8acaa91.50234378.9d0f394e.b928c457.f542a1d0.218b3a44.66f5376a.45a068ec.f8acaa91.72905986.9d0f394e.b928c457.23ddf727.1d8fed88.459a4fb7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/version-control-systems/git/src/test/kotlin/GitTest.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 67,
                            "endColumn": 93
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/HardcodedPassword/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/scanners/fossid/src/test/kotlin/FossIdUrlProviderTest.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95,
                  "startColumn": 25,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ce2bd7c2fe1cf1b0b11c3ecf6e5675f66b6faff733cce8e3f18b0a2503c616f5",
            "1": "62a535d0.f8acaa91.51725473.d6e36fd2.954c40de.f571610e.ce0185b2.c9992513.62a535d0.f8acaa91.51725473.9d0f394e.b928c457.f571610e.ce0185b2.c9992513"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/scanners/fossid/src/test/kotlin/FossIdUrlProviderTest.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/HardcodedPassword/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/scanners/fossid/src/test/kotlin/FossIdUrlProviderTest.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 25,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "519529f3b534cb7c1f3eecc8cca7fdc614e410bdc0ae1059f0fb2584f201ddae",
            "1": "62a535d0.f8acaa91.51725473.40a3b8f8.b928c457.f571610e.ce0185b2.2ae6498d.62a535d0.f8acaa91.51725473.d6e36fd2.b928c457.b1d66766.ce0185b2.587fdbea"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/scanners/fossid/src/test/kotlin/FossIdUrlProviderTest.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 25,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "kotlin/HardcodedPassword/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/scanners/fossid/src/test/kotlin/FossIdUrlProviderTest.kt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97,
                  "startColumn": 53,
                  "endColumn": 73
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e8c4dfb850b37ab0f77e1e5a3d27d8f0e4be908e5e0da819023bebd1fd9ae386",
            "1": "62a535d0.e44b68e5.523bd520.9d0f394e.b928c457.068da6f4.66e788cb.1729f51f.62a535d0.f8acaa91.51725473.9d0f394e.b928c457.f571610e.ce0185b2.2ae6498d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/scanners/fossid/src/test/kotlin/FossIdUrlProviderTest.kt",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 53,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 227,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/package-managers/python/src/funTest/assets/projects/synthetic/pip-python3/django-project/settings.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 1,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a268f37b1618f36ac71af41eeb17ec896647fc599ce548685974205db30a607",
            "1": "6b806eda.1c6650e9.79e62dc9.6373e959.19e2fd9b.a1632d4f.25ca586c.742d9b21.6b806eda.1c6650e9.79e62dc9.6373e959.19e2fd9b.a1632d4f.25ca586c.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/package-managers/python/src/funTest/assets/projects/synthetic/pip-python3/django-project/settings.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 14,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/package-managers/python/src/funTest/assets/projects/synthetic/pip-python3/django-project/settings.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 1,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugins/package-managers/python/src/funTest/assets/projects/synthetic/pipenv-python3/django-project/settings.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 1,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bc4a366da653c780098624ced15212087ad6ee6f50f4d7487b8803f7ca57fc36",
            "1": "6b806eda.1c6650e9.79e62dc9.6373e959.19e2fd9b.a1632d4f.25ca586c.742d9b21.6b806eda.1c6650e9.79e62dc9.6373e959.19e2fd9b.a1632d4f.25ca586c.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/package-managers/python/src/funTest/assets/projects/synthetic/pipenv-python3/django-project/settings.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 14,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "plugins/package-managers/python/src/funTest/assets/projects/synthetic/pipenv-python3/django-project/settings.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 1,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 361,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Python",
            "files": 12,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Swift",
            "files": 8,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Kotlin",
            "files": 867,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 23,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Ruby",
            "files": 2,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Java",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": ".config",
            "files": 4,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Go",
            "files": 13,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 58,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 2,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Scala",
            "files": 6,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "XML",
            "files": 1,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

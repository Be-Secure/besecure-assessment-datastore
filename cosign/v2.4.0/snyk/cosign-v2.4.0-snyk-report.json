{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/citrix/terraform-provider-citrixadc/commit/a4c0975006ef2020c0db505d69bdcec13f10915b?diff=split#diff-a9109e20e39687dfe49012120251229e209c76557bfef1ac646718448d8ca653L-1",
                    "lines": [
                      {
                        "line": "b, err := ioutil.ReadFile(inputFile)\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b, err := ioutil.ReadFile(filepath.Clean(inputFile))\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/MohawkTSDB/mohawk/commit/e4a68407d6e1f9a3ccfa1f0a320c04d693afe2a6?diff=split#diff-ffb4b68b82d9234bcba450c7ca14d76b3ea0eed74198d1811d802889c58252e5L-1",
                    "lines": [
                      {
                        "line": "\t// Check for \"..\" in the url path,\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// if we find \"..\" in the path we will not serve static files\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif strings.Contains(path, \"..\") {\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\ts.next.ServeHTTP(w, r)\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// Add index.html to path if it ends with /\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif path[len(path)-1:] == \"/\" {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"index.html\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Add /index.html to path if a directory\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif fi, err := os.Stat(path); err == nil && fi.IsDir() {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"/index.html\"\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// If file exist serve it\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file, err := ioutil.ReadFile(path); err == nil {\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/u-root/u-root/commit/?diff=split#diff-b2964e352f657fd0dbf5b5dc2f11b034b389e3ad9d60ef315dca58778612d468L-1",
                    "lines": [
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Clean(w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Join(\"/\", w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile, err := os.Open(path)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 28,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "InTest",
                  "SourceServer",
                  "SourceHttpHeader",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/dimroc/urbanevents/commit/510d3e9647558b58c2623b46a700ed75bb3c13da?diff=split#diff-887f0b70ae2220890c02580912fc360f28a20c840c7b8874351543e3187e6f9eL-1",
                    "lines": [
                      {
                        "line": "\thttp.HandleFunc(\"/\", handler)\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thttp.ListenAndServe(\":8080\", nil)\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trouter := mux.NewRouter()\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tstdChain := alice.New(stdoutLoggingHandler, handlers.CompressHandler) //.Then(finalHandler)\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\trouter.Handle(\"/api/v1/settings\", stdChain.Then(http.HandlerFunc(Settings)))\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfmt.Println(\"Running server on port 8080\")\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "func Settings(w http.ResponseWriter, r *http.Request) {\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tw.Header().Set(\"Content-Type\", \"application/json; charset=UTF-8\")\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tw.WriteHeader(http.StatusOK)\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err := json.NewEncoder(w).Encode(settings); err != nil {\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tpanic(err)\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/junkurihara/dnscrypt-proxy-modns/commit/5d6f9358c943b66a1da1d96c2a7bf76341631996?diff=split#diff-f171c98f787f1f38ba8b010bab6cb42d2390de7be03702143063bf349a6a6d00L-1",
                    "lines": [
                      {
                        "line": "writer.Header().Set(\"Content-Type\", \"text/plain\")\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "writer.WriteHeader(400)\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "writer.Write([]byte(\"Unexpected Content-Type\\n\"))\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "proxy := handler.proxy\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "start := time.Now()\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "clientAddr, err := net.ResolveTCPAddr(\"tcp\", request.RemoteAddr)\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdlog.Errorf(\"Unable to get the client address: [%v]\", err)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "xClientAddr := net.Addr(clientAddr)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "packet, err := ioutil.ReadAll(request.Body)\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdlog.Warnf(\"No body in a local DoH query\")\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "response := proxy.processIncomingQuery(proxy.serversInfo.getOne(), \"local_doh\", proxy.mainProto, packet, &xClientAddr, nil, start)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "if len(response) == 0 {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twriter.WriteHeader(500)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "writer.Header().Set(\"Content-Type\", \"application/dns-message\")\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "writer.WriteHeader(200)\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "writer.Write(response)\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/brutella/hc/commit/bcb06972ac99bd1509b0c241a171f05f9e808d8e?diff=split#diff-3afd38f3098ada4796e704ce276b093111be09963697afd22d519a2648f4f0ebL-1",
                    "lines": [
                      {
                        "line": "    res, err = handler.controller.HandleGetCharacteristics(request.Form)\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    aid, cid, err := ParseAccessoryAndCharacterId(request.Form.Get(\"id\"))\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "    chars := handler.controller.HandleGetCharacteristics(aid, cid)\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "    result, err := json.Marshal(chars)\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if err != nil {\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "        fmt.Println(err)\n",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 41,
                        "lineChange": "added"
                      },
                      {
                        "line": "    var b bytes.Buffer\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "    b.Write(result)\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "    res = &b\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "case MethodPUT:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fmt.Println(\"PUT /characteristics\")\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // no response\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    res, err = handler.controller.HandlePutCharacteristics(request.Body)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "default:\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fmt.Println(\"Cannot handle HTTP method\", request.Method)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fmt.Println(err)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    response.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    bytes, _ := ioutil.ReadAll(res)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "fmt.Println(\"<-  JSON:\", string(bytes))\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "response.Write(bytes)\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 73,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedNonCryptoSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/efrenbg1/MQTLS/commit/820689fad2972d8f2a90260e468ca55e12b3280a?diff=split#diff-c17c352c91b81ae547cfd0ee09b6c6119e3a5d0e8f1091198254b6edd2a5d391L-1",
                    "lines": [
                      {
                        "line": "\t}()\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcertPem := []byte(`-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIBhTCCASugAwIBAgIQIRi6zePL6mKjOipn+dNuaTAKBggqhkjOPQQDAjASMRAw\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DgYDVQQKEwdBY21lIENvMB4XDTE3MTAyMDE5NDMwNloXDTE4MTAyMDE5NDMwNlow\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "EjEQMA4GA1UEChMHQWNtZSBDbzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABD0d\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "7VNhbWvZLWPuj/RtHFjvtJBEwOkhbN/BnnE8rnZR8+sbwnc/KhCk3FhnpHZnQz7B\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5aETbbIgmuvewdjvSBSjYzBhMA4GA1UdDwEB/wQEAwICpDATBgNVHSUEDDAKBggr\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdEQQiMCCCDmxvY2FsaG9zdDo1\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "NDUzgg4xMjcuMC4wLjE6NTQ1MzAKBggqhkjOPQQDAgNIADBFAiEA2zpJEPQyz6/l\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Wf86aX6PepsntZv2GYlA5UpabfT2EZICICpJ5h/iI+i341gBmLiAFQOyTDT+/wQc\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6MF9+Yw1Yy0t\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`)\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tkeyPem := []byte(`-----BEGIN EC PRIVATE KEY-----\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MHcCAQEEIIrYSSNQFaA2Hwf1duRSxKtLYX5CB04fSeQ6tF1aY/PuoAoGCCqGSM49\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "AwEHoUQDQgAEPR3tU2Fta9ktY+6P9G0cWO+0kETA6SFs38GecTyudlHz6xvCdz8q\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "EKTcWGekdmdDPsHloRNtsiCa697B2O9IFA==\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END EC PRIVATE KEY-----`)\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcertPem, err := ioutil.ReadFile(\"cert.pem\")\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tpanic(err)\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tkeyPem, err := ioutil.ReadFile(\"key.pem\")\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tpanic(err)\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tcert, err := tls.X509KeyPair(certPem, keyPem)\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/leopardslab/gocloud/commit/bf07db3fe8d92de23e9717ec8faf06635d0149b0?diff=split#diff-9145f8fcf749b0c91c1e8993b89537e64a2c121d06c0c4b2d38c18b30ec601c0L-1",
                    "lines": [
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tjwt := JWT{}\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tPrivateKey := \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDWJKDV4ZIqH8gx\\namJBiSr4rZsZg3oFmZEDuRJeRWYX//uUWl3anBPV0j/tuFojUZSzeLO2WWxjZxqT\\nYi+Cqu2YR6dpvwq51y1+RD7GgR3NgoA0ABlofC2ez5yLXrklopGV7BS5mW2kzzMD\\nncIb+XPJT81l5/Nbkmw5bnTHLjJTUAWyGsd3UnXGPyqPi823HaHWdwrCVrEdQfKC\\n6sfbd0RMX625LMgK4cYl+z8BpcONLC2G+GEJf/yONonArW2EsExlRSWk4obKttb0\\ngy/uro1rMhVVUSIn09XrjqdTYICQWgou8zWSfVeIFhU3KSNXrG5SeDucus+mZiyw\\nXPcV7UVZAgMBAAECggEAX9EL1ieUSxzlapb7V++UNqkXWRcnJhJMfKn2ug+7WsnD\\nO+IjVIm5plbpG+j9DAiYzKUZZGImyWN81K1+LK1mmliVZA+DMRxC0tiebhufxjC6\\nRIo21DWcBA9JMGM13M0c70QvEczA7pl3bgrMq8+2K0F12j8q+LJPknMF9YmKIxQ9\\nR3sFbKBzx5vHNn22pd+kZMWOxYXfErF3FiDwECRDziDZhi5WH4UnTqxIZ99nRC4N\\nF80PwCZgCcF2/6k1d6gBNt6ZIwymn2ouEFSoD66UHRohw0Yt2e09AHl9tQoesx+/\\nvuoVIum17S5fbPdAKg0Hpjz0T/3VajgrH5lgDeEqcQKBgQD5Q6AAPFVC4qUT95bl\\nFnxjvL3ehg2IHY1aOFaOE2LkfQcTpG/OqbdxlWi1mhUzz/k1xtFeYCs/WFR+Dpbe\\nkPp6WOp624q8JwJM+gJIMKNe1it/ViYaDl6lYR9zD0YH8euHrZyvcIgi4jkCeuzq\\nBIMmUIp0Sf/qvibGTzwWuQUzPwKBgQDb7gpcuhULtURDwrDfy9dQbhLRIv95K7NA\\nnDjj50KtzQAv3Lo2eURAWPK3CzzCsPcsW/KQbUjdVf8Xu7lql67CTx+ME8b2f6kb\\nbyXvSDwbYPmbA1L4dEsM3027R8WDOUgJn4cq17FQPpoXR9uXAR+PAbbKvLGyqBXe\\nOkIEyouZZwKBgD+mbBIDVgZJV7v8ijSfhE33oUhUVNpAKZszLa8D9knAP3FdmQtd\\nvTEs5NsSqH1dixaXWVlPF1wKkzDJSu80eDGLyPxsWUXodCbx5GlIuj76U4sllX8r\\n0jFK1rwL12cp+GniBFOsWacGu2YNu7eaRV8gS+qcBtSLj90t2Hs47cIDAoGAQ3A6\\nvTRSP8TVqfGJSxa2b3NRUc/phr5fuPAugbPoPmMeK48DirCkvRaJVpebihe5s2B+\\ngMsCDNzR2/U0ZfsdG3gntExcNjnvIPp0J2t/AuY5o87hIk6GtOvEaikX56Uo8cp5\\nKCn7tR99IKZoL2Wox7E+2+wAkUf5bKtwkweIxwECgYBszEXz+GC7buwQSWG42st6\\nEMi2BzSBq/WvFPFasv73xWn0joPh0KPXe6nIvMLONcKOHao7Wsnj98xYaIrbKapO\\nOmto26vWyN61Ou53myhupfMT/hhyxln/AdVtJEtikPKEcwaKOIi6okbhqCyTcz76\\nHnVHRTp+bAzjBEnoSxvTUw==\\n-----END PRIVATE KEY-----\\n\"\n",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/actiontech/dtle/commit/a303d9d7813290ca366b6b6cd52054759ca11db7?diff=split#diff-e8b0fd40196d552ff08e222c193e7e73c633c8c9424ac78a6450c990ae08a00aL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "func rsaDecrypt(ciphertext []byte) ([]byte, error) {\n",
                        "lineNumber": 97,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tprivateKey := `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIICXQIBAAKBgQDbJ3VgUDDWy9eQjj7AMS2ShqS03N2GLidAzLUeNhyiXEUVvG/b\n",
                        "lineNumber": 99,
                        "lineChange": "removed"
                      },
                      {
                        "line": "0FN/ovYNfOE2ElmNlQybRcamfzmJDnEh/NYnLzCiLn4kYVVUD6/fATJrJrvyIU1l\n",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "LTYlHboQSPeGkzQAZbb26WLXYsvVsBJVseFsej8tzyK/ONpOMqIgl+xneQIDAQAB\n",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "AoGBALUwonLG2ho83jS95lOwVSVX/MUr9lsBvaJtnTElO/dgoh2edj0euGpGqXft\n",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "T6YM9c2A9bNKtTri5QbT0eVvzP2AhqEpZixtDVTA3m/PYzobIdUiJiWV40/WrAtO\n",
                        "lineNumber": 103,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hBpygtatUUV7EhqtoQiqSqvhpeO0MmhEVA6LrJZm6lrH7cWhAkEA+DA2nBU6qY9i\n",
                        "lineNumber": 104,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fmMzpcKcrDdhVvRLiF5/S3z2tdJeBUzmwQBIweHHLsrC3Pp7ThMImlOjoF2bmW6i\n",
                        "lineNumber": 105,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ql5FHtFYOwJBAOINTRHKD9cF7Pb/Gz85yZKdIemg6n3oNrAz8ZLFHIDp0OIYrM+X\n",
                        "lineNumber": 106,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CLh3MpiknkWivzhzLC/r3h11kCaOT0XP99sCQQCjdE1i+nBKH87EYl0vfD5nBYos\n",
                        "lineNumber": 107,
                        "lineChange": "removed"
                      },
                      {
                        "line": "FHRyeZnog4KQON4HK6CF18QTPLlLzeoMU0NGJi7yRMds5HmH0V98SN3I8CLlAkBu\n",
                        "lineNumber": 108,
                        "lineChange": "removed"
                      },
                      {
                        "line": "0RZ3Iheh0cXZUDaLSEkJFv8JCVnrX2tv9gb3bKoMiJNeQ7p0Cha8V7L2Ib11ZdNY\n",
                        "lineNumber": 109,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WR3QYFEDIB8Kx7kVAF8BAkAYzk6RZGiGdvp9LeK427qT7hNxhf9zcvEg/0a4fM7M\n",
                        "lineNumber": 110,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tMw7KTdfaFIorhu4yOyBNtdfP12JPbWIk5bKHOtZp4+d\n",
                        "lineNumber": 111,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 112,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func rsaDecrypt(ciphertext []byte, privateKey string) ([]byte, error) {\n",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tblock, _ := pem.Decode([]byte(privateKey))\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 15,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "go/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceResourceAccess",
                  "SourceFile",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/citrix/terraform-provider-citrixadc/commit/a4c0975006ef2020c0db505d69bdcec13f10915b?diff=split#diff-a9109e20e39687dfe49012120251229e209c76557bfef1ac646718448d8ca653L-1",
                    "lines": [
                      {
                        "line": "b, err := ioutil.ReadFile(inputFile)\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b, err := ioutil.ReadFile(filepath.Clean(inputFile))\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/MohawkTSDB/mohawk/commit/e4a68407d6e1f9a3ccfa1f0a320c04d693afe2a6?diff=split#diff-ffb4b68b82d9234bcba450c7ca14d76b3ea0eed74198d1811d802889c58252e5L-1",
                    "lines": [
                      {
                        "line": "\t// Check for \"..\" in the url path,\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// if we find \"..\" in the path we will not serve static files\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif strings.Contains(path, \"..\") {\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\ts.next.ServeHTTP(w, r)\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// Add index.html to path if it ends with /\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif path[len(path)-1:] == \"/\" {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"index.html\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Add /index.html to path if a directory\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif fi, err := os.Stat(path); err == nil && fi.IsDir() {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"/index.html\"\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// If file exist serve it\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file, err := ioutil.ReadFile(path); err == nil {\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/u-root/u-root/commit/?diff=split#diff-b2964e352f657fd0dbf5b5dc2f11b034b389e3ad9d60ef315dca58778612d468L-1",
                    "lines": [
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Clean(w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Join(\"/\", w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile, err := os.Open(path)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 28,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "CommandInjection",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/hashicorp/go-plugin/commit/a540dfea2468c3e1c68bb140df00330471ae8fee?diff=split#diff-f59973f3b840d85bda2eb041b7266a45f3343d738a845250125bba654918c3dbL-1",
                    "lines": [
                      {
                        "line": "Cmd:             exec.Command(os.Args[0], \"plugin\"),\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cmd:             exec.Command(\"./plugin/plugin\", \"plugin\"),\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Asutorufa/yuhaiin/commit/98b32999c0da193d43c9e229dc75cd4d7d386b4a?diff=split#diff-89cebc2af514f83dbabec8d3b2c739b315779f10dab726e8343a551c6b5601ccL-1",
                    "lines": [
                      {
                        "line": "\tdir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tlog.Println(dir2)\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(dir2, []string{dir2, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t// dir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "\texecutablePath, err := os.Executable()\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tlog.Println(err)\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// log.Println(executablePath)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(executablePath, []string{executablePath, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cli/cli/commit/ed8aaa83e3d403f459cd5b4f2b852d024da8c6ba?diff=split#diff-3928dc80bf7f14802ffa3a9f68672de05b4e00613919beb2107ca787ed3b9099L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "func StubExecCommand(testHelper string, desiredOutput string) func(...string) *exec.Cmd {\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn func(args ...string) *exec.Cmd {\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs := []string{\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tfmt.Sprintf(\"-test.run=%s\", testHelper),\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"--\", desiredOutput}\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs = append(cs, args...)\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tenv := []string{\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"GO_WANT_HELPER_PROCESS=1\",\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd := exec.Command(os.Args[0], cs...)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd.Env = append(env, os.Environ()...)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn cmd\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (s OutputStub) Run() error {\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 16,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/AmadeusITGroup/kubervisor/commit/aaf3d1a6a90c6ba9d56fd44648734938d0970470?diff=split#diff-48a8d555a42b35d5bf1e8ae57f3f0d6c634b9b3d9060fd1935afa55f5dbd58c9L-1",
                    "lines": [
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/AbGuthrie/goquery/commit/0d5d3b2a65a571a0926591fe7674c133d0a06d14?diff=split#diff-8ffdbfea91b4887eb067076025ce572fc41c5f4de26ed4579f37938ee55116ecL-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config{\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: config.GetConfig().DebugEnabled,\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "},\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fsouza/go-dockerclient/commit/27840d3e50fc3505446b6195c3b1370003829cc0?diff=split#diff-4b667feae66c9d46b21b9ecc19e8958cf4472d162ce0a47ac3e8386af8bbd8cfL-1",
                    "lines": [
                      {
                        "line": "InsecureSkipVerify: true,\n",
                        "lineNumber": 187,
                        "lineChange": "removed"
                      },
                      {
                        "line": "InsecureSkipVerify: false,\n",
                        "lineNumber": 193,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 58,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/AmadeusITGroup/kubervisor/commit/aaf3d1a6a90c6ba9d56fd44648734938d0970470?diff=split#diff-48a8d555a42b35d5bf1e8ae57f3f0d6c634b9b3d9060fd1935afa55f5dbd58c9L-1",
                    "lines": [
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/AbGuthrie/goquery/commit/0d5d3b2a65a571a0926591fe7674c133d0a06d14?diff=split#diff-8ffdbfea91b4887eb067076025ce572fc41c5f4de26ed4579f37938ee55116ecL-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config{\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: config.GetConfig().DebugEnabled,\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "},\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fsouza/go-dockerclient/commit/27840d3e50fc3505446b6195c3b1370003829cc0?diff=split#diff-4b667feae66c9d46b21b9ecc19e8958cf4472d162ce0a47ac3e8386af8bbd8cfL-1",
                    "lines": [
                      {
                        "line": "InsecureSkipVerify: true,\n",
                        "lineNumber": 187,
                        "lineChange": "removed"
                      },
                      {
                        "line": "InsecureSkipVerify: false,\n",
                        "lineNumber": 193,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 58,
                "cwe": [
                  "CWE-295"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1)",
              "[os.ReadFile](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/conformance/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121,
                  "startColumn": 21,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "60615466ab1c39073f80405506958f4850a6f8e5b8b00950bfad9a1655b4c66f",
            "1": "7572e22a.348ddf12.45df3e14.b1e0a0f9.1240d8b6.67ab4541.0873598c.5c311668.f93f09c7.348ddf12.45df3e14.9692a5c1.db2bb079.67ab4541.0873598c.37d4bff0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 33,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 33,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2)",
              "[os.ReadFile](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/conformance/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "startColumn": 16,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "da18cd3b2c9437c44257ee8dcde06a9f1ae7c40b55bfea5cadf0f64d8e7e6fa2",
            "1": "3e0ea818.e0beca80.45df3e14.0c66bee6.e0367e33.67ab4541.860c51ff.e1919b71.3e0ea818.277c621c.45df3e14.9692a5c1.5ef953d3.67ab4541.be8ec6d7.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 21,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 21,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 28,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[os.ReadFile](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/conformance/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154,
                  "startColumn": 17,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bea5c87b2808f1723f664788432bb6bd5ce5784102f6d5f26ab8cab567625175",
            "1": "3e0ea818.8642ae5d.45df3e14.0258a363.e0367e33.67ab4541.be8ec6d7.620d5b33.3e0ea818.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.be8ec6d7.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 4,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 246,
                            "endLine": 246,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 249,
                            "endLine": 249,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 29,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[os.ReadFile](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/conformance/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 249,
                  "endLine": 249,
                  "startColumn": 16,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fca3ef8a3f7af2fbb62a83642a127bb0935648ca3e48c22611fb641734a79bc2",
            "1": "e741088c.56d1f421.45df3e14.f9b9b2db.f2a106f9.67ab4541.be8ec6d7.5d3e5f2f.e741088c.277c621c.734a90e3.9692a5c1.f2a106f9.57f89f2f.96dbfe70.c3c9d664"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 4,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 246,
                            "endLine": 246,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 249,
                            "endLine": 249,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 29,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 48,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 249,
                            "endLine": 249,
                            "startColumn": 28,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 249,
                            "endLine": 249,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[os.WriteFile](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/conformance/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 257,
                  "endLine": 257,
                  "startColumn": 13,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f74bfed5c5b84b5a8cae1be9bb03634fd44ff125246c729b86fb123945303402",
            "1": "8470814d.8642ae5d.45df3e14.f375235c.84c49f13.d9c4bbd5.be8ec6d7.620d5b33.8470814d.73eb5804.45df3e14.f375235c.a00feffa.67ab4541.be8ec6d7.e01cd24f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 4,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 246,
                            "endLine": 246,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 249,
                            "endLine": 249,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 257,
                            "endLine": 257,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[Write](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/fakeoidc/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "startColumn": 2,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c1ac9c29f09131008317c23a5aebff8798b54ce6f40c9a8229fe41ff7327ecaa",
            "1": "dcb9be9f.73eb5804.45df3e14.c46a1358.e30803fc.57f89f2f.3bee9612.0cdf1410.115db858.73eb5804.75616edb.e22980a8.e30803fc.57f89f2f.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 3,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 73,
                            "startColumn": 42,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 16,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 73,
                            "startColumn": 16,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 76,
                            "startColumn": 16,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 2,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 17,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 10,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/fakeoidc/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in rsaPrivKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[rsaPrivKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/pkcs11_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 555,
                  "endLine": 555,
                  "startColumn": 7,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cc811834fd0c1a9007afead6aec9ff27762df613ebbec4286347586e9a57387c",
            "1": "8379f5e8.0d9b46dd.45df3e14.79502f34.0ff05965.81de8bc2.fb9e89bc.1bff12d3.8379f5e8.0d9b46dd.45df3e14.79502f34.0ff05965.81de8bc2.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/pkcs11_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 555,
                            "endLine": 582,
                            "startColumn": 20,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/pkcs11_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 555,
                            "endLine": 555,
                            "startColumn": 7,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in validrsa1.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[validrsa1](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/helpers.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 306,
                  "endLine": 306,
                  "startColumn": 8,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "19ea896215ce5cbfd6e522b6a733f2f3410b0963b85e19be0dd5cf371c6a9d73",
            "1": "abe9c253.4bcfd326.45df3e14.79502f34.f96a3bd1.63a86890.2a0bcc5c.1bff12d3.abe9c253.4bcfd326.45df3e14.79502f34.f96a3bd1.63a86890.2a0bcc5c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/helpers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 306,
                            "endLine": 332,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/helpers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 306,
                            "endLine": 306,
                            "startColumn": 8,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in validrsa.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[validrsa](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "55890eb0e5beccb0a12d202f10b7d5cd466d37f1427077ecb81600c1006441d8",
            "1": "424eddda.ef407988.3d13e656.79502f34.6ee851a6.f7e3574b.8ee950b3.1bff12d3.424eddda.ef407988.3d13e656.79502f34.6ee851a6.f7e3574b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 54,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in validrsapkcs1.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[validrsapkcs1](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dd07df244031faf039a4da33d9bddc1c2797c6720c0eddfc7529b8edeeb2ab7e",
            "1": "e14a76b6.25d3e6c9.3d13e656.79502f34.6ee851a6.2bc7e7cb.8ee950b3.1bff12d3.e14a76b6.25d3e6c9.3d13e656.79502f34.6ee851a6.2bc7e7cb.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 83,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 7,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in validrsapkcs8.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[validrsapkcs8](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "861f3b825ace3a4f20351a8ca0025a0b6cf0c84b11a9afd1025d3d73e9ec6519",
            "1": "f9f83081.ef407988.3d13e656.79502f34.6ee851a6.ae597145.8ee950b3.1bff12d3.f9f83081.ef407988.3d13e656.79502f34.6ee851a6.ae597145.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 113,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 7,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in invalidrsasmallkey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[invalidrsasmallkey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 7,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "459c91637961b75eb22ee26ab05eac84fc4e816626b9b71c667fe013eae062ca",
            "1": "f4ecfd17.ef407988.3d13e656.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3.f4ecfd17.ef407988.3d13e656.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 140,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 7,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in invalidrsalargekey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[invalidrsalargekey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143,
                  "startColumn": 7,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "33668caa561b59f4c0a690fdadb37449d3b25457d193218a8ae45c2651baffc8",
            "1": "424eddda.8cb230df.3d13e656.aa3c1be2.6ee851a6.bb03bd81.8ee950b3.1bff12d3.424eddda.8cb230df.3d13e656.aa3c1be2.6ee851a6.bb03bd81.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 205,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 7,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in invalidkey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[invalidkey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 207,
                  "endLine": 207,
                  "startColumn": 7,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d6a042346a0a517fd0678c5553ef3b588bc243d1db50298180dcf78c754ddccc",
            "1": "424eddda.ef407988.3d13e656.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3.424eddda.ef407988.3d13e656.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 207,
                            "endLine": 237,
                            "startColumn": 20,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 207,
                            "endLine": 207,
                            "startColumn": 7,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in validecp256.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[validecp256](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 240,
                  "endLine": 240,
                  "startColumn": 7,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "11abbc9db593f39645254334a8b08f25f95dc9c740f8d12304c7785393c17bde",
            "1": "424eddda.ef407988.3d13e656.79502f34.6ee851a6.b8910d5b.8ee950b3.1bff12d3.424eddda.ef407988.3d13e656.79502f34.6ee851a6.b8910d5b.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 240,
                            "endLine": 244,
                            "startColumn": 21,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 240,
                            "endLine": 240,
                            "startColumn": 7,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in validecp384.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[validecp384](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 247,
                  "endLine": 247,
                  "startColumn": 7,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3a9288f2542ecc0b09b3b6e4a4e52380c142ad84b7d3f95abdfe8d9131b000c5",
            "1": "424eddda.ef407988.3d13e656.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3.424eddda.ef407988.3d13e656.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 252,
                            "startColumn": 21,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 247,
                            "startColumn": 7,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in validecp521.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[validecp521](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255,
                  "startColumn": 7,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b3023b39296aeeac34b768b9d4ae92df9e6a80471e5064b398a445f384bf8760",
            "1": "ba0781ff.8b25fd95.3d13e656.79502f34.6ee851a6.18e47263.8ee950b3.1bff12d3.ba0781ff.8b25fd95.3d13e656.79502f34.6ee851a6.18e47263.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 255,
                            "endLine": 261,
                            "startColumn": 21,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 255,
                            "endLine": 255,
                            "startColumn": 7,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in validecpkcs8.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[validecpkcs8](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 264,
                  "endLine": 264,
                  "startColumn": 7,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "72982926bb9494829bbb171353777ada28a0e6dcfe2e3163ca9593b21e5d28ac",
            "1": "424eddda.c2484a87.3d13e656.79502f34.6ee851a6.c0d0e0d1.8ee950b3.e241b671.424eddda.c2484a87.3d13e656.79502f34.6ee851a6.c0d0e0d1.8ee950b3.e241b671"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 264,
                            "endLine": 268,
                            "startColumn": 22,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 264,
                            "endLine": 264,
                            "startColumn": 7,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in invalidecp224.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[invalidecp224](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271,
                  "endLine": 271,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "07cf8e38229d606ef1bfd50dc40c92699ab3dc2d59ef9dc51d92a6b2a088d486",
            "1": "424eddda.ef407988.3d13e656.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3.424eddda.ef407988.3d13e656.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 271,
                            "endLine": 275,
                            "startColumn": 23,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 271,
                            "endLine": 271,
                            "startColumn": 7,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in invalidecunsupported.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[invalidecunsupported](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 278,
                  "startColumn": 7,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "05067d3d2b16f55f3dc7af2fa43f2fa120bcfbb05d81540855c8ab48369f6000",
            "1": "424eddda.ef407988.77318422.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3.424eddda.ef407988.77318422.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 278,
                            "endLine": 282,
                            "startColumn": 30,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 278,
                            "endLine": 278,
                            "startColumn": 7,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ed25519key.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ed25519key](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 285,
                  "endLine": 285,
                  "startColumn": 7,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3b900a2d7aa893117c70975567c708a3a803c9e44215f510dbf055062838eb19",
            "1": "424eddda.ef407988.2eacafa4.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3.424eddda.ef407988.2eacafa4.79502f34.6ee851a6.63a86890.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 285,
                            "endLine": 287,
                            "startColumn": 20,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 285,
                            "endLine": 285,
                            "startColumn": 7,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in pemcosignkey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[pemcosignkey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290,
                  "startColumn": 7,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dcbee1363bfc6a224d13c272d2f447ed45d924d33bfac96b56808edef1dd7dd1",
            "1": "424eddda.0d9b46dd.45df3e14.79502f34.91b7c08c.70e7684f.924ee9f3.1bff12d3.424eddda.0d9b46dd.45df3e14.79502f34.91b7c08c.70e7684f.924ee9f3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 290,
                            "endLine": 300,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 290,
                            "endLine": 290,
                            "startColumn": 7,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in pemcosigneckey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[pemcosigneckey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 303,
                  "endLine": 303,
                  "startColumn": 7,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1a419f475348c41c7eaa26bcf584976805dcb190c3835877146deacff7a15ae5",
            "1": "424eddda.0d9b46dd.45df3e14.79502f34.91b7c08c.5e071e8b.1c3d5af0.1bff12d3.424eddda.0d9b46dd.45df3e14.79502f34.91b7c08c.5e071e8b.1c3d5af0.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 313,
                            "startColumn": 24,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 303,
                            "startColumn": 7,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in pemsigstorekey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[pemsigstorekey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/cosign/keys_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 316,
                  "endLine": 316,
                  "startColumn": 7,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d37601f941703a259c52edd32044cb81124a87e99d21d069ae1a232ce45dbfca",
            "1": "424eddda.b1cc65a1.45df3e14.79502f34.166a73a2.63a86890.924ee9f3.1bff12d3.424eddda.b1cc65a1.45df3e14.79502f34.166a73a2.63a86890.924ee9f3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 316,
                            "endLine": 326,
                            "startColumn": 24,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/cosign/keys_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 316,
                            "endLine": 316,
                            "startColumn": 7,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 463,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[os.ReadFile](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/policy/attestation_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140,
                  "startColumn": 12,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5e00888c3e1a76379f640c9df39c9f6f445a1791c8fc2dc72abc637a755b3808",
            "1": "424eddda.277c621c.45df3e14.68e14683.5ef953d3.c7f9ba59.924ee9f3.1bff12d3.424eddda.277c621c.45df3e14.e22980a8.b819748c.6c8feca2.924ee9f3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 21,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 21,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 3,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 2,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 27,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 140,
                            "endLine": 140,
                            "startColumn": 48,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 221,
                            "endLine": 221,
                            "startColumn": 53,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 59,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 24,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 407,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[os.ReadFile](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/policy/attestation_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 223,
                  "endLine": 223,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "21d7a6d881ec0047949b0534b3f0d63f73cd1649d13996a3c276b7fb9d236096",
            "1": "e721feb7.b095e971.45df3e14.ea57f70d.51a8f989.67ab4541.860c51ff.1bff12d3.8da4b8b6.277c621c.45df3e14.e22980a8.e8c00e77.9383b6fc.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 21,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 21,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 3,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 2,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 27,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 140,
                            "endLine": 140,
                            "startColumn": 48,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 221,
                            "endLine": 221,
                            "startColumn": 53,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 59,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 24,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/policy/attestation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 407,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.exec.Command](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/conformance/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 234,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "49b22111999349f4c4d2c6024afec55bd5c6f649a2723af7acc49a4894675fd3",
            "1": "bd75659d.c20335f3.45df3e14.f9b9b2db.e6728fa6.75c1163d.860c51ff.1bff12d3.f93f09c7.348ddf12.45df3e14.9692a5c1.32408664.75c1163d.452ad6f5.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 22,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 22,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 234,
                            "endLine": 234,
                            "startColumn": 36,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 234,
                            "endLine": 234,
                            "startColumn": 22,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/conformance/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 234,
                            "endLine": 234,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 804,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/e2e_insecure_registry_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 108,
                  "endLine": 108,
                  "startColumn": 4,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "41e2dbbe47ba313f5dc61787f26923168ca851fb6da670799d5f8f932c2341cc",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e_insecure_registry_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 4,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 354,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/cosign/cli/options/registry.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 135,
                  "startColumn": 89,
                  "endColumn": 113
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9923c311584acef655b938d080bacc4a4fc6537d2afe912ff19abbc30236f888",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/cosign/cli/options/registry.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 89,
                            "endColumn": 113
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 504,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Go",
            "files": 315,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}
